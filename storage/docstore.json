{"docstore/metadata": {"872ef8d4-258e-4938-8202-614e2f5fd192": {"doc_hash": "a45b9d833151de0586370f5dc602903f4b1288d1fc6a3f87788259dd06788a4f"}, "6c452930-e8ce-4d1f-a70d-456d345cdb59": {"doc_hash": "0b43b37cca83ac68d6ea1c9370a1e4025c32a8f433912eb35e30d24e804ba87a"}, "be9a2a5d-df65-4b9f-a951-dff151657df4": {"doc_hash": "093a50478a06cbb217c468047e88d432c443f7b9e74ac0db6b7e01f5f046dec8"}, "8a325dee-bae2-436c-8a74-63b1b31376d2": {"doc_hash": "6fd975ca98d8182af5c67188f7dc62d8b6b7c1da02edf7c7cfb6f11091fc4fed"}, "53b3bdfc-3c02-433e-bb87-bcd0378ded4f": {"doc_hash": "6b824bd92f199b3ae2a3a98e0d41c62f405cfeac6ac96c11bf58f44a63807cda"}, "ccc9914c-91f4-4015-ac1c-5eed912cdd2a": {"doc_hash": "75f5c42cc5babaddb781dea2540636021a5e15a69d78b9098599bf8cac5ee844"}, "401bc58e-a0a4-4315-8399-27a24bc03db8": {"doc_hash": "11b5ec728b4f3dbde10014c42501a1d6bffc5d65272a609d125567b70ca7cd29"}, "35aabd4e-1d7c-433b-80b8-1c40b091857b": {"doc_hash": "f0d1b0d92ad6eb223c1809cfd84b7140eb873dab54014d04d3fab4b33ee0eed9"}, "6ef30cb4-a53b-4ce9-8fa6-0e873a4b07fe": {"doc_hash": "3eba00b4caf90234e9e0fe986759b1b0e9305f6e6a401375d6e2aa4e89d18439"}, "b11a403e-52b7-4460-b9e4-2972db2105b1": {"doc_hash": "08fe03bb84d89c35953ceb55d645e23b9240cf33d1d23170b65bfd38921e41ef"}, "15fe3296-0130-4541-a122-301ba4b2bf5e": {"doc_hash": "ce2926c51786ee330b8bd01e2543368032fbad6cdcde165cf6dc9bb47c636a8e"}, "57a88cc4-420d-43b3-94c2-8d981900e282": {"doc_hash": "8e80be39a01237b57e41a38d9308433eacd4ec88592e5b34b5a97fd88d594583"}, "ea6b12d5-5ead-4f5f-b4c2-601af8d4bbae": {"doc_hash": "73a185879f26da3f604d5b9618c3dbc08a342f22770f0ad5c6611c67b34e1713"}, "bf3c0563-8ffe-43e1-9235-df8d940ed2d7": {"doc_hash": "9104bb909f98191a3c2f5c0f9a32b6a45ddb58c844c46cabc1cdd8e992b210bf"}, "9cea15f6-9e29-4004-955c-d1c33be8ed9d": {"doc_hash": "cd9c5e5dcec33cd9381d92a7865830f1935b1f423138d0498d302255d8d97df0"}, "6005146d-2b05-4c5a-8375-14c949506c2a": {"doc_hash": "22e099fb8850157d8c363f97fb1a265cc4edce291cb63b3563b2724c40bf06c0"}, "c67acc52-cbae-4339-af67-1374ba162a68": {"doc_hash": "341440ec9777e86b822532b0ffbe48de42d5686db7b7889b2d35e73492cad927"}, "23ba42d1-4b2f-4ae5-85ce-73b9de9eb238": {"doc_hash": "bf8d7f4e50a7af5880a9a88b09906823b4e92d03bd3e90de4a9c0cc01fa59904"}, "ae01f717-c721-40ca-a8c5-a67220297583": {"doc_hash": "5ff3db38a8c7438a9bb6df1fcd4ccbcbafc5d524a61a8490129805ae16346f50"}, "82a63874-9db5-48e6-8967-8eb4810c918f": {"doc_hash": "0fd1029b3db9c430ce909c5eb4a5aeebfe3fdd2a9a1812aa83d16faf4150b9ed"}, "acbf23fa-3f83-47c5-8e0c-bbb1b62d1298": {"doc_hash": "7b51974b7b00b692545fc7c54c78ac59f7742b5c997f12bb8de74e5cf6dcafe8"}, "7b0963a3-dba3-4ccc-b8de-3f8c47a428e2": {"doc_hash": "83fbcbfe0a1dfe0abdffab7b762c3b3eb105c7464a9b48584653f0eee0efcb91"}, "41c6c7d9-f98e-48ae-8218-9d50115c8a0e": {"doc_hash": "69536aeb13e606a2110017e5cdbd2edc30fca5bd31d4ee5c79459533291ab566"}, "636c6bbc-5e53-4589-b722-5c4f75386c79": {"doc_hash": "dd592d97cb0d303c4469ffc88da0302bf23bb582cb75b5c6e2ccff8d0c286142"}, "aea235bb-13e9-46f7-b7da-573c9c366178": {"doc_hash": "e17438fab09c01ce75cdcd8345548e87e3454e1b42cedf94c4538741c2d3df85"}, "c2af55d6-1780-4584-8160-b99051685021": {"doc_hash": "685803e2dc5f4c30dc74ad74f6ddacf0d5349ae2695a45c3bae2275447a7614b"}, "bf104b3c-3a1a-45b9-b21c-9f1d93c58355": {"doc_hash": "03901f835018fa870f5b35c9edae9ecb05e142d3ae9422bcb367bac4b247e444"}, "aca8fbae-a1c7-4b3a-b5f2-bdcb2eba9009": {"doc_hash": "96502edd49a3b6df5b3bbfcacc30ec5d0445ad0ee13e02f15d614125a88dba2e"}, "ed4c058a-0301-448c-b37f-bdddaf17940f": {"doc_hash": "15ad6260204c03da50e7e74caddf6f9a66133a24987e392e66397d87a2ebfd04"}, "b27fa1a5-890b-4fd1-ae21-e9a250b15937": {"doc_hash": "84c0a7d0f961ed9d0be45f02556a8d906ee485a102a14cf3d5fc9d51ae88a0db"}, "f8c99711-e4d4-4239-b7fa-229b31fa04f5": {"doc_hash": "8068ac34f93b784722157bf7ca79fb0fcc17ddf80258c44e0ae9bfeaacb6b299"}, "9ca8ca76-ec9e-4ccf-a236-7673a97ef40c": {"doc_hash": "29ac1ec1f84fca5eaddc1ed571c8c2b80931a768d40be172b039f1dae697e961"}, "677d9d0d-5da0-4d14-bcb7-84cfbf47a95b": {"doc_hash": "10b1cf4338fea24c7b4093b03bece08e3890bc6db090200c7223965042492a1d"}, "8e9f8615-3ab5-435b-91c1-4b0a780c2b76": {"doc_hash": "e67739406ebf5a52e63a5fdb3e1828d82b900e0afce5a84557e6d6f62f66ca4f"}, "10e3f926-8709-44cb-b391-50db5c8e143c": {"doc_hash": "83a01c6b8965ea3f99e26a8d966d725f4c7f2323d628c8ba5a098cd75da29179"}, "c0a29749-8a8b-4c45-b04b-e8096be81f84": {"doc_hash": "ecb34e202cab2500e8f7b0e8f055318f7a016b37bc2b323a5d1d008df1ca057b"}, "6f08a91d-4c9f-4a2c-82b6-5a04fc01d45f": {"doc_hash": "83955f44b46da4ee68b681f1e3aebbc712e322f8eb4e33a08e1c7c91e969be62"}, "cfd7d51e-d356-41af-ac54-c31e1cb4feeb": {"doc_hash": "bb4ed80961dc61058c77c1fc3bc32d3a28603dac1f6802953816edb8b7d8ab50"}, "c13dbf5b-bd4d-4035-9edd-519726d18abe": {"doc_hash": "ff7e9c0e412eb97c9adc009b7783bbcf93b700cb88f66a78bba840daaa382d8e"}, "4cdc2664-e16b-477b-a522-f5cebf19d857": {"doc_hash": "93ff49560cf25acaa40dfe029d520243ebedbdd9f880665d869d89fc9ba53b35"}, "7a060fec-d950-4f8e-9495-a7e7080175ba": {"doc_hash": "1b0cb12cf7b1f14fc035fd8a362c83df95554412bbfcaa1be880cdfa240b42bf"}, "808ae3d6-7097-4f9e-aa2c-3ad4eabb21bf": {"doc_hash": "feb43e3f85008410ef3e007c7bc0ed956f012ca40d028b96dff76abbb9462b28"}, "e727d45f-449a-4514-b354-33b447303cd3": {"doc_hash": "0c88157573d3f66949d01bc6f832463a4aa6d6b18b33c72cc7de0aca6a55ae77"}, "f43fcbd5-c462-4dfc-a915-42f3fa8176b4": {"doc_hash": "dcf675e31a615327a8a2209379b2b38d5183535c00d296215c71acfdcebfe2f3"}, "1d4258c0-aa92-4041-89ef-cca685bb131e": {"doc_hash": "b269c205d20a40efb8ca2a1007501218b1afdc9fff5e4983bf9bc2b976607789"}, "857f82b5-8ad0-4cf2-8e02-69774d793b92": {"doc_hash": "75671b40bdb6a25e0abf0082d724f6242b62868b068e8ab4e0fed709a68adef3"}, "8a0af2f4-b313-48ca-9ff4-d4847d04bdad": {"doc_hash": "4f140d1184228344671493e2daaf8744452dbd1227bcdf23fb759b8c4dc73386"}, "9084c239-97a5-4025-8232-8ae8334ffb01": {"doc_hash": "2f4112ae8af109e5c445c8a780bbf8b5121c6874a39008a406c9aca924c360f2"}, "dedc2df8-f2d0-4c66-ad2e-f15456eb0976": {"doc_hash": "a0e82198555f07bf0918c00503566bf5cee247d3df31fbbc7c2e945a11fc1d4b"}, "4be285d6-bf6a-462a-9f2b-6d10c3f78ae2": {"doc_hash": "a2fe38ccfb04562f9f4d5a2336a1f7745be3af3599e17aa4f4188e55fb819cd5"}, "3f3730ac-0a97-4c45-9d85-2d95112152f1": {"doc_hash": "fb20026417858a999f2fab839c2d999b4ab717f91785771b805463c8aa5b8d2b"}, "bf00b852-4c8f-48a4-b691-fd5e5c81efaa": {"doc_hash": "c3bc4a592b59a5b6979d1279733eafad044b7615f3fe7657ea139aad882434c5"}, "865c5c39-5f2c-4cc2-837e-8501073e823b": {"doc_hash": "ae4768cba09ac99d5ed4bca84b0624b68f8b425bfaee2a672d956c6ab9aebae7"}, "8ef92be6-42c1-49c8-83d0-7028df64f103": {"doc_hash": "890e8b0409aefc77edcd55af6d68bd7772ec5b6e54676bdd40e06b1a57494a20"}, "ae35cbfd-18d9-45a2-a1e6-726cb34cdb89": {"doc_hash": "04281457d5735b236918ba9bb4ea0a38cb23ac4e58ef547ab88809e41d02559a"}, "93aefc33-8552-48f0-9001-59c2021e7252": {"doc_hash": "86efaa35017f68b0220dcc089be9fd75fb96090917df6b6fa9629fbbcbcc2c39"}, "33afcc55-9efe-4401-aeac-b17fc0408dbb": {"doc_hash": "d69f5a4afbcff552d325f7e82b27776f81cc9bdc19eb0465e2e71d3ff37ee8ad"}, "0132562a-fa53-4779-952c-78a6dec89197": {"doc_hash": "2ff33c570129756a3201da6f06bd500e1ae5b9f24fc28c5757db6c11622cccce"}, "2c6e37dd-bff2-45ec-b8fa-87e71094a571": {"doc_hash": "7dd3d4a01ace08cd48c424c05185df58df28d7281dcaf490d7f027807548e7e2"}, "4478f41e-58fe-4a89-b5ef-23f03bcdf3b0": {"doc_hash": "a6800ead11591a822dee8b1e0fcf1e2a72a193a7870f1e861f4db236025f3f0c"}, "a290dc7b-7570-4d3b-830f-66fb90e1a0a1": {"doc_hash": "5462beb27f19a7a064851c89e7bcd20c04b2b8f769ba8534e546a83d482120e9"}, "196f922b-50c1-4760-a16a-fe35c10f2036": {"doc_hash": "9f698a37a6b65f50d1e2ed96ef0865b011abcf8b9502efe4f7d2ab5ae68a2c42"}, "1b2d2eaf-65ed-4e82-8e28-5fcca945e805": {"doc_hash": "da3d70c525a5c54f16f729a7444903c9162d23a3457887cbcea3087ec995b89f"}, "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49": {"doc_hash": "e3670bfe5ff3a49a057de25f8d5cc312faa9ee827f661458db1c4b50a30da31b"}, "25717d12-9c3b-400e-beaa-4d89ce20ffa3": {"doc_hash": "9eaa2c45c2fd06ab0fba7708c97216753be1e99ab11aa89376354527981f744b"}, "8d7d8390-b3bb-47b1-9f1e-ebec3e93a31c": {"doc_hash": "2afcec1587b6ed7d31b98821da26268dfa5bb816f29f0a09e237ff69a585d75d"}, "a15bdab6-0119-4c31-9c78-62ca3508ac93": {"doc_hash": "bd4ca35847c72537e5d471efd40a41e21c329b0032b8262b9d16b55c7de0ce4f"}, "938bb9da-7f9e-4128-825c-c3b7c72feee8": {"doc_hash": "d32ed77f746a9316e156bb16f5ce242b95f3653de8325d93fac7404dff65368b"}, "08a44331-c855-4b58-838f-6cda76f8d746": {"doc_hash": "da744b0b22b2572374193a549a869d676c107fc81f44756e5cf07e48e142c5cc"}, "db4969de-b28d-4c8d-8099-a2151eab112a": {"doc_hash": "4aac98a26ad3b1b8178ad3f75e988f9dae32a68ecd5fb72c807a7a6f1cc96228"}, "a8c6cbae-50e7-4025-9100-3c240edccfbd": {"doc_hash": "1d658cf5d929e2ffb6926553128affade5455d7009b5944ccdb4ae64e8529c68"}, "ca8606f7-97ea-4497-9b35-9ab3fa82b2c5": {"doc_hash": "8c7cf30fe0519933e18efbf0ac7df7557103dbd959b4285d740108758f538441"}, "412471cf-e7c0-48d2-afe4-52fcf3a849f1": {"doc_hash": "a22716b091060574ae9c69072c5382208e0051807f2de95b1ef5793b1112d2d5"}, "036fbd6b-d0bf-4efc-849c-44d5b0b03ef2": {"doc_hash": "3b9703f4abd34caaef1c071a9abe3aae52e06e9a8e8b21b81c6e29b34bbafb5f"}, "6e5fbdb9-ca51-4ce4-b666-86b7b397106f": {"doc_hash": "58e3eb48c4f31e7f0c0da241da3e285e538ba3e6a74b4de347615c2c3fb2146e"}, "dd838098-9af5-409a-8c70-290aaf7280b5": {"doc_hash": "d31be76bd7adc886ccb48854f9a5a0de74a5b6c45d439e3a397fcbf11c0f6b8d"}, "d918163c-84f2-4162-8979-c5d09423384f": {"doc_hash": "c89ee862176cb1d286285c2b4e6e379dd2767c3f94bd12595fc76559e91c4485"}, "f584b482-9f4f-402a-acf6-e13f6a8ad0ac": {"doc_hash": "2574793fd629171f4a090de0fcd768d6a3a45a409a978406741666c4471c6a31"}, "5fca7e88-5296-4f43-b834-0c876023e317": {"doc_hash": "c0eb6979d94b5d66cb46801ca1f25c083f6e6dc23423311087347c7a7383912e"}, "60ea2c42-796c-4087-97da-d7f98f6516b4": {"doc_hash": "6589cbcb2d78bd161f8bac675e93bcfa89c5eca73d1bdba1d72f46f14cc9590f"}, "f38ab062-5919-497a-b970-88809954e5c0": {"doc_hash": "064300e3ac07e4fd47ef8cf2b3f6d1694d63f5ccd38079f822c0658d8a7fa22e"}, "7f94c5fa-595b-4c02-9d66-136876f1c1dc": {"doc_hash": "149df65251ba628b717854d37f4306aed9a78a667b09876c483cfa5350e8a3ba"}, "4a550727-a7e2-42b4-a226-b8ac59004429": {"doc_hash": "92021dab056eb422cf8ca57a001c65fc6ffde596d373850902c1147ebcd1daad"}, "0dc77923-7625-4a11-a9e6-f2dac5886b20": {"doc_hash": "0186eff688973d7ae57138d59cf8591d086bea880557c899a41c09b943219994"}, "afb7ded0-00c6-499b-a1a6-ded9bf8bfcbc": {"doc_hash": "738b889eef9e9519d2611e5b6d18a8f8b5cf4dad8553edd743786e17b67b91e0"}, "d988a062-9cc3-45c5-9034-cf08bdb6c13c": {"doc_hash": "9f97edc05e1cccd0231a84aa7f9aa2b7ac89827ac1dc0b3f541332e5ced0311d"}, "fd5e876b-31bf-445e-8fc7-c7789ddddc5e": {"doc_hash": "cb3bb5f4fab49e43db2392f67295b30ebd5c269f8c353a51b2c3543b7e4c51c0"}, "1e0818a2-f243-464f-93c9-09a9acf4ceec": {"doc_hash": "c101efb469987f38bd23de1a28ac465037f3d12b52f895fe40c1db04d28c21a4"}, "9d5561fb-e7d3-43db-a8ad-da149e29f3ac": {"doc_hash": "8aec21c1b3caa5b75fd25f2ba681918875b63d269af2e0eeae707feedc5d35c8"}, "4801b7df-eadf-4362-8b38-fd77949fa7ef": {"doc_hash": "dc5fad50ac4466f18190b5f795970d392f15c81c192506a4c1c1d5be935fac23"}, "5f6e07cb-1b9d-4e9b-8665-1a10aa497e6b": {"doc_hash": "b73814af698f13044d9cdbfae761f1023f1c64ae0b7d8234dc52c250fa42c17e"}, "cf31067d-9470-41b6-9815-3a875afcec8e": {"doc_hash": "7549c94644f6fde980415fe7b9249310f54f061b2e57c94004c6a463cb77e28b"}, "ebe5086c-f442-4c1c-bc90-0aadea8e4832": {"doc_hash": "0b16f1e7d24c95fc35473dd3747e36de0311433f8c18378941f88621b04f568a"}, "73aa0fc9-d0ab-47b6-9930-16e9081a56d2": {"doc_hash": "560b70dd8ee4901576afa2a0d32c914d197477bf9ddea39561217395e256bd97"}, "4d1b669f-bc33-416f-8fd5-76e7aac65a56": {"doc_hash": "07c5544e4d3873c60495f387badd0784f41c26fb906e8debdeb0aad0aafae747"}, "a6c18d11-f556-479d-b0f7-dece37847285": {"doc_hash": "1ef10c5417c2781bb8f40e00198675146bfb83f4a48ddd32dd8f561d3d1dc072"}, "548368f8-6d86-4734-a156-70100ad0f5d7": {"doc_hash": "a9a6bae924d91e83550cd15edc001a3f7ac4484a30c955ad9ca7116ec8366599"}, "1814515f-8bcd-4920-b294-9fd6e6c2fd3d": {"doc_hash": "38f74c2deec568608ca03136be63ef05f8c87fc4f62231458bea2c8c174cd05d"}, "2c0dc2b2-19c9-4cd7-b818-0d4a80732e4e": {"doc_hash": "969f533017a8818d7079b9c27ae1450ecd5b928928b581ac52e9f165484dd2fa"}, "55bf9020-47ad-4353-94be-b924faf49ab0": {"doc_hash": "a3d707487033361cf6ab1ef524d166ebd36625539c66a6b0873b46080cbe941a"}, "6ffcde50-a660-42f1-9cfe-2fa9f8854e9c": {"doc_hash": "b94f4de00c4d4df485d945919dd64a60d3e27147a26a519203bafa5567589f29"}, "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45": {"doc_hash": "18e60c67576c8970cb05be74766fec9837d5d88a136344b46c8a56ddc9e8b897"}, "c9363ea3-4760-4b0a-8db0-bc5ecac49b90": {"doc_hash": "d0d6fee1528498151f3ef3e955e4e44bd544c98844e02bb01c93a9a21de7bce6"}, "0fb90c6c-f5eb-41e2-902c-6215e4e7b30d": {"doc_hash": "f13dd9eb68e0d9c6f51c2c845cfaddf94eb51f44ad4710e15c2f33c874cb872e"}, "fbafed2e-4d79-44a6-9fef-0952b0880cdd": {"doc_hash": "24102c35d182eff4e7cfbc74f72863c6aaaa996583057ab1939d2b9d9bc06eda"}, "71e0efab-2dd6-42de-8ac3-40d85ec7a8a1": {"doc_hash": "ca0fba404177a92ac1f759a8f45566ffdfe540aac045c1d12cc2e16d3f13a25b"}, "4aa0c4d2-c40f-4bc4-ac5b-9f184a859a2a": {"doc_hash": "ae78aa0e5083dd91ac92d60777c1272d9d911783967af7f4c08292f5ca9d08e9"}, "3e6bc9df-d7f4-448b-9da2-f62b36c681bf": {"doc_hash": "4ea668d5e05dd995c76208bee23b731f0db2f821da1f695477899fcdf2a843fc"}, "8763d56e-cbcb-4835-a47b-a38a18d84cfe": {"doc_hash": "8944284a670118ab06c4ddd82e6656323ee3caed6c1eb1b84cb1bfef9b8537f0"}, "53f24a68-56f7-4d4f-b7e8-8b90ab177949": {"doc_hash": "3202871b22d07e2b15a40ea326ce36b73160f29c1988c2469741f1021e7dd9d8"}, "7f0492be-8274-4263-a322-e0bccb9d47e9": {"doc_hash": "c071e1fbd65c48d9e38f7e3845c09c212e1e9b77b8514dff1aeb684d7b303830"}, "5b016d73-7141-4c41-a39c-d697f7851907": {"doc_hash": "c065dbc77220250ea0ea55f2f5cedd161338899a6e993d19d07ca2af255c6833"}, "cc0a82d2-c704-4131-ab48-b0b955ad3c41": {"doc_hash": "56abed29092ce1f2cf8b21d2d69759c18d8dd596047ed7a808ba475577cd6000"}, "f62e4f7f-648b-4e03-9187-6839707f12cd": {"doc_hash": "f7f877a7aede0e55fbbb5fe6c2e25e43717063a946bf1370d29b633c4970d394"}, "a0854176-05df-4eee-a7c3-01a3e063d94b": {"doc_hash": "9bb105d95edcaf1c24ecff8cbf369b62671de0585e61e47a21deb6dfdc814570"}, "2b1480c7-567d-4f02-9aeb-b748f81e16dd": {"doc_hash": "fdb5920c5681e663961ec36b64e60cbc261126bfc9d7f62072082daf6538ce76"}, "586ea008-5928-4bda-be9a-20ac71716c91": {"doc_hash": "bd67bb7392ef096b883d08e11a976f120c6d234dda194100d42d055c3c474ec1"}, "2491524a-8284-453f-8519-0f3eb9caf79f": {"doc_hash": "d05c4ba73c0278478c2ce690742bb74f07fa8890819562d9611b9bed9195f21c"}, "c7e60fc3-46e0-4f89-ac29-7f7006f9bd1d": {"doc_hash": "aba08410a973c380e14051d2baab2705cc4dca34ce80728ab3440228a8239e97"}, "14e8aa00-198c-49c7-bf22-6fa8c808fb33": {"doc_hash": "a3ad6cbaba02222f6f28b72fdaab0fb2877266d96ac65bea7f796916b476a38f"}, "4104afb6-caff-4a1c-8d82-9a2acc3692f7": {"doc_hash": "30b7f620275dfcd65cb86407b381cef709ef7ea0b8924eaa7d31d5785ab043a4"}, "044b3ffc-00c0-41bf-8a29-52cdeb51805d": {"doc_hash": "c904f560e58a7a149db6c710ac173fa42e46c845cfed37259a0cb2f2bd6a99c9"}, "3da8c214-6c56-4f2b-a3af-133088937f5d": {"doc_hash": "637440aca073f3c7c53aa05939aeb360e09292c9fb3156eca2d42c3dae5a00fb"}, "2a91625d-339e-416d-8a11-94b6d706db59": {"doc_hash": "0531428bbdc970c649fee843e02a949b7693d516deab2bae59e1a9ec16b829b2"}, "e753edda-d35a-4629-88ff-98d1ed4a9c9e": {"doc_hash": "5139a2f59e0a0a9357ae2cdd8b35b4ffc18d0e1a8484a44c1d7ed888c5b2f751"}, "4a097f88-3f25-44ed-b185-c359b755fea0": {"doc_hash": "2d40ee4f406a20444bf5d04d1723d59307c441cebc296991907c8d2dc0d4a7dc"}, "fce3dab9-6d08-4d2a-806f-e550646bcba3": {"doc_hash": "809dd3160101be86ac3e7c20eb6804d789e94963ea6b0ac445ae05ed0797f59b"}, "ab5e71f2-a22c-4ef1-b63f-e36d45213fbc": {"doc_hash": "7edc50f7fd1a6b0927a6e02bc7df4fd406256efb8ca2d6752214bf165bb7d54c"}, "0c0d1f46-edbb-498a-9424-a778ea9fb8d9": {"doc_hash": "b5788c701c51736a0fcb2a4f61a526d75700d00b64d6f4d539729f8af11db087"}, "9f6124a3-3ac8-4471-939c-c6720096bc90": {"doc_hash": "f8f5a327d909146b436e56ea7de0b4dbf1547a6e834101558e89b8481b411ade"}, "dd34ebb1-fb89-4dca-af88-e6db6d601576": {"doc_hash": "0cd74820ef9c3396c9387a11feff9c48a01371fa6e5921e254f17fcfa882ad94"}, "2fb79b6c-5972-4d7e-b372-e977eb8218d3": {"doc_hash": "633175505ec45bc648b1dc8b1ca3f27822f2472ed08cdb132dd65e6a27a11321"}, "f3087a7f-38a6-4154-91bc-49ac1edeea43": {"doc_hash": "8a4ab281a9762072377f2969763fb41feed0e0b9d6cdbfad528bbc338eff6212"}, "a16b7085-280f-4e56-9201-48819a2c6bbf": {"doc_hash": "003bbe951185d6b90a3836645777104cec1dc3bb33bbeec66b46fdcbdba9754e"}, "f5b64b4e-31d3-4958-92a4-da4b948e9f15": {"doc_hash": "2faf8c12b27581e336c049eb99ad8c6a628dd590a156a7e998d6664353d90aa7"}, "a0de144e-aa87-4146-ac32-ca455b437956": {"doc_hash": "b4f34b708bdf66a56355e893db38e0aa59c242b7973586791e688505f906976f"}, "0c608a67-e495-4bbf-975a-9e0d94c08dae": {"doc_hash": "b3ecc5d3e8431f349de7c910d869fe4c5a5984f61c0f9bc2bfa5f0b54c96c2d6"}, "5297cf74-3357-4ca0-855a-4963162db071": {"doc_hash": "444fed944f0d1fdea91b0d8ab4f5dec676f9cf41a3c57d3c70ca6ce1482ec2ae"}, "a215c4e9-ae8b-4759-8d0f-829db92f8b7b": {"doc_hash": "3b80c9f5fad9623c95de291e050c14b07933610e8ea2d5097919bb80492e1826"}, "f6b1cafb-0382-4866-b256-f6b178ab8dad": {"doc_hash": "3e81e12352e24c9fdeb99ff53fd62b9522fd0c20eab8bb979eac1e543fa6fe75"}, "8ef63664-9657-48b2-b82a-02950108b47e": {"doc_hash": "304558f34fc82b7a676ee73af777999f816fa51c8b34f6b1422c097c7caaa0fa"}, "2b8122d2-80d0-4831-b434-8c376ac0f14b": {"doc_hash": "bee40c1134c6a3b5e21e9c1453b51551674c4904c0a671d56a1a18ad51f058fc"}, "f1c4741f-2e31-4ffb-afd7-79efaa6513e4": {"doc_hash": "043c70f7597ba7d38b980da097e3762d97f60330b09eec0798876c80f88953e7"}, "38463957-4d24-4a2d-8e86-7cac79b415b7": {"doc_hash": "24a3886877f52436a531b8238430991e594c3239908e62ecc17027942b1197bd"}, "17722a28-b126-4ad2-bf9b-9b8df004cd16": {"doc_hash": "d304f35fea26b92da6c3fbd38dbcfb3406cb97a03dc1c9ecf80a313a4646b41b"}, "fc328de7-d166-4dc4-af76-e49512c7bbaf": {"doc_hash": "ee09c5a075d9a63a91dc011f9888f06220b4d10854a0998cdd3c3af5f31814b5"}, "0da7ad64-78df-4344-b3ea-22136f5435ea": {"doc_hash": "b558386f32728931c9b1617e91be025817a77403691e9a5ab2080475f17b69d9"}, "0a86bbf9-ea73-4445-99da-098770e28852": {"doc_hash": "88ba22a636895546b488b2dd24be18751d5e522858a12fc4055cee479929071d"}, "92573ad7-a5d7-42b3-99f6-b88ebcca56e8": {"doc_hash": "a282534ceb18ee29ce5384d0538cbc80bcb8eebddf1ec672595072e32987efac"}, "759f5d68-0788-4876-82d1-b4d35ef44241": {"doc_hash": "9a35b415df0538d9382485bc73168e4e2b68b84778a2f7289ba18b1c5ea01931"}, "27359d21-2016-449f-a935-1fb348a7bc6a": {"doc_hash": "5121c74d1efc2570b23331755b21dac6ed023f4eb18a3666326a737f1ecc1c21"}, "744b1bd3-b6de-4173-8aee-99f237884244": {"doc_hash": "acf82e56d58f7acb8cb96e352a0361d019c890affd5d015b9fe7ef56e611903a"}, "541e4837-5357-452b-b342-d56954888ce5": {"doc_hash": "6b03b26eeeab794d22dab1d8146570d80530674489cbb61860230b0f702422b3"}, "ead6acd3-91ec-4624-ac77-6e6daa170a56": {"doc_hash": "3ade5b2006e2f19207c819ce0cffb0d3aaf40efdeacce8d92dd4f3c893e837e0"}, "7c3bccfe-838c-4981-aa82-093cec4a85ac": {"doc_hash": "c511211f3338b89c7062d22415f20e2f0732c63cc313ecebd581fb2f9d81384e"}, "0411c5d4-8135-4a74-91fc-add627462b64": {"doc_hash": "563a2b53634e1708df76ff70344eb4e62019aeb5055f7cc5ecb3fda6648a20ae"}, "a9fd4cf7-5ffd-4313-add7-9db07872be44": {"doc_hash": "3327c1bd086210ee50fcc2c265efcf39835f3d0495d5a264d0c9d69acd88de5d"}, "02a97f61-ce98-431e-b945-b7024145ec29": {"doc_hash": "795bd33e31f1116185218b9c5778f643e83548690ba7858031d8dd506eeb6e11"}, "fa9f73fc-f451-4e9f-a4c3-2288961e3c77": {"doc_hash": "aaeaa099678a8c5e664780deddcd853027aa6cb1bd21895570461d194dc3d106"}, "686d111a-bf98-4dda-897d-55e237a9c447": {"doc_hash": "d568127f73c1e9fdbc39625f07a4f28425e4f5019e37743cd0500f670f10cbd4"}, "651a22fe-1d4d-475f-9916-30cd096f2e06": {"doc_hash": "80054782a6abd27bab99c8e30eca569a5f91bb016b4743299cc857c81e2970fc"}, "66a9be3d-8a91-4235-b821-1293ac193000": {"doc_hash": "7cac9c4e24430e399653e5df607594c4753d3305c58ae75f8de9937c5d341163"}, "ecdc3608-1b65-4a35-b565-723687ff658c": {"doc_hash": "69464f9e0e1783e40ac5b01611249ff02e9bc74113222e30646093efdffe64e5"}, "a83975e5-1dd8-47f4-90d9-a243e337b0f6": {"doc_hash": "42adca3d7230beab6a69a21081eea77fa5ae2262250ae6a36d2e936112f0a1ea"}, "34e9c9a8-9a5c-4109-b0a6-e7ec9b7b5afb": {"doc_hash": "7f66447d90f6ac9b4051f346d208829d567788cdfa70d740da1e9500a989e133"}, "b3cd68da-3891-4c66-bf3b-5dd03a2a9c8f": {"doc_hash": "afbedfdc9d9b66b25ad6164bc3549c1434cab22c5491191a0e4e13654bdf0a6a"}, "be040875-9d9f-4169-9077-423b34140132": {"doc_hash": "fb4447a6db2c3cc6f125f1cde1a8540ccfb7f85a5d9939b21c23549c0135f3a4"}, "718c6eb5-d6d0-46b1-94a8-d723151b6fb4": {"doc_hash": "2ecff92655cf59a573d76955c82c8808a16f8496dc2eac39dc9b8a86b4bb59a5"}, "de91e5e8-4f83-4911-a85e-cf2e176b7684": {"doc_hash": "5c0d969f241cbba284bb201120b400728466a5c68697671c637931f5a7263a19"}, "58e00094-d7e7-418d-9c6b-7ec6a10f2445": {"doc_hash": "01bd8baa228c47bfa849552d1585fc0042d39dc89ead0b5cf6c150fdb4148fce"}, "73764402-186d-43fa-aadf-b0e05623570a": {"doc_hash": "12c3b0c4e5cd102df17e2d97ad3f08ea2995afd99baf43f43af0af794226425d"}, "636faf08-d3e6-41d7-b35a-ac8c239d1dc0": {"doc_hash": "90c89edc45b72928cdcabda0aec54115b70b64442c019e7999b5c9ae6017353b"}, "b3d5e355-98be-4cca-a544-1275626e531b": {"doc_hash": "6a3c2f1ef8801a8c5b2e93a64ea914ec2d327e6a68814babcd98d194c2ff37b6"}, "7ce4f0eb-060c-44b5-8e90-e299550b092a": {"doc_hash": "d816642367062fb76a621195d46549a8bd0cba7831346d4b09895a3f6340f275"}, "b67ee8f0-895f-49ed-8159-06d21746ae3c": {"doc_hash": "703adcd0f5a173629aeaa5dc5b7849bcd2370d76d01bd3ff97d0060152a02328"}, "291fcd1e-fd98-47d5-b39e-bb2842ec6b52": {"doc_hash": "171d66cc9db6922fc0c5458f220319d423b298c47be5e6beccb63e4f160ce763"}, "7f39add1-544f-41ad-81f6-187769f93c42": {"doc_hash": "c53f76c3b1cc8daa53d9d35d3e91ae5fc200e39de764802df8dbacc9352d3be5"}, "0db9145d-ddba-4277-a050-16ce9a9dea0a": {"doc_hash": "f4f9d706da31ba67f30054de9b9d29dd9826922462d6b5c6c5eacd1b44031643"}, "1a080503-e4e1-41d0-a982-6129efc87ce9": {"doc_hash": "f27f8d3d2d856e67c7d12e276dff2c51d6120a530e60dd499074c2d2c519f677"}, "2708041a-9eb3-4160-88bd-0d6b2808320c": {"doc_hash": "3af022128d83d79251b3372b6b54270a0c024f1954dcc4e38f0a86ba5207640b"}, "3f3a5f12-000e-4ddd-8665-cd410d8d718e": {"doc_hash": "59579b0ba702651de8d5f2b65e67ad3578ab0721e6201c35bcc00d4c76ab6195"}, "7fc9b845-f060-465d-a4c1-ab5175aa41b1": {"doc_hash": "2608828681852746a8649c760811d33dd3a9bdad0b67039ee00f98fb5d42a937"}, "64f2101d-0b36-4de1-b0dc-a9c341642aa1": {"doc_hash": "97053dbbc070b6d33366f7d94a23d0f6c12eb55869ee49507288e7d7b12d983d"}, "1cf615d3-89eb-4bf9-9939-f96a11d41896": {"doc_hash": "e3900ea8d8cbf5fc8ea5b778a023b89cf46cc5255ab36fde1a2cfba0e4598d69"}, "f1ad728e-7271-4465-92a2-03e1ccd62ead": {"doc_hash": "bd52b5a10d1832598e75857a4d39dc8292bbb0f084c3f74034dbd9cd79001061"}, "521ac351-b524-4f59-9450-2a714b1d5b02": {"doc_hash": "5a09e629970652fc380bbbae31619987a01d3e8a439bf7d7dd27103174335161"}, "f962f35c-33c5-49f0-979d-e6e00965c28e": {"doc_hash": "9c151421da2706c792cbc7a14e8884123d5db635d4a167d78d731b9382ded530"}, "9ce46d90-f5a2-4640-9ac2-46c03616039c": {"doc_hash": "50daa842c4cc2039388407e454b008b181d1a8b1df034fb3a0c8245b91a1ce74"}, "3130ac0f-89af-4306-91ac-bed58c420250": {"doc_hash": "531c2f5ffc1294073a8d7f75c4df36b220e35ea215939c54e6cdf83a54824897"}, "023500db-ef14-466a-a6b8-476367563b00": {"doc_hash": "8fda2900aadf6aa5862a4c1823e3f0c9dd9a695cc517938ac0d768320a2f54ed"}, "a539382d-acea-4e72-9cc2-ae1bc8337b42": {"doc_hash": "f2d906e44c838c2e7131b2d89145141b0067ad2dcd161c4b06d04d8816dd3b73"}, "aea58eab-523c-4aba-b280-602298a726ba": {"doc_hash": "5491ff8a17ddd1c50c752f60ce3a27597266f0b038939cd4d445e67aa570a5cf"}, "b9083bf1-8975-4a21-be7d-d8ba4a8ba0d5": {"doc_hash": "5cae118e147cb1231536d0b6b59a8adb352da5682faee2c3994dea427b5e9c73"}, "98dc80ec-0169-412a-a6fa-b1a0a466c267": {"doc_hash": "2812ce5e583e7c4cdebdce2c1ea0eedaa46b1c45bb59e231d424bf2ca2ecba4b"}, "693dd6f7-1e3b-4a02-a5a2-dc05f20c62b2": {"doc_hash": "759f7937da9baf8edfec3ed7c7c21be5bbc2e0575b8a7ff65ecb06fb00064777"}, "e6a6f03e-3ba9-40cc-9b58-79f98d406c91": {"doc_hash": "cdea235bba395b50173ff82cd5f211ef5b7736f9602273e9c8281f6b59bcb50c"}, "5db56686-432d-4245-af00-e524151a26d1": {"doc_hash": "f04792e40f3eed187e7ee265370966355eddb9fb116839d1c811a6a298e78336"}, "a60ee864-c77b-4220-9a32-bd2d52fa712e": {"doc_hash": "2e2797659cb04b40d88affe10e02fab072c7492b43af95984ba016637179b952"}, "14b8634e-c4b9-428a-951f-03b7df2edff9": {"doc_hash": "94fc392a17e24dff34396f585cad441a4f0b1ab1638215fa8610d6029f0f3519"}, "613787cb-16e8-4492-986d-ee91a32a099e": {"doc_hash": "58eda8a26f63963b3d18186890cb6dd6090e17d5786ca6bdac5033e922d1355b"}, "1eb0918d-ebcc-4c64-b1f0-e4f818ad667c": {"doc_hash": "0fa4c52bf0835897c7540b9bee41c6096aacaec8c4db7a8e0302348f7810a7a4"}, "c60da459-ebd6-487c-849c-f3e0b08b4fb6": {"doc_hash": "3773462835d6945c1d5f6b55084388e62d2ef4805dfab30d8a4d3bcf390d16ec"}, "9dd26f3e-0aed-42d1-ae4f-90fcd8873800": {"doc_hash": "61b6d264365f96133ca95b96234e39a513b7312e97b4fab4b41c9429c21424c5"}, "86564521-ea26-4762-9cf4-56c7c72c0e95": {"doc_hash": "f1cf99ed5ea2f7110b55a3edb0801c179405b17a05621c1e1dde51fd7c8f752c"}, "3cc266d5-bf3b-47c1-a043-0bb74a9e25f5": {"doc_hash": "b375bd28074d40fe64bddba82aef2a6024d580753755870fe725a10685744496"}, "90989037-77de-4f1d-a2ea-33b45600a0ae": {"doc_hash": "6eceb7fab48e51077bbf5e8dbf92cd7cda0e5d9124ba4ad3529506fb0f5c69d1"}, "2a31347a-aa77-42e6-9d6f-68dfca0e7216": {"doc_hash": "cab77825e686685000e2709b421e2b5ffd2bf1e0831e1ef3a124134c195ef448"}, "ffc4d113-0921-479f-b05d-623f6cf6adab": {"doc_hash": "915e957ccc249d75ed7cb9aade353dd407e70181eaf519101b467eebaee78e0c"}, "4757dc4f-6189-4258-b72b-b403d486d39c": {"doc_hash": "1f1e5872d9873482c6504e75614f21113f96b41c18055778c39ff2fde01d85ba"}, "1c24e696-1082-4fb5-b348-12d5ca865e21": {"doc_hash": "7cb99c2f364c896c4e23cf60a7ae70bb207e0ffee80d36ef804c3a79ec531864"}, "621058f2-be46-4bb3-bce0-114608a05c44": {"doc_hash": "d898143249b8fd02524034ce6ef8b7256966581784f094bd14793d10f5695fa9"}, "3c74d071-0279-43b7-a015-94e5b1b104bf": {"doc_hash": "e02aa7a950cc2b0a174ad1e6a522b9fce7aff3f2fe8c39f045d1a17a60a09c9e"}, "f0261211-8f5c-4f82-b784-8fb0f6889381": {"doc_hash": "403f54595edc6133d65f1089b1221721128e3900b8a92b2dd1bf7091cabb1d41"}, "7c8639df-2dba-4578-9954-de31da21a6af": {"doc_hash": "35efc02e8629a7359a5551ec56a83c011a91a6bfc49c383d882eb47670c3aed5"}, "f0273b99-61e7-463f-871c-899c47fca76b": {"doc_hash": "de10ec9a5822d9093263021dfadb2a9625dfd568d79262a3c748f8bac54fba6d"}, "df0caca0-6c16-45ae-8cea-3f52583999e1": {"doc_hash": "6bb1b15fa8bdf5500c2232f74f96586dcf3536c5c3a83caf066f661704d0598b"}, "a5e35ed8-43b0-4ce4-8de1-946c47fb7281": {"doc_hash": "3101fd577b3815e7dd29dc9b1fef741cd14bbe2669c037f7816eaf8f5edc3c8d"}, "96034cfb-69c9-489b-b3e2-51f48d3eb3dc": {"doc_hash": "3d6e000c256f512aa8cfac9bf8026c6085730c84331cead50f62d470979a958c"}, "e92eba38-8975-41fd-b3c6-889e6b586c84": {"doc_hash": "5b144657ebeb83b2751459df3599318c7c38c4d32b576b346658cc0f7263f514"}, "f50d9b62-deae-4bc8-b2c0-1b4e1a4a35a9": {"doc_hash": "e3a0c69a223333f7d4942f944adb398d004e036e324628e813f493bd88f355ad"}, "3e8a0ca1-c537-4caf-b4b5-5c9307d1fd7d": {"doc_hash": "19bbf7f2a346e4e9e2b7ab2e379ecba2a0e4d25d5d1b0d0095b027f3c231eb3e"}, "25f490e7-3ffd-48f7-912f-6a02e8ceb32f": {"doc_hash": "7ba48d39765e6787e78c84a2324c9cc634dcc13475904e7b43a277c1992e14c1"}, "707810f9-fe0a-4578-bd8a-4f9b68f1e230": {"doc_hash": "e4a472424e24dd08a8c436ac926c3d007d13015b79dd21af15eddf753aa09097"}, "2b0daa27-708f-4f33-99ee-852cf49c7ed0": {"doc_hash": "cf5706c63b99e21350c5b5be8bb650fdedead14a2708afd2a7579f616331f2a5"}, "9134f48b-fc0b-4826-9600-de403da253e0": {"doc_hash": "663700305ca5f2e679510b4a20829dc6ee71c00ba2adcf998eb3f463848e3a21"}, "9517c03a-a61f-40cd-b663-b0a7ed67c5ea": {"doc_hash": "1cce4c31fe52767ec7bb76bba3fac4bd3da614d829d6569fddc4c23165ae6459"}, "cbf4c494-fa7d-4dc0-be7f-25394858225a": {"doc_hash": "afdf399c8af144fd20858f3f07e265325c3b6af12d5acf4b922cf50d36b262dc"}, "459916ec-8e16-493f-8add-c32fa42a40fd": {"doc_hash": "8d5ec8551c9a82487a214a11adb4a4f9af28cd54fa731d8b72d93b13e33d42d0"}, "05426c1c-9213-449a-bcba-f0496a24473e": {"doc_hash": "8577d57e51cb634d154728f48a46664de0ece70b43a4152f00b0158e92ff43fc"}, "ea7500ed-3f08-473c-b1a4-e4a12b55da4a": {"doc_hash": "099e3edc3e9fd2a51bcded2dd8616be24e041451c8ca0cb1a796588d78cc57b9"}, "a593efdb-4874-471e-ad4c-9394441b81b7": {"doc_hash": "950e60e52f43a0cb0c38fb4755075c67a735d2c647f9fbdd864bdd87a48ec0c0"}, "c4194bcc-4f07-42e2-8ff7-f5c251b81b54": {"doc_hash": "128ff91119f521d2b844c0a93aec2618d9272ed9724e9d4dfd2161eb5c8dd37f"}, "75771b74-4cfa-4e77-b827-8a412f669b26": {"doc_hash": "f50904151cafc23c89147e60b7423c6907c37992e0833bff31a7d6a2f9be0c7e"}, "a43e7e5b-9a59-42b8-9c8a-517a8c69364c": {"doc_hash": "9ec1deba8e97fc236c9723d98a1c2c7668429d789918e93b7067eb0aef1ce8e5"}, "7e720c60-ecde-432f-9a1d-c32c62b1fc98": {"doc_hash": "f4f9319f7b8091a8b908347f60a4a915d85a262c19db887d624dba5ab2b6320f"}, "63c70470-ad67-4e62-bac9-c784ce88be80": {"doc_hash": "8910510ae70b9e8558b46226927312b05df945bfc964cdf8944ce4c58c7f8e94"}, "37765f71-e65a-430d-9842-e924d48485b2": {"doc_hash": "3cafd9864c92b5734ea14baba402d0041c0ec445a69de7337ffa8114b0fc7b22"}, "07dba3bd-a3bd-4e13-b0b1-36a7145256ba": {"doc_hash": "8bb87427bee314ebe51110e2b47ce3e55697f716839843a0e15f55794baa9367"}, "f93b3f8a-0147-4e2c-b91a-f62226397bb6": {"doc_hash": "4824463da5e48c68b429b598cb836a0c015bd84ee97e454c09d4a0983057f636"}, "7986274a-a483-47eb-844a-322e7a938544": {"doc_hash": "779bdf0b93f568e39ecbd388e36761f203b96a63822aa2a835cd5af130fd4ca1"}, "3dbb3135-e9c7-4145-9411-330347c6b215": {"doc_hash": "863a909ae9d222747f5acc868be934207b6472678e39a354adf8e7b90fe5c3dc"}, "91f1e463-5dd0-45c8-8e0c-5762ebbf3a9c": {"doc_hash": "e95ba9984975889acd64a5277c88734f363cb5a0f25c833d820ff89a14611a7b"}, "eff7f83a-6f39-4ad5-917a-ba65e5cf4925": {"doc_hash": "ac8e365485cdecd0971379957d2845184c297f41ebd7c578cec7b3c2a26844ac"}, "d81968cc-d5a7-4af1-97a1-9941c7ece4fe": {"doc_hash": "84162b6d69ea8a70ff1f89bae84d5bf991f0d09c19b166ffccafadc54e8e183a"}, "fff4f973-e6b8-480d-a33a-c1a360f133d8": {"doc_hash": "bdc01f3efac37e0e3aa21427dbc3706c04d872db1e8c86bcb4e111db1693c0bd"}, "7ca865e5-6109-4adf-ad37-d32f202c65f2": {"doc_hash": "c016125ac6f7da588d1b95715ee6e801f3e710f6c026eb40777daac072d636e9"}, "4381ac05-27d5-4b61-8527-a9bd7b07234f": {"doc_hash": "880345eec2f09122f69a1d99cd30c50059e3cb73f2178e41fb65cddc9e4b507a"}, "aeb97024-3caf-489c-9b90-7fe7dc54f810": {"doc_hash": "c5f3f1eaf56ba00fc29232630a3fd87f8ed1e307378cf31f7ddb65e33fc2277b"}, "ac048110-9779-48f4-b0f1-1bb88a10c61b": {"doc_hash": "688c3f945a422a786113427402a3a6088dcbb9d46e2f2fb1a2348628041be3c9"}, "4ec01144-eea6-4846-a318-3efbe483ef99": {"doc_hash": "44748caf7b4ebe8aa51e8f0ec400340a18322c78b10ac67856d2272f0c43651f"}, "683c3206-8d49-40f6-92f4-4b5267e60c8b": {"doc_hash": "18bb5466ff9ddb2b647873a2c69c3a344a80888efdba9e0e98eefc1f3c139a48"}, "63be4225-0c8a-48bd-8e48-f30f8c89f4e6": {"doc_hash": "fda57012871ade0e98230c247e37d3c576ba951097b047056e89fe96f30c90fc"}, "1784342e-3b78-4993-9e12-6565f2806989": {"doc_hash": "a1edf7b0beb5491a1d55f605e25b944558881eb211040c759b6f1fd963946ff4"}, "502f064f-5acb-481f-b20f-5954bd73b714": {"doc_hash": "91deab52d905f74aeff50646ffebaad2f3f9feab8457cadd4e8198228e99ebd1"}, "9b047521-9adc-4d11-b592-9567640d380c": {"doc_hash": "8fd700e466e28d34eceba6b62162a8bfa6265b98fc0b61a30be842dd9c5bb64c"}, "12ea49a7-804b-406f-a287-0e96e4bc3251": {"doc_hash": "4233fbe5c8d3c955b66630a7684e4b4ba489253d71fdcb5d6f9e5fcccba6e0c5"}, "5fedf925-a835-43d9-9811-118c32b9d47c": {"doc_hash": "e88acbed78228f5369ac9d0cc8c4da78a4c382c2e0c9aeeccd3375f24c943a8d"}, "b1aedb79-ff03-4377-94ac-f5a75f22e11b": {"doc_hash": "5fa15a735ede1357fa7b3f0209552978bb4bd52a120dac7bebbf8ef2818c1c83"}, "d4dbde6f-33e8-4751-83ef-35cbca159460": {"doc_hash": "870c84bb12696f2ccf9a74eaf1176030ae70dcddee547d84ef8634626c6a3d30"}, "df08c2e5-7857-42a8-a404-91c6d4bc9e96": {"doc_hash": "6d6f87f312e0bd44d19fa5bbf4d43707bbd826792a35d8350731506b7bea13ad"}, "761f35eb-fd69-4200-bf3f-dfed6280ac9c": {"doc_hash": "4e1d8fb89b2bb286b308134bb62f7746b1de0e102bae24e3263a6ec306b4ffd4"}, "6c2ab6ef-9441-4ff4-a03b-c67448183f68": {"doc_hash": "7631baaa93497f4b7e1d62e6224353dde77d0c07f5c835f96fa479d608213c3b"}, "2602c9e8-7b7b-4a36-b407-261b90eef6ee": {"doc_hash": "89eefd5952bcd85fbe4c4435a30f93a1be35aec0fb2f1835dda2466f36ff57ff"}, "bfa18db2-a65c-462a-8f92-9592c40285a2": {"doc_hash": "6c9fa4ada96487204d4c46ee5588e27b85c185bc0dfa4a2b68b76dab6ab3e381"}, "7a16affb-0c9b-49e6-873d-8d664430d9d3": {"doc_hash": "d527417297a522a52a5634f9032dbfaabad953c0ca77d0e291471d9af18abc89"}, "ae08d318-6d61-43a6-ba05-8d82c599358b": {"doc_hash": "97357a8217752b0079700583407e9f208077b84f7d8fdd6e7b57c138bceac736"}, "fd4f6bfe-6533-4c61-80b5-fca5b5d16eda": {"doc_hash": "f60794a4852a7c0ed7bdf5430483bc6e100192e17e613a010e1d1f1e6f16bacf"}, "d7b9ebfa-9e45-4d83-be50-664a36c8c74a": {"doc_hash": "feb62877555c6bf273b3dbf728852740e3393732f0f20ae3b93b6061e3b4cba5"}, "90693931-27bf-408b-acde-016fc906d9e0": {"doc_hash": "55b2da8dcb9062088388dcb77a4f1723ba6f940258a900fd9251fc41e923e80a"}, "a50407b8-124a-41b5-a2a3-e2e26e364258": {"doc_hash": "752c71256af0917fd2b4e8688d469bf29489dac6836bf210233ee90fec16febc"}, "f9dd4f14-f835-4a4f-8720-17ec5c49a975": {"doc_hash": "c5943e3a7d01dd16fd99d39b101c4dda398554c9bf9e190a2521bf27a3c9cdbe"}, "e4ee4134-6fd4-4a2f-8656-d43665f23be9": {"doc_hash": "8bcedda11739a6848df73685750b3fd426572190ea44e8eadf5afd11fdab57fe"}, "10f30a00-0558-4dd8-a74e-56b25db2e91a": {"doc_hash": "58d8707203d49ebd6e39b7cf1ef7434bf157aa4fe5d1274584b4441e5c95eb5e"}, "54786482-8277-462e-bedd-0e550b0695bf": {"doc_hash": "55d8bf056ea3a1401fa2c6e52a43bbf26570c61f9f9444a3ae9bcb794d8ee1d1"}, "d43aa82a-b123-430e-8c4c-e39d5a2e2b84": {"doc_hash": "e60ed4cfd6191927298e3e70262c221492e16adfdfa071de4c1bc5d7f8963774"}, "249e3de3-b608-4819-93c9-718f7149b173": {"doc_hash": "024fe068ae230365c8bc56150a912bd32b158c9a462efea39ef400ca3e94718a"}, "6970e9fd-dc06-46a9-bbca-eecd3d3f0556": {"doc_hash": "544045c614777deaebed1336037a227568c23f03baaaf73aaa325408bc1e5f0a"}, "2be0509c-c98b-41cd-a4e4-3552f4ae5b75": {"doc_hash": "c8fe76f23b56da47940c08277bd4072aa81a3505037f8686dbe8bb48c491b8fd"}, "beb71586-d3f5-4872-a95e-d47a94826ce0": {"doc_hash": "82ef9170675cb5346c06d4a9e150681e6a05ad01276ec7312cd8f8de73dbc570"}, "a8aa6236-e3dc-402c-96c7-9bee84e8faf6": {"doc_hash": "2e6c148b52f92ada80760c8819b4854d771e865c865fe71139f8777991d1a912"}, "909482b4-7760-4941-a0c9-417aa6b2386c": {"doc_hash": "ae654cfeddcc5e8f20656ddf3862cdbe2c028dcd89081a5132f2aca18b74905c"}, "4d8a67cf-bb4b-4cf5-8201-55b7e613a66c": {"doc_hash": "daee5332997663a05b60cba087c2f42c2b920e95ed6c74babe87427afe1e615c"}, "fb343877-c7e1-4231-a2b1-5457190f19ce": {"doc_hash": "9dc0f70c62221d43a2a5eb1b45c8c747eed6a651ee870ad8c52602d482474367"}, "467d2026-97d0-429e-8661-dd98390761c7": {"doc_hash": "cfa9508e9dbd8e327c418e56ea3dd2dcf34d2b69fd833c54f305518124fa5cba"}, "a9a6f9e8-11b4-419e-8415-3045e51001db": {"doc_hash": "310f62f550c27eafa3e4518254c7d58be9f3f304e325593c97865112b7039956"}, "6a6d39f1-2f19-405e-9e70-d1d4849e1a09": {"doc_hash": "c3dbdeaf06a99e328b38a3c5985752a1b3278520846760d112b3ba873f9eae38"}, "b3ac09d6-a1a3-4379-b483-8e103c3b659e": {"doc_hash": "672104203db07d889af3c5d93023d4963213ab5b29cca240f83f6b8e639a6002"}, "a222b4c1-3f1a-45c2-9240-624940686f42": {"doc_hash": "4a2f84422d6e9d148da4581c9a807ea061eb77fa92df7474a6e5820070c0fa89"}, "d510a20b-091f-4c19-9c4f-ae05d90fa93d": {"doc_hash": "40d4f206e23102970b5d3664828330d4d025ba604b3f22cec614c0935a2f06ee"}, "01b8eed5-fa78-4335-a4ba-13f6b1e7d4b5": {"doc_hash": "019dc2e018a55223b23cf055632023fd240dafe1696580dc0317abd9ddd1d76e"}, "e4857040-0bcc-4a9a-8f01-dc9f1687e6f1": {"doc_hash": "db57b7727c9a7c880375adce6f64893bfa91c154ac82dcaa7e8b2f038b4ea2cd"}, "d8e0904e-1831-4123-8333-022f456905ee": {"doc_hash": "5c2d398907313df08b7dd2618f91d85273f9b57efc41a69e5bdeb80a15154482"}, "f58b35e6-306c-4a58-b2fb-29c66de6ae1d": {"doc_hash": "89296b5982f1116ca80384c3781f3d4a8d5b49beae31092fef9a62e2f8b6a5dd"}, "dcb54fc1-dd75-4d9f-90a5-7c03e3bcded8": {"doc_hash": "85b8eb968223a61b59b641a993d58497f2359c0c6eecddf4d2f41a42e5f2a62b"}, "ca3e5671-4a23-484c-a2c0-3f2bc0f626d4": {"doc_hash": "c84f08d17dbb7602e64615c21164705205d98809a19d0ad6065ee2887e263b76"}, "2f513de5-2654-4d52-8a7c-39a23923a19a": {"doc_hash": "7046e860c1db2e95f1e4b3b9cfdbff392a46a9c41694d3a4e3cbcf95edd83257"}, "edb5fde7-459d-46b5-a39f-ceadd56f1246": {"doc_hash": "c7a76fcf9500e6d98634b56fb403553bf078c48c5a82d342547b233b3a22b89d"}, "78a5065e-0d89-4bf3-968f-746f57640a7c": {"doc_hash": "2c663064c70faf19bf47b0f49ff68e3ea1aedf904cd818489e05a993415927f2"}, "a83d48d8-8203-43f8-8844-5713a4aa3076": {"doc_hash": "8a5f85712bef20e72250e72ef70c766a3776c2166d9e77200b91eee6b8d346a6"}, "36e420f6-e1a8-4b03-9108-0da7c8ebb8c5": {"doc_hash": "c92c7c6be28a16566a37ba9a2b1907baa741d0f2b80dcb32012084347c01c902"}, "3d8418b5-53c5-4fb4-a315-f31c1129a02a": {"doc_hash": "fd768a81676e0263f455dc37eba0b6b8080a63b980b2ac2497b9cc494cc73b43"}, "1a65a9e3-7cc7-430a-a6ee-89cf2c35db9d": {"doc_hash": "57e47fe12acc95ace80435472b67fc2e0602e955a87ec67fe3514d6f7b92504c"}, "3e9ddb47-686c-464e-ab57-22bb128a97a4": {"doc_hash": "2769b24b7da8c448bdb47ff7487a713c5073710172f905c0f6280babdedefe28"}, "9436a67b-6bcb-44e7-b1e3-d14ecacde2c0": {"doc_hash": "76ab4fcebbeeed5702eed0b77878fc6437fbccecf2b1c7867798545ee4632e24"}, "7502e25d-c461-4e7c-843b-9b7043f0c9e7": {"doc_hash": "1cd25b2cf535d1db222eb31adb7fbad214047b2737edb3e6ef42b9510fc0150a"}, "9f151794-d22d-4bf4-b3bc-d35b119c7c22": {"doc_hash": "8e79fee15b9b686baff53aa765b8c1b366318d4162c54b41b615afc933293e0a"}, "87d763f5-e35f-4d67-bb52-b3d7cfffc681": {"doc_hash": "49f2041d366daaf61c6f08b59f5ee70fc381a11cc42f0c3d3afafa83a1f4470a"}, "770139c4-9b19-4b38-8799-f31ebe57170f": {"doc_hash": "e1796ca1fb1a093bd1bc4dc12a8325adb23e442c16d105a661a66dbb19d58bcd"}, "25504e9a-629a-4d1e-8db4-1e5180241138": {"doc_hash": "2c01ffb56c518adc74d9c7207742a1fab01372c5d779d61a6deaf0f9120eeaec"}, "3170ee48-78c4-4b3c-8d55-5ee0fe5a1525": {"doc_hash": "e47a605590e5ef16b39d07b69e1fffde65d901ef6660e04f1cd63c645964ce63"}, "5defe224-4d4b-403b-bbf0-0bbdfe70e59d": {"doc_hash": "74026e4f72cb0e83b3f0055714f64776c0b91be01c6293398a2d35122362f045"}, "f4ca6d33-eaf3-4a15-aa7c-0399cd4812ae": {"doc_hash": "6409ecd0c765e797a931869139967a8adf47cf811869f1a9242a80d459d6dca7"}, "20e0fe61-6840-4f79-9b48-8793a4ebc659": {"doc_hash": "0afa3bbea344867a0d19dcdc4ec83556a738f1bbc005c557299c9c53bf7779cb"}, "b7348063-eada-42cb-9bf8-0b82facd8fd8": {"doc_hash": "9c25ccbea034516b897df24fd17163631584ab84321fd3013e1547e0919926af"}, "7829f7ae-576a-4a23-ae94-daf843bd6dde": {"doc_hash": "070a8e64f8de2546e456fb522a017920b5b1950a7c0cfee0315e2bd04dfd33ec"}, "497bda4f-db22-4d42-a1fb-cff2b5c2dd66": {"doc_hash": "9c7ae7cfdab5ec238c31bb7f9f79b1c69d3de55b4cba2dc1b93ffd2fd23592d5"}, "d7327233-13bf-4d77-bb62-62d817d4cffe": {"doc_hash": "aef86712c0584790ed33236517f86cb77f7250f4c46b2bf8a649fe4bef28e0c6"}, "cf7c92d3-9b25-4365-9097-37cd29d6d30e": {"doc_hash": "04df661826cc81e885ff402647b074d817a734f87493120fa12950be9a4ba4e2"}, "18e2c6d9-1e22-4c4d-85ff-c5a86a4de7d4": {"doc_hash": "5b3c770fbb1b4c663c36b58c3f8140336975a2b32256b8e1b8922acbd1582048"}, "883cbeb4-ba10-4389-aaf6-052611314cce": {"doc_hash": "878ff91efcbee987ba4fa8851dbaf41c25f595876965be2dff12bc989e3f169b"}, "4255ed3a-3b91-4ac5-aab1-9705729f0522": {"doc_hash": "1f6c9b13b74f45b9c244eed9e26f80fba306d8a96d91def99778bfdd6d63c989"}, "7b3ee4ad-a177-4595-89d9-75996220854c": {"doc_hash": "3cc3525a2f69539854a18c4e7c34e1b9f8ac0ff1dce7f6a8432bd5524fe360a5"}, "d1f6f584-53b2-4380-bbd3-d5862a489ff7": {"doc_hash": "c2c299c6d0958ffbab21bb570e6f2b823122a17a327c067f12279a3b9e61d4a7"}, "00470ed4-2479-4160-9d4f-22d58921d2de": {"doc_hash": "f88966ccb536a57ab598fdc66fa346d78cdb6f5f42be8edc85f35b2caf034e96"}, "3f023f8d-9b08-401d-a130-e554a8688b08": {"doc_hash": "87f17cf05d94ef6c1c319416e36db3820572ad28e7db29770be8e329c8369435"}, "ab380515-b79a-4c67-ae3a-c32226596af4": {"doc_hash": "6726cac4392c34941b4f6e14e20dfaedfec99817ea54ff4b534860cabf8efd5e"}, "cb5af5b0-cc7d-43eb-a6b0-70462283ee2a": {"doc_hash": "5c3fb8166e46eb3512f14550986630e395d6b80bc36c1816362696618ccef81e"}, "9af6c91b-85cf-4ac4-8652-c24daf2ae42b": {"doc_hash": "aa4f725ed58ecb9b4ae10c96bb01bfa899339e4c281480855421b50ef14c8646"}, "c2a35e2b-91e6-4eb1-bfa5-d0eef76cc258": {"doc_hash": "4ca55d11c78aba7a65a058c915a98ab9cd8422aa25e1bd1cde37c0419b4544a5"}, "265e29f4-aef0-4066-88e2-2a0ff3c6cc1e": {"doc_hash": "f6a8df8c80b47a55da16769c2d18312dc4b7a47cf79da9972d7cca99a515f57b"}, "27457845-9148-4aa6-8a7d-de2a914a6907": {"doc_hash": "3cc754ec984526c24a68e92ba965c669f901a5e929602fa85d3732d290b1d81d"}, "39ca3303-e72c-4b91-a55a-54f671f29355": {"doc_hash": "9228a25a8033e3fc3fbc7a029d74648d98e7b3983dfd4e3a90fb43601434dedb"}, "ffb8d1d3-c0f1-4d3a-b4e0-5a3a0551d8a1": {"doc_hash": "e2cfcf9e7bdc96ba8aa654c4e4ebcb082391385071c48f37e633f71fb4d932e2"}, "6b65bc8e-cfa0-45e1-96f8-c3af22a9e663": {"doc_hash": "e4f86d5eceec5534e1179a2f0c1c54f4f304e35bf8c8ecd4857cf262b32c4241"}, "95567794-3c83-4bf8-a3d6-446e145df9f2": {"doc_hash": "8144838f8e2de53e6ed70470aeb913340bd0e410795a7bff24506548462bc130"}, "520099b7-0346-4424-86b2-ba11eb655e2c": {"doc_hash": "4ae3b765cbc00aa09f7c1fe9abafe2289d9747973b6b9bef6e588fd5ffb0b5d8"}, "b0d1be23-e675-4e4e-a35c-cbd38539a1a8": {"doc_hash": "8791cb4ac50a5435a0656fde2ef172f777afcbbcecf29c81c078da16a7355bb2"}, "0f267882-73da-447c-9cf9-f24d3b6ac410": {"doc_hash": "d0b14977a7d057a6a3e1762076a11289a7873d36752ee01908d67e45e87348d7"}, "7e8f6cb5-da8b-4d0a-a77d-5edc6633f14d": {"doc_hash": "138990737d6da850c57db9dac26e446cc84c6c347e5a0242e1b8245080e82514"}, "8e1e2bea-e3ea-4496-aeb2-937508829047": {"doc_hash": "0a092bf58abccf5098cdc622c971ea112fb572f5e67db86bbaddf895edb20f16"}, "50a80175-4afa-4583-929d-ef1f8943558f": {"doc_hash": "5a7910d736e270cb5ca634079b93c02c86fee3be67be27fd81a59f9473984feb"}, "a747bf18-c521-48b2-94d8-c2cc5480fbd1": {"doc_hash": "9b7978249a6b08ff4ed7b6f127c4ed52f752ae0d69b3b788ba84d8f2c88de594"}, "36ed79b5-54ce-42cf-8041-e209a0fd0c14": {"doc_hash": "97e53d026f8d2ab0bd43acfbe552ca1184448fd4dad22cd11ab1221429effebe"}, "b4363a02-6bcc-409d-9b07-e5f049b36521": {"doc_hash": "c244ef0389b76e2940b335b0e31cf30de0f7b18c4caa9d4b863df634aa11b059"}, "fa44f559-94f0-4e8d-89d6-08ac97cbcf5c": {"doc_hash": "aa24cebac2ea3b7a8430ab2ead9502fdece816c0176ad15a736c9677535027d4"}, "6564a331-5e8e-4dc6-b25d-1a5f9b359ef4": {"doc_hash": "4ee5d70009200f3525ac2c6d628f6396859614cf84c84b6742907041db86f9bb"}, "947d2039-01fd-47ba-88e9-f252582d0327": {"doc_hash": "5df118ab4d556ba67baaa545d2ade50aaa2c42e17d59a2dbcf16d0f44c049e13"}, "b8d93ea8-ad6d-44b7-b6f8-0db1b09a1090": {"doc_hash": "94cc69a283615ca74cea69a6eccf40e01a427249df508f8b76cc32506bf89116"}, "8689007b-bdb8-4308-a497-09b5b0dbcf39": {"doc_hash": "321a1e6da7c0981f35de6ebdc86641fc5f3f01885b5b1742d035a567dcd0fc41"}, "c13a74b1-f89b-4e58-98f5-7f26f33cad47": {"doc_hash": "fb0eb3304efed9fbc2d09ccb593888781e6f556b76aa14644d9cf94e2e81fdb7"}, "dee2be0c-77e9-417a-b806-0b5adbcbbf20": {"doc_hash": "3671de85d0e4c659b785e4f83f59899b35ce9f500a12595140bd4067ef2fdce4"}, "ca643c37-9040-4b29-95df-2a4bfa423659": {"doc_hash": "383fe3b74fd27b70fb0ccd3e299281afb2b1a3054f6a3969adc64d47f5d211f6"}, "c1654393-06bb-435c-99e4-569fb1fdf402": {"doc_hash": "0f8c8d9904573906154ba0faec567ad3fc89a8d181320577d698bd20d27eb017"}, "8be3071a-ee3a-4f44-a460-7171e02a9d10": {"doc_hash": "2c31fe32e9ccfb99762a1f5b0200047bfd23d84306bfe8e051f4ae48e4bd6a97"}, "3f743256-181c-45f6-ac06-27df13b1fc8d": {"doc_hash": "aed81fb8b513bd82cf5ca3b2dda99be349c8c9b593d71cce219f9cd84e4fc898"}, "c5c93e3c-6d81-4b12-b6d9-a34d8cfd7a39": {"doc_hash": "17c0258d6ad2f766ad0190cded28bb75818115bd5961080a3ff2f14f4e835529"}, "8dbb039c-7547-4cc0-b144-0b30c62f4ce8": {"doc_hash": "c5b6b7ac56f242eb67c7b4a7653feeab7f10133319aef6bec119788d7e28de9a"}, "b83d6c8e-b2f0-4e24-a027-0a94fdb10e11": {"doc_hash": "3305243a70b263a716b39b1cb47c444515036412456ca83cd1de8461dc6f7f6a"}, "a5e29dc4-abd2-4d44-b421-caeb71dbb37f": {"doc_hash": "18f07d307f0dfcb1821c6fc204ef10a8f8b2e7576ca5a9c6c388174d256763e6"}, "1f1db1d8-0a19-4d29-a0df-27ff115fd1ed": {"doc_hash": "2ed3f5308a19a728948f2c04f7ae153ac5b675382ce55a838af99ffc5eb1230b"}, "312574f7-a81a-473d-a6c0-4790d02129ac": {"doc_hash": "55314b19e76a9a79aa20fb976f0bfd5a0dbb7b7f5441121fb006f64d56e26542"}, "5da6cda7-bd47-49b0-8b2a-5a2282fb0305": {"doc_hash": "d9b8ff525eb0d8861e0ed2afd47b3f0c53203ea08ebe034d8e88e1415f8a5d4d"}, "ea528606-bf5b-479f-8a20-8a5796962786": {"doc_hash": "426862778a59acc5a98f12015797b01065bef9184e03863b1ce4517ba3244fbc"}, "9ebc3a8c-7361-44d3-b88b-fec0f51e32ff": {"doc_hash": "15549011e9e4479848d8b83e9d5812d3086f15e63d208eb2b9c9c02a4e90ffc2"}, "72835043-4b28-46bb-9cab-e8435a7c614e": {"doc_hash": "d0ffdfdbda800667054af9a58e54c08f168d7ddb4015d423d56b5eb0a5f811c7"}, "74f612de-c799-46bb-9c81-74b018722d5a": {"doc_hash": "6f1b695a183151ae9155e86091e888ec2aeeaf1e561b4609bb41bc1198906ed3"}, "6e851b3a-8bdf-4497-b434-ec5e6d101454": {"doc_hash": "ee771c4d307222aae150dab8dfb70c5a92e387f5f1eab2a8e3efd01d41d7edb0"}, "bfb1e4b2-62ec-4908-add0-4c00a2769436": {"doc_hash": "903b1876bb844d93be7aeda59dae4c3e94fe99eca8b6ef675477294e7a7df6d5"}, "87ce9d0e-1c89-4872-8e31-97944d8e8c51": {"doc_hash": "bb46a6930d0368295c89ade0798b3e08aa685312a00ac3b4b786ee5b8a224b57"}, "d31f4d90-57a5-4067-aa51-f92cfeb77c13": {"doc_hash": "d2cb7a16254dc7dde7593ea29b08a90a75876c9213296871ea4af4a246aae54b"}, "dd970d9b-0b8b-4ed9-9dc6-846421897dd3": {"doc_hash": "aebe30ed4901435b2c0e685c061e678e54a8b3e32ebc937e4164675f87ee2e2a"}, "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e": {"doc_hash": "463dfe143f3f883ac7af31a70366aec73c2d082753eeb4e4d11ffa193d811141"}, "7381aa2a-b655-4b6f-80da-8ecde380b8b3": {"doc_hash": "21225e1032b196ca5a5db113221a05d1af1ae2a00d0a23780dd8f70a779c9a20"}, "76810a52-3a2a-4570-b405-ff2cc37b916d": {"doc_hash": "ea47a4b2fafa70a96822e36a7fef3866f264b5077eb07aa76d194a6c0ac1825e"}, "66c99f47-b3bb-424c-97ab-b13c3d3b2644": {"doc_hash": "a34f9e499dc286e483cc004777fbf08c345b1814e0ba948fad83136568c673c1"}, "93c57eb4-6619-4463-9f5b-b9d0db78bb25": {"doc_hash": "a8745a62725a56ee78bd613bbfbc0484801e9c217e9c5b1440d6c05b2be2ca0c"}, "de29d7b3-4082-44ad-a501-6b0221e75535": {"doc_hash": "4fb0994f18fd234978c926c01cdfe2b35ec1d35ae75d84fd72c278a9e99c830b"}, "fa26ce77-ec79-4c86-a408-e9da639e9072": {"doc_hash": "9665aec4357fbff817a5478f3c2f5cd768ca6237214f17c4587a293868853cc7"}, "89e38262-aee1-464e-8fa6-4d99ca3a0c43": {"doc_hash": "ecd3b8020778ebcd5dc7804b3f88264fe2e4eeca52b4d51f3cbd1ccc9ac879fb"}, "acba8396-316b-4ca2-b6f2-46e93167ada0": {"doc_hash": "2c4b5d105035abe36386a55b5d75ab63292fb4d311d3fa8f9da53cff48c5c4cf"}, "83fab574-e052-4f72-aefd-143256f2c2df": {"doc_hash": "d0f97dea04cc014328acec6a6d43f0ac2f12dfa1c1ecd2c2d1b2fd14f197b7c0"}, "bb4d4eee-fe7e-4102-b615-d70ed2fd0521": {"doc_hash": "c61ec8d21cb3fee07d0fb6fd2cade73e3ff573a3bfbc9f6e76f6c6e2cb5dd7e1"}, "4cdfe63a-7db8-42eb-94e6-80bd6a46f136": {"doc_hash": "c59b2ab6e25563958bad0465abb428b81946d40d933528b04bf735aa66ae9e94"}, "074c9b26-3547-40c4-9a7a-18976a57bd4b": {"doc_hash": "b5be2fb2b8aae295f43c70ec8c55c48ef5ad9c84fd9bef93d72b8a6b324f0e8b"}, "60793980-12e4-4079-84ad-c67a89648afe": {"doc_hash": "0921e035352999e1096ccd6afb1c896f03d167cf97569ad2037e3293b67ec16f"}, "16fde871-72cd-423a-8ff7-8595668c2875": {"doc_hash": "ba6ac55793748d744ce9aeb8c68e81c39cbfebea81c595ce4e2fa99ff220913e"}, "60de412b-1f15-4dfa-9743-6c7d9b1a8961": {"doc_hash": "3ce11da6b1a1651cb774e2d4bf80f85719a2360f880976d60bc0fb01c4a1df50"}, "212ef033-dcb9-4d36-af74-087d2ae2f785": {"doc_hash": "52f3582c0494ca98f2aad5ebef35826ac90965a3a345a4da5a71dae6678577a0"}, "b205a097-5797-48f8-a796-0fd6d4cf0295": {"doc_hash": "648f985eb684999e1ae011ca65872284a2b04cd7fcddc636dbb44038061b95f0"}, "6539970f-6ae2-4bc0-8a76-140f89412b07": {"doc_hash": "cd4489d0ed86381f8e9497fd36da2cbf4ce45bd8d7f3013b1c76b93f827c5d11"}, "c67f1fda-b273-46a6-beb6-874bced4e0ce": {"doc_hash": "f742a8567b55fed38f382197c5b74b0c9cda3f165a8f122600aafc679819cd3f"}, "dc8b8e0f-a43a-44a5-93a8-c02a03954ec7": {"doc_hash": "a1a4b3a36fa8d21835fa2eb75e767e4533061ec069affc11917826f058ef4868"}, "894b3fad-8070-4694-beca-f19e62c79417": {"doc_hash": "15b54716990e2048d5e367e8e67647310fd80fa61ea5bb27cd2a60b48eafccd4"}, "83b7bc1b-13f0-4214-9b29-840af1af7e91": {"doc_hash": "24dc80b418b1d4de0ad74d4bb807fd529a11a8dad6dacfcc705800783b1ebb08"}, "a49c0a59-1a01-419b-8a1c-74f43daa0713": {"doc_hash": "dc79b7050f32c7eadd13346b7442658f90d2b866d8b8bb0dc33bfe56190d8f46"}, "ce94e831-4971-4f31-aa06-37d95477a07c": {"doc_hash": "98c561d0fea9b644d81ef833ab9a91d1b8b57a50ba9078a35c8f35a44e767826"}, "fc3b14fa-4ce1-414c-9469-bf97bf6b5c3a": {"doc_hash": "9ecdd80447e1204c72a81c4ccb00f0b620ad7fa9c8d058bb2de60544e8f2b398"}, "570f5145-a459-40b3-8ec4-4d99ed170523": {"doc_hash": "6761976f4b99a0a676cf236901275cde9babff312818a2f84524f95576a2c834"}, "6a2fa6b7-79bd-4d94-899b-a821e31a4067": {"doc_hash": "88a2d045de6edc0fd495b00c23c56d9940b5ec273a5030554cb4ee07e444664c"}, "d7cb4ddf-34da-4cd1-9d24-1576976825eb": {"doc_hash": "0f765c2f4d057d2d804a573a3207ae241fe420b910f0dd22798780a8aaf13b52"}, "b88a79c9-4e3d-4bbf-b921-46a1147621ca": {"doc_hash": "d4a0e3d1ab455f48c0737af67b00e72fae28d38d232dd6a5e819b2ab1834ed1b"}, "dda32beb-6186-4a50-8428-f3dc415c9e81": {"doc_hash": "b5088137cd536af81158652f4008321a3a69fee16fddf056868c92378b8b252c"}, "4a1df297-0170-4078-8ca9-b9413f5795a9": {"doc_hash": "21a6c7d04d9fd89611199c3721d648e972dd1d9aa349691047eb948648131b7b"}, "da175680-0026-4e71-8419-56d8794aec1f": {"doc_hash": "0422d4923de8277f85165fbb1489b3276c2e397079257a895bbd73089e79d084"}, "eaf3cfaa-336a-44a7-a7e3-31ea26f5fef2": {"doc_hash": "97c95cb7e96e6bced7a70adae33840991b7d2cf003181ef383775f9005353b63"}, "46d17309-fb24-4414-9036-cd3701e140f6": {"doc_hash": "ccb2d50fbdc9b05e23ed2daf48be6f1fafc71dde9dc7fef68dffb1707cfc89d1"}, "80774ca2-3b2c-4531-ac74-b9ffe9ac9281": {"doc_hash": "970d8941c9c43553bef2ee1b4894329ab7dac9c69318c90a912ad1d2bb1d23d2"}, "92c72e6d-1575-424d-a6f7-2ed917db56c4": {"doc_hash": "a54ae0fb759ecad29e75785f7488a2a543d440c01a4493199f2de34e682f10ff"}, "52fbb5cf-2405-4fdf-8dd6-57c246578c1a": {"doc_hash": "4c88ec3155df0b5cf08ca4d6a18ff27f3cb3d9579dcec7c215c8c5bda245fde3"}, "74067945-faf5-46aa-b14d-8188fac4b78e": {"doc_hash": "fd0a1358ab8462726d3fed9fd6d9124d8e8ac73f92de55fa16571fc8bff4ea29"}, "795dc6d3-e1e4-4846-9906-3cd1acbae209": {"doc_hash": "90743a53b3a1f0e28ca0c1a53d78d1e098b98d8634e1783f6132da4188d44c7d"}, "5b7114f4-1b2c-4bda-968b-17e026c4fd3e": {"doc_hash": "7be1eed0763a8b5dcc6b9a415c748df3df76bc0ce8f12452af8ad86d12647ee1"}, "9a270466-e58c-4d09-82fa-a828ace53634": {"doc_hash": "79adb66bab91316a1268b27b5f350f3dc8f1432e502958b11d967c1fa6367d4c"}, "21c637e9-9c73-48ca-b0d0-a7f4e05414bb": {"doc_hash": "770ac3808171733ac23a2a5bd1dbee3609e692f05af0d127d244a1f12bbefaa7"}, "dd835b71-3dee-4e09-94fa-8f98be5a55ca": {"doc_hash": "e1f1e49cab1ef60522dfbfb3e2f2277bb045618ab00820e03832596e0e394ccd"}, "c7668865-666e-47e5-8d1b-0460e607aae5": {"doc_hash": "2f42cf3f08ab133d99caa22c6987c11ddf0f8e51d0d4d3b75ec765c6be1bc3e4"}, "eb7b55df-2c9c-4aaa-b6bc-f87bad477ed9": {"doc_hash": "d62a5ebdc7982d10db775df6dcac4035373f97193868d54b7afd2e5c3eba94f6"}, "3a32b0fd-9e60-45aa-82ee-32d4307ff28a": {"doc_hash": "36ea41608c54a5debd8cae4c8babc4c64f476026a63ef68ff68d450361517c35"}, "bfbea66e-0a6b-458b-8150-77dbd9897872": {"doc_hash": "e5bf8ce58b9722f3f2a3e3777558a2752cf94d2b571532c79587cf3e5ad8fd60"}, "a301c52b-aad1-4cc6-8298-0ac7472c0fee": {"doc_hash": "7ca70c55eb3a3537985d2743577af1dc3ed4e9f07ff618cbac2cf6fc3687c7bd"}, "9cf9275a-9d99-4f72-bd67-a01098ab2b52": {"doc_hash": "c980bf03bada135dc52f4dda7758d54b860f84f1056485c6f6d8927d2ef0d036"}, "dd22865c-165e-4d1f-a79c-7d85ebd158ee": {"doc_hash": "9d17abfb67220f4c920a21c185128dd07dc540fe230f4fb45d19917440cb6e1e"}, "ee0423b8-6beb-444b-b753-0456b2e83b0f": {"doc_hash": "e20fe855705f8a608b698decc0ecad12230fc22f632fe0721a51cbc55abfef72"}, "0344ac5a-52ac-42d4-8ac6-67e2494065c1": {"doc_hash": "37df874da3ea984e336ec3baff5904c73f2401d17fb7704a9ce9a0a4f5ba3652"}, "9f2b844b-9cb3-491e-bc85-ae787f0b0c93": {"doc_hash": "6d4345deff21c15b40d22e2fe577a6d61e4df2fd8ed10bd3800f4d90d69dd376"}, "68a34de3-0862-434b-bdbc-4c5288a92de3": {"doc_hash": "ae66299d347b6f38cbdf64628611d96a784c996ae75ff52fe6af539657de5600"}, "4fbc7182-be77-45b5-9bdf-8e38ea56d4a3": {"doc_hash": "89f8f5cd1c5a0a2d524859b369bdf1e8ce31e1eac708da828cf709b7afebba40"}, "963b73c8-8738-4927-a4f8-73cb795ed0de": {"doc_hash": "22cf9b7de6dd5a9de987a9e961f83f14d7cba93512cc2a058989b1ab8fef9bca"}, "82434318-c953-4844-b730-de7d80778f53": {"doc_hash": "97b320d37db07ed9bd6324489c2347288ae0492b067a2d015010c2dc57cc9e27"}, "54703c3e-944a-478d-9556-4810241d9312": {"doc_hash": "771ca84fdb5a10aab58ae82119533315373a869ecba40d04a2a617dcfd3b8972"}, "d0ea9fab-630b-4a02-86f4-f9ad7087ac8e": {"doc_hash": "1c1395655702b0931b775ddd1e4a6ad9ae9f12d308f64a9e6f862a06c3f5adab"}, "562df8e9-0372-4fe3-8789-4e43a83ede66": {"doc_hash": "b1d6ebceeac95d18997938ad94fb94baf739cd61082ef4bc62ab2069d602c916"}, "4d20b213-0ac6-4724-99de-1cad1a1f8876": {"doc_hash": "c88c28bb259c5d222027919f49cc7cf8ca89e8a06ae6280fae2dba8ce0f67533"}, "58f75cfd-ced0-4bcd-aaec-9adbd21143f4": {"doc_hash": "e459abc8c085fedfa5fbc109553a45a225341176f86e428b007de6e617e2aee5"}, "d826d770-7e0c-4939-9227-19e9e86b3cff": {"doc_hash": "9212c0e09d0f35398b0238a52ed3cdacf1e393ce53fd2fe007495051d483a3cd"}, "3a91a2ff-199a-4b57-af18-dfe1ae368793": {"doc_hash": "1e53138e0a47951f22cb318996bc67e78cba4c2783a2abd607cb49ccf0d82ca0"}, "503300e6-cbe5-4a9e-894a-b5cfa4ff8298": {"doc_hash": "b8d6552d7805823deea23bb17b348f245494f46d4196237b3ee7611d37853f14"}, "489df165-3080-4f9f-8619-36f23bf98d28": {"doc_hash": "fe89a6832cf45b2582f6d68e5656f540bff92c6b9c90a8cbeebfcce3f7eb5729"}, "54963b58-0daa-45ae-bac7-7f6527de9389": {"doc_hash": "d28784665bba056a1f0700ddcbb4101844f3633a884dacf8f9da3c5e32101a7b"}, "f92843d8-b210-41b4-a5ee-d671f9d5372d": {"doc_hash": "579c16103661d4a4a5d0d5d9449323f3b9fe95a927438702ce42d28d870edbb2"}, "f281906c-a218-4b40-b363-8fe59d789839": {"doc_hash": "43da926d94352d1467f7c20a0913b493fb9bf9c1fa71c4a7143cae60f1ee3652"}, "822e195c-2019-4f68-ba88-8a6bb1381792": {"doc_hash": "89cfaa4d92652d6ec2540929615ea2eb3fff0a1bc2b8cbc729bc72e9119ab43d"}, "2abe28d0-4016-4ddf-8a1b-bed807ca2266": {"doc_hash": "56d5ce40eea4df9a86c81538126470d5555ca369412487fa4631d9f862851215"}, "66a79f9e-7577-44d3-85f0-b71dd78a3027": {"doc_hash": "9b7661c019b0563072690b68b2c6f7c3d20bcee708b5d755dd1ee55df524a58f"}, "5e0dda40-5d34-4513-b38d-601c879304be": {"doc_hash": "12ec8514d0c58660f6e08ea9bd11a0958cdee23803ea98604d0f2552a9100f38"}, "b2123081-6665-4ecd-b8be-8076262f1c46": {"doc_hash": "cc10d6beed87d2e03049a82b1cebfa477ee506e5050ed6f47683e21e0f953d71"}, "1a176e47-3662-4f44-91cb-717ece66265f": {"doc_hash": "be5c12e97377503941502689bcf3f3818cc9311fea9136cd91a440b5923e8d5a"}, "1e9f3e80-9b1b-4704-8d1f-bda5dac0bbfe": {"doc_hash": "9a5ec35d8e0cac929b03fa3c7c259088e74fbb69eca9dfb625caab2fb1fa76c3"}, "2baf0cb0-e551-4d9b-a48c-0bb18bfc6f6b": {"doc_hash": "6b125a810a593aa5244314c48ef64b08f716b015b8ff69d4620975f1276de718"}, "87e324e5-f85a-439e-aef3-61d5bf72cdbb": {"doc_hash": "d64812fe869c6c4cdb8e59f8097342bbdc606b39569925486d6a1c38964f7863"}, "8d7c9f44-9dee-4d91-aa45-ed7373b52e65": {"doc_hash": "7db220e803624e43e712e244338b3ef27c4f732e915aeaf9b786071a5255300a"}, "4b9ed1c1-5b18-48e7-8018-f5bcc744b57f": {"doc_hash": "8a59dabb65086adc352d683c0b921c7751817866ad160dc259cbabb4ee624eaa"}, "b21cd3f1-f09a-482f-9a52-efdfbf790c6c": {"doc_hash": "7a3295d5e9e5c1b3880e64c088e2001252e3b4fe5c177b75d50044cfd7f54d1e"}, "5efe1599-b8a4-4f58-9aeb-e2a4076db626": {"doc_hash": "759dca13c779d106297d1ad13b7f8c1d8008136bb57a379a3a56e5f1d7a9ce51"}, "72b22727-70eb-40de-ae44-64a11aeb3cd4": {"doc_hash": "d11ce729ff84716d42526d022648e9e5ccd6a284772822db7e5edb68c1df8a03"}, "8b5f6116-110a-4731-9554-0aeed1636e21": {"doc_hash": "aa56a13d541141df8afeb6ec920f5d8ed67fba07521b85ec0d62ad2ad734bbca"}, "4837d268-a4ae-4dc5-8ee8-a58db7126c6b": {"doc_hash": "7b491b7d689c21e787ef158d2b91b444c42d0103794bf6319b733b2eb5fe3c24"}, "96465517-6f21-45a3-b3a1-db856be832af": {"doc_hash": "8012ae4ec8b47a3edfcdf934d42106b9e32f3df087368a97e67a6b4f4350c867"}, "89ff5111-8b61-489d-897c-c0399c0ed95b": {"doc_hash": "b2360d93287a8131830a952697f4ed6d3cbfbb508306e6786a3bd200a41129c2"}, "37352313-643f-41e8-9b0d-c5418883c4fc": {"doc_hash": "4bc7d69c7fb27dfba288fc882e4efd7eeb1f120469dc5eb5e15d9c888d9f7a07"}, "61ea398f-dbea-411a-87c4-5b76ce919621": {"doc_hash": "929ac2bd4998138a7e6c795ebc0d280005d1b0de8a6187bc0bc48238613da7bf"}, "8fbad48b-935c-4015-a4b8-8c9bd25a09b8": {"doc_hash": "2122a996d9fc95d0c7c50a6ccad36a2e978965cf92b3a260db314bd0c8b31b34"}, "b472a290-7385-4441-b009-8ff32fdce009": {"doc_hash": "76baff534df60083a0227dfa262cc663d112167cd4f4e48619627b63035cdb21"}, "e4126b8b-6c9d-4219-9afe-1d61e846c1de": {"doc_hash": "3ad9bb41035aa50537551c60e0f7a1d7050a1f673f6c6d20e9b85183dc0bb7e4"}, "f1bc3856-9d20-4724-a709-cbef52fc6e73": {"doc_hash": "cb50ec29fcc65d4487f366a98d491db111ccc945975b2a314e2990a91e3ddcc8"}, "48687e07-bd8a-40c1-860f-8f9bb0bad411": {"doc_hash": "d24a6ef16cdef708686c02a642a7aa9ae45ec856a4fbaa119968f4301acc0a4e"}, "a963af26-242b-4378-8550-c66f2f8ec470": {"doc_hash": "f3a13ae90331326e5b21c287434911e9c616ba7eb7c403cdcf9b2b6fcb719f05"}, "f84da628-6a44-4073-ace2-38dae2350a24": {"doc_hash": "44d9dd69c0af014c3f494f4f3de903f3f05e1164b06d2360dd95640d8fd99488"}, "c8a3405e-be8f-4453-8a6a-25eaf395202b": {"doc_hash": "2768e372166a2484d05454e3b35a8216206910d57e30141661bcff627d75663e"}, "06dd46d8-3c28-47b1-a72e-fc4ec913f24c": {"doc_hash": "4e48b78849905e7b22d703fd5f2200a3dac697464cb019fb5dbc9ca64610deae"}, "dae702d5-0346-4c5c-b8b8-7b1b4e2300a5": {"doc_hash": "720265053921c7df72e771b813dadb48103ba98fef63265b750cc079534a4aa2"}, "310705bb-ca2c-4eb7-a451-24da8ab12426": {"doc_hash": "d9fa568e437b6a1c807e4471a999af538fe2ec947dc1acc8f5c5d8079e1df76a"}, "f699c7a8-0ce9-4072-9a95-2645eb316c88": {"doc_hash": "5e07fc5ae7e8b80e979bd8845fb2d609936c10db05c061474c3453915618bdb7"}, "99c28277-0306-4d81-8795-ced83614d1e5": {"doc_hash": "4d2c89526827a6c4cd794d525a58d0caf19d266ef6839b673ced88394c05cfcf"}, "c52466ff-3012-4504-a61c-821e9aad3493": {"doc_hash": "ef83a693b9c2fed344eb5393ffe805be52f5831545d069a3de2ef89a7a3b48e0"}, "6d918a7b-daf6-448c-b89c-8571f605c173": {"doc_hash": "ba85b3a659eb22fd2931a620a4ee7e6688833baf26e94c639308785e8e6b07be"}, "b8cde3af-b640-47a1-8560-0a852f53bad7": {"doc_hash": "80a083ebc9f93cb5d5d4ee50247999e966e73336556502fc5c82dba08b03fb2d"}, "76fbac15-1297-4e6f-a657-2cef79e2e162": {"doc_hash": "32fead977ae3e819180c35bfe5ad4968dd7de4ceeec3a4f57aa461993c7242cd"}, "db6b1bd0-7e8e-4f96-a6db-24874835b3c5": {"doc_hash": "137bf7df9ca4ca5a90149a00a0743ca42a0e9155bf8ae09b742b06055ec10751"}, "db7bedf3-8018-409d-8737-ac87f9cc2f17": {"doc_hash": "064294a7efab09f31b92f4f31d5d8b0fd10f0c79f2c013de511cd4430584ddd0"}, "ecfca604-7fbb-479a-88ab-283d7a212728": {"doc_hash": "5d96bf3548c8c0aed1d05fd8b0b238ab60f250d8c2a71a23c4fed124c9bdf0af"}, "1e40a18b-a220-4cf8-9621-81a5eef793fa": {"doc_hash": "9808509c44f835311e5796a52ee0ea721188645a33065330b5f23e29ab9c89cb"}, "0156e4a2-a04a-4dff-89e7-db14bca6eaf7": {"doc_hash": "48baf03aa5586538724ab7b113fcfbc200673a0e570a6303561abf50b0da546a"}, "49f16024-b8eb-4bc4-808b-5c22198eec35": {"doc_hash": "acab6b05fa62da425df82b7c9492ba402ad874aa613d35dc9ea0c672a865d8b1"}, "15bd04b9-73ea-4679-9a86-a22c733dc51a": {"doc_hash": "21d255fe1ac6d2563a0b2a4d46680bcb9b440f4812d6657a01b0da2559da4dd4"}, "2ab82ab5-8b78-4fb2-b7b7-338844b19ae9": {"doc_hash": "5a5942bcc01712db68a904866adba457cc7b9d5783451c8509c3203350533248"}, "2e77509d-0595-4d9c-9390-bc2d9f2d2fda": {"doc_hash": "9f2cb4eebe6648c586d54f747160fbf1d2aec9eb2118122161d82a885cc52b46"}, "9c2fb702-19d5-4c76-bdcc-04465e78b1aa": {"doc_hash": "644c752d67860e498a6f66f9084faaae87c5bc5181a01caf32672c765eab2fa1"}, "5504e5f5-707f-42b4-84c6-40f09942f9f1": {"doc_hash": "83f85a2ce65199841face0d53916bc0f0d7f9552fa513522624584a674c39791"}, "a50f42e9-0547-46b9-acb6-c9a57109c585": {"doc_hash": "a2c40673c975715a95f2be37af1103fd9044c3b5b5b934227dc8cad6fb1c8b97"}, "18cf947d-a387-486d-86f0-4f9ebf308eca": {"doc_hash": "489d55c8cf78d17be68b9c9a61626594169f24ca9b41e5949948d5989353175a"}, "9051c3ce-96ef-4234-8ed3-d807d227c70c": {"doc_hash": "44d25d92307a9c926e636e58a4844bb9d5084047d605cf53253377c61a88e9a0"}, "0d775ed0-11a5-4365-9e89-ae341a2368f7": {"doc_hash": "27397c72c8cbd3c599c4c29190d2e6ec3db65f5457f70ba7f224cbe23e6d0795"}, "249fea6d-1ddb-49b4-9b56-1b9462b44a40": {"doc_hash": "a04c9b6da24645185ad4eb5209403525822c50ee977602cae5ed2f13e73ed6d2"}, "3914e61e-a6b9-4f72-b512-0dfb7b8459d3": {"doc_hash": "56b422d19ad652d73d10eb5cc71507cde49f262092ed92bf76c4d418201d6301"}, "87a02f41-004f-45a1-93d9-93ab7acf6718": {"doc_hash": "2649e5ce9b99b46ff6284deadd1596e637c6f80d19dde8a94f7d7b16fe4905b9"}, "51f18f3d-61e8-4599-8cad-370ea2cb8661": {"doc_hash": "168e17a7ecaf6798a271dc22c641dfac4306c81c9575c9fa78f0eac156225699"}, "3c0c1bf9-307e-449b-86ff-b236af956e3e": {"doc_hash": "dac2fe7ef1c8f8b06a1db1bbc965a494d21c493f7d2d53db261aa9ddcb9704eb"}, "03a64d82-0dff-41e3-8978-1bbb104218e3": {"doc_hash": "752f76f0f5f82b77cfb332ada1b2ceb993a1985e41cf100b50fb7bad3e50ed7c"}, "9f8c1349-0a25-46d5-8422-da4ed056e86c": {"doc_hash": "174eb3ff99d86e4363fbe66b8aa1c2ec0030e057b158f21356da1003a22a5a41"}, "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9": {"doc_hash": "c0fd52ea12399b383da508d81acb5d3d07bc7e497fbc591d36f4faf02feab446"}, "72aa08cf-3996-4b8f-9b51-ca893c918039": {"doc_hash": "c4a34cbac1764c96ea7bad3f3881760e7d4d22fbcb5008ca7645288caf4df185"}, "8b94c90b-2179-49b3-a0cd-a6b6057ea41b": {"doc_hash": "4f62f28c078cdc8d73385a1bd99b1b36e642562cb7f9521cc243b16466424752"}, "0ab72737-5ff7-49d2-96d5-86b06d7184e4": {"doc_hash": "e1cf2652867ff3b35e2d444d981649f48e8b98ffe11f1261b9c1a700b2ae636a"}, "32119044-3b24-4eda-8f05-1ef4be79a26c": {"doc_hash": "2edc188488f71d1e4e27b512d501c1810ca3eeca1740a0faccb494b1379dd73d"}, "3e8bce1e-5123-40f3-be33-bbefd7d0050b": {"doc_hash": "dcde14407a9c8e67b9fc8e4ff3211005da2e7ac6b97acaf5a0ef20cf081b0c1e"}, "da6ed72f-561f-426b-95cb-be6f4dd17259": {"doc_hash": "d3bec12fca66cdc2c3d16dc5ae22eec9642c0c658f8ccd8aa48893ad08517de5"}, "4526dc34-1d55-470e-8a6e-6d0f37d255fb": {"doc_hash": "0d204d77740a77e55fba6ef82c1139b2b6abf463881aa4ee40c0a14038079d0c"}, "aa76cb2c-0915-45dc-95fd-7ab858e0e588": {"doc_hash": "dd41a10e37cf5dbfd1cee14892179f79534fa041d24d9451b1496e30b8a2d2da"}, "b8483b3f-665c-4dd4-9889-4605e60879e3": {"doc_hash": "4fdda87f69be1970fb9bf33cc5f4a0946cc57ac1da789734308d45c2b05dc2a6"}, "f82c292c-2274-4be7-8877-5b6719e7b49a": {"doc_hash": "c28a02aa526becd7a7f2abb1c2cc4fea5279ac0dbb115b54b42df121c455e49e"}, "efaecf7e-6d2b-462d-8295-47ec19f33d1f": {"doc_hash": "90135bf134924c6cbcec444848d850b0d4e886452c91d59543b6401cfb10a5a0"}, "a263e8b0-1a88-4dcf-b80c-1baf0a500418": {"doc_hash": "b011b0aa0a27f3f100276a2f7f7fd5edf5e498def50c481e4d7f39e667e7c0ef"}, "88e7237a-1bd2-4af4-ad0e-193996602605": {"doc_hash": "0a715cd1a1c824a1ad31498210b1e5b0a7462a07ce05fff7c2fb6e9f945ad126"}, "ec7413be-409a-428f-a62e-b88fe99e5142": {"doc_hash": "48b9e9fa38c19fbb04b2b2d0ff86bca628f4f14e78c4aecc2b627bb11ef6bca4"}, "247e8b3c-2be2-4279-bf00-799b6bf4ca21": {"doc_hash": "4fa0aa0db6cafc00c3dc453655e47c251a8a2fede5313fbca85fc83c7a57c052"}, "751b795f-126b-4e20-93fc-04ca0b769fe1": {"doc_hash": "62ef72c396aa03a454e273a030d770478b7749dc71d348d09b714a4dbc9d843d"}, "4fe082ae-0eeb-4489-84c6-d2d2c5580971": {"doc_hash": "2c61c7e829b2caecd7ac5dbb65060909103a9f627e46cf355c44f835260a522d"}, "9ae5531e-9f4e-497d-b523-de45c03c1f98": {"doc_hash": "12e3ab6a17c41df2471be03b91758325b02d17e51f6492b59fe23e893e5a426e"}, "cba574ca-e101-45c8-a35d-317924e85077": {"doc_hash": "d77015ed88f4e20839a70fcc706f95c6a47abc62c25cd998deb6431532df524a"}, "45e35def-1e62-4011-90f1-ad5484586d51": {"doc_hash": "6f587159cc5ca50abc0c1c1bba5f616cb945499deb2e1436ac30b2144d600a11"}, "c140514e-bd64-48f6-b8f8-1acd67ece23f": {"doc_hash": "c19ee9fd4ffdaeeffbfe010b88d082830a1b62e30bf7407f6f99b19a0d310b64"}, "e00921f0-61ba-4bda-b568-bd6023555455": {"doc_hash": "e2f55d37c69bebe74fd0bd3d9bf54cddda6967100992a7533f0f0bf2950a5d7f"}, "82650227-7313-462c-9c13-c7e7af3e2e11": {"doc_hash": "fd42e4ad8dacb2c8761cf774641629bb8a299dc36019fb413188918b845a92ad"}, "9fbdbf5f-b54b-4646-81dc-7c6e33dde93c": {"doc_hash": "0ccf842fd012bc402a7a8eac39a766d726524529dc5a104ae3405c42ac619d38"}, "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0": {"doc_hash": "33313ee8343e385d8f8f8bc0c248460090d0103ce94a9f85c279211007259624"}, "bbc735e7-c463-4e63-89c6-423346652688": {"doc_hash": "552243b48f8f2c99c0f02147c5f300dc086fada81b74df93195a3e0c45847c65"}, "3c806965-ab33-458c-81c5-67d8e2cc5f91": {"doc_hash": "f3b13f1f65f2a8196c7ce09cc7c5ed06a5c41e344c4f6ef532b74db60144652a"}, "e6f57849-1cc8-4988-87be-b0c854a9b116": {"doc_hash": "c40d6ac477dae8c56978dee3391b210b3f20779f320e3ddc6133b432020c38d7"}, "e5713057-fdd4-4b21-8a24-8fd26133267d": {"doc_hash": "3ea6696842b13c9f1a3d93dcb5a645c398b0da62027c238408a223dc5ba737ef"}, "6117e2a5-9a56-496a-8413-ff02e2800105": {"doc_hash": "9ebcd82a04325384da2e88acd0ad3e17487a7f3768f6853a6a68d53fdeb3f73d"}, "c116e219-0619-4234-9f03-35685392358d": {"doc_hash": "710f3491b8b180d69ce5895d398033b6ceb1cb345c44b68eeb733209898a5987"}, "f8bdcfa7-c581-4202-b7df-2f0db76126ab": {"doc_hash": "d4dcc1a8fb4699a6577d1af3ea8a064e7f1717586f5cca5e864ffab8fe8ce8a6"}, "6c25cec6-ab48-43c6-b6d4-54418f5e017d": {"doc_hash": "2408aabf3a3dd93cfe91ab8bdb3d9b2c44a8e85121558093271419c3054283e6"}, "f95e6351-1296-4cd4-96ef-0d87e63390f3": {"doc_hash": "47068b59a51a4521e81a6788ec5076c63f6314c435f20ed27935821beee6b3ea"}, "4a4dfb54-018a-4949-86d4-d93ff358abcb": {"doc_hash": "444f4269fd6289cfdc50f0b2a071e476af8b09566767cb7ae9120561518cc77a"}, "44f7641a-d637-49eb-a39f-76fc785257b4": {"doc_hash": "2f47a0c8264e43d664e5f225bfd1f9f279fa7521d6208582fe9c9e117f668961"}, "58e7993c-96ff-4468-9371-0c5a4158ebae": {"doc_hash": "68e903b7aca0064521ce6810de480a9ef44de3dfb1add3c0e9c74aef98c9246c"}, "6d9d9cca-705c-4d70-a3a5-6abc5f0179fe": {"doc_hash": "33bbd45a3828275755f737e0e10ef3f5cb2a610f48635b9641d9cac8c6bf7951"}, "b0694a68-e407-4d4d-80da-9a16d6801702": {"doc_hash": "efccb76527663b82ff4d753d15f0df9bebe3a92e7d4c5b85bf48815bc3f30272"}, "474fe770-43e7-4b48-a00d-ee46f77d93dd": {"doc_hash": "533e34b6d27476a578d6fa748035682db86b27dca12419e8e9e22b657e37ffc2"}, "84538c01-eb63-411b-b242-38d0af1e7812": {"doc_hash": "821caafb3939bf936801a2336761a335fb80ae78fce865da2fdd26db567486e9"}, "00995115-81fe-4552-a0ba-0d263ca0389f": {"doc_hash": "e61b955feef5232f79d23b17e7b7f059f07607d9ddbe39048b64339d24a8114c"}, "5549ca23-6b43-46e0-a7b5-6a00d8973004": {"doc_hash": "4864ef5ddfb3fec71c1cc960d9de083732ce18f1b08bdfc00bba6b7139275767"}, "01db9572-6470-4490-a6f8-d8d72e6af061": {"doc_hash": "bae855fafb8907bc661a4de2494327d8b38000e9fc5d99159aa305352e4c363e"}, "be998502-ad11-4278-b67a-979814606aa7": {"doc_hash": "29dfaf070cb3f9c0a5d2fefe7659b60bdd8b2b0c308afcafb352e35b4e48afd1"}, "ecef8314-27e5-48ab-8bb4-2e80c5287a87": {"doc_hash": "d1efb18a458905c1906bedf97b67ad1c0f7b60f091a18402a064e6bcf1fda192"}, "c6cf7d10-1b3b-4375-8ca2-eb4fc17361ff": {"doc_hash": "23f29d3ae5f445678cb2c3310a9fe962ac4e84d36c7af49d168895b1c46eb3e5"}, "c324bb22-0e17-41ea-8eaa-b52f6521606d": {"doc_hash": "9066f6280f3f988d0facd2526c9c389ec9a52a2e94db3b399ddd15e4b36332f0"}, "272a4237-1e18-4f0b-b808-86376975ea72": {"doc_hash": "84f9aec97576432aafe5cffa907e8a5bfa1187b7d41cd39aeeada4f58b3aa702"}, "24fdc7ba-d644-4c0f-863c-cd03c031fa4e": {"doc_hash": "8f5974633bf9d01ae26c9d69d0d68a184476f77c032e0e93ce76b1b6a4a61214"}, "5fb3ba6b-5634-41ee-bee1-b174d6784f34": {"doc_hash": "38c1e399cf49a9a5ea0216b37653c7d96d65ac4eb9192b0c42e31d5f2abc367e"}, "e453f199-ede1-4549-b9d5-f96e16f9220d": {"doc_hash": "57f93387f2cb53ca67ef0674dd269f227748c8514ce0cfa28a0c4888c003845c"}, "d1afb769-c445-4074-85ba-ab9b35108d79": {"doc_hash": "3004771408e66eb71183d6f9b42325906a8d060635d73a57f204e1ef99771152"}, "adc8ab33-6743-430c-b25c-7114f2b07044": {"doc_hash": "9c6241bf6ef1cece5bb2d8dbe535007001c21c94786f5dcc78227c06027a2511"}, "f516c167-fa7b-4905-8dfb-311f593bad2a": {"doc_hash": "2a3b273fc4f77192a62b6e1293bd957ef35c79ea2defb9aeb3f1a2eafc55ab2c"}, "91202be0-40df-47cc-aa64-84a17c614d75": {"doc_hash": "bf98dbe0f219291fe82e9578dbef78b82845dd181d52726c7cf38ce5dab5d22c"}, "de566029-7180-40da-b5fa-777897d28db1": {"doc_hash": "252a9a9cf00ff6f0ccceb0b284721285a39ddd0c93e7c5634213edd1dad5149b"}, "68ca7387-9afb-414b-b1fa-971bde07235f": {"doc_hash": "167f6207f958b618859c278534f6e291d6808c57dddf5399a2765b57d968517d"}, "29d4a37f-ca6c-465b-a815-5b5955fa6d60": {"doc_hash": "700f59705fb452c02d8b3bdec986e12d673439324125a50ab9491f68d03089dc"}, "94c64109-e7d1-46dc-9d9a-17a818417825": {"doc_hash": "f45cbc3048719049dcbba33d1bec2b778b6ff313c8c813c9c954aaf7c6dd1689"}, "361468f2-1b62-46c5-98c5-b84e80020968": {"doc_hash": "963348eae4ce0fdf5d0642629c9b9462f660a0a704175fa4e22bb91790549262"}, "e2406c72-0b13-48d0-9fcb-0a45b778e4e9": {"doc_hash": "5d78d919f592194ec070382f91ce89e7ea05c98baf0e53e86a2bbe3686e54c07"}, "1030143a-95a4-47c2-beae-a496579eb29e": {"doc_hash": "e8c9edf96dd1fcbab04f3d3f7c13db42a2e7a70a227ef5c16a3d7e0c01bf4350"}, "37edcb88-1125-4ce4-ac35-f0c17986943a": {"doc_hash": "d0f68742c3a127d7e4a1b266b3df8994403f9763bc333e358d25e98926c90821"}, "c6112bfc-4c50-46f2-ac01-8ec96859ffac": {"doc_hash": "b8ad6d7035209417b32c454d894209c02b9bd27baa0b0190fc182c6e6a730d93"}, "39dffa2c-2b88-4c7d-a570-12402a8ef90d": {"doc_hash": "ae6ca984ccac850ca1dedf30f7110b2e326f47ed4c5921bb4d393e98e5245988"}, "f225871a-3301-49f5-aa47-e537a9bea192": {"doc_hash": "d145e475e762304d5dcbcf190154ad5a2196e56e0c6e64d5eb64efe48f55464a"}, "97c0898a-d8a8-411a-9a7a-c83773f967d4": {"doc_hash": "d6c807dfca8b0e7952f34048a6b3ed454941542a64e3c225703b89c1c20c0526"}, "de2826bf-768d-4797-9f69-a52677664c3d": {"doc_hash": "092fe26e03f09981c7921483446f05068293620f6718d1aee86cf36756710ccc"}, "f73f188b-9c30-477c-b1d8-8e2a8b7f7b34": {"doc_hash": "6be35b494f4f3c314d065224398eb05e31c2b498dd08caf076816b1a14b5a7c9"}, "07f0540a-3881-4799-9c57-84674e069fbc": {"doc_hash": "f24347aa97e844818211bfc96b4588ff134ebe43bf05520449bfc119a6ea5ddd"}, "b4f1c2af-c205-4d67-b4b6-49b86c27b36e": {"doc_hash": "61e9d5133670231cf370cb3a2fab3bfab492b64f5eaad6c103745a38ccd22b84"}, "0c7670f6-4d4f-4cf6-9917-9e7b916940b1": {"doc_hash": "d2df640225f6b61a0d9cf3d9d7e67aa1d05888d68ed942207f9291e6ffee5e66"}, "7b18da3b-f1d5-4270-8433-2bda266df9e3": {"doc_hash": "ffd212ab40bbf30edb96a48eebdf3d19c81ed911ca330e1f2b89d54820ea0ee9"}, "68243be3-6e9e-4ccf-8b74-5b9caf34eb40": {"doc_hash": "422c1d7c43f2eef571a8b2209367266fb8c0e191b59cbcd9c37b302f6d15a4e5"}, "336bf07d-3a85-4438-a104-26fe75cbc519": {"doc_hash": "838518c3a50cd5c5b75e0b2b37ba2163a55c34979e3d8963c602c71385ce1ff3"}, "62e896f9-07e4-4c68-a20b-30b33118a8cd": {"doc_hash": "d9478b9b0b9d8d473fc1bbaa3f031d7dca2258162c95588894320742868ff2fc"}, "97e677cd-ff91-40c4-bbbf-667649ef0085": {"doc_hash": "43faf20d8ec6fb26c44bbf0c79a9f803cfd650b9323834f8281ee13fadb13405"}, "f4409bb1-ad0a-4fcb-9de7-99970c08306d": {"doc_hash": "217d65034ac8d1c9505b5580c9699aee7d51ea86b936c442b2896bf8822e9b6e"}, "a114a3f6-6adf-4277-9c9c-b3f98d965aec": {"doc_hash": "4780fa4bd9130c42a9966c8195973110ae44c99fd9940aa251f23a868c1752d3"}, "f09d8c91-6fef-40a3-87f5-df6b367c9f47": {"doc_hash": "394307f1fd6daf6472fd026dc6ff41139f1965dbee94413b80b4cf38af872f02"}, "521bf329-12d3-4b09-bc5e-db921bcc1568": {"doc_hash": "18aec06d7e32435ccb31bd1d86aa1a4d51aac7869320f748ebed56d18a0f3316"}, "bf9fa624-c442-4910-9c76-9202151ad1f7": {"doc_hash": "c7dc633d653cae9359316d20116881403bffc41f7893277296a2d18598593d48"}, "316747a6-8574-4b16-b75a-7065667b6426": {"doc_hash": "09e2d2ae85ea88ba748115bdc7a620aedecb23eef3ab992f295f592627a4f766"}, "85513348-7c69-4887-a70e-d774c1cc9696": {"doc_hash": "484811f2afb46797879419ce6c2d80a90d6fe6e82456a91dbf3684b81ac9f3e3"}, "63deead1-4934-45c0-b454-b43418a89a69": {"doc_hash": "7b077d1415eb2578f76cd58217655dcc2740594377ff05dddf96000802295f41"}, "4296752a-5fb1-4e62-bce6-9b863c87cf1d": {"doc_hash": "d829fc4cf2b2f777e1ad036139c82fd7603d8b4d7bfdf4c282f6568e8376e94b"}, "b3d92c7d-bfab-4218-a979-da817c8c886c": {"doc_hash": "66138b34c4936acd161de2799cd97a95ffc2e9a0b4b9af9b8842a66cc57fca76"}, "c3503804-e20f-4a73-95b4-6352ae9cca19": {"doc_hash": "2dbd71a76bb50e3189cb9229d0333eb80e3d80f44119a900fc71cce0f48c6030"}, "fcac481d-8707-44e1-8f82-4671393f885e": {"doc_hash": "219f5c4c12c27e49227702de782f349962c9dfbe8e4a1bc8ce031d0a0fc04706"}, "d3534ba5-4f16-435d-a65c-ada22090c572": {"doc_hash": "d80ddcb03daf950ba3bac89e9675a493f5a58b0cc00f7a729153a83ecca4bcad"}, "928fa89b-066c-403f-9ac9-f6e603bbce1d": {"doc_hash": "66f866eef996d2f4b7279e62f3def61e60be07c61693a5030fa4a86bb135134b"}, "7366af7c-34b7-4f13-b9af-5dbb3f72ae91": {"doc_hash": "9f31c9cba130adca79f2ce7bef8a748f6bf0de123dcce71574f024eb7132cf93"}, "159ceae9-1828-41ca-98b5-cc0912ec1a2a": {"doc_hash": "3aee316ac7d279d47ffe225b8bc130f2ef4cc2067df69bfc51e33208e636f7d7"}, "f2ad0839-7d1f-461b-b4ed-7ec79a4b32a0": {"doc_hash": "a9b4b6f0db49cc61b36bb39570694c41da20b5a893e318b5cc833e698ce61326"}, "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b": {"doc_hash": "5b7769b41c9a1c8aac8917057b49b06c0c52b224e45791e91042413dfe0b301f"}, "05a81a1f-cdcf-4156-911a-563e2c0355d8": {"doc_hash": "aa86fd610bd6d0285996d8cc114e6a2ae8035fd50c2b51b5cce5e9a5e61bdec4"}, "78c4369f-52b6-409a-b1f3-1c7185cae957": {"doc_hash": "efc0dc8d52223ab6372f633e3314ec2193b8c50758eed761f5e67e1ca3284126"}, "c19db938-2b78-41c0-b1d6-138d673d90c8": {"doc_hash": "11fa6e61c3cffc2ad5f010ed7261cee53f58c8b58ce100c770383a465eef307a"}, "b63fd3d4-017d-4476-bfba-7843663731df": {"doc_hash": "846c9394cf83c433d74d08ba3d9e454e853f8b5eef85efde0f8dd46e34d29795"}, "2146183c-6988-4989-bb0e-44b202cf84db": {"doc_hash": "6b1d80d5972dd6b9402133ec14c7f8fb59d081fb4e994e733b232995472f4184"}, "1f63e088-db58-40e0-a0e8-bb02467ba6c8": {"doc_hash": "9381f930c1868e20fe9a48775bd389d3fa16454832bf0a6a597dc0980f871f55"}, "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff": {"doc_hash": "35f5d86d20ad6781522329a65937931687c72b62a0235195b2dbb29b3472c954"}, "ef32bb7d-5293-4e0f-8f93-547d2a7f5bc5": {"doc_hash": "f0c369588cdb2550f613a45023c67802d93f454da35207adff1f3b871b5f4802"}, "1235b604-e3d7-428a-a26b-4dfac09f3bda": {"doc_hash": "155518ba93fe02a0600fdb4382c3d4eaf4b158f603ddcf39354e9609676e987e"}, "8bfed476-cc99-46ab-8e28-cc0214dd24a6": {"doc_hash": "303c3bec55e871f0945894024750d4b8ce35a5a69d7194d7200a56e35dc488b7"}, "fe46ace9-1f69-4ab1-b9f3-5b83c03bfb97": {"doc_hash": "24790e4478cca2e4595597d78a4466eac7ad115d55b387e2cc70c67b84081bdc"}, "68334d91-a857-416c-ab27-912138f3ce63": {"doc_hash": "3080f297fa7722cdad3c9b9c22c87121ef88b088b8830e44a3cb99212ae99358"}, "18d86c7e-d50b-42a7-820e-c48a45f411d9": {"doc_hash": "60fbd7401d94fe85df3b1f6de411c51d1fe090c36c67cf0cac2cfa360517aca7"}, "67a30c90-155e-40d7-a2ff-96cdead6c272": {"doc_hash": "11263df7a2c48ce5cfe33648508ae8aaa0232343b825031b7c2f20f36fbe9b83"}, "462ff9d3-72df-47de-b9cf-034cf572e2f1": {"doc_hash": "9e1396104272dfbafa8030b359c710e0400fd1a4e29acf2e3a34fe829838cffc"}, "d88905da-5578-42ff-a73e-4ab42110639e": {"doc_hash": "b333fb43e4d0db5738e64fab18170890d895b823fad4148c0ad19b561e58e9fb"}, "967d5ff9-6e6e-4a64-831a-509690e70ba2": {"doc_hash": "657f9541acf09d6c0f6980856760f9479424f76b1e3e1f2b407493230d0cba9d"}, "c3ebd2a1-3153-4aec-af50-16d89f5af1e9": {"doc_hash": "cc7a32e666ca894f5e5f56460a3bddf64e0c89efdf079d8577fd321103277dc1"}, "17143227-4ae8-4193-aac3-6cc76caac9f8": {"doc_hash": "3ffa22eeba535596092132d3489af70a960e95253f2d0c7d3293e77dd95a3aca"}, "a277f0d7-21e5-4e0a-bb0e-af5331bbbe4b": {"doc_hash": "61bb95e7b3851c91044b002144ba09fdd7c84c0dbfe7273b699298a7766276de"}, "fa68d2d0-e061-4fd0-b571-222be1d3acb4": {"doc_hash": "fe81c92586e1f5e97b144c545ab4fb663ffbb78c06073ed111f31f1f0485d69b"}, "f833de2f-6e4e-4d96-a776-e19304926723": {"doc_hash": "be4e87024ca52013c5369d2aa9a2720b6a31d0f906ba656bc9a7c668fad97a44"}, "41fb3893-c4d9-433f-820f-f6a470cc7e03": {"doc_hash": "90e6960392f51941e652fd87ad2bd640b5b3ae73f2267b8df9387d69dff5b993"}, "12750cd8-e4d6-4167-adf2-9967b5321d88": {"doc_hash": "4432d10d870d4f1bd1cc3d0cb40c5e6b102dd4b1a62c816b75f1ee6c74445a5b"}, "7e1c1ac6-4582-4532-b0b4-1639db44dac8": {"doc_hash": "1d7411b77e19d2a9f1b05e9babf59468145117b2b6ca754237918c7f677c2a93"}, "1d4dff0a-6763-4028-9f56-bf44275347bb": {"doc_hash": "a1b14a41d4368df14cf71085be163b55f4431d6e07d9128950b6180c79f5d399"}, "fecdbd81-8f7e-42f1-ae6d-a5eaef0fbc1a": {"doc_hash": "a42f02c8795d3acfe4fdd09f7ac2157a2078df5e65c0c7547b0d2ca839be5029"}, "510f4254-fbbf-4c4a-aed5-5088a5f6ccf4": {"doc_hash": "e04ac8c90edd34f11bd4babaf4bf85fb89e4f8c05f3d4d855aa283e3b90c0f84"}, "981dd2e9-6eb2-4dd4-aedd-00f441c2952d": {"doc_hash": "b9ec20db76504fd16f986b322556da0300321ce91c3582eafab9534c090aa4e1"}, "17e85e88-e19b-4187-a8b2-90878abd6755": {"doc_hash": "d3ba47b9c71803768945d60131ec0d443836008cceffc1129d89931738fe3935"}, "60d57dc1-204f-4d4c-b2ba-2453c93efdcf": {"doc_hash": "7803a2990f12944a1c210aad306149fc3304be558649440ae1e43697599ced59"}, "5c313b74-b012-4f41-8b1f-a0ff6685f1b5": {"doc_hash": "b68967d1ba91b14be3159b1e55fff9e9fa7cc79686a158b8a5c99dfdd52b734b"}, "de49d5c7-ef37-4732-b126-5c3172f7714b": {"doc_hash": "0e6a4f02ad1e8badf378f2e50fcc5b49cf0f5e21ebc7703540ac2d04a82571c6"}, "01190e89-46dc-4721-ad43-8d2d7e45dad7": {"doc_hash": "d90362f94370e90242d8b5155d3b61263eaded5f24dcf1f93c39019aad0542ac"}, "e8f7a97d-9fa6-4e03-b5a9-94975571a554": {"doc_hash": "20e30caa587fe7fcf8e45145af1fc1d88da16ba62d1fd6a0ce62cd63a205ead5"}, "e755e4e5-0568-4484-8118-b6392f1278aa": {"doc_hash": "a6c43e9a1c2ab101515bec54e4711d2369e11f6701d15721aa483ddefb2fbafe"}, "80bf8ab2-d4b5-44dd-8f16-e7db6f201947": {"doc_hash": "dc44f0c38e5ba3c67423169cc53be14115e161d7be35863cc9d7e5ba1f3408fd"}, "9afedf62-17ee-4c31-9fda-4c8ba703245b": {"doc_hash": "8564d05354df61d85e8da5afe43f6b9198e46b45d4a9caa9e9555fd0fe93fac4"}, "205b8b09-b60e-4046-8984-392328c916d5": {"doc_hash": "f55fa421035a20e328e84eebc1b5247347a13c0303aa7e83b8aadc9e1ff3d4e3"}, "2e2d016d-7a3d-4629-aaab-8113d5ae5358": {"doc_hash": "8503426835fa9e8d0a4ec713a475601447ca6ff59179478c590deecc8031442d"}, "a2314912-7ff7-45c6-9d10-42e6279088cb": {"doc_hash": "e3f8ccda6c2cdac2c79b1ad32b92fc64dcb0df5fa59c21b85a2a1f22cc87c7b0"}, "4cf4e5d8-9d0f-4da1-920c-14110125411b": {"doc_hash": "340b2f77dbc2d3e611b925e895421bd02c0384d5188bf8c1e73b13f1c7dea4f4"}, "767b7250-6a40-4cbe-8f84-154d2576c3bb": {"doc_hash": "d18f45c221a05ccd3d94ccbc8a15aaa98efc472b961333a3c71174ce696963d0"}, "639dc327-16d6-4f4c-8cb5-782f9788ce6c": {"doc_hash": "15b6cdfcbb06a6a0cd2641726a78e0881383c549ea74dfca00a6101c8a3b6a8d"}, "8787dcf3-ef10-42be-98e1-8d015d660e62": {"doc_hash": "47cbd8bed07e33443be7ed14a77181ab565304d61295dd71ff187960baf8505f"}, "c45a5175-68fb-41fc-b62d-3f75d1144280": {"doc_hash": "9422e70bafd03aedef4367be667e5e04b5841305f148f3ed450028c604a2a477"}, "45e9b28b-a3ae-411c-99e4-e2e502fe2bb0": {"doc_hash": "50aafd6203bc69bcd9d8bed8ccc88b911ab5f203bc9a6426cd87ba5deb68e175"}, "0a5219c4-0ca3-4904-914a-6868d880299e": {"doc_hash": "3fd8e8077ff1b34bc7df9bb8062e0db2a8af1c00dd3933d21e87565bc7337df8"}, "de83084d-bb15-485e-94a9-3e0298eee973": {"doc_hash": "6e26ac7f1d220cb015c155757e6d75ec6094c7db87c50a7fa0ae126723249789"}, "c0670ee6-dd7f-4e25-8d0d-bb665ac99a09": {"doc_hash": "c7369e60b9eacd5487fd4ad5685402f94baf3bb678082deaa6506acf367a95b9"}, "b2733b70-9120-4ea6-9dd9-c8c76791259a": {"doc_hash": "5699c2601f33db4d01c1d46f7249b6d97e3167bc44dc1adcf235670ecfa16402"}, "61bf4f29-70c6-49fa-a7a8-889435e051c1": {"doc_hash": "f37e634efd678ca05ff707519ce2856b93278186456928a87b3a3b7aa5462157"}, "e31e357a-3fba-4eff-b641-cea1362398e3": {"doc_hash": "9bef99754e3a57c9e70049d23d4e9ec097ad6b801e8036cb330cd63d082670a3"}, "8231d588-fc2b-479f-aeb7-c181ccf49659": {"doc_hash": "ccdb17285c5a30249d9484a642a7d21ac83a0c4276ce22730ba3dfd318f7e5b0"}, "71adf83d-2727-497b-98c4-4d8b30f26378": {"doc_hash": "05f19354095ef715c125253984efc57021c29b8c19a7fb6ee3dbfd1eaa9d496b"}, "ecdaa948-0ede-440c-b58c-9b0e87de4def": {"doc_hash": "100b9ed73d2ab8c7d33ed2f8211977fb5750cb41a4adfede3fc572617e6a5d49"}, "50e7bc77-bccc-4302-ad10-c53e4ad92ee3": {"doc_hash": "74f2f5915d3a7d79adc0cc52f28efc8d6c47a76e7e113c73f245eafd06cdf184"}, "b6752a87-e523-4e90-83ee-572f7b0bf5f1": {"doc_hash": "34aeb469f9a237780fb1b65172ec661f5e35fc713cdd093cb15477f1e05f9886"}, "f676f1e1-8b54-40da-9c40-260f38d84e28": {"doc_hash": "ee7d8b6d288b1df91b8ac886c7617a357ac5d26feb3881d88afd3c9768738dcc"}, "3dd4ec9f-ec38-4284-b2df-3a3a54a78353": {"doc_hash": "345b3221e7eb9171c3f414f8efa95f64386d652e3a0c3e8da7c512a6664707e2"}, "c5ff8dfc-ddcf-4bac-a908-d79f876b9373": {"doc_hash": "8bda751a0d7cc7bba7dd1bd1a13bddfc7773b614d7d5641d6fcac08d1d8879b6"}, "cffaec5e-dc72-49de-831c-079ce7de5b33": {"doc_hash": "82b29b893da109a66ce7f0f8665b05b1d982f48ced202ce971402ca072d615ad"}, "cdb3ea36-8bc7-4b6e-92f4-e7dde9ee0b61": {"doc_hash": "b24beb266cbe97863cc75d1478cb57d925296d96eecb5b3365b52ce44641e12d"}, "b9ad47d3-3bd5-4ff9-a165-c154ecc6555e": {"doc_hash": "c9b74572791af576d58381c475d1326b2b662157242c31d492e1ac0617ffcb63"}, "307ec46d-bcc2-4cc3-9c0e-300f336f2fc1": {"doc_hash": "8118bf19bdfb60023e0f9508649d6af5fe8dcc8b29437fa9f07c8f7fba708473"}, "0a2fab9c-355e-4084-8503-32bae23f8fbd": {"doc_hash": "22a8fab29bb55f1bfeafafa2ecd75a33679f00b27d5e40959a4459474883560c"}, "4b6127e6-e1a8-45a0-bf15-70eadde08e7a": {"doc_hash": "c07e706ddbd9a0c04be1286384534f645c47772d2631f95d0693610254d4a028"}, "94466290-b990-48fc-a3cf-57b3f0e4f356": {"doc_hash": "e0cb24c9f533be7e4700032f68c602904292302c0856da9ad8d3c872eeaefe97"}, "ae61b928-6756-4a98-be24-2ad9079a9d6f": {"doc_hash": "2474b35cd9996fde0af26216ab67fe7eb2bd2a7360ae1daa8ce38329eb3272c6"}, "ce8f0a24-5099-4e73-b11f-8139c55dba1e": {"doc_hash": "e013503959d9125827beb71bc2102dbb06b785ac28241d9d581b083ca9d8e5e7"}, "aa9ef2e3-8025-4242-87a3-d76128bcbece": {"doc_hash": "25a8540a3dc8c4e71ca296e12712f587f51ee96f4832ae7548be1850f208adda"}, "efe2bd23-d880-4a2c-8ef7-c0d738774120": {"doc_hash": "e2bb11fadce4130da036db5cad23a99599496695299b8fd177d972a67be7a113"}, "39cedf47-b2e2-4840-99a8-0be4f8faae76": {"doc_hash": "946c81f36faa8d203fe14f0a66fdf5af54d471675ec9b46beffce59367a50622"}, "4c0d6162-64bf-4944-b58f-e11dad2084ac": {"doc_hash": "3f786ece4d3ea3e244e78c7da0e0a16cc705321281d33a5402ac69802426cc3c"}, "31147310-dd52-488f-abd6-6a690f146712": {"doc_hash": "8f033ec7227306c5c6405c09e2dd8d0905d1965b245bc2801c2780107f091789"}, "eed7b529-130e-4787-aea3-1b6650b97ffe": {"doc_hash": "0ee65da25bcc93160eefd4c601674df9206a92946baf2c284d3427be29e9e787"}, "a94f3e09-47f3-4306-a8e8-e0affa673ca6": {"doc_hash": "5babcf8c6f200e0eea809270e97d20b5bec62032550b25c3b4155186fc0156f4"}, "131aa035-a9c0-46db-be88-f0e83208082f": {"doc_hash": "5a8e7c4ec2ec67923e47dec217f048ebbc0272c9c63c8a8d4834820bafff4bcc"}, "779ebe71-60ee-4ebb-859b-bed2419039d0": {"doc_hash": "8e1015202ed3adb71ef16fe8369633788ea83bacbca712ac1688e2d73a33c013"}, "55dc0d23-4f79-4de0-a552-fd4e3f28cc95": {"doc_hash": "52350c90b0400f1401158fbd377dc3753b1e32a8fa5da4aa4612bf678cbfe913"}, "42a1911a-c31f-40a7-8304-6f0b09876ed7": {"doc_hash": "a99ac0acffe78a9d240cc92a28b331dd72b7e5b2b0d0f6d23f98c57bd504281f"}, "66e0b950-44af-4824-9062-9130be86101a": {"doc_hash": "f847c62e1e86298461226146d7d5af65ce09cbad31dd022153cc0ecd9cc71aae"}, "81f11a49-6e90-4560-8def-ca3bbbb174c3": {"doc_hash": "9cee130c8ef63c62c5d171bde1f10c4fe94005a52003e83faefc994a6e0156ea"}, "c901ca2e-f784-4414-8b95-1b6ebc9d3ec9": {"doc_hash": "387b3ab781b5bdf56024a81871f513483d75f63b8e8bc4017598da01b2438a40"}, "14f111b0-b213-45d0-9492-dc787c816eb1": {"doc_hash": "9b872d0d0aeb2e2b24507c5b580b1882db6ffdc19f5f8989a6730721f4e855cf"}, "ea3103f6-c4a4-4322-82f2-48e9e7a52ec1": {"doc_hash": "3f5b9000381803922b7679e7d1ee1fdac1d336cdc44963f4f5886185edd7283f"}, "20189416-ab72-4333-a547-8e392a5763d0": {"doc_hash": "816a16235b1e44dd5d84e047f07f11dca29321b79a359d758244054a0879065c"}, "1cbe01d3-2570-478b-850e-3575cceab0e4": {"doc_hash": "d2ea9a83344107194217c6a178cd3fed72f6d4024210d4e76358d4fb26622cce"}, "99b922f7-93aa-42fe-adb4-2bd704d77882": {"doc_hash": "ffac4c39699281c7765c5422e06d110623e3d60c2a047b02dccad8ff8e2c67dd"}, "e5b7a0e8-8d26-4956-af67-1b389e915687": {"doc_hash": "5cea37d2df6af55e81a353f3c41cdf4c607df87e7cfc947202fc8627e9c4f8b9"}, "692361cd-f270-4ccc-a259-891e9ea1340b": {"doc_hash": "854aab67246a6edff16536eb3ab8409b38ad2858b06d233c355087b091f9b2b3"}, "cb18fdf2-706d-4cf3-b53f-ccb3480a40d8": {"doc_hash": "4d263065a5dec6a3047befcd23c83ff58216bfe67f517208a290cf427f98bc8d"}, "c07f96be-c3d2-4dd8-b639-05f6d734b6a5": {"doc_hash": "3319bbc38de8abb00e66a98b49ff96321f6adb0aa4cd7bf0a52ab157251693c7"}, "7afd82ea-e6a1-432d-a165-df88e58b5a0a": {"doc_hash": "378c5e7fca07cf64bf87c369b83d806f2deb61c009ec5a0e76b23007a14a1d6b"}, "61cc164e-c27d-4c75-8c37-e87aed2da76c": {"doc_hash": "7cd6c86b2c9e1b870854c02136341a902ca95332256f59e915da9f5e53dd3471"}, "962edbc5-0b6c-46ee-a033-e88bf8033d24": {"doc_hash": "4badb8ddadafcc147b6f9272397a72043fc8c3f77599df17f606e43285a59452"}, "156ef9dd-49ae-4f37-b4cc-c8160caadf55": {"doc_hash": "68da9a1e29bcdcc3f0fee054f146c4fd68d617ee0e5adb68354ea5d01b530e54"}, "d0f1e44b-2ec8-41be-9e98-b24df78fd1df": {"doc_hash": "cfbfe4dd08018a9add565d3ef6c8917a52bba7bd660727ea3aaa905c66939318"}, "7a4abe2e-f4b4-4daa-8dd8-cd9ede469a94": {"doc_hash": "b4467ca0d33b12ee0eab5fce54daf5995dc94f825fccbc2ac406e0a6cda7a0c0"}, "b9e3e7b8-2f29-4f6d-87af-1840b01f1cbe": {"doc_hash": "4cc29c9673bcf9b6983723bc69ec12e8fac2ec1cb37202d3d16f1fc7a1541f9c"}, "4862ddeb-5783-4ee6-a1e3-0a19335fc024": {"doc_hash": "feac68e7bde77f4fe96546697e9883a4c2cd4be00f5b9cfa8395f50d8c2e6f8f"}, "8dac5fb1-d597-4138-8b22-453846af2fe8": {"doc_hash": "be8a7b567a2874fbd0ca8d3af3d6a9810dad04cfdb31b253f41ca23dd0c039c8"}, "d398e272-2de2-4c5d-b759-0979bf1423e0": {"doc_hash": "8e8fa46f4d6976c72ff7e9207648ea37558343192af0ef2bd9515137b601de7d"}, "bfd9870a-646c-491e-957a-ca7962efd698": {"doc_hash": "3ce69775e7924bf1602c5c38f75339414ba10ebe63ed6c7043c136517cec637a"}, "6f09081e-7ba0-43f1-be73-6993318d1c8b": {"doc_hash": "eef625944d21331662fb706ca40899bbd91bcab4fc6199c5daf7ffd1123242b4"}, "a7c80cc1-3e08-47b5-9e1c-3eab0e9a3d1c": {"doc_hash": "b54947da0750094e4baf572a7f1a257c4cbbdbfd9e3d9e6447d20f2a28fc9aef"}, "d8e6ed71-f4d6-4b82-a999-8c550bdc5437": {"doc_hash": "308d5e63d25d158f19fd74320100576064be68056f4b589f7efa068f9036e039"}, "d04afa5e-4514-44d6-b040-79f7b7688adc": {"doc_hash": "c5cc8450b75f4ff8679646431ee5ea67462cae2f2232db12a09def0d078b0499"}, "baf8c241-724f-4ab5-b86f-ab440560ba5d": {"doc_hash": "01eeb9182d431d9ffbc51a015738d1e897ae2ccd28c57bab4d6cab41f3c03da6"}, "5377d929-8d3d-4a0e-abe0-fb8ebb492d53": {"doc_hash": "a1325f729c0834978cdb674635d139113674a621638aece47692b0649fe9b156"}, "9a070ada-10b2-4516-b388-9f13c0953eaa": {"doc_hash": "2c1f164e6631e69a93c6a7721c3a08e65361fa492ff9c32b13002a3012f81376"}, "afe1e043-3f92-4df6-9421-597b68356f11": {"doc_hash": "ac42de34ceb8fe9cd2f6b2c3870bd34c220531c8cb1dea5e73149ffe201f3693"}, "9c7bbd32-64c2-4eee-a147-e54a8b6caa63": {"doc_hash": "962cb673aedcae35e111972b061a852b24f20bf251e907a66d635df514927740"}, "43f7061c-ed72-46ec-94f1-bab1ac42ecfe": {"doc_hash": "08215a1951042a8d6d9d65118c67697bee25dc3d3e3aa8ac5cb3fa04a769b012"}, "ec353e76-8c2e-41a0-869c-d0f2ff16a3a8": {"doc_hash": "f68683a0ff1c35447282de0541df7a9c739d767594d917ab49c1935a6f66951d"}, "25f94556-72be-46a7-a7c2-d99c4ebe633d": {"doc_hash": "9301e440b7e69bb57bf3b48d1b9fdb9bd69ec7c21f061a22ef1a14266c28a455"}, "09936982-5c83-4403-914c-c1147dc97e5d": {"doc_hash": "b366da05338959d29f8cadd345f6e314a4bd299f1e98f6e0c7f4a97f52612297"}, "98224082-c00e-4b84-bab1-35d43ac2ab6d": {"doc_hash": "2e6bacda9e01a814b63ffbd6861542a3a798031409190d9c12d458f9b11d1342"}, "c8eccd97-6f2d-46f0-9fdc-75e9088170c6": {"doc_hash": "21a206c09149fe9c985ab57390ff5ada48eca394aa1cdf6856ffe53320270d6c"}, "3095fa76-fa8b-4ffa-9538-6fa38c07999d": {"doc_hash": "23add5f858814896c45bdf6d8a53e53f991abbef31932268b530a9d8fe3e6d46"}, "85b46e10-6d42-4a79-9098-f4cd80ab0648": {"doc_hash": "7acc90fe9c7ce12a8df2daf20a7cf23cbb28582075607ef82eddfd30aa517cdf"}, "2e9e8479-d4d9-41ff-9d88-29ddf89fd35e": {"doc_hash": "ec498c73b76b471f3b0d66d183c8c1cb6ff6c0e0cc15ccc0507948e36114a4d0"}, "4241b810-872d-4569-876f-a943180e53ed": {"doc_hash": "3733f0dfcf1bbfbe38ca0f9eec95957b2ec6bd7616e04b1703fead789963cc05"}, "c8e8419c-7ba1-4acf-85a6-5ee1980b9aa7": {"doc_hash": "4443df751b96bbec85bde02b46f3dee67ae64d1dcadc1ff1c2b3356b47243bc9"}, "035606b4-544b-48eb-ae8b-5f52518f4602": {"doc_hash": "fc221d67d84d9818f92811a9571781c3d8e195ff356a622f58d54d576b4f0608"}, "3535fc4a-d5be-4463-a129-cb93f6185e99": {"doc_hash": "08b3a59e75380eb598e675eb36f402c792a595172a125d78ad7a9fec4f161c4b"}, "0cba96fe-8586-4df5-a11c-28842624c59f": {"doc_hash": "bbe3f3bfcc49a8498365fea3c5e4daea50e97a288bea15676c71f5a49ce4917e"}, "40e03306-1774-4bf8-8a92-15b27af18bf9": {"doc_hash": "2c0c1ee3be59b5c2ecbb50a7a576063dd185c7c780d32a65e9a7ba3dfb43e545"}, "058bae11-91c1-4669-942f-9186e97f7698": {"doc_hash": "366f6e6438a53f52cc4d5d40a14b44e467f4a65d8d4ebbb1e1968c1b26b5bead"}, "43922029-82b1-4fed-83ac-2214cd395e0d": {"doc_hash": "533ad2daa99c7d35cc31c3b3f033a4c2fff55c2d6a38395c78c8cbbe46ac98de"}, "78f2e61a-9210-409c-a56e-1afbb3e419d8": {"doc_hash": "1fb9caed8072e5d199b9914c14b6382ad55cb48b2db3a97cc9b962a267c96d27"}, "da4f3104-87ff-42ec-8a20-c72079600f9b": {"doc_hash": "4506689751ce089da01a649e8001f9851ad93ee733e5da490383333b227c56a5"}, "26c9b5c6-402a-4078-8221-78b473855541": {"doc_hash": "bd4b797dc957508b6f7d60960a9cfa4cd5e3d9bb90e755ed2739eda3c6d70d68"}, "6fc2bfae-574e-49a4-8029-c3a4f3f02312": {"doc_hash": "1201035674dd5c2c7447a36e079ecc5e2fbd62b7e6b6c37c6acc67c0c1f04af7"}, "9ae00fe7-4464-4c26-bb1a-ba09a54b4462": {"doc_hash": "f018180013de4105bc38512d943985ad6d24d8ebf546f29d7504ea8a8abc7306"}, "4356cc9c-e479-4e4f-b678-8bc32717836f": {"doc_hash": "d77ec49578aa0e64e87fe41c3154d63eba8b206f7bd3859e2791a404a3b8e06c"}, "1e448c4f-45b8-41e3-820a-265f4cf291db": {"doc_hash": "69f8b7ec6868623ba8c511049a0fe173d5a5777dfc32d0116ce7b92e59338799"}, "f1b7d0b0-635c-4086-8a8f-b2ca020d5864": {"doc_hash": "4bb164a09910a27eeff48c8ec3914582aba08ccd7641cd7ef88668f7ae120152"}, "ccc3fec1-8090-4fb2-90c5-091c1d793674": {"doc_hash": "a5bef9f6f0c801d26901b6b31dc885851717d2627953159cdd96d75c92fec79a"}, "f383d7a5-0806-434e-b9bd-9ecd77b28972": {"doc_hash": "271bb157543f414906a5aa63dd3742d20d9239674f076c650d02b74480255fe4"}, "bf2f627a-410c-4ffe-bf1b-18d3b2267ffb": {"doc_hash": "0e3536ba8fd8d8c576f39a44d3e37e8c557448cb5ef6de4ef9e08abb59e73239"}, "b051ff89-97dc-4642-bf49-f7eb24b7f04a": {"doc_hash": "5d2de0ff89d0d80b3b2746ea423191f71613ab2a1b460e7a545a9542c27700ca"}, "a6f66eb2-0f1f-48b9-9e53-bbc0ebc9bba1": {"doc_hash": "7cfc9beb9685eb1c0ee65ddf7514a9d470ee0d1aa3a9901abf88a5e6b42a1a2c"}, "23765350-7fca-4482-83df-e937f03efada": {"doc_hash": "bbd79c63b2303efbde97b8795343b7d5111fa02f32291c27c6e04af5263610b1"}, "52a44651-3ac0-45d6-b516-ae5de5f2881f": {"doc_hash": "0729d09e071a74d290369d5d06f1e539eb9e7a3738663ccc4c39d7754ee412e2"}, "6543837e-54b4-4a98-9f75-c8cfb1ad3773": {"doc_hash": "1f40be36e536004f93ff46c0802e27e0e70b1260c9d03bbb91a92fbe56985c87"}, "3f7605d3-4035-445c-a16e-97d6353b9412": {"doc_hash": "aef9e4530a75606d189aae8ca4fd9f9d72d56bd5d9c7249ed7628649488fc868"}, "c3546a68-cee5-4cfd-8bea-646f4790a18a": {"doc_hash": "5cc2c8edd9312f1913fd3018e315a9b28a26297cc3d0be03cb1f93cfa8dd5af4"}, "85b8130c-dff1-4718-86b9-77f1d6ee4965": {"doc_hash": "f0830c74be8e08665fc9a984e0df5104369aa9d2d2b1754233ae587a2e6ce37d"}, "925bfe0e-cd31-437a-80c5-fc28a3e1fe85": {"doc_hash": "358e5e34ec8cf5339c23f35cf7042f816894b05c806e2eb53b70444cfe2ed50d"}, "a6551b08-86e2-4f1a-bea4-34bbcf0c5a15": {"doc_hash": "a935b64e8bb3ce62dd45b02ac5d44f9ad019c0ffed0f73b2051ec945576dd8fb"}, "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c": {"doc_hash": "4b2620431493e7ce3c3f85ca29251893e666cdee6e548a41704bf79b710e7eb0"}, "5ba18dce-aba2-4b17-8f87-9983330f0467": {"doc_hash": "276f8eb9797bfc32aa41047314ae9833ce61c910d19adfb0a957869076fe4564"}, "0c346b92-0e8a-41c3-83fc-bee7182d0f1b": {"doc_hash": "f65c8fb6d6df4acbd03a9d27882ca87dd70a0657389d0aa181e57fff9b4eba49"}, "e9021f73-844f-4211-8bf6-247bd4f61fea": {"doc_hash": "423040add8cbb56e5e79e018ad40bea88d6edc2c54a852a13e6e4b9bc66dc195"}, "5763e346-9cb4-40a1-9428-af1e07d0f65c": {"doc_hash": "ca5e72ad20c500893c52149bf34d0357d058f3f29d2ab408ee36805ca74790d9"}, "ac6f3569-1e53-4a82-b341-c87fbe8f269e": {"doc_hash": "89c9dee31164908b41d0de227b3a94259dcb4f4ba9d4ab156642f3ddf16c6087"}, "ecbc5010-745b-46fc-93da-b353023212cd": {"doc_hash": "6907f976c1de7bc362983aee16758c6df0c296b8a928a70ec8a48d95fae74fef"}, "4f67c5ea-9c86-4e17-953c-a8f1d89c93da": {"doc_hash": "6aada1edd97244a3a7e263cdc0da8c95a9c9b679a1ca5bdac9fe14494e0a159d"}, "e5581563-0d73-402c-8c09-3f58a52974c9": {"doc_hash": "598d730bf7df71d05be0a7c988810e3a7181ad1dd0ee5a076cd3263ccdd759c2"}, "45220eb8-b17a-4508-a605-4c1d3ca3364b": {"doc_hash": "d9a30b178a9d41bdc1b0c1bd566d52f19f52fbe426d8ab618404b4f0c4b564f9"}, "ab00adb2-a47a-4c15-98de-8bcbf7d76b65": {"doc_hash": "68e1318ee27ac26e8bdf8bfade85a5e32b1a98db60e6569bd43faf18d1f5fd68"}, "af2e03b1-4b3a-436c-8bb5-9d9a89e51c04": {"doc_hash": "ea846a558555f3ed73c91b73c258e47b38273046bdb2fd6553b3c49b48622c26"}, "14fa417f-48aa-437d-abf0-8fdf2082e526": {"doc_hash": "56a568e4d65b252d4a0668cdf24cf29b0c32e52e4caacb96aa4a77c7053725da"}, "6bf3b90a-4754-4f3e-be24-b5a5e820c904": {"doc_hash": "965b5db9986f900ff1b95848e8812791de3401c2ea6fab103967ef40899eeffb"}, "b87e3821-2fd3-4813-9b53-5ecf6494fc6b": {"doc_hash": "bb78f35bcaac6e855c38500fd43a4b14d426c728eb1492ec994d55b492d0d202"}, "e0e4d2aa-0f6a-417e-8561-416f84c65d5a": {"doc_hash": "d230b5cef4b3f2092d0bdb2ca0a0b97711c056410963dc884f296a6c86c9e080"}, "1d883de3-40a2-4e2d-944b-a2a9f8d7d8f8": {"doc_hash": "9ce7212067e7dc8e6f2a07d0020d33749ba86611e50c00bbeb81202a66d86c5f"}, "a62b6be4-bffe-40e9-943d-1677c315572b": {"doc_hash": "b8da7a82da4743602983325b6b570770350a3005f61bc0b2304d27f49865c09f"}, "f1c4f0f6-9ae0-4964-8f09-807596f8ce82": {"doc_hash": "7c704bb1bbbe3979d8c63275e7b6761eb2bf9c0b1651716458d0cb9c272e7821"}, "0736c0e3-9dcc-4296-ba51-01c3960d5f5b": {"doc_hash": "1cb25355b2cadcd34358ccbb92c95e7cf7addaedd5581bd6f6eb5bb242bd25bb"}, "07875832-6012-4b2c-be23-717cafae3638": {"doc_hash": "437c578712c168c8a741220225fcfdf21c23935d47ec3f07d21b3f20afcb787a"}, "31e36b5e-cd51-4e22-8cbc-a33ba694adba": {"doc_hash": "fe6b42f4cbf2437fe4dc7739476d6778a33f8e7b9d27d842ea5f67c1dcba17f7"}, "7d05bafa-599b-48f2-9f2f-e05b93d7b10a": {"doc_hash": "354b0051057d90dad20c23e77f440739b19e64720e97f0f23939c2c7203422d4"}, "acf0788c-c9f2-4353-9781-6593c1f60cf3": {"doc_hash": "20902c3657ceaf18c3d33f31482093894d59aedb36aa2876d2874d2da2e4fb3a"}, "e8bccb3e-e780-402d-9ec6-cff775918578": {"doc_hash": "08ff5a5c200bc73876de0c26bf3c6229ecc1b0435e3788556fb5560c6da1ab74"}, "5037c7aa-19e6-4150-aff4-fc39138524a4": {"doc_hash": "53fef7da5e416012633ce519b53b544f2a23fdbeb8ebbd204c1ba4d43ba5a877"}, "27f9eecc-bff3-4ddf-aba0-59b523b016d5": {"doc_hash": "33ff182d5e9a7b504cc96fa6832b9c552564cee4d73b8e4b3454f4ea7f56a650"}, "2fcef851-2c54-4e61-8e40-bde6b4026a4e": {"doc_hash": "22d03cfeb89b82b1007af746fd837a95a485716c82ac9061b6457fdb58d75ca4"}, "c66bab98-a7a0-41ac-b717-3cfce2e25f78": {"doc_hash": "02e6ac478e59a20fff83fcf7d3965b82e7d66ca41f3ebf2b745a341e01833b63"}, "fb9bccfd-54f7-4a9d-926d-707627eca7be": {"doc_hash": "5b9e279bb89cde0c2da06eec7e452a94648eb3fec84bad4e2982ee29a69aa1d1"}, "4c00647d-cb87-4890-b499-c0294ac209c2": {"doc_hash": "df410f420daee3fff43b640cb916b56927c6f31f8749c36131d4ffeb3c04f437"}, "db91eb4b-86c2-4d58-960a-c2ecf134d746": {"doc_hash": "56dd34ad912da658f66580a07f9424a574dbce0d11eb70f0108764dbef654fa4"}, "09b11af0-7fc7-4f52-9c9c-93600f0aad18": {"doc_hash": "f5bd1f5cc5b4362a70f5e691eb4a822cce8cca41644a52050f1f3464dacee1ac"}, "d38d7c4d-6db6-4fb0-b0a0-7679bae6abf4": {"doc_hash": "1b1facaf936fdd4458fe78bd924ac90ad2d0b7b82b814928255036033e4c6a89"}, "8fc0108a-f3fd-49fe-90ef-abca3cc98c2f": {"doc_hash": "a74bef0b51e38390ff53ba79bbf06a0f7476594a107b2aa8412619df9504f096"}, "a56bff9f-cc99-445f-92ab-f05261deac86": {"doc_hash": "b2c442c780ba1031a4897876fdbdd7f0be9a26aca034cefaeb499ca004e68dc2"}, "cdc13056-b1dd-4019-9374-9b336ea78aa7": {"doc_hash": "83c1c2c2b72670d595ff76016cd7395b202d2a0041841a81d3923894b90e3df4"}, "19aee23c-c7fa-436e-b912-5ca6509f6fbb": {"doc_hash": "909c99e8f9c84d9eb10b677b4724e0a2282a99353e3251cb5ccf1c99eee3c979"}, "3148399d-5bf1-4643-a8c0-58997b3443b9": {"doc_hash": "0d30786f2d7f4b39e0e33a01212b8c0f66fef5be99c34946cf3760955b136c60"}, "d8e967e6-d19b-4d42-97d5-99c58a92db35": {"doc_hash": "bde0565c78b60ec58598970d4e5886542da8be42f152603f2db3920ce6d7831b"}, "398d34d0-c8e5-4041-949a-7d9cc65e75b0": {"doc_hash": "31d8a8de832cfb28bcaae553b5bfd7bc8eb81ef79ec8b6ed78f272980487b4b5"}, "9c4674dc-d7e2-4148-8177-e5fd88a7579c": {"doc_hash": "091b5e2b9a010e365f976f7befaad7baf1300a06d27628a15c46635d5bb01058"}, "f4482510-2e99-4003-8256-b2005c75b455": {"doc_hash": "5ef6fd0daee2ea05bd99bbdc2e112753843b6d8e56f0b2602319245f440d0238"}, "a7845a33-6799-4a78-9edc-55529349690a": {"doc_hash": "973818c698d5ff86c8ced54ed57d0ae9413ec0ecd05f39e757af775b792c78c9"}, "dda35d9b-615e-46e2-9145-a912d4b3dd44": {"doc_hash": "1009eb0cf37d622eccc0cc6c70f739a45e3ec786691680fdc1c739c57e918f70"}, "a5a23529-c2cc-4063-89c9-f30940b93220": {"doc_hash": "cff6075a7e22e5a7bdbb3cef571e961d029963da8f3c5dc98658ed9d5bb7fdc7"}, "51545695-b5ff-41de-bbb2-85b26b563d87": {"doc_hash": "e539c876e1e4fe76953df95d4639a8ffbb0ff3f303d699645fc651ba5c864b4f"}, "d2330684-3a47-4efd-934c-6e67dbd5eb70": {"doc_hash": "04caf0ab7cf6ce63e8c667e2c93209758852aaf9eed0b402d589964fb8552054"}, "67bfcbb3-f050-478c-abef-05d68aafa0af": {"doc_hash": "3f4f173ab04f35e7309a9340b20d9b68027576e6c55f1dc7214eb5243605b8dd"}, "bf06b587-fc80-47bb-8167-f9adde88f61b": {"doc_hash": "5df8ab98b28da2a11e3b50d82cbefadb755f5f08d73c4631b7b3aa03745288ff"}, "a0ed2503-0d36-45f9-bbd6-98c19c035f82": {"doc_hash": "6560137e52dbb9ed4c189cf96ca706d3c5bf0d328d4ac54a442e659bf1bb7372"}, "6ece8501-e8ec-497c-a777-5ee722e99219": {"doc_hash": "c93dc116fdf8c2a50f9889852d7a52c4a4ad2054c4d4851b62140621413fdaa6"}, "8f45074f-9b0b-4059-9cde-f0414a152747": {"doc_hash": "0d8ef107269212eccfde0acb9b2f58f92c3898f3dde84c42d984b0854d10aa5b"}, "aa6c4ad2-fba7-47f6-b500-a4244720c81d": {"doc_hash": "1bd072a6b67e1d8782ac88c5f1737708d6bc603ae971835fa2ce6a32993b932d", "ref_doc_id": "872ef8d4-258e-4938-8202-614e2f5fd192"}, "47cd1cf0-4179-4958-a962-13fb7a5e9d13": {"doc_hash": "25c73c68691106384c043440fa69a588249a4e326643a718f2608f5f294528f7", "ref_doc_id": "6c452930-e8ce-4d1f-a70d-456d345cdb59"}, "91d4899d-5d18-4ff9-b01b-88346cc86ab0": {"doc_hash": "5eecfe9a5f01ca18405a2d60ff4006ff323c4f4bbcd465abbd8eadcd48c9fc19", "ref_doc_id": "be9a2a5d-df65-4b9f-a951-dff151657df4"}, "722ff829-ad0c-4ff1-bffd-5013c83fbc45": {"doc_hash": "16ca0fdec38ca47fb71d12dce47fdbf8fa594ef1c540cf179bf01224c0f88d17", "ref_doc_id": "8a325dee-bae2-436c-8a74-63b1b31376d2"}, "db2f9b0a-5fe3-4ce2-899f-81e83ca2c047": {"doc_hash": "cd01cb3944b3fe4bd4e0eb558ed0ff12f112721e5b0debfb39359d0d4b5e6ffb", "ref_doc_id": "53b3bdfc-3c02-433e-bb87-bcd0378ded4f"}, "129b9fda-ff30-4023-8565-69838968cb5b": {"doc_hash": "8e2e4e31f850b709a806f75e0a256df107f6e4d278e83e55782dfab90b1ae481", "ref_doc_id": "53b3bdfc-3c02-433e-bb87-bcd0378ded4f"}, "7a0e95ab-33ff-4f65-8e1e-6c261f84af3d": {"doc_hash": "ba4a638051ba435ea17437c47957c4cc01743e01670237d3e3c9f140c64f7d60", "ref_doc_id": "ccc9914c-91f4-4015-ac1c-5eed912cdd2a"}, "b7d38c56-b737-441f-9aa8-ca0b767b6a43": {"doc_hash": "8369226acee7b9bafee245e348ffefcbf83430f6cffbc5971399eceb1fb9a787", "ref_doc_id": "401bc58e-a0a4-4315-8399-27a24bc03db8"}, "ec5a64e0-c92f-4df8-a793-bcc8addd73f2": {"doc_hash": "9a6806c8cab1865b12a17cb82238fac68257fab904409ed30bb2ac4462ac86c5", "ref_doc_id": "35aabd4e-1d7c-433b-80b8-1c40b091857b"}, "02760963-0b72-4c5d-91e0-f2b8a31ff124": {"doc_hash": "7fa905f96e4bfaf0bc98ef6ba8df570bb24c668563dd03415926fcb2d313f0fc", "ref_doc_id": "6ef30cb4-a53b-4ce9-8fa6-0e873a4b07fe"}, "ccab87ed-54f3-419a-8444-3b462aae82b9": {"doc_hash": "0059a1aca734f34194ef2ffe7601e6730ff8e41f3db199999cdb7a98fb5d757f", "ref_doc_id": "b11a403e-52b7-4460-b9e4-2972db2105b1"}, "ab1d6b2c-9c7c-4809-916a-da13a41dd8e1": {"doc_hash": "167961735d5c93d8e46ba9ff85b46c88957e7e4855a5440b1f0326856c0aeaf7", "ref_doc_id": "15fe3296-0130-4541-a122-301ba4b2bf5e"}, "bd2f67fd-9a44-40a5-84ac-159a10acd3a3": {"doc_hash": "a829a73d8d1612d739eaf615a317d5a23735435fc105b7acace9ad9695ab7ce2", "ref_doc_id": "57a88cc4-420d-43b3-94c2-8d981900e282"}, "8bdb51f5-7b46-449f-b0fa-f4bd577afb1f": {"doc_hash": "dc06212738a5164fae5d86a2e780ba91e8fee93eb394520f41b674ba078b4d9e", "ref_doc_id": "ea6b12d5-5ead-4f5f-b4c2-601af8d4bbae"}, "95e9edf2-a3d4-41ba-be30-364c28241a70": {"doc_hash": "114bb6ca14d9cfc15fa1b512912a128fca6743490af30d14630f73a0d414bee6", "ref_doc_id": "bf3c0563-8ffe-43e1-9235-df8d940ed2d7"}, "90e5d357-0a56-4d32-bfdd-634833f98663": {"doc_hash": "4c0d162aac898f67a11dd3b2af8c48a57c0fe975730e2c73c5ba7c3b823690db", "ref_doc_id": "9cea15f6-9e29-4004-955c-d1c33be8ed9d"}, "57fdf6e0-eb50-4065-9462-324a1e3ea1e3": {"doc_hash": "9e1e2859469af28daf6b2ee87f6b628fca0d609166cc9eb364b93baf4a5e4478", "ref_doc_id": "6005146d-2b05-4c5a-8375-14c949506c2a"}, "6cfc86a8-bd85-4187-b40d-8a0ea17ce993": {"doc_hash": "1fe98842159f8ffa6b3ff58d1c150f607362dcc5c024f5083977f3962ff85f31", "ref_doc_id": "c67acc52-cbae-4339-af67-1374ba162a68"}, "e97d06e2-a9af-495b-a0a6-a488c4fb9c3e": {"doc_hash": "af9c0c09c8e57dad9b227c045467d99bb981d150e84ec138f362da0c1b75dfb4", "ref_doc_id": "23ba42d1-4b2f-4ae5-85ce-73b9de9eb238"}, "7589b28d-9a7d-456e-aadd-f3e9e3932a73": {"doc_hash": "e1864188e8022f98eae86967d5f95514b0afad75b3a5c08bdfc92952196c2b53", "ref_doc_id": "ae01f717-c721-40ca-a8c5-a67220297583"}, "d1b72711-dc07-4c7a-80fb-26e0358d66c0": {"doc_hash": "56c41f6ad1f82df5d1f4843dbcc3f5a13ec52833368356d295aaa922f70fdc41", "ref_doc_id": "82a63874-9db5-48e6-8967-8eb4810c918f"}, "6a5c2155-bbbf-4776-a812-0507c23d29aa": {"doc_hash": "86cb97bd7dfcd36ba58a9cb1dcb76d10eec84bd417820778dc44454624718439", "ref_doc_id": "acbf23fa-3f83-47c5-8e0c-bbb1b62d1298"}, "f4007994-d641-478d-9256-c8287512d985": {"doc_hash": "b7c8e03a460fc3bb7b2eb3aa97f5e78d603af86bfc6142b36fb888ada03aaa15", "ref_doc_id": "7b0963a3-dba3-4ccc-b8de-3f8c47a428e2"}, "0cf9d54a-3f97-4e3e-93c8-09d559583e3b": {"doc_hash": "72eafad249aa6342dd06bc5887dda6cdab28e2252aeda70b8f8a84d0f203f307", "ref_doc_id": "41c6c7d9-f98e-48ae-8218-9d50115c8a0e"}, "f0f58366-dcef-4d50-ab95-1800de1870c7": {"doc_hash": "7db6039b8d692ef6ad16066b62d02a16c6f186e038687411a7d09ccd489f3269", "ref_doc_id": "636c6bbc-5e53-4589-b722-5c4f75386c79"}, "4bb27971-31ee-49ed-99a3-1f7a6fb1a640": {"doc_hash": "a99b61c7eda688c6ccf5680424768ac069a59449504ef35aa2eff38d4743b664", "ref_doc_id": "aea235bb-13e9-46f7-b7da-573c9c366178"}, "73093360-c107-4c8e-be41-988506788026": {"doc_hash": "9e45017c014f65c40ba56439b3d528b612e14965108f79a4eb102e51eb8e3f72", "ref_doc_id": "c2af55d6-1780-4584-8160-b99051685021"}, "6ee49bfa-fdca-4983-8514-efcba7a9474a": {"doc_hash": "d770ed61a9957791cb3ba2ee11dd354a1dad2062c0b251e3e25c0b5048cebd24", "ref_doc_id": "bf104b3c-3a1a-45b9-b21c-9f1d93c58355"}, "73b84d2d-305e-4f69-87dc-97f82240e950": {"doc_hash": "dd2afab960f0cb90c96f984fe79d86678991c2a7d85503e678e061aab54c80ca", "ref_doc_id": "aca8fbae-a1c7-4b3a-b5f2-bdcb2eba9009"}, "7644c7ee-c58e-4b44-8d2c-0052b1d16acc": {"doc_hash": "f8793b58234b52632d4747215f2593c396cc60e60fee01279097448b3eaa2eb8", "ref_doc_id": "ed4c058a-0301-448c-b37f-bdddaf17940f"}, "3a962233-af0d-497a-ab83-dd4ce9703fb9": {"doc_hash": "1b39397dd86ac101b9e3a411572696f2c43ce072ac6d385791a8b0e9bcf5cede", "ref_doc_id": "b27fa1a5-890b-4fd1-ae21-e9a250b15937"}, "a486392f-debb-4929-bfd3-cf4cf38cc736": {"doc_hash": "a51d342566caa2e5467b13c32e6b34a3e5b6874b3c69914bbbab2141b777ea98", "ref_doc_id": "f8c99711-e4d4-4239-b7fa-229b31fa04f5"}, "af81c920-5fe2-477a-a534-1e541592b8f8": {"doc_hash": "f19702ffc4fd72e6d443bbf1b01f16c1caa37304efce544677f9771118f3c42e", "ref_doc_id": "9ca8ca76-ec9e-4ccf-a236-7673a97ef40c"}, "38b13c10-2f2c-4e03-88d3-224760bed133": {"doc_hash": "6ea9d63e8db8b240d0bf74be495cc4371910cca1770f8e3c4c39fdbf1e862347", "ref_doc_id": "677d9d0d-5da0-4d14-bcb7-84cfbf47a95b"}, "f0a3130c-7c95-4b62-8b86-4bc2b513e35b": {"doc_hash": "cebf47d16d29738630feb9328d6d641c4e5cfbef55bbcaffdf3a7c760598d477", "ref_doc_id": "8e9f8615-3ab5-435b-91c1-4b0a780c2b76"}, "e3596c42-9381-4a2d-8f75-1f0bddfd2729": {"doc_hash": "b45a67f9505ecd6c1cf7375589ff7dee91d5924ccd36575bd36b3fec31f0a78d", "ref_doc_id": "10e3f926-8709-44cb-b391-50db5c8e143c"}, "fcd86b08-f072-49bc-baba-d78d99e0d91a": {"doc_hash": "0f69e3d3707c1b7966afcd601e6fb701ba1c732b0e6527aff452282c4f8b3f36", "ref_doc_id": "c0a29749-8a8b-4c45-b04b-e8096be81f84"}, "fb4caf81-6413-4e20-a302-77ace40b19b0": {"doc_hash": "64bf261c1e5b1ab726ba934d768c26388a1f8c6598d1811409dde0d8b9696af9", "ref_doc_id": "6f08a91d-4c9f-4a2c-82b6-5a04fc01d45f"}, "7050e128-6444-423c-bb7d-d4d2768670b0": {"doc_hash": "917ed6cb59f023bccb4e2ec8eb872708c2f8cc308111e1670db0f15699621b4c", "ref_doc_id": "cfd7d51e-d356-41af-ac54-c31e1cb4feeb"}, "57df07a1-42e7-4a1d-8e27-110626c16346": {"doc_hash": "6c7e3a5457473ae8d33017b59752288b851c9c96da30936f2dc1c055217358a5", "ref_doc_id": "c13dbf5b-bd4d-4035-9edd-519726d18abe"}, "7b3437a7-d8ee-4c5a-ab57-cca237b89716": {"doc_hash": "9a3b78c6af13979d0bf43463698275c7de86d2811b24aa45de0bbcd874945d7d", "ref_doc_id": "4cdc2664-e16b-477b-a522-f5cebf19d857"}, "e65c0324-86bc-49c0-aa01-31a8ffbb4fd9": {"doc_hash": "edf61c3923c6afe3f822ed86c61461d22cd6299161cedfe89b9d35de0564a41e", "ref_doc_id": "7a060fec-d950-4f8e-9495-a7e7080175ba"}, "5a3a594e-2952-4920-937f-48a4a548ca2b": {"doc_hash": "ae7dfebedc0a1c89c0a23eeb8f31d6636410231dde4620acc36244e2f5a5fadd", "ref_doc_id": "808ae3d6-7097-4f9e-aa2c-3ad4eabb21bf"}, "0cc9cb88-d1bd-4f64-8b6b-082737523db1": {"doc_hash": "6105dacd8028f05d2d3f1747f212ae8895c24f5db34e298e3069b010bdf7e5cc", "ref_doc_id": "e727d45f-449a-4514-b354-33b447303cd3"}, "ae1d8cf0-7d96-4113-8fc4-404147d367f9": {"doc_hash": "383898c77c4a06fe9517fcce0e3f139d1e2cbb3a08553e0fb161bfff36882371", "ref_doc_id": "f43fcbd5-c462-4dfc-a915-42f3fa8176b4"}, "aedd7d05-8460-40d2-a1ce-82b4e9410a4a": {"doc_hash": "3cdaa9af28ff3a9e7ba706b94a154350b94aeb59f59a88031ee33f4bf2d06e8e", "ref_doc_id": "1d4258c0-aa92-4041-89ef-cca685bb131e"}, "d5070b6a-fd70-49b0-a309-bad8b3054589": {"doc_hash": "a6b3b9b50c1457ae7ac76af02b902151ac27d9350d5c088f6892c28b40f7dee7", "ref_doc_id": "857f82b5-8ad0-4cf2-8e02-69774d793b92"}, "5b998088-fd5d-4eab-8a5c-ce6994dec80e": {"doc_hash": "71125a0dae9e79360493b7a116ce2e281dd7f0eb3bd832791d57527a351b69ae", "ref_doc_id": "8a0af2f4-b313-48ca-9ff4-d4847d04bdad"}, "09f1454f-a858-42c6-b774-ec72a022b03b": {"doc_hash": "430ce7b232d90a52a63308ccf75bbe4ee2ee52833b0dd32679ae028e59b57637", "ref_doc_id": "9084c239-97a5-4025-8232-8ae8334ffb01"}, "e22ea816-f7fb-4cf7-a61d-73cdc9bed4b9": {"doc_hash": "3cb9735a5ae39c0ec0fd3cfa77294244c1a94effa8fa2a4f3b0c6eef0ebdedae", "ref_doc_id": "dedc2df8-f2d0-4c66-ad2e-f15456eb0976"}, "a4a162aa-9d8f-489c-b2d5-420d6a58ea44": {"doc_hash": "e268535f49c4f20f3a89bcb85143c6ee88e934698c3cfc117080a0ae7a6bc92c", "ref_doc_id": "4be285d6-bf6a-462a-9f2b-6d10c3f78ae2"}, "2de6421e-7df1-42c0-aca6-01f429a0c282": {"doc_hash": "36ba5c76e55a1a0663e6572861c793f55abce81d6c0490a162e4a10597a1e3e8", "ref_doc_id": "3f3730ac-0a97-4c45-9d85-2d95112152f1"}, "92279790-556f-4c7d-b2f4-ddd2da48956d": {"doc_hash": "1d23593b4bccc6801b3a560149f1b0c62030e429b41f7a9b2b22cee4a66f1bc7", "ref_doc_id": "bf00b852-4c8f-48a4-b691-fd5e5c81efaa"}, "dcff24c1-4094-4484-96ca-dc58fed7c202": {"doc_hash": "7a93fefa929e8fcec26b50e38acac72c28972acfc05de988fa3dbbce65d7772f", "ref_doc_id": "865c5c39-5f2c-4cc2-837e-8501073e823b"}, "883c5cd5-eb17-49b9-8757-9f7a2767bb85": {"doc_hash": "fc190e2f118df0bdd7da907eb8fdee47f5f423efee2f3503c5da8bad838e3d58", "ref_doc_id": "8ef92be6-42c1-49c8-83d0-7028df64f103"}, "56010cba-ef34-4ad0-b7ec-4fad74801621": {"doc_hash": "658af862b6ad3b6f6cdacc0de8a7f374d82d69f4396a7df21020432e73db8e3f", "ref_doc_id": "ae35cbfd-18d9-45a2-a1e6-726cb34cdb89"}, "6c94ea81-a19c-4dcc-9542-92fa9e1af13b": {"doc_hash": "8a4eec43850b1ae5c72e4fe1d26a739a2b8aa672fb54b7390cc96350644da87e", "ref_doc_id": "93aefc33-8552-48f0-9001-59c2021e7252"}, "b87cfc3b-2820-4096-bb0c-562b84b8b66a": {"doc_hash": "f7c5b32cd316c867f8159a2bb8fbe16cd89be88df1dab6d5dae141d25b1693d2", "ref_doc_id": "33afcc55-9efe-4401-aeac-b17fc0408dbb"}, "4b1fead6-662b-4d2d-9c1c-ff554597ecbc": {"doc_hash": "d662725189e6010da7e4285e73a882813348d4c2a7f77f3b69f675c7f378dbdc", "ref_doc_id": "0132562a-fa53-4779-952c-78a6dec89197"}, "7a9b450e-845c-407f-8fab-83c0e40d1392": {"doc_hash": "1740b866b9647c82e0ffece1d66ac7b7a55b60362f1763c92c8fb282adbf6ef9", "ref_doc_id": "2c6e37dd-bff2-45ec-b8fa-87e71094a571"}, "01c35eef-54c7-44ae-9454-8a7341600401": {"doc_hash": "58e094148a1b409a7bb7580f4d7bf88b476862cf0c8bfd9592ce3a087e9de898", "ref_doc_id": "4478f41e-58fe-4a89-b5ef-23f03bcdf3b0"}, "fc89f6f5-838e-4c2e-8b21-1596177f7ed5": {"doc_hash": "5dfad314c25dfdb03bd5760b91631510281bdffd8797351a8caf8ab747f172b9", "ref_doc_id": "a290dc7b-7570-4d3b-830f-66fb90e1a0a1"}, "d5742f3a-79cf-44e5-b965-69a7f301cfe8": {"doc_hash": "3f5aba3370540963440b54a1cb94e05106487fe2d00f21562b7a5e0acb9e5bd7", "ref_doc_id": "196f922b-50c1-4760-a16a-fe35c10f2036"}, "3bcea7f6-48e8-46d9-9aea-b655541ebf80": {"doc_hash": "19425b8301218b856a44d3b06197877a0324272ae02e5731390add5b63b157c0", "ref_doc_id": "1b2d2eaf-65ed-4e82-8e28-5fcca945e805"}, "7dce6ca5-cdaf-4ef9-a42a-8f79e8863156": {"doc_hash": "745479fd17640d19706559d006e4269e275a1768b72581ebcc1d999f8829b717", "ref_doc_id": "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49"}, "dc611a1f-cef2-4cd2-9ed2-557a8e71f19a": {"doc_hash": "ca8f0b308099a6be77a2fed5c1aebac041108767900cc4555d38ae8dc52b9a80", "ref_doc_id": "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49"}, "2017a57a-80e9-4514-a948-526d69b3eef1": {"doc_hash": "4c2c5a59421e59dd1bafb9c1ab8602211965c4cb457f60c918a4204c39e6b3c1", "ref_doc_id": "25717d12-9c3b-400e-beaa-4d89ce20ffa3"}, "2221091b-0764-4bdf-9558-6e915a965431": {"doc_hash": "ce3cad806509637836906a34225609924396512c47797415e8987c2ae3ea57a6", "ref_doc_id": "25717d12-9c3b-400e-beaa-4d89ce20ffa3"}, "82f4cf3c-56c2-4bd6-af30-106ea0f98bc1": {"doc_hash": "a6967ff7e88cfca8c128343c9ea93cbd4dc618c4bc87064359146e552d364d67", "ref_doc_id": "8d7d8390-b3bb-47b1-9f1e-ebec3e93a31c"}, "ea9121be-f4ad-440a-9d6f-73909b7b77e7": {"doc_hash": "8b52b331e6917e317833b737a77190e6e1b5265a21d270f9ac3e9e4b33db8e69", "ref_doc_id": "a15bdab6-0119-4c31-9c78-62ca3508ac93"}, "a7547a18-9a8e-404f-b9a4-1b38dc90ee1e": {"doc_hash": "1039c27068db8d0a0114155819c6c77ee8544d2cbdf9fdee674b29b9dd9150af", "ref_doc_id": "938bb9da-7f9e-4128-825c-c3b7c72feee8"}, "a36bf35d-3b7b-4538-a20e-fff523efe52b": {"doc_hash": "44d8a91a464748340fb1a1a8ddd40db9ea8ecafb9f374ec0f62cb79e51e52e33", "ref_doc_id": "08a44331-c855-4b58-838f-6cda76f8d746"}, "abf3ccaf-f22e-493f-8a20-f7582e99f2f5": {"doc_hash": "23b105ac206373df586a927c8576517a510e1294472372ef8c4707b725579231", "ref_doc_id": "db4969de-b28d-4c8d-8099-a2151eab112a"}, "cfd9f44e-7338-42e6-9261-1d46f105cb41": {"doc_hash": "cc3e6fa765b9d9387c47ab43cffacb5e45fbbcc770cbc937fe318e8467792cf9", "ref_doc_id": "a8c6cbae-50e7-4025-9100-3c240edccfbd"}, "91ff3508-355b-462f-98aa-1ab8d1f0346a": {"doc_hash": "83668a548a20cef53345983c106f7304b2c51eb044b061a5e27cb6cd110fd2be", "ref_doc_id": "ca8606f7-97ea-4497-9b35-9ab3fa82b2c5"}, "504f1590-af2d-4af2-9093-5f57ef7b4d69": {"doc_hash": "e37e3bc1cb2a848f835fcf213eefbf6a5c4422907020f34cb5a35daaa2a7dd20", "ref_doc_id": "412471cf-e7c0-48d2-afe4-52fcf3a849f1"}, "9cd0e18a-200e-49b7-9d14-cd7fb1f4b077": {"doc_hash": "d36bd1e7d01eccf9e258fcaa7fde45281a3a9105fd27f51a227e4168c7fc20b8", "ref_doc_id": "036fbd6b-d0bf-4efc-849c-44d5b0b03ef2"}, "963b9335-f703-419e-b1b1-63c0d73d1b00": {"doc_hash": "64b29c3df8d3cac8143ee45281a2a095a6b9af05eddbc327621dbcb44c958f74", "ref_doc_id": "6e5fbdb9-ca51-4ce4-b666-86b7b397106f"}, "d9a25a0d-37f0-4ece-9e8b-ec16bc66517b": {"doc_hash": "d5324c4818494e90fc32a4efb94b54422a61d6fbe58cb4f5268c12863c3a8e12", "ref_doc_id": "dd838098-9af5-409a-8c70-290aaf7280b5"}, "5492a253-e954-4b74-9c9e-4b252b5f953e": {"doc_hash": "c37d9a1d5251a7ed4fd4ad3fe988fa22b2f52137e2036d5b890be2de8eeb0b46", "ref_doc_id": "d918163c-84f2-4162-8979-c5d09423384f"}, "4f49ca8c-b920-47f7-baed-88ead3f83535": {"doc_hash": "addfdad42f7867e193ea0e91bab286d4b36592a7274470ff75a342aa935b51c6", "ref_doc_id": "d918163c-84f2-4162-8979-c5d09423384f"}, "c72807dd-b189-45bb-a244-85accdc4bbcd": {"doc_hash": "8456ca63c9140f92ed1618f4e33907d103036af20748c13426bf9acf77504c64", "ref_doc_id": "f584b482-9f4f-402a-acf6-e13f6a8ad0ac"}, "aeb43029-42fc-4583-9438-ac89bf9baaee": {"doc_hash": "3c55a0769c586021fc27709f2bc5b9743d8285be9b89f7423cec6d85655ff1f4", "ref_doc_id": "f584b482-9f4f-402a-acf6-e13f6a8ad0ac"}, "40f04d37-1e61-471c-b3e9-3a6134ea2041": {"doc_hash": "e74c921fd98829c87e58da276c31500de232fc756bd8e9894584ba5587ff0b39", "ref_doc_id": "5fca7e88-5296-4f43-b834-0c876023e317"}, "2f3b6a35-28d0-47b1-a322-bdd051ea6b82": {"doc_hash": "8394dd6008bbfe93782721254919a4a2cbd449598442a716c99a3274a26679c2", "ref_doc_id": "60ea2c42-796c-4087-97da-d7f98f6516b4"}, "f41f21be-309d-49db-ac28-860eb4231de6": {"doc_hash": "10d4b665cb9c1366c507b432aef0887e6f9cce4b6ea7270815edde9cf9c8a799", "ref_doc_id": "f38ab062-5919-497a-b970-88809954e5c0"}, "b9176d00-3565-4a2e-a0c4-d301d8c3101f": {"doc_hash": "963665273b541911082ece165ebc191af81c3f417a15e733a80c229a7381ee21", "ref_doc_id": "7f94c5fa-595b-4c02-9d66-136876f1c1dc"}, "d84adc8e-fa68-4505-8564-3e96dd49188f": {"doc_hash": "1b72687e05d98d0aa1ab1222ca32e65f33c16087f900e4b34a4191d4ee6a3073", "ref_doc_id": "4a550727-a7e2-42b4-a226-b8ac59004429"}, "b00ce97e-27b2-404c-8f40-d3f31c71d227": {"doc_hash": "65fd270262d0abf2994bb29b2de0041e0e120879ca1f6e308f5c5cf8b818e993", "ref_doc_id": "0dc77923-7625-4a11-a9e6-f2dac5886b20"}, "321ee683-08f0-4634-82a1-aee16a4d81d9": {"doc_hash": "46ee5ead54fb053e78ef56d1c473e4e663d3cfb5476a9a3b0968b0f8414ea8ec", "ref_doc_id": "afb7ded0-00c6-499b-a1a6-ded9bf8bfcbc"}, "2626ec8e-50a9-464d-9ec1-c8e415db391f": {"doc_hash": "69ccd68adc9c1fbe205e6829c61339c6bd66a29c70a8b0b9bb3da5881eabc138", "ref_doc_id": "d988a062-9cc3-45c5-9034-cf08bdb6c13c"}, "9c5562f3-4752-41a6-9c4d-5ed45f5b1f03": {"doc_hash": "eb5f66210aa57013ce12cd393deab67b372bdaed75c4e1b8fe80328b36b78ce8", "ref_doc_id": "fd5e876b-31bf-445e-8fc7-c7789ddddc5e"}, "97904b3e-b1ce-429a-8b6e-43bd1e6cce90": {"doc_hash": "5b5b57d37aa373eeec06bf84b1769166562c738b89ded26508d781a033551c68", "ref_doc_id": "1e0818a2-f243-464f-93c9-09a9acf4ceec"}, "c6093198-8014-4b6b-80bd-479baba3dc13": {"doc_hash": "7a6982a2e6ecc8bae11d62a0cfe84ef77b8ec3a48f9377e265f6dfd9fdd8da06", "ref_doc_id": "9d5561fb-e7d3-43db-a8ad-da149e29f3ac"}, "3b859fdf-c613-4a5d-becb-97f2baa5bfdf": {"doc_hash": "ac149a5293f2d0811cf669303f060bf430605e52b0617dc2c0e835c4290e8ea2", "ref_doc_id": "4801b7df-eadf-4362-8b38-fd77949fa7ef"}, "9a0fbc80-209b-4944-a7bd-f9530a492411": {"doc_hash": "faeb7f289ec465dbae7c7170effee77897a049d00ebcc58228f3c5c4d7f4ca34", "ref_doc_id": "5f6e07cb-1b9d-4e9b-8665-1a10aa497e6b"}, "f1df14cb-d975-406d-abf4-10edf62bb543": {"doc_hash": "987c0da063d7564eb9f7b901ecd1a25961fb3cf2c81c1d20ae0bc9e24d93ad4c", "ref_doc_id": "cf31067d-9470-41b6-9815-3a875afcec8e"}, "8db1eb7b-e656-42f0-b0a1-edcf7bbc54be": {"doc_hash": "620603ee3c604ccb32c0150bba8948ed29f1421d3533df485e8a5319bad09ca7", "ref_doc_id": "ebe5086c-f442-4c1c-bc90-0aadea8e4832"}, "ca3a1fee-3e6a-4313-8349-60e6ce97b134": {"doc_hash": "5be5de653d99c48528a5f95a4fdf9de8fc06bd9b540defba3417bec2c205d964", "ref_doc_id": "73aa0fc9-d0ab-47b6-9930-16e9081a56d2"}, "377334b3-d4c7-4b61-a604-d4e9ec66a8e9": {"doc_hash": "a643974ec0778ddb88cade9a3bcdeeaf6eae5f4c2f581a7d3ac0eadfa362e3bc", "ref_doc_id": "4d1b669f-bc33-416f-8fd5-76e7aac65a56"}, "9185816a-0f9a-4b10-aa66-40665608b35d": {"doc_hash": "ec2bc6e40f9977fe9c06585cdcd4ef7429bab8263d28ef4838c792711339a0aa", "ref_doc_id": "a6c18d11-f556-479d-b0f7-dece37847285"}, "a6885c31-23f5-46fd-a900-1dad88bcb328": {"doc_hash": "408cb4c59d2b6e5b00296121d6a74c1b903b76bd09cf8416df0283089bfd2ab5", "ref_doc_id": "548368f8-6d86-4734-a156-70100ad0f5d7"}, "1554b803-f305-4c34-ab01-a6c30ab2b714": {"doc_hash": "29cf23eefe964727e31f73d4758158faba123b8991e942c9dadbc840fc82ce30", "ref_doc_id": "1814515f-8bcd-4920-b294-9fd6e6c2fd3d"}, "b7219080-a85d-4528-bccc-7ddfb53d099f": {"doc_hash": "84fa7f8a77835a282d9a844766cc9a51df413756fe2df0462c9b3a97f5e06930", "ref_doc_id": "2c0dc2b2-19c9-4cd7-b818-0d4a80732e4e"}, "c080fbb6-7994-4711-ba2b-eb197b4625d6": {"doc_hash": "6bb2fb862919d3b2321b13ad6779541adcbe8d70f803e0e1cd98cbac3ef9c033", "ref_doc_id": "55bf9020-47ad-4353-94be-b924faf49ab0"}, "a6971a50-5080-4c40-ba3f-097585384bd9": {"doc_hash": "2d8d0cb2b68f6cc946afdb8be60dc4d2673b2ce8d64f55964cae270e920b2519", "ref_doc_id": "6ffcde50-a660-42f1-9cfe-2fa9f8854e9c"}, "f6af89bb-5f46-4be0-9b7f-775bd6c460f5": {"doc_hash": "07c60b5c92b687af3ab3ebe3e70d0573f0eeefe098135df190e77f80620280fe", "ref_doc_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45"}, "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6": {"doc_hash": "32d6aab4094ab2b22d15b7904989b8f599448c7317ad708d63c09057091435a5", "ref_doc_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45"}, "313f3963-f4df-48f9-b8d2-0a394602dae5": {"doc_hash": "21c97bb41b3a0b4a1fdc4891559de3e3735d5898b31967d7edc12b46e390a89d", "ref_doc_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45"}, "4ab03fad-a398-4556-802a-340af97448ea": {"doc_hash": "1e19ae8e614651989b8555a4f407a1ba7c6ee8af3b1c9aa3fd90f5c3c7514192", "ref_doc_id": "c9363ea3-4760-4b0a-8db0-bc5ecac49b90"}, "29e955d9-c95e-4963-a8b7-99185cf5787d": {"doc_hash": "59d3899127ec59b2dad2308e3b83947eec31c284f5b332a2a564e882b404efe7", "ref_doc_id": "0fb90c6c-f5eb-41e2-902c-6215e4e7b30d"}, "41fdc6d1-0808-4edf-92ea-82c85a206af9": {"doc_hash": "cbc86d356adafe622a92bb587deedfd2d802626b1c43825919b18ce3d2f557c2", "ref_doc_id": "fbafed2e-4d79-44a6-9fef-0952b0880cdd"}, "09f1a3b2-7eb1-43c6-b958-10e7330d1ca1": {"doc_hash": "f21a03aae0d2e4dee2d910c7d5d3ddca319178277491243d6efd15d15c48fc82", "ref_doc_id": "71e0efab-2dd6-42de-8ac3-40d85ec7a8a1"}, "6f41845b-1a4c-45ef-8588-90daca741815": {"doc_hash": "1928c9e4038c5da87342d7d7c3849a86078e86f76b765249507ecaf860628481", "ref_doc_id": "4aa0c4d2-c40f-4bc4-ac5b-9f184a859a2a"}, "b2f98747-731a-4e87-96fc-33b2d0f086b3": {"doc_hash": "8d6c935608b64815a4ae3db659e8b92844390ebf2dcd4d55a7cc65daf4f4d0fe", "ref_doc_id": "3e6bc9df-d7f4-448b-9da2-f62b36c681bf"}, "7b80840b-f548-43bd-bb23-762345b194b8": {"doc_hash": "265466b486b8314358c8fccfa2315df568db8f3dcbf2112fa3c333d60a6c9865", "ref_doc_id": "8763d56e-cbcb-4835-a47b-a38a18d84cfe"}, "96510040-8403-4943-8488-458eb5848cd1": {"doc_hash": "660bdd3206ec14cc674c4887a21f1c98e95fdfe6b1384588380be4aff993a206", "ref_doc_id": "53f24a68-56f7-4d4f-b7e8-8b90ab177949"}, "21b96d08-a285-45bc-8737-2edddc26ae81": {"doc_hash": "b4f631517ea6fffe0f591a5efcdbbe68016d73cead6a05dfaccec6b61b527c88", "ref_doc_id": "7f0492be-8274-4263-a322-e0bccb9d47e9"}, "d5ed1225-cc76-40e8-bd56-d8531413bb18": {"doc_hash": "cd7aac4180f0cf024b211f8d5bd06821f7e18b82832c4fedc40a155935d1a93c", "ref_doc_id": "5b016d73-7141-4c41-a39c-d697f7851907"}, "9ab804c2-f753-4447-bc52-5ba44aca92e6": {"doc_hash": "246eedd47b053561d1f018da388ce73893002345b1a50aebf5ab07dbfeae9d04", "ref_doc_id": "cc0a82d2-c704-4131-ab48-b0b955ad3c41"}, "f87ec824-70f3-4bbb-874f-7a4c2b3ea43e": {"doc_hash": "7afe73d8f445d8e365734995b7528c742c712b8c759ff79033a68d35472c2f5b", "ref_doc_id": "f62e4f7f-648b-4e03-9187-6839707f12cd"}, "e2de0ce7-374e-4b64-ba9e-71edf8da9db4": {"doc_hash": "2a06234e50509dd4b8ed970c24ca39cb133018c94e5501ad13b5a822056f682b", "ref_doc_id": "a0854176-05df-4eee-a7c3-01a3e063d94b"}, "ba268173-4923-4531-a93b-52ab62133a27": {"doc_hash": "2b46d8fc1f97462424c46b2c922a433e4a608b5d1d6495295d8637f294f04155", "ref_doc_id": "2b1480c7-567d-4f02-9aeb-b748f81e16dd"}, "1e40b9c5-f55c-4cd0-8a14-7eba0a4811b4": {"doc_hash": "05347f9b607d7b5b9a1e0af4a27128a35c2d9180e134cab57e9f4b4dafe50bd2", "ref_doc_id": "586ea008-5928-4bda-be9a-20ac71716c91"}, "d285894f-31c0-4cdf-b10c-6699360d4000": {"doc_hash": "03416d2a4daa7ce93eb8f0875da9ff2f3c6810207f271d7d806573ed59a2d93f", "ref_doc_id": "2491524a-8284-453f-8519-0f3eb9caf79f"}, "9d682282-0a81-4426-b4ec-f73157e310e2": {"doc_hash": "f96033ab5efdf06556b15843d9b0b48bce290932f99a8442b7aac31d0e31d636", "ref_doc_id": "c7e60fc3-46e0-4f89-ac29-7f7006f9bd1d"}, "d00e257f-df41-456f-9ad3-b992708af53b": {"doc_hash": "6e53a730f24707b1ac366407716581678a4c1133fe42b9af79699c2421503b37", "ref_doc_id": "14e8aa00-198c-49c7-bf22-6fa8c808fb33"}, "9a913742-64bf-4de6-b65a-402db0e165ad": {"doc_hash": "21290c73755b553a3464540fa20c5284f2ab22be271e8162e8db2fcee6f3f60c", "ref_doc_id": "4104afb6-caff-4a1c-8d82-9a2acc3692f7"}, "1b5721a8-d803-4898-9b2d-9ab4bc8c44a8": {"doc_hash": "d9d349e8a14f8563576e879a1ea4bb679edbfbd55e5c137a34c3de1de4b6dc27", "ref_doc_id": "044b3ffc-00c0-41bf-8a29-52cdeb51805d"}, "e3b6fbc9-160c-4295-b386-cd95dfd151bf": {"doc_hash": "f91f2a82b61c5e3e24985e064a760f8076459bfa5b4ddea4f50c341735f6591d", "ref_doc_id": "3da8c214-6c56-4f2b-a3af-133088937f5d"}, "3f46b974-6b8a-4c39-917f-5e935dc626bf": {"doc_hash": "2e027bb254033dc8eb281e0095a4bc285138ff9bec47c6b1e34a9d4e16409a79", "ref_doc_id": "2a91625d-339e-416d-8a11-94b6d706db59"}, "f85c8a3a-f581-4cfd-8cca-f8d8f6a0c308": {"doc_hash": "9ccb5e2dfd17a955cb431898b0b9491393638a92c71370fe8195aaaa3cb0fef9", "ref_doc_id": "e753edda-d35a-4629-88ff-98d1ed4a9c9e"}, "eeff740e-a466-4136-9670-bacfbca435d1": {"doc_hash": "29331b516c60a2bbbce9ad539739024037c2916c1e37ca9ccc49126a0ee24cad", "ref_doc_id": "4a097f88-3f25-44ed-b185-c359b755fea0"}, "665f7a55-f167-4310-9c81-30b4332bc1e1": {"doc_hash": "34dbe905bd8cd3076bab26a2054c66e7c0f1441f8fbad50f541c134eea85df3a", "ref_doc_id": "fce3dab9-6d08-4d2a-806f-e550646bcba3"}, "847984c0-1c58-448d-bcaf-c1a6cca66b97": {"doc_hash": "3764c909397be22ecbad1d36fa8d80a75a2ff6b1ba352dcae134466701907dd1", "ref_doc_id": "ab5e71f2-a22c-4ef1-b63f-e36d45213fbc"}, "cfdae8d2-39f5-4d90-9296-e79d09883b44": {"doc_hash": "c077c9e6574ad812288d65125b8e5b2781c2e36b6b0e9772fd562e2b7cc7d042", "ref_doc_id": "0c0d1f46-edbb-498a-9424-a778ea9fb8d9"}, "28939f44-c2b7-4377-ba04-beb5abb7cd40": {"doc_hash": "526ede1ab1a6b15f8d1e9e1e2db18fd6d4fdb841edd8c1dc89dd5fe0d0021a1b", "ref_doc_id": "9f6124a3-3ac8-4471-939c-c6720096bc90"}, "36a9448d-d880-40f3-a5e9-f6e43dc7fd94": {"doc_hash": "1c9152a7a58b127ef49d4cb6e08cfa34ea4aa5557914aedb7961f29cd07a4ddd", "ref_doc_id": "dd34ebb1-fb89-4dca-af88-e6db6d601576"}, "fdbe887a-d2e8-4fb3-a99b-f11043af99ed": {"doc_hash": "578a056f1fc403189d434eb9428c0c12487890aa85347507770f5bf82fc54786", "ref_doc_id": "2fb79b6c-5972-4d7e-b372-e977eb8218d3"}, "e40849a5-2cec-49a1-a86a-2cadb3966838": {"doc_hash": "cb31f64e8b18a433f123670e86fca3d843b743457144342dc734371fc479aa5c", "ref_doc_id": "f3087a7f-38a6-4154-91bc-49ac1edeea43"}, "8a00abcf-5e48-4eb3-9177-a4741ae5add0": {"doc_hash": "797f3e79ef3d45e7dc1d61969384a20be5c2b364201de648cc04525478365433", "ref_doc_id": "a16b7085-280f-4e56-9201-48819a2c6bbf"}, "51700a4b-f588-4537-9d36-ab55949669de": {"doc_hash": "07f395d593a339235501224f1198f7b348160c1666a79f785d05b39c8ea0e454", "ref_doc_id": "f5b64b4e-31d3-4958-92a4-da4b948e9f15"}, "974873d4-85dd-452a-9049-665c5b869e37": {"doc_hash": "159ec61e7e87c20e3ce21d2e0b4122ee3bf0667639fdfc1bb89351509e537a00", "ref_doc_id": "a0de144e-aa87-4146-ac32-ca455b437956"}, "4dc2fd82-4aa5-4496-93be-c0ef71d2b0d7": {"doc_hash": "1465c780c656ba8f74a149e68d7e4bbe49c4a0883b256b88b84497d68b0f185a", "ref_doc_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae"}, "1f35d35d-f537-4655-b05e-691dffc28444": {"doc_hash": "e97ec60f22f029211e8d27cfdfa22370899b490b08c44d5331ffc1316edddc11", "ref_doc_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae"}, "deb490a9-d318-4668-a78d-649a5c2024d5": {"doc_hash": "ee405b08ae6484523eefa51beb8087ea3d51316d23ea1e896a48aaec7a55e0e2", "ref_doc_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae"}, "a358c8be-2e91-48ef-9e31-3979aae4b72a": {"doc_hash": "cdd97095bba7cb5307dbb6b112f21f6dbf8b5306ad48ed850be19f1d3f301ae3", "ref_doc_id": "5297cf74-3357-4ca0-855a-4963162db071"}, "77351c54-362e-4f53-84d2-32b459567772": {"doc_hash": "390b80d08913d1b843703debfd6e9e20d4251c0da8581fada012e20fcdfe9ddc", "ref_doc_id": "a215c4e9-ae8b-4759-8d0f-829db92f8b7b"}, "d778c8bc-99ba-49ed-bf5e-bf4d3652015c": {"doc_hash": "e735a5396a5660b50c2f80ea2fcb3c3f25792ccf1dd5db69386805cf015ed17b", "ref_doc_id": "f6b1cafb-0382-4866-b256-f6b178ab8dad"}, "c70c16da-ae8c-4978-9e00-8b1201faa419": {"doc_hash": "7e2ffef9c7800320926eccafe7ca61c352f98bf6fbec105ca9608845eb75d9b5", "ref_doc_id": "8ef63664-9657-48b2-b82a-02950108b47e"}, "5ec7191f-a634-460f-888b-0f55fa206626": {"doc_hash": "e9739dc4859777a5658760d9fb4bd6d7ed2b89a876f3e2c7abb16f328121db6f", "ref_doc_id": "2b8122d2-80d0-4831-b434-8c376ac0f14b"}, "3251aa52-bae0-491b-abcb-690a91089182": {"doc_hash": "80bc34b0925f2047b971b53fc84e9d4a3efd0e0930083fd3b1752f00d0ba0538", "ref_doc_id": "f1c4741f-2e31-4ffb-afd7-79efaa6513e4"}, "290b09a7-5f01-400d-ab67-55916930e336": {"doc_hash": "f72e8e38213032dde9958f680d0f7af415ea03cf7dc6d841dc5e1fdcf2153657", "ref_doc_id": "38463957-4d24-4a2d-8e86-7cac79b415b7"}, "6ae19bae-2258-4dd2-bf22-4e146bdf10a7": {"doc_hash": "1116534535a213e6804c511c8255461a2f0fa4d3c80113e634e1ba699c7fbfac", "ref_doc_id": "17722a28-b126-4ad2-bf9b-9b8df004cd16"}, "244cb074-d452-4bec-9a4d-6a3223194343": {"doc_hash": "6683ebacec1c1649db2b3dee3a8c656dd82f355d0eb8ca3cf478ae8a761d3bcc", "ref_doc_id": "fc328de7-d166-4dc4-af76-e49512c7bbaf"}, "a7fc69d2-0134-4f39-a397-fbc889e3f477": {"doc_hash": "e1f068c595d85b6ee647c0e10b2b6457044ae9202061018c84c9780cd6cbe637", "ref_doc_id": "0da7ad64-78df-4344-b3ea-22136f5435ea"}, "1024c9f4-465b-49a0-88f0-a0e0192dbc93": {"doc_hash": "6090f615396f33756da38a792393bbc2913a9b1475af805bfdf06606baeec95b", "ref_doc_id": "0a86bbf9-ea73-4445-99da-098770e28852"}, "840dcef0-d886-44ea-bd65-fab0670449bf": {"doc_hash": "e5a5ab2aea0fc2b4417fcc5f0ab0ccf9e834c60b3b1a2d121c8ab794a307aa1c", "ref_doc_id": "92573ad7-a5d7-42b3-99f6-b88ebcca56e8"}, "6e48a430-8165-4c93-ac88-e7f2d6df916e": {"doc_hash": "8fdc66299d0441536a99d49c74350cd9fab234acb1c1db8cc877f3dcc4177899", "ref_doc_id": "759f5d68-0788-4876-82d1-b4d35ef44241"}, "45c19f94-c1b2-4fa8-bfa5-15368ca460d9": {"doc_hash": "b11b9f1849ef0c00d7dcf05fc439e41beeaa80d1d136f277f4d0b2a0774ece3f", "ref_doc_id": "27359d21-2016-449f-a935-1fb348a7bc6a"}, "0fb85b97-ef2f-476f-ba55-e16a30e40deb": {"doc_hash": "917d3a036633c1dcc62c776cd0fbb25cd955e4f4642dfd18d83a86f453bf99c3", "ref_doc_id": "744b1bd3-b6de-4173-8aee-99f237884244"}, "cdccb608-2955-49a6-bdff-cd0e7fcff974": {"doc_hash": "c1f563a564ad533698c5077d3330e2160ea83c1bf90b0fd142386ae8daed3cd5", "ref_doc_id": "541e4837-5357-452b-b342-d56954888ce5"}, "e56fa5e0-d43b-4e56-984b-b6a26f390c85": {"doc_hash": "b5530ee1191d9a26e45ab4cd3d7e0857fdbaa9bedda494aa38f8d6439dafa8b3", "ref_doc_id": "ead6acd3-91ec-4624-ac77-6e6daa170a56"}, "7a0f89e2-f1a4-4617-b74f-7de69b3bc16f": {"doc_hash": "4a74b8c020eef6e3585564e0e9dc3b28ead36940434dbc8edaf8e06fb08bc8cb", "ref_doc_id": "7c3bccfe-838c-4981-aa82-093cec4a85ac"}, "b107b91f-61ff-408c-923b-d022f8453add": {"doc_hash": "64570c54bab5556d7504049062f81ee0d6848d7d4e295578e7682a5072aa5918", "ref_doc_id": "0411c5d4-8135-4a74-91fc-add627462b64"}, "2e1c2c45-562d-4370-a1fe-3d7b6c06f78c": {"doc_hash": "5b24e7a8c5cfe10194c5e8016d0f7ceb347fbbe589d6c61b3ed346d638a426db", "ref_doc_id": "a9fd4cf7-5ffd-4313-add7-9db07872be44"}, "20493730-58ca-492c-b501-7417972806f7": {"doc_hash": "b344d73974b8a2adfeb0953aef0421f7433c69c41360ee84deb112407095b220", "ref_doc_id": "02a97f61-ce98-431e-b945-b7024145ec29"}, "8fb853dc-a86a-4276-b0d1-783db6b5ad2d": {"doc_hash": "adb1bb860fce2636d9e89845301dd65724781aa8e8d15cd7b0222bc83b63bef5", "ref_doc_id": "fa9f73fc-f451-4e9f-a4c3-2288961e3c77"}, "6c3bc257-afed-47f1-a2f9-75c2116d5d3a": {"doc_hash": "6b0fdf077e40389dd2e8bc84dfd764b040e066918718f6c411c9be725fb419e7", "ref_doc_id": "686d111a-bf98-4dda-897d-55e237a9c447"}, "ad1e49eb-0583-47be-99b9-947620d1e78a": {"doc_hash": "9dc70123b09b058dccc562432b212e17b7204c5c28f29c84e2c0a0d7e7c7e404", "ref_doc_id": "651a22fe-1d4d-475f-9916-30cd096f2e06"}, "5b02e738-37d8-4369-b216-f8eab6fb2764": {"doc_hash": "8486168ec467fbd65917c3d33784638e74d27b6ef62ab0ce2852a88df054a016", "ref_doc_id": "66a9be3d-8a91-4235-b821-1293ac193000"}, "f30cf5a3-95cb-4965-b5c9-d85cd852ba97": {"doc_hash": "e41c3ba0ad1a80572313c56fabfb93c616e15f4fca53d3be572ad8b29cf17a64", "ref_doc_id": "ecdc3608-1b65-4a35-b565-723687ff658c"}, "551d9933-3033-4847-b415-d7fcce2f2843": {"doc_hash": "a5ca21f3918538386f5b9805d78a6b66febfd585f0614fd79744b16eeca5fc9d", "ref_doc_id": "a83975e5-1dd8-47f4-90d9-a243e337b0f6"}, "c8e72d4d-ce4e-410e-94ab-4f711a11a8f3": {"doc_hash": "75775ae441fdf9f6ca2cd8bdfec14ce669adbe4c1db6adad1be6392fdcbed65a", "ref_doc_id": "34e9c9a8-9a5c-4109-b0a6-e7ec9b7b5afb"}, "7f9d1caa-864a-4f2e-b011-805f71e55753": {"doc_hash": "fcdafd85b5524f45cd840094e4c320c05b171d5c0d872e8ee04e2c918dfdd2b7", "ref_doc_id": "b3cd68da-3891-4c66-bf3b-5dd03a2a9c8f"}, "dba5050d-d958-40af-9d63-970ca5a223bf": {"doc_hash": "144419ce31b4f0692f8a0eb100c3c192c7e42e9e9af736314338e3327062f759", "ref_doc_id": "be040875-9d9f-4169-9077-423b34140132"}, "fb8530b9-6458-4bd4-ad2e-659304259191": {"doc_hash": "1da5cfbbc599eefe4cb09340f2b05aedaf09786e9b91fb7d55fe6b33658bc10a", "ref_doc_id": "718c6eb5-d6d0-46b1-94a8-d723151b6fb4"}, "da06f907-fa23-4ab9-ba23-e83653acafc2": {"doc_hash": "45eab1ca6ead57939677b54c8dc12618626202a695acb1a2e478b24f7fdd11d1", "ref_doc_id": "de91e5e8-4f83-4911-a85e-cf2e176b7684"}, "b0edbee9-1b76-4726-b7bb-713f1be7028e": {"doc_hash": "32633e49fa941d79f890967ff9ab4981332fce0cee93442a107a0dbe0425059c", "ref_doc_id": "58e00094-d7e7-418d-9c6b-7ec6a10f2445"}, "792d59fb-2bec-4738-b125-7d10f326304a": {"doc_hash": "c6afa3327b72f742e881b51fea2066cb13f9ec827715b14818613df46ab7d431", "ref_doc_id": "73764402-186d-43fa-aadf-b0e05623570a"}, "676dcbb5-83cf-4d44-8f56-c6e77ac4055d": {"doc_hash": "03ec091726cf862e495c1bc9397ff3a7a0cdee6d9298c101bed159ef54238c8c", "ref_doc_id": "636faf08-d3e6-41d7-b35a-ac8c239d1dc0"}, "aa1e4ea2-4865-4e1c-9ab6-b34783374670": {"doc_hash": "b91057112c0662462f0f6a27450ba62eb022072b51f62f56a406d575f389eac9", "ref_doc_id": "b3d5e355-98be-4cca-a544-1275626e531b"}, "1d686008-c5bf-49b0-867e-68fd3e8d89bc": {"doc_hash": "021d6267aedf332a34057f573df1b8639492ceffeabacc284a84aa7e377731e7", "ref_doc_id": "7ce4f0eb-060c-44b5-8e90-e299550b092a"}, "0f107559-d582-4435-9968-2f87cefba642": {"doc_hash": "c2392fa02e0f73b60a0f887f497275a585976024e265377d2d916659c35d97e1", "ref_doc_id": "b67ee8f0-895f-49ed-8159-06d21746ae3c"}, "857bee35-732f-4a1a-82f5-0671a44ab827": {"doc_hash": "6ae0db3ff8df01c80bb4c7d09736b10d985a134f9fdc4ef3a50ca95de36876b0", "ref_doc_id": "291fcd1e-fd98-47d5-b39e-bb2842ec6b52"}, "7f05c03e-b0f0-42b6-881d-dc2cfb4c6709": {"doc_hash": "74129e7c2a508a714f20bf70bfb4c6ef2e5fad85d94de8c8f4dcb00751505fae", "ref_doc_id": "7f39add1-544f-41ad-81f6-187769f93c42"}, "36d3fcc0-ecec-45ac-8f11-b0fec832203b": {"doc_hash": "6934829891682c6759ae63198b3a993e8a2f87155690659a14b93b02c194b23f", "ref_doc_id": "0db9145d-ddba-4277-a050-16ce9a9dea0a"}, "3e2babcd-59ab-4393-bc93-e5455c3fda8a": {"doc_hash": "cfad9f4789562f4c0c8a18bd0f3340131f3187ba6b46c6c5c750f3b12cd19019", "ref_doc_id": "1a080503-e4e1-41d0-a982-6129efc87ce9"}, "1f959895-7ca8-4ef8-969e-1123a8c349e9": {"doc_hash": "c409164d94e2963721a3070a9334060040bc4ca5f88d05cba03d07e9a05e077b", "ref_doc_id": "2708041a-9eb3-4160-88bd-0d6b2808320c"}, "035710de-5fdf-43f5-ade1-81f8bb6da98c": {"doc_hash": "c6840ce5323527907e94967338d686145736fd8612c2018538d72cc0c48ac57e", "ref_doc_id": "3f3a5f12-000e-4ddd-8665-cd410d8d718e"}, "4b35b414-033b-4d09-8770-a739c5c36296": {"doc_hash": "ef13969013851752a8c5aaa445d25bb9ff293bd0814dffb603402e6e0e8745ff", "ref_doc_id": "7fc9b845-f060-465d-a4c1-ab5175aa41b1"}, "73c23698-4711-4347-a84c-9e37b2fab051": {"doc_hash": "a3a08b1c900e2cd993b46b9fbc2d52f5780dba572cf0c57a3a1917c217c218c8", "ref_doc_id": "64f2101d-0b36-4de1-b0dc-a9c341642aa1"}, "6bb70d77-6c87-47cc-a2ac-60046cde270e": {"doc_hash": "b24c4dcef2f5fec7edc7302a9356eeeee2792875fda9acec0ce8087b2b7aea6a", "ref_doc_id": "1cf615d3-89eb-4bf9-9939-f96a11d41896"}, "53ae47b5-8849-4fd7-9006-448e99887de4": {"doc_hash": "116ca980cf687f6b5a6a6641b49f5001e8fdd1a47cdeebc54b60788d85727e6d", "ref_doc_id": "f1ad728e-7271-4465-92a2-03e1ccd62ead"}, "1ea7fa60-8f4f-4bd3-af7c-850fdb9fced1": {"doc_hash": "9607c4a7b9df4a3cb9f0fef55e1090899fdc5be5bd05e4b5ae3ba153f407807c", "ref_doc_id": "521ac351-b524-4f59-9450-2a714b1d5b02"}, "7cba112c-0f5f-4436-a08f-d0e8c8048e74": {"doc_hash": "02b479100b5cf0adbb4d640771111a70c25e98f9c5af2b376569bc66e1a93ac6", "ref_doc_id": "f962f35c-33c5-49f0-979d-e6e00965c28e"}, "65e97718-9a90-4ffc-8770-519c4226aeac": {"doc_hash": "be3c4e27816c335bb19720d408c0ce5cff1a34d20da7e9dae8a19f747ecb78e2", "ref_doc_id": "9ce46d90-f5a2-4640-9ac2-46c03616039c"}, "e4bf2c37-b1c1-48aa-a224-99776bcd9442": {"doc_hash": "c6eb58834338b0c0c9dc871ac76d811a94f529e87fcd19227f8f2b18b11ec445", "ref_doc_id": "3130ac0f-89af-4306-91ac-bed58c420250"}, "5216373e-b1df-4417-8875-134762fe8019": {"doc_hash": "ecba1c6725aa69c7ad54af076d3c7d4bbb8a43efc70cd2a3b3ac856c70f82697", "ref_doc_id": "023500db-ef14-466a-a6b8-476367563b00"}, "7ac139ea-1575-459c-b104-f282c2055365": {"doc_hash": "0933a9ead71f51720fd43b2b231ac1c51154442728e5e9c48142abf2f2216f22", "ref_doc_id": "a539382d-acea-4e72-9cc2-ae1bc8337b42"}, "884b414e-a13b-474f-9ee3-377031a55f6a": {"doc_hash": "ceb8c3b6956ddfae0cbc67d2ca632625ef05c77a7db818b12fa4d2afc507de92", "ref_doc_id": "aea58eab-523c-4aba-b280-602298a726ba"}, "b2dda6dc-11d4-4640-94ee-d1416a4f865a": {"doc_hash": "4e201c990988ed399a0529a8dc56b716a3e137202a53fd41108fbac29357e974", "ref_doc_id": "b9083bf1-8975-4a21-be7d-d8ba4a8ba0d5"}, "4eb8f14a-0176-4b12-9e7a-b187fd2fbaaf": {"doc_hash": "16a3b1103ef0c1e0c2efb633a4a0649e7372f5ad5a36031066fbb0d11b083171", "ref_doc_id": "98dc80ec-0169-412a-a6fa-b1a0a466c267"}, "804b6413-4870-4682-a932-be6c5aea4141": {"doc_hash": "14156aca139c35248a4cca219ca0da729375442a86c24dfb74541b8068a461b4", "ref_doc_id": "693dd6f7-1e3b-4a02-a5a2-dc05f20c62b2"}, "47215e5e-6cb6-4951-8592-6fd579f4e128": {"doc_hash": "9dc5756418c49ee1b04408669faf40a2e89c82dced9b67726e38c7a4d7093915", "ref_doc_id": "e6a6f03e-3ba9-40cc-9b58-79f98d406c91"}, "060862d2-9946-4a98-9632-1de2c27fbfd7": {"doc_hash": "433a8e7d5614d77078b8230c7d63e0552386d3987eec2495017032327996f05c", "ref_doc_id": "5db56686-432d-4245-af00-e524151a26d1"}, "3071b9af-5e65-436b-bc1a-d539317252fc": {"doc_hash": "95be20a8dd14076a5bdf1331a686a00d96baac20a2ee9c63fdcecd03933c2d59", "ref_doc_id": "a60ee864-c77b-4220-9a32-bd2d52fa712e"}, "c227c138-70e3-4cbe-9e2f-91b5f31d8ba9": {"doc_hash": "8313b53f2aa73ebad33449d3e18ec4616d9a0dab54b92015c85b84410a512108", "ref_doc_id": "14b8634e-c4b9-428a-951f-03b7df2edff9"}, "e5730cf0-81a3-4f68-b766-2f9bb641b2c5": {"doc_hash": "3bdd5700acb2140d53ce31af4b3576b9554e5405c65108ffcaac146025357a5e", "ref_doc_id": "613787cb-16e8-4492-986d-ee91a32a099e"}, "8283f652-ac8c-4136-8baf-f06d5ab13acc": {"doc_hash": "340d800337d641f0a11c841aa42b5e3418fd94515b3656c28c91000021765dbb", "ref_doc_id": "1eb0918d-ebcc-4c64-b1f0-e4f818ad667c"}, "c683bc65-525e-4fd2-96d7-ee3485f08b24": {"doc_hash": "8f72f5f893e0c206899525e5b41358a267b6b1fce074dc734b14e3dd7c535a8c", "ref_doc_id": "c60da459-ebd6-487c-849c-f3e0b08b4fb6"}, "fd70d044-c960-423e-a416-1c75bd28bcd6": {"doc_hash": "4b319481f919a32a4f552d15a75b3db33b5793ff549a27058ce5e1dc1d51847c", "ref_doc_id": "9dd26f3e-0aed-42d1-ae4f-90fcd8873800"}, "28d2d143-1adc-4528-9d70-e70a269ed93a": {"doc_hash": "2b719c039f72b8a7bba97df02f8933840f58c7d9b4d54a0dc3c8303df01926d5", "ref_doc_id": "86564521-ea26-4762-9cf4-56c7c72c0e95"}, "fdc783f1-0425-4300-a882-80410c9de63f": {"doc_hash": "542fdca1e2c21e8f0eef2ee28d1f34bf1a1c496b6114305b4633f4a0d70cc54b", "ref_doc_id": "3cc266d5-bf3b-47c1-a043-0bb74a9e25f5"}, "d913248a-516f-4d30-8ca1-9efc0db09504": {"doc_hash": "c61e261356da12fc563fad089a1622bd630e83f6943d462ca0bde15940b238df", "ref_doc_id": "90989037-77de-4f1d-a2ea-33b45600a0ae"}, "105fd0e1-9302-49fd-a520-5a9e267731ad": {"doc_hash": "254e449497f29e64fc67d28a78ff1f01a96af17823bfdc8136733116f0226fc5", "ref_doc_id": "2a31347a-aa77-42e6-9d6f-68dfca0e7216"}, "5996e18e-8a84-493e-91bb-fe2ed24982fc": {"doc_hash": "721664b9c153d6dcc888f0b7f72dab68697a85f9344be466bc98dbfa3ddb9d34", "ref_doc_id": "ffc4d113-0921-479f-b05d-623f6cf6adab"}, "0afb4425-da94-4bac-a876-4c7729daabdf": {"doc_hash": "f4e730362f181605e3a96f5bd84da9e6476ddf51d9a1771fc98952eef1f379f0", "ref_doc_id": "4757dc4f-6189-4258-b72b-b403d486d39c"}, "a5f1cb7d-3104-4ee0-9a08-893d962e0a6f": {"doc_hash": "c1351ca68c5d76c7722189f159d9a2541822bf3a70df1c378019a5f333b477ff", "ref_doc_id": "1c24e696-1082-4fb5-b348-12d5ca865e21"}, "0840f194-939b-4f19-aad4-c42769ce3964": {"doc_hash": "a4dbc85ea8c674e1e5ea62b1e94590fc6920e40a0d1c60c17727fea316a99cf0", "ref_doc_id": "621058f2-be46-4bb3-bce0-114608a05c44"}, "2b19620f-e779-41d6-a620-436e072cf497": {"doc_hash": "5962587460a17cf26f9dbce8dcb69b52025badd6adf214f856df456fece517fc", "ref_doc_id": "3c74d071-0279-43b7-a015-94e5b1b104bf"}, "7b704c8a-742c-421e-b6ae-bb9016ef749f": {"doc_hash": "606089ef79581683bb8badfbe6eba26b36ac43e1aa4b87c4ca5f0be01e6c7abf", "ref_doc_id": "f0261211-8f5c-4f82-b784-8fb0f6889381"}, "827383ec-3abe-4dbc-af2d-abadfcd859ae": {"doc_hash": "0e501e776aff6fd934c0f47fb4497d4fd7565b6489fb6c95f45efa9d5633248c", "ref_doc_id": "7c8639df-2dba-4578-9954-de31da21a6af"}, "41c678c9-b5f7-43c3-8647-f789c66860c2": {"doc_hash": "343267c83d1f085004b46481f66a1ea9c467af785676424a18ed7f77c783d89e", "ref_doc_id": "f0273b99-61e7-463f-871c-899c47fca76b"}, "b4f9c84b-57e2-4689-954d-5ec6db7e6599": {"doc_hash": "278eba182b0bbcd3239edee1723383260e0ff47b656d003fb0c25b20cd1b2f1e", "ref_doc_id": "df0caca0-6c16-45ae-8cea-3f52583999e1"}, "e0069d77-366e-4f0e-afe3-008e0a4fe5af": {"doc_hash": "c2622e327f386e00a14f6776cbf3a109e21881e95695e7b146accf055b635dc7", "ref_doc_id": "a5e35ed8-43b0-4ce4-8de1-946c47fb7281"}, "fff9d58c-633d-4081-b392-2ad67dd9248c": {"doc_hash": "e67092924565e46a2546a8fcc40f1f19505b0dee976f8c18c309fab2e3d93449", "ref_doc_id": "96034cfb-69c9-489b-b3e2-51f48d3eb3dc"}, "52e15e0a-3b79-47e0-bcdb-5ab65a43600d": {"doc_hash": "c44601253527df3debde521f58581611acee927dd7d2e213adfe18c950100c6f", "ref_doc_id": "e92eba38-8975-41fd-b3c6-889e6b586c84"}, "21444a7b-09f3-43f8-b0b4-04eebad79ea2": {"doc_hash": "07449182e170aaea76e846a15525c6d05c56749d882ecab69be3d8859d75d024", "ref_doc_id": "f50d9b62-deae-4bc8-b2c0-1b4e1a4a35a9"}, "ede46f07-db67-4310-bb7b-531c5bec16e4": {"doc_hash": "c701506cf58e8ac2f83bb78d0e191073ff57786a5a1be09a631f8f3bd2078a37", "ref_doc_id": "3e8a0ca1-c537-4caf-b4b5-5c9307d1fd7d"}, "d52d19d1-a6d2-4813-a60e-c4d1482cdf05": {"doc_hash": "007f34fefdd76daddf79f1661d4bb499b8f4a18cf1279eee75ef2053e1f3d2ae", "ref_doc_id": "25f490e7-3ffd-48f7-912f-6a02e8ceb32f"}, "522a37d3-cf5f-47e8-a724-b5351da58e91": {"doc_hash": "d4a7e714062d7c1ed9ea9c1cf79686be549fa13098761dde21dcf595012ff1fc", "ref_doc_id": "707810f9-fe0a-4578-bd8a-4f9b68f1e230"}, "10381681-ddab-482f-b140-01b2c4a30de9": {"doc_hash": "f4a6c5ae5948f79969dc1ca3ac7e977868a078550dcffef43f3f37bbf64eb848", "ref_doc_id": "2b0daa27-708f-4f33-99ee-852cf49c7ed0"}, "120349da-915d-43fb-811d-e70ef87548b8": {"doc_hash": "2e556976487b4932fa998e3f835965fc5216595ae7f58e5ad5b2e2b41db8bace", "ref_doc_id": "9134f48b-fc0b-4826-9600-de403da253e0"}, "88e6453a-fafe-4c4c-a0a5-728c301a2516": {"doc_hash": "1bb02a77ac3935e7261b1df64e6eacdb972d85f26d2b591064dd061b85fcb36b", "ref_doc_id": "9517c03a-a61f-40cd-b663-b0a7ed67c5ea"}, "9e8caf50-42ff-47fa-81a9-4f2970a9a5f2": {"doc_hash": "7c5faad4407c1bfeb0e8baa9e78b229a80dce38d516e4be1adc1279e67f9faa4", "ref_doc_id": "cbf4c494-fa7d-4dc0-be7f-25394858225a"}, "e45cdbbf-b35b-4bf0-b956-986c8c4398bd": {"doc_hash": "f1cd6f56d4c527d075ee657dd52601112214b5059c54a69b49831fe0e4af7247", "ref_doc_id": "459916ec-8e16-493f-8add-c32fa42a40fd"}, "a5775ecc-1c39-4a56-b1ef-0aa121528b4e": {"doc_hash": "0e2f52c775535519395eb47cefb02389fd50b93549135303b183b99eb29b32f4", "ref_doc_id": "05426c1c-9213-449a-bcba-f0496a24473e"}, "3f5eb9d8-b2a6-4fd6-84ad-2581563e03f5": {"doc_hash": "c50c800a739e0885ed9c51a6ad639f3cfa7668d91bb3915a8e44fb0779c734fa", "ref_doc_id": "ea7500ed-3f08-473c-b1a4-e4a12b55da4a"}, "28e16cf1-fd89-4af2-ac2f-1bd0c4336b09": {"doc_hash": "4c33ea57a56c9e9bbf871aebb522c44701deedb167644946d435ad74e7a1263d", "ref_doc_id": "a593efdb-4874-471e-ad4c-9394441b81b7"}, "1a12b1ad-33c5-4843-8e4a-bb749b888fe3": {"doc_hash": "0c36a4b13ff1a90204ac8440859e5d5bbd280f38753f13ad0f203d9ac7a4a358", "ref_doc_id": "c4194bcc-4f07-42e2-8ff7-f5c251b81b54"}, "e51d06ba-62db-4c5c-a5b3-e4d5f2a02302": {"doc_hash": "aab317f7220486598e7e5fd7cc753ff02ae4be16e56545916417191f2241a4c6", "ref_doc_id": "75771b74-4cfa-4e77-b827-8a412f669b26"}, "19e5fbcc-d6f8-4508-9335-b32ac58c6ef9": {"doc_hash": "a26b3bd1d2ccfa72934c134230ce70a961eb1f0d10dcf82f73488496daf9226d", "ref_doc_id": "a43e7e5b-9a59-42b8-9c8a-517a8c69364c"}, "b065dcc6-9b77-411a-aefa-e3ab5f7bd4f6": {"doc_hash": "a30986fbf4cece946d922d2962223513ebc20bce9d60d36212b3ac2582162630", "ref_doc_id": "7e720c60-ecde-432f-9a1d-c32c62b1fc98"}, "482ad15f-b6a4-4278-9a9c-6e68e01db534": {"doc_hash": "f79f92ee37ae94be0aa11c9f8d068a9e0841ba51313e9393ee85707543aa2f09", "ref_doc_id": "63c70470-ad67-4e62-bac9-c784ce88be80"}, "fc43fc71-6c5f-4260-bb1f-0f119de07eb3": {"doc_hash": "4f61f148143c7018adcd37130cd03d6d479a446c34c6e020a70530baffc6e035", "ref_doc_id": "37765f71-e65a-430d-9842-e924d48485b2"}, "0c298f08-a298-4859-8528-759ec8e168fb": {"doc_hash": "9a9cf88e6f0b806f42a4e1d5074fa8a49c4ff7a607181554bf90b4adc941a049", "ref_doc_id": "07dba3bd-a3bd-4e13-b0b1-36a7145256ba"}, "97d601a6-9ab8-4e17-a00e-6cc18e7090e5": {"doc_hash": "b1b859d15238c830e0c6ad0ae5d078b832099f4165dfe8fff4625dce1473dc46", "ref_doc_id": "f93b3f8a-0147-4e2c-b91a-f62226397bb6"}, "760ed996-8273-48c9-9c91-19bf987845d1": {"doc_hash": "cd67bf33be9eb005256bf41112c78995d8b2017baa2743d02a09cb2d0d1098ac", "ref_doc_id": "7986274a-a483-47eb-844a-322e7a938544"}, "daed0648-fc45-445a-9f11-840d9170cdd7": {"doc_hash": "7337a46427ef8b54e16802eaf430c57a5b5549f8296ed19216ac16cb3b44359f", "ref_doc_id": "3dbb3135-e9c7-4145-9411-330347c6b215"}, "c3616d2a-c08a-4c2f-8b6c-d3d06aee4ba3": {"doc_hash": "eecc9c280e6fe5f89f87558e18323ed95a262b2c1f3387bf0e82b8a8b62833d4", "ref_doc_id": "91f1e463-5dd0-45c8-8e0c-5762ebbf3a9c"}, "801e2a51-15c9-4842-b05c-69e3d5534956": {"doc_hash": "5604744d18978834e38492e3d06554bb6e06aaf880b8b48409ad691aa6cf118e", "ref_doc_id": "eff7f83a-6f39-4ad5-917a-ba65e5cf4925"}, "439e9206-ca60-46b9-aa73-58f6c967264b": {"doc_hash": "b2a6d35351e2a12237b113fc5c81f2a4ed29ef9dd86c197977ba65df99214c10", "ref_doc_id": "d81968cc-d5a7-4af1-97a1-9941c7ece4fe"}, "70079955-197f-445d-b139-d58b41644809": {"doc_hash": "ad1409a3c5e6ac1ed0c1736cc12af6b6faf82c9abeb68469094c881ca304ce34", "ref_doc_id": "fff4f973-e6b8-480d-a33a-c1a360f133d8"}, "6d4c42f3-d4ca-44cd-9954-fef783903b13": {"doc_hash": "71690433fd0f9ab29e3f2a1cd2e44f6350d830dc89c087f8c4e8fa83ac9a7aac", "ref_doc_id": "7ca865e5-6109-4adf-ad37-d32f202c65f2"}, "9476ab07-7d7c-4dce-ad50-2fdf108f41a9": {"doc_hash": "2eb1f6a6c0c128ad889824756eaa5b1f1e0f43beb0a2eb0813a2248c503728da", "ref_doc_id": "4381ac05-27d5-4b61-8527-a9bd7b07234f"}, "ff4582c8-2dc9-4fc0-84ff-8a8f85d9af83": {"doc_hash": "577eecdd3288a842c3c83e8ee6cb06c58a54eb8d9980534690958a44ce1586ae", "ref_doc_id": "aeb97024-3caf-489c-9b90-7fe7dc54f810"}, "05a0f753-4dc4-4b41-81bf-5d814ee8c8d5": {"doc_hash": "6cf93868f0a509525fdcc7056fdff5235b87901adf373c5cfc0b76e12f015d72", "ref_doc_id": "ac048110-9779-48f4-b0f1-1bb88a10c61b"}, "1d7bd3e8-e569-4260-bc43-ecfd020802d2": {"doc_hash": "2203f137746a422b496df7b92916868b9852991c03490a1eb4e03da3ab32e163", "ref_doc_id": "4ec01144-eea6-4846-a318-3efbe483ef99"}, "1f0e444a-fc82-4ad3-b252-1547d9232040": {"doc_hash": "531e9cd567e71a434a3d4b39d2cf470d081355d9f42cc60f3cbd3f04ae727ba2", "ref_doc_id": "683c3206-8d49-40f6-92f4-4b5267e60c8b"}, "f907e87c-94f3-4811-be65-7dd714141ac0": {"doc_hash": "52df2a314e8de9a42a598932d42f7655c6aeac67e1d393ea9d888ea84e93eacd", "ref_doc_id": "63be4225-0c8a-48bd-8e48-f30f8c89f4e6"}, "1e40c661-2ba9-4b03-ba98-79fab42c8427": {"doc_hash": "c3128325d40505955ab46b8644922a742e7f48cc48557270129ee8c6e503d7df", "ref_doc_id": "1784342e-3b78-4993-9e12-6565f2806989"}, "46ce6570-1a2f-4f2b-8522-62abf5225eca": {"doc_hash": "a8085a6f23935d1a699caa42f5f5dd0c8a61eeefa7cdb2b2d5403a23f7a97627", "ref_doc_id": "502f064f-5acb-481f-b20f-5954bd73b714"}, "e9193a45-c6f0-4955-bdeb-dd15587f637c": {"doc_hash": "b1bbbd83b7a8cfea54699025d1cd382158b9d928f770176eed67030cf9c6a42b", "ref_doc_id": "9b047521-9adc-4d11-b592-9567640d380c"}, "92fc6f47-8355-4c05-aa77-3541809e7f5d": {"doc_hash": "ccba098b66b0963ebc28b79814fa1b791afc9f492e11f4ac783dc3b9926f7913", "ref_doc_id": "12ea49a7-804b-406f-a287-0e96e4bc3251"}, "e1549901-f0b9-47e5-880b-bea09c8ac843": {"doc_hash": "9613710a1ced9b65191a93f65cf6596836793b62b96ea83ed2025abae325ac3e", "ref_doc_id": "5fedf925-a835-43d9-9811-118c32b9d47c"}, "9cf6a383-1d30-4e99-99ef-c7bb6d20b907": {"doc_hash": "fe177e1e17d7b6d089dc1b6cf82eeb93dc773270f4c6a0aee5d98845dac676b7", "ref_doc_id": "b1aedb79-ff03-4377-94ac-f5a75f22e11b"}, "1652f4ad-ca2d-41c2-931a-158f708f8c28": {"doc_hash": "3705b57536a774f8eb2c053b8281bf3930d757c52d7a8d1a7d6ffc0b1a68cd2a", "ref_doc_id": "d4dbde6f-33e8-4751-83ef-35cbca159460"}, "639e942b-5867-48ec-ad32-c2bb0cf8a395": {"doc_hash": "e92e5f2ad11b222ec840409992316f8b64665ddb28a09dccab2e16f545558abe", "ref_doc_id": "df08c2e5-7857-42a8-a404-91c6d4bc9e96"}, "02c6cde1-1158-4a75-92dd-1cd196d5a03a": {"doc_hash": "c757907e9d494ef181cc93b1f1b86af81ecdaace15a96233b73f31dc1a56b7d2", "ref_doc_id": "761f35eb-fd69-4200-bf3f-dfed6280ac9c"}, "4e71f520-dd4e-46de-8773-c70a9e25e2a4": {"doc_hash": "dbaa4aef15430c845a2bbe79e774b0f72f1fc7c227de5fd606e4607395fe544d", "ref_doc_id": "6c2ab6ef-9441-4ff4-a03b-c67448183f68"}, "a5a22995-a9d8-4638-867f-541df567c78c": {"doc_hash": "f914f47bed0a28067c09d5b40e68d8c1f5574f1fa71a455d8aa5cc08d024ee14", "ref_doc_id": "2602c9e8-7b7b-4a36-b407-261b90eef6ee"}, "b12c474c-09b7-4593-8278-b785b38aef7a": {"doc_hash": "29a1820cd0b374dcfc091cd08585faaf6fff224824480919feecf5c9fc79cc8b", "ref_doc_id": "bfa18db2-a65c-462a-8f92-9592c40285a2"}, "9644f6d4-3e7c-4d55-8647-48e907ae1809": {"doc_hash": "cacdb0826b870b1334e9ecc6d0efa0176eba679eeb945c0b8065592f10cb1bcd", "ref_doc_id": "7a16affb-0c9b-49e6-873d-8d664430d9d3"}, "f239caf5-44ce-405f-917d-95f88424bd7f": {"doc_hash": "39c8bdf72085c12238e757399659c2e4a23ad6206e12430d6312908121711b88", "ref_doc_id": "ae08d318-6d61-43a6-ba05-8d82c599358b"}, "05cec0fe-d77a-4e5a-8608-8c03d6167b8e": {"doc_hash": "7aa4502f2637616bc5bda46e952e5c80eca9d5553940948af4560020488b6891", "ref_doc_id": "fd4f6bfe-6533-4c61-80b5-fca5b5d16eda"}, "7549068f-3397-43bb-9a60-885601337d30": {"doc_hash": "76dc1d3ab7d1f1cef434971c63e808cf12c3efb6515c1b8039b6cb18a1c95345", "ref_doc_id": "d7b9ebfa-9e45-4d83-be50-664a36c8c74a"}, "49873ac0-b474-4da5-a2fd-621573d2faa0": {"doc_hash": "8f88b9c626435fd85f74145301a4125a05c1dd4f7f83e716f2e9c02a8546c823", "ref_doc_id": "90693931-27bf-408b-acde-016fc906d9e0"}, "de0e759a-dab6-4183-bdf8-1fbf9a440558": {"doc_hash": "46ec6b9be03951e1fa53a317d4b781049f57955b48b890257ca8655f65493ad1", "ref_doc_id": "a50407b8-124a-41b5-a2a3-e2e26e364258"}, "db7aa39a-4fe6-4816-bf5c-331bc9348598": {"doc_hash": "14700f24e0c1ed58e408d2f3002854a8d97ba005476ffb05b3a4d6642dd083f8", "ref_doc_id": "f9dd4f14-f835-4a4f-8720-17ec5c49a975"}, "e067198f-8e8d-498f-b36e-ba4e98d68374": {"doc_hash": "3c4737f7b92a51a6a14e8a8aa110d8f7d80431805991fa77a2f648baee84d669", "ref_doc_id": "e4ee4134-6fd4-4a2f-8656-d43665f23be9"}, "c597155b-cad1-4aaf-a2c1-91692494e818": {"doc_hash": "4b3f925ebf0eef90cd093c6b4c4963678a1fab4377d23050eb02b3a6596b66e4", "ref_doc_id": "10f30a00-0558-4dd8-a74e-56b25db2e91a"}, "5b140160-5252-4b38-944b-298b43071ea3": {"doc_hash": "b2814ee7e00f69103b2b8199132b7d7dde14f6ad5677689de4c9444d416b46b0", "ref_doc_id": "54786482-8277-462e-bedd-0e550b0695bf"}, "ee6c3e5c-237b-4bb3-a725-a871a8273425": {"doc_hash": "1844a7d482298535cfa0662c28ee851929547e741c8b88c5972b2b6744ae2739", "ref_doc_id": "d43aa82a-b123-430e-8c4c-e39d5a2e2b84"}, "14ee3633-6185-4b7d-b5ed-66a300b016fc": {"doc_hash": "84658b39f5c710ff163a6b6bef58ccab6b54932ccfd287502f69e5f8bd55b1dd", "ref_doc_id": "249e3de3-b608-4819-93c9-718f7149b173"}, "f789f95b-d270-436d-b288-cac873c41c92": {"doc_hash": "f327322d38604c5525a96fad04691a63f7e67ee56adbb850753987b969a6c089", "ref_doc_id": "6970e9fd-dc06-46a9-bbca-eecd3d3f0556"}, "36f2eb3e-4247-4449-87d7-2cb0529568b0": {"doc_hash": "cf1c463eb47cf207eeecf07509b80f3805385de9e867862a2260e1df9fb80c34", "ref_doc_id": "2be0509c-c98b-41cd-a4e4-3552f4ae5b75"}, "f6f5dd9c-9ef6-4a05-a2f7-2e99063a150a": {"doc_hash": "51736ca6dabd81cf16e09ff7e2533a5820b45a60a403ec6bf7423f8b8557eafe", "ref_doc_id": "beb71586-d3f5-4872-a95e-d47a94826ce0"}, "918c93d8-ca0e-4437-bb23-80b9c16b832d": {"doc_hash": "7aeaef365289e2de3cce3b85a3a1acbb237c6ca6d9c45a86ad6dcf492fae8921", "ref_doc_id": "a8aa6236-e3dc-402c-96c7-9bee84e8faf6"}, "f481c097-bed8-456d-a72a-bb323cb2e66f": {"doc_hash": "f528fecd3dec94d7c37148cbd3bc24d9756918eba2e0d86d56a45c3305c036df", "ref_doc_id": "909482b4-7760-4941-a0c9-417aa6b2386c"}, "44f0c580-5658-49bf-b283-e94cf5d2d927": {"doc_hash": "b12506697a4de4838e3fea22eb1b0189be23c4df341bb4b54490a73a25b758ce", "ref_doc_id": "4d8a67cf-bb4b-4cf5-8201-55b7e613a66c"}, "35906dbe-e2ce-47b1-8b12-5bd3c40cc254": {"doc_hash": "f5401fc8e0264e2d01fb0c367bcc1b74080660f9247b6b3b835e86022f6a1950", "ref_doc_id": "fb343877-c7e1-4231-a2b1-5457190f19ce"}, "57fa34ae-4400-4bdd-b757-b70d90f676d6": {"doc_hash": "cc32fe3c320059106fc574fd497582e452420965677aa0e5d917ac346ff9574f", "ref_doc_id": "467d2026-97d0-429e-8661-dd98390761c7"}, "d0446273-b897-4331-a4f0-112fab4e32bd": {"doc_hash": "0157ba229226577a5af06a349be97c84253f0abadd2a3545f548e03670db0327", "ref_doc_id": "a9a6f9e8-11b4-419e-8415-3045e51001db"}, "e4bb22c9-4712-4885-85b9-9b7f5b135164": {"doc_hash": "b5c62bba82e1adea7ae5139e08e9c28a1e85107a477f042e4bc5d6c12c1f98bf", "ref_doc_id": "6a6d39f1-2f19-405e-9e70-d1d4849e1a09"}, "8e3a53d0-9504-4244-bac1-ca37c77d4ac5": {"doc_hash": "5fe02be2b307d52b4eb7198444f7531d01e780f870e3931d46c496d2b5367060", "ref_doc_id": "b3ac09d6-a1a3-4379-b483-8e103c3b659e"}, "fbc498ce-1a32-4664-beff-a4c36ea0de6b": {"doc_hash": "6b4ab0a3d6657d786e0433ad1cd26700a5e36ec563da04b300c343690d41834c", "ref_doc_id": "a222b4c1-3f1a-45c2-9240-624940686f42"}, "c502ba11-05f1-40e7-ac5c-9074c501d749": {"doc_hash": "d7e5a560ef2f7668551325d8f71465c101d228973eaa7d48d2bde69fc2f034a9", "ref_doc_id": "d510a20b-091f-4c19-9c4f-ae05d90fa93d"}, "895aaffe-eec2-44e7-91bd-3f96f46ea68e": {"doc_hash": "abf8cd13d1153427fb46359a7041327911236d3179e72ff05f1a630ef0d47e09", "ref_doc_id": "01b8eed5-fa78-4335-a4ba-13f6b1e7d4b5"}, "1a98fa8e-64a8-4f75-8d5f-812a5a6c5377": {"doc_hash": "5df11a115847dbd0feeee926cdb2fda786f7d185118619e2ec90f40c113e29d4", "ref_doc_id": "e4857040-0bcc-4a9a-8f01-dc9f1687e6f1"}, "cec31e03-3eb1-498a-8f3b-713e10e54615": {"doc_hash": "d28d53e1f03018f280674afce196f5d472d9411cedf9d43e873da2ff89937a6e", "ref_doc_id": "d8e0904e-1831-4123-8333-022f456905ee"}, "47972514-b892-436c-975e-8011146a3c85": {"doc_hash": "8fcacd48a1ae97f28ecfed2b016e095de4707f8afc4875f1ce5e19231e6d32d2", "ref_doc_id": "f58b35e6-306c-4a58-b2fb-29c66de6ae1d"}, "77aab5f6-f157-49cb-b11b-f95cfdef0f38": {"doc_hash": "e35fc858ca2727ff5a45f83985febc57c8456b16c4cd892da2343523cee23d7b", "ref_doc_id": "dcb54fc1-dd75-4d9f-90a5-7c03e3bcded8"}, "e4079d7d-5fad-4a35-9a66-edc6858a537a": {"doc_hash": "3c054a32cc68ffffeff21c5d4290a89a10fa9625286a2cafb2bb901d3708c815", "ref_doc_id": "ca3e5671-4a23-484c-a2c0-3f2bc0f626d4"}, "67fbc09a-53bd-4163-b503-56c33aa7b7ec": {"doc_hash": "4e9c7863bf0cfa336b1114b44a114bb39c323c5b124173235eab129c494b431a", "ref_doc_id": "2f513de5-2654-4d52-8a7c-39a23923a19a"}, "b315b4cd-bc01-468b-990a-7bc9771898fa": {"doc_hash": "fe7047c08590488b02c2a916e1fdce70a44beb5609e5b5c9484c3946d39f5545", "ref_doc_id": "edb5fde7-459d-46b5-a39f-ceadd56f1246"}, "87d80c3b-2e7f-48ac-9b27-afd87817264d": {"doc_hash": "eaedbc44d81f38518ec1bb2dd090409acc60b4735fb4b52f72b7a57294633190", "ref_doc_id": "78a5065e-0d89-4bf3-968f-746f57640a7c"}, "8679d476-ad74-4c09-b35e-e97ea5c98613": {"doc_hash": "3bf1412ea90d5db142f4c958b695d63b6e3668a11e1c38d96e5dc08d43816648", "ref_doc_id": "a83d48d8-8203-43f8-8844-5713a4aa3076"}, "a2a48f64-c083-4758-8b1d-949c539660b1": {"doc_hash": "90e1023045e32c04a1a6d119671ce654e46b3c667fef48b36948d1d7e68659e9", "ref_doc_id": "36e420f6-e1a8-4b03-9108-0da7c8ebb8c5"}, "14360d32-2b94-4287-8992-82c6db12d26d": {"doc_hash": "d64f8127e681631dc66d7a64df0601b3af845c3806a6bcc9b5f82fffa5ff7927", "ref_doc_id": "3d8418b5-53c5-4fb4-a315-f31c1129a02a"}, "2f6bd013-63c6-41ba-a5fa-ee00050eb2db": {"doc_hash": "786eec580a0b8b00d9b8f8ca18f646bf3b070bf7821bfee6cf278eda096eac2d", "ref_doc_id": "1a65a9e3-7cc7-430a-a6ee-89cf2c35db9d"}, "3343df37-cd08-4a2d-80b2-5ea02fda3ae0": {"doc_hash": "4905a62835b037e90d2d77a8befe7ae7cc578ee2004289c2a67268e5c6810777", "ref_doc_id": "3e9ddb47-686c-464e-ab57-22bb128a97a4"}, "9c7e6048-421f-4499-afc5-839337b71a2c": {"doc_hash": "698ece1a7c6230575785002ec1bbf5b8c70576b604b6dbf7fa529de9766ece63", "ref_doc_id": "9436a67b-6bcb-44e7-b1e3-d14ecacde2c0"}, "f8fce4a5-d918-4534-9415-96b640d27c25": {"doc_hash": "fa47066e552215877bcb4d14a05eaaab2802739a10e8bdbc5bf790092283a16e", "ref_doc_id": "7502e25d-c461-4e7c-843b-9b7043f0c9e7"}, "577904a8-a28a-4aa0-85a9-45a60eeb3bd8": {"doc_hash": "67c3a06361e63e29ab5cb39158108543d6da9abb9bb99d60e0769e5df63e3a03", "ref_doc_id": "9f151794-d22d-4bf4-b3bc-d35b119c7c22"}, "9e050821-aedc-4ec5-8b7f-4369cd0099f3": {"doc_hash": "c9c38dac6ecd11846553f2f67e1d4dd1c365f8197ede72c5ae4555872202f289", "ref_doc_id": "87d763f5-e35f-4d67-bb52-b3d7cfffc681"}, "77028a73-5be5-4da8-af79-fb846a01552c": {"doc_hash": "d23f278d0a176ce4495dd7613321148eb8ba393c471a904a7ede1377cfd3038d", "ref_doc_id": "770139c4-9b19-4b38-8799-f31ebe57170f"}, "0c9b2593-6dc3-4dd1-ae37-647301f7a99f": {"doc_hash": "de8f8bbb9fe9ee35706b98918135f95faf11e9b6ee07cb9a78466e04854ef994", "ref_doc_id": "25504e9a-629a-4d1e-8db4-1e5180241138"}, "19268660-b434-4e02-a47e-83d21b01940c": {"doc_hash": "4f27edeb53ce3651edabf1356d2ba101087b00e7d48494426c48623a5edb10dc", "ref_doc_id": "3170ee48-78c4-4b3c-8d55-5ee0fe5a1525"}, "45d97175-330d-47fa-8f09-a61fe03b101c": {"doc_hash": "d7440289cd5b03a3c702ff0684f0864c36ed69d99405e8654d1e2412214e206d", "ref_doc_id": "5defe224-4d4b-403b-bbf0-0bbdfe70e59d"}, "720a2b2d-420f-416a-a79c-7835f7e3e8b2": {"doc_hash": "46762d63940a6ec365d044d12255f7b9c94b5a36a6dc5a550459ab58433a4b2b", "ref_doc_id": "f4ca6d33-eaf3-4a15-aa7c-0399cd4812ae"}, "6799c6cb-f9ba-4db7-80dc-7b376b9ac761": {"doc_hash": "041d176fe211a8452d2b96379f694e55a5d8c7c6944a63c7593f405d34e78ac5", "ref_doc_id": "20e0fe61-6840-4f79-9b48-8793a4ebc659"}, "19f5c92f-c643-4479-ab5e-d7a228093eb3": {"doc_hash": "a98ec1281284a289dbb2beaba505713c1850007cfd2286e01f42b53158e02097", "ref_doc_id": "b7348063-eada-42cb-9bf8-0b82facd8fd8"}, "0393d0ea-18f1-4794-a8ae-d4ad5a01a61e": {"doc_hash": "90ac81677d67384904346716cd7d15811f440ec7173c1e94e79907fdd763952d", "ref_doc_id": "7829f7ae-576a-4a23-ae94-daf843bd6dde"}, "c76dc23b-f608-442f-abf7-b7970d80d24f": {"doc_hash": "507cbef6ed52db8f650e941343fed7ea7648438d666c72055b5094dec03f6298", "ref_doc_id": "497bda4f-db22-4d42-a1fb-cff2b5c2dd66"}, "e4846c59-c077-4eb6-9f3b-94da373a9586": {"doc_hash": "9bbf87a4b423c7c64eea59e9be3fc66e02e1eea859887984f7fc90d55017bf22", "ref_doc_id": "d7327233-13bf-4d77-bb62-62d817d4cffe"}, "9ba1496b-f4c7-4584-b14a-0a0c943e04d2": {"doc_hash": "a369f32bae965a75f0386af8263e3a01bfc6bab6b5f8b60e78fe494f250cd00e", "ref_doc_id": "cf7c92d3-9b25-4365-9097-37cd29d6d30e"}, "265c8ec4-826a-481a-9b8e-a4bc3466bd7d": {"doc_hash": "8ffbeb486ddf30295fcd182bcd18b565dc767e1c8e1943f8c315106db040573c", "ref_doc_id": "18e2c6d9-1e22-4c4d-85ff-c5a86a4de7d4"}, "cfa74cca-b31f-423d-877f-c193a8c0f2bd": {"doc_hash": "bc80191bc88bd0c91d393d1b6fd8d678bd1212d2b2b7969da2e189a723236409", "ref_doc_id": "883cbeb4-ba10-4389-aaf6-052611314cce"}, "ab813aaa-e919-40b9-b052-60132289f019": {"doc_hash": "97234d17ff15748d281dff2e84e2ec546d61218bd8b250a067563f8420b47e8c", "ref_doc_id": "4255ed3a-3b91-4ac5-aab1-9705729f0522"}, "b5ab81e0-8371-4678-afaa-cfb57f359cf5": {"doc_hash": "b92536f194a5a06ec5f569c99dba3a60162dd2bb250528142114d9db036f2246", "ref_doc_id": "7b3ee4ad-a177-4595-89d9-75996220854c"}, "8b8a5650-6482-4a97-8dbe-2cdb3f053542": {"doc_hash": "27938a72b24475b95e93a55ef2acc8427bee6c9eaef5a0810f018d905c1d7d46", "ref_doc_id": "d1f6f584-53b2-4380-bbd3-d5862a489ff7"}, "8bf29f39-ffd8-4f3f-b4bf-89e0918bcf1a": {"doc_hash": "ebb05771d4e6c0c86e10cdc060810e9fd8fded61b2c2da1116033dfb9451ef8a", "ref_doc_id": "d1f6f584-53b2-4380-bbd3-d5862a489ff7"}, "918579a3-0469-47df-8414-2735b9018d56": {"doc_hash": "032cffb80ba6f28b058c4cabf4cc666775926a09e21978af8b5f1bdfc96aad67", "ref_doc_id": "00470ed4-2479-4160-9d4f-22d58921d2de"}, "ad2e41b9-bdc2-4441-a525-3a6b9a5fb9b1": {"doc_hash": "e83141b80ba2c374de540dc664de110ddb01f6f615ecd9680595bc54e32f516b", "ref_doc_id": "3f023f8d-9b08-401d-a130-e554a8688b08"}, "870cb4f7-3b84-4863-9cd3-f5b8f1248729": {"doc_hash": "3db20e98893666276a41307731c8f3d77fb79a9a0a33f8bc99d780b6e51d9cdf", "ref_doc_id": "ab380515-b79a-4c67-ae3a-c32226596af4"}, "53966341-c8b0-4df0-8a3f-6f4ce75366d8": {"doc_hash": "cad7b0aaf595cfeee84c375d3b207b4562a299d4f7415833cb4ef95309385526", "ref_doc_id": "cb5af5b0-cc7d-43eb-a6b0-70462283ee2a"}, "ac2a0bbe-9512-4c49-88d1-f7d2b425c55c": {"doc_hash": "ab3282cd12f95d80d08b449357f35ff57f28772d6963fd0ab1cc97a84af5c40c", "ref_doc_id": "9af6c91b-85cf-4ac4-8652-c24daf2ae42b"}, "4d745394-6de2-47cf-9f9f-a380b3aa3051": {"doc_hash": "a5d8436bb755806c569b78624280c2828c6f3b81254ac7a4a461ac15ac63b843", "ref_doc_id": "c2a35e2b-91e6-4eb1-bfa5-d0eef76cc258"}, "09284143-a612-4f0a-92f5-3ad0dd4da99f": {"doc_hash": "9448d4aedd6fbe4040ad9c0fd3690f3f80f5322621864b8c114db357bbc1ee0d", "ref_doc_id": "265e29f4-aef0-4066-88e2-2a0ff3c6cc1e"}, "c19e0d3e-1765-41aa-a33c-2ff75e22aa12": {"doc_hash": "73285f851001458900aafc880bb7658a215d186f5de1309c2f3a00dd7e61324b", "ref_doc_id": "27457845-9148-4aa6-8a7d-de2a914a6907"}, "cbdf73b1-2850-4ab4-a30d-989d56403d79": {"doc_hash": "ea98ddbee25e85a7664822a7b626443777ec1ad1dd466260be9ee4ed5de75a68", "ref_doc_id": "39ca3303-e72c-4b91-a55a-54f671f29355"}, "73b0f832-6958-4424-b53b-ef516139c453": {"doc_hash": "19ebcf425a9d00d9cc8f9bf35d94d8b6fd54118acb20b458fd638b4c5dc54c0b", "ref_doc_id": "ffb8d1d3-c0f1-4d3a-b4e0-5a3a0551d8a1"}, "749f4fc5-dbc7-479d-b95c-e07e12b09fd9": {"doc_hash": "f9796a7ed46c7d11614d7de6f81c637f4d1d89b6d896858a5af3017e1db1065a", "ref_doc_id": "6b65bc8e-cfa0-45e1-96f8-c3af22a9e663"}, "f51f9fbf-ba21-4182-84e7-2d9637b120e8": {"doc_hash": "f0bac6e2b9db1afbe16d4b8471b2dc0304864a6751564e0e5f619701124ebb4e", "ref_doc_id": "95567794-3c83-4bf8-a3d6-446e145df9f2"}, "62a5052d-5100-4b8b-9597-122aea426f75": {"doc_hash": "b086144ce05880dedc4999ad9e1cb01a5a4175848392ee5a2ff2a43b05fd224f", "ref_doc_id": "520099b7-0346-4424-86b2-ba11eb655e2c"}, "fa7d2579-8d62-4e36-b202-0a4cc6c33327": {"doc_hash": "b2178eb9e9294b43c76e2ed5618576f7f7c6be64ed87489c84b785cec009d4e7", "ref_doc_id": "b0d1be23-e675-4e4e-a35c-cbd38539a1a8"}, "f5b9ddde-7fd8-4bd9-aa98-529dc093fe56": {"doc_hash": "238450d56dca9a597e101c03bdb0937880b21a260b73e769d4c0c60062b16b3a", "ref_doc_id": "0f267882-73da-447c-9cf9-f24d3b6ac410"}, "2e52657a-bfd4-4dd3-963b-9e7bb174a3a1": {"doc_hash": "e1a1da3eba2e1fc8bf4a4bf1e06ece6adc23453b37f512770feaa38790bac254", "ref_doc_id": "7e8f6cb5-da8b-4d0a-a77d-5edc6633f14d"}, "a32c13e3-86e2-4b93-8c2b-c20b9adaec29": {"doc_hash": "95e19508a3879af9a3150df5bfb17c7186b1ba0c7dc27833117bfbba77c680fc", "ref_doc_id": "8e1e2bea-e3ea-4496-aeb2-937508829047"}, "e82238ff-a049-4c9c-9548-bd2465d5bd40": {"doc_hash": "41d12f0154b9d0873eb620cbd28938b440fbcc90901c4f4e4b36e2757c95565a", "ref_doc_id": "50a80175-4afa-4583-929d-ef1f8943558f"}, "e8655350-170b-4ec7-b053-2e3df65d869d": {"doc_hash": "2aaf9537ee7e415934c312dfe59794d43f825278d35aaf10e7311c83fa3e3ee2", "ref_doc_id": "a747bf18-c521-48b2-94d8-c2cc5480fbd1"}, "285c44a4-4c27-401f-b352-711645cb9898": {"doc_hash": "4d621ab72b4bacb1be6c87a054b27b2dda40f644b173c273bae154407e4773a0", "ref_doc_id": "36ed79b5-54ce-42cf-8041-e209a0fd0c14"}, "d816dc0f-9004-4282-a265-b4b62e8183e6": {"doc_hash": "a4251f610c7c74f98e5c50f5b4b23fe5fed5bc9b0895abe2c864fb4558ce7d7f", "ref_doc_id": "36ed79b5-54ce-42cf-8041-e209a0fd0c14"}, "c49c319f-5e9d-4b89-9fa7-781ae28b8092": {"doc_hash": "f626dd0f44419d857a46f51e67bc48907f1578b83460d905d790ed0acc1a6046", "ref_doc_id": "b4363a02-6bcc-409d-9b07-e5f049b36521"}, "510685ff-9b69-4bfb-8882-8e2c95d735cc": {"doc_hash": "ae3d50bf9fccecfdfc2f07925fdcfeb449b0a17703c62cafe2e1dffc4eb6b8b6", "ref_doc_id": "b4363a02-6bcc-409d-9b07-e5f049b36521"}, "143d74e3-e710-44e0-b363-b0847c9767e0": {"doc_hash": "491c008a262efbdb153fe5ed482301077885e6d2856ef1d3f7bbbb75c6b4abef", "ref_doc_id": "b4363a02-6bcc-409d-9b07-e5f049b36521"}, "c1ac0cee-f408-4ed6-93d6-4d8d3f121cc4": {"doc_hash": "c4ed4eeb5fb449fd87405ebbd53ffb64bb1257412d023ecbe69e98f175986cfd", "ref_doc_id": "fa44f559-94f0-4e8d-89d6-08ac97cbcf5c"}, "f7b4adf5-50a1-4166-ad87-c63fd469fde9": {"doc_hash": "26e0a3de333d5750b98d31a38c72bf7b73a40cbd03d5c26b7c152f3ba8216526", "ref_doc_id": "6564a331-5e8e-4dc6-b25d-1a5f9b359ef4"}, "dad8e2ff-4da4-4728-b4b6-18b449e08dad": {"doc_hash": "826a032c880eddcf5968b0b7e08e5d06bfaa6b0b84df93a4b1201bfac113831b", "ref_doc_id": "947d2039-01fd-47ba-88e9-f252582d0327"}, "ae27b73d-ffbe-4174-82c2-90cf1e82231d": {"doc_hash": "a182868dba05791d5f6813b9ca73e939f772fbf246b6c6d7fcbe38785297595d", "ref_doc_id": "b8d93ea8-ad6d-44b7-b6f8-0db1b09a1090"}, "574d83d3-b007-499e-9da8-7c129b2f7b9b": {"doc_hash": "e577d92ed22d91c7399e7d40d8717333ae845c31ec75eff6437005d77b275db0", "ref_doc_id": "8689007b-bdb8-4308-a497-09b5b0dbcf39"}, "dded4c6d-a492-4305-aae2-5b07d3152df7": {"doc_hash": "5e42f44f5b37262e83e107a6115df18c5874445ec7fb0d25b9097afd55cfb130", "ref_doc_id": "c13a74b1-f89b-4e58-98f5-7f26f33cad47"}, "e4f60eea-1c32-4cf8-9459-ebd57ba97b97": {"doc_hash": "edbda6a20d33de929163d3f47526dff24bba43c632b670db3b3b5849760955ae", "ref_doc_id": "dee2be0c-77e9-417a-b806-0b5adbcbbf20"}, "2659053e-3f72-4b65-a00f-652c23d2f890": {"doc_hash": "dfc3167f9d2e183953da42b66d24574c9e43da6f8a6251ca85f8ded9398ce7ef", "ref_doc_id": "ca643c37-9040-4b29-95df-2a4bfa423659"}, "5ec1b1c1-ae60-4885-81db-e88e02276441": {"doc_hash": "03aefbf50d5e6dd5730330922363634fd98255d84973b67a7925a8bc66ec01b1", "ref_doc_id": "c1654393-06bb-435c-99e4-569fb1fdf402"}, "fd088e33-75be-49c9-b967-3e78a8c64ee6": {"doc_hash": "85d70df405b0067b71fa50729a0e28bdcb1fddae894ee435d9c4335df8a1e2b8", "ref_doc_id": "8be3071a-ee3a-4f44-a460-7171e02a9d10"}, "7de70f3a-9b70-4ba7-976f-bbfd1f95003e": {"doc_hash": "a2dec2af6db808d0da6735638d3c0386afa5a9ed7f5c34afce07a5c25af79bcf", "ref_doc_id": "3f743256-181c-45f6-ac06-27df13b1fc8d"}, "758c3095-dacd-4361-99f6-7d02332bcadd": {"doc_hash": "4c3c4fa9f36649eba8af9dc73174f450d0c9ca244b02115963bf4b62034be79f", "ref_doc_id": "c5c93e3c-6d81-4b12-b6d9-a34d8cfd7a39"}, "2d8f7d20-55fc-44ee-985f-51750684ff2f": {"doc_hash": "3ee5dd06d05d4f16b9da2bf4d9efcd84abc5c9e92ff2b8e25b39ec7dd4bb8492", "ref_doc_id": "8dbb039c-7547-4cc0-b144-0b30c62f4ce8"}, "dfa5f590-ae3c-414f-bf1d-55814c92db55": {"doc_hash": "249f4dd3aa01b3eef56d73e5a913dd6547659774c792c47332594f8d3dd4d46e", "ref_doc_id": "b83d6c8e-b2f0-4e24-a027-0a94fdb10e11"}, "ab2425a1-5500-427f-97e5-5c53cac8b759": {"doc_hash": "0ebc50c845003339e9a285470f53d57ba85e380ded5d39af6248faf299d62f88", "ref_doc_id": "a5e29dc4-abd2-4d44-b421-caeb71dbb37f"}, "75514c44-40c3-4949-aeab-efda6efac53d": {"doc_hash": "2c06e047a3ff556d63c520b5d5e8e54dee430b28e2477db711e1a2cf19515a96", "ref_doc_id": "1f1db1d8-0a19-4d29-a0df-27ff115fd1ed"}, "35a0a413-81b5-4393-b01f-1d67354ce36c": {"doc_hash": "2efcc40bc40626e7b72ac127662fe5d2bbc722a8e53a1639b80869f778192e17", "ref_doc_id": "312574f7-a81a-473d-a6c0-4790d02129ac"}, "661f9133-f628-4908-9345-49edd2290949": {"doc_hash": "f3cc2893859c530644c96922f54c410162304e5e7b0fe40a859e8762674937a1", "ref_doc_id": "5da6cda7-bd47-49b0-8b2a-5a2282fb0305"}, "6c7063ad-bf03-48e5-8915-135b004e09d4": {"doc_hash": "12ed86464199c6ee15cae9ed9ca15537a0e9c540277f1546f594dbf62c1c782a", "ref_doc_id": "ea528606-bf5b-479f-8a20-8a5796962786"}, "cd2caf57-0f51-41f9-9797-bc2f6d2cda76": {"doc_hash": "21c0097e15843076af3e27eee004f4a78f316e2cfb20d5a8358bf5e2ad587cf9", "ref_doc_id": "9ebc3a8c-7361-44d3-b88b-fec0f51e32ff"}, "bc34ccb8-f9cd-4506-9922-7f111f33ce27": {"doc_hash": "755057590eaa910aae02b4273cdebd3575eea47c3fb9c2c11c357d03a25a4de9", "ref_doc_id": "72835043-4b28-46bb-9cab-e8435a7c614e"}, "ad2cfd11-da34-4d64-8755-ed26af4fce2b": {"doc_hash": "44344b027befef6903bf746a2903a9ec3f4291e424000b406e020987bc840af1", "ref_doc_id": "74f612de-c799-46bb-9c81-74b018722d5a"}, "6daa145a-db42-48bc-9aa4-cc712582b7ec": {"doc_hash": "b4e6b72e6f8d4d0d376fd2e0594c1c4391451bf1b57ca2382c6d88775902f7a3", "ref_doc_id": "6e851b3a-8bdf-4497-b434-ec5e6d101454"}, "ad21dca0-8439-4811-9c17-c43f81672542": {"doc_hash": "e09e50f9ad53ecfaae0c646e1f3bda2b682133f0633c1a92245823135cecbecd", "ref_doc_id": "bfb1e4b2-62ec-4908-add0-4c00a2769436"}, "64bf20fb-d971-47cd-967c-7cbd89c8f28c": {"doc_hash": "01eb2c5af4f136efca91efe3b9702ed5b3544d97b1f9994e1e0ef8372cb8f90a", "ref_doc_id": "87ce9d0e-1c89-4872-8e31-97944d8e8c51"}, "f388fa19-8ec1-4f5d-b51b-096d7bb25411": {"doc_hash": "ddae5c8aeb11f63a0f0ae4cd2d5569e58bad647ce927e96205d95a279b7e93d2", "ref_doc_id": "d31f4d90-57a5-4067-aa51-f92cfeb77c13"}, "f1abcd22-3aa7-4c4c-9daa-d1548797e50d": {"doc_hash": "7d345211f3c15d82e0688ee6352697264a257160227a12ed54c62fd8cad3ea88", "ref_doc_id": "dd970d9b-0b8b-4ed9-9dc6-846421897dd3"}, "8f93aac5-0490-4f84-bc61-e5c83366a164": {"doc_hash": "a452bf2445e6e1ffa57b480b880e539dc2509698dc7e863ea0a10a750f76b6e7", "ref_doc_id": "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e"}, "66777422-b2b2-4e37-a228-10a9972b69a4": {"doc_hash": "bb05539440e01b189c1870eae7cca43f9743ce86186668cd341432bd012cb835", "ref_doc_id": "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e"}, "75d469e6-0634-4fd8-9d25-4f84df3d85a3": {"doc_hash": "c0e41cfe24d95474bad6b31f23d4df2ab096c819085f392c0e6b485ff7cca35c", "ref_doc_id": "7381aa2a-b655-4b6f-80da-8ecde380b8b3"}, "43a3b64a-d63f-4d15-8774-2fdb7a0b7bb3": {"doc_hash": "8e26e10c7401c49691ac5c76b675175a96d15adf6efd39ca0f275a7329b1ef63", "ref_doc_id": "76810a52-3a2a-4570-b405-ff2cc37b916d"}, "0c80cde6-c21e-460c-8085-0dcaebc82184": {"doc_hash": "d13bfb4c480a047d54bf4d2e242e7cb8afeb2cbe75a41de32d29348728c61708", "ref_doc_id": "76810a52-3a2a-4570-b405-ff2cc37b916d"}, "994af055-5cb8-43b8-b5c0-a6611a9ba9fc": {"doc_hash": "a36a498727f195f95057f8db5afc67694fc16984dbe5f76e87413ff09544d0f3", "ref_doc_id": "76810a52-3a2a-4570-b405-ff2cc37b916d"}, "d7174ade-f7bb-413e-a5cc-2a79716ad5e1": {"doc_hash": "f4a403f7ea1c8234f0dbe52eae299f3531845a504b960b50667d775db46a0649", "ref_doc_id": "66c99f47-b3bb-424c-97ab-b13c3d3b2644"}, "5b65369c-77f5-437c-8e10-863cd794406a": {"doc_hash": "2b165d76f2022b68c41e97450ba3a94ba3425a39cc3a351f0690ff857674a789", "ref_doc_id": "93c57eb4-6619-4463-9f5b-b9d0db78bb25"}, "63353ec6-d89a-4144-972d-0f2056480626": {"doc_hash": "84dadaaead67ac84cf042b74c075e61ce2517f6fb675ad42eaeb5b838970c6ba", "ref_doc_id": "de29d7b3-4082-44ad-a501-6b0221e75535"}, "933de487-2d92-4f4b-b211-dfad45606be3": {"doc_hash": "83643d4cb301a1d4daa24df0bf479a0f5c75c40003bab10650404afa3c19a65c", "ref_doc_id": "fa26ce77-ec79-4c86-a408-e9da639e9072"}, "7bc490c7-da84-48e6-adde-a3a33c8c517a": {"doc_hash": "934d56d8a6cd5b0001f5237b982751b5a766aef04c266a7817058d14cd646c42", "ref_doc_id": "89e38262-aee1-464e-8fa6-4d99ca3a0c43"}, "bda1eff3-4065-4064-8990-a55f6b9e5553": {"doc_hash": "025e6ed8ca9555e0d1df16e3d43b3edc03ff89a0af74777949505224442257de", "ref_doc_id": "acba8396-316b-4ca2-b6f2-46e93167ada0"}, "376ec204-a12b-4d1f-aeba-6acfb75b1376": {"doc_hash": "283ebfeaffbaa10a482875d6d7b60fa3258f20c0edbac13145d5c6d0de1f17d8", "ref_doc_id": "83fab574-e052-4f72-aefd-143256f2c2df"}, "84f3ba6c-bf70-4a39-8f0b-182f8e953456": {"doc_hash": "809f80846d6875e9b3ef1e07fcaf2a1c5b805a5928660666b3dab844baf95984", "ref_doc_id": "bb4d4eee-fe7e-4102-b615-d70ed2fd0521"}, "e17d2ccf-3508-48ce-b0b3-5a34bcba5efa": {"doc_hash": "be5a3d05dd584e3bd995f9364c2bbb86656cca6edf934a426ddf760ae0b12741", "ref_doc_id": "4cdfe63a-7db8-42eb-94e6-80bd6a46f136"}, "1986e690-9130-4452-ae18-18771a84ea69": {"doc_hash": "699af09019f0cac9f1404126a8d8223fb222b5d59e6d41830fc32c52597fdbd3", "ref_doc_id": "074c9b26-3547-40c4-9a7a-18976a57bd4b"}, "d66426b7-d822-4fed-950d-bced8a7c6e65": {"doc_hash": "315300acd48ef9cf01edfb7293977358e3f1dbe7677522d08eefa483ffb9bc37", "ref_doc_id": "60793980-12e4-4079-84ad-c67a89648afe"}, "b22bb1ef-b3d8-4131-8a31-e7e764edc533": {"doc_hash": "8a4385b808ac302b5c26e36dc8e2c998868d23904a81c788f2598ba797cf945b", "ref_doc_id": "16fde871-72cd-423a-8ff7-8595668c2875"}, "f21db892-405a-453f-abf1-82569ba90d36": {"doc_hash": "40c4cebe0d934b5566ef70f15e2f1ad74a03d51f1ec3d167d0fc267c85ce38f8", "ref_doc_id": "60de412b-1f15-4dfa-9743-6c7d9b1a8961"}, "4ff76649-bf3f-46d0-adc8-eaaf6689390a": {"doc_hash": "cbaa593d9efccaaca400a97793bdfdd568cbfa5d48350c379b31133ea672e5a7", "ref_doc_id": "212ef033-dcb9-4d36-af74-087d2ae2f785"}, "e8f1cc4c-ae37-46bc-9f7f-48f4b025ab59": {"doc_hash": "c11c6ae89e102dcc60a52e604f177c2fa37b0fbe99867f21e96b4ca0bb756fae", "ref_doc_id": "b205a097-5797-48f8-a796-0fd6d4cf0295"}, "07fd72a2-40e2-48c5-bc4f-6ffc92acf605": {"doc_hash": "85132a94a3a667f57504fcc1664c53643d744688faa14502891e3dd1aa58ab73", "ref_doc_id": "6539970f-6ae2-4bc0-8a76-140f89412b07"}, "a8f6c8aa-d74f-4ea9-a3d0-5097944fdbf5": {"doc_hash": "2e16292789e270e9fd82ba4045cc597b11b3a6fd6355af44fca74a06d2d90ddc", "ref_doc_id": "c67f1fda-b273-46a6-beb6-874bced4e0ce"}, "e6d505e8-8b1e-43c5-8883-0ac530f0d365": {"doc_hash": "20a957c68b4c721f0ae36000ca83e867b21ab49cf950601142d494d1b816a484", "ref_doc_id": "dc8b8e0f-a43a-44a5-93a8-c02a03954ec7"}, "f7b0c96c-bacb-4301-b8d9-8a54306bb382": {"doc_hash": "c04253eb4b2c8ec94a5778c2c164fc844d3d561e5930d72e794dd14cb8838d0b", "ref_doc_id": "894b3fad-8070-4694-beca-f19e62c79417"}, "de8abcc0-4bd3-49c1-b938-c7edcd535fdd": {"doc_hash": "63eb0b5bf00d2fb1b3cf98e5e384b02c9899dc94b315a6e67f6bc1c6ff6429f8", "ref_doc_id": "83b7bc1b-13f0-4214-9b29-840af1af7e91"}, "7e489598-c08a-4488-bd47-9ddc3baa9648": {"doc_hash": "f42be6ac4bb26ad473c26e356846c7f5999d9d8d3c25adc9c608f3cf52b96449", "ref_doc_id": "a49c0a59-1a01-419b-8a1c-74f43daa0713"}, "53a59510-e68b-4007-84b5-25337a01066d": {"doc_hash": "5365bd0461cea3d3196f8dfa0bd6beaf234c608a18057394df96365ac3cbd1b9", "ref_doc_id": "ce94e831-4971-4f31-aa06-37d95477a07c"}, "0bd94d69-c600-422c-a3b0-a742e984212e": {"doc_hash": "c7675ad8ff59956aa913b6f3665846bdd17135825ca6a71ef55b583b3bad6074", "ref_doc_id": "fc3b14fa-4ce1-414c-9469-bf97bf6b5c3a"}, "84f7dd6e-0d1e-4d34-be9b-20d737f80a2b": {"doc_hash": "d67bfa2d3deeb776793eee71716bcb7abc42c79a5cee3ed63d543e3581f042da", "ref_doc_id": "570f5145-a459-40b3-8ec4-4d99ed170523"}, "3ce41c1d-0133-4cd6-98e1-06e20e752621": {"doc_hash": "7599d49c0c58f4f5b26cfab337ebe1f623406218348bd33e8406e492be76d444", "ref_doc_id": "6a2fa6b7-79bd-4d94-899b-a821e31a4067"}, "f2192e1b-87c5-4be7-885d-01328d2bdbd3": {"doc_hash": "749aeec77579f22bc6bd988085bd29b15b8792695aa2ca55dbe66a2022b009b5", "ref_doc_id": "d7cb4ddf-34da-4cd1-9d24-1576976825eb"}, "46e06310-1280-4ff3-be64-56052a015025": {"doc_hash": "8719bfeb898b2aacf63751bac9f6aafc830938b660b777a057eb8183d9087016", "ref_doc_id": "b88a79c9-4e3d-4bbf-b921-46a1147621ca"}, "9f895bb8-1848-42bd-ab38-71890c44df16": {"doc_hash": "e11a336ce0b1a165ebd41166dd2c66ea4f4aa8faa42cb1fd9dcf58287cb08a9a", "ref_doc_id": "dda32beb-6186-4a50-8428-f3dc415c9e81"}, "bd32d459-a0c3-4a1b-8eaf-812710cf0dfa": {"doc_hash": "140e63d4c38b5da008f4cb1d9b3bae412bf22785ed30facad1d4b088682b50fa", "ref_doc_id": "4a1df297-0170-4078-8ca9-b9413f5795a9"}, "fd1c10e3-b0ea-43a7-b6e1-268e15a46c84": {"doc_hash": "5cf29f9c4a98f78b314c283ac039dd6ea5612785970aab466bb3319c4024cfb2", "ref_doc_id": "da175680-0026-4e71-8419-56d8794aec1f"}, "5c92a5e4-5302-478d-a263-044180c2dce2": {"doc_hash": "b29b134199e43eaa8c6ebd6c4aedf1b57f170f6d31513d52c3e2d21c0b3799ef", "ref_doc_id": "eaf3cfaa-336a-44a7-a7e3-31ea26f5fef2"}, "8f629801-e8a4-4da1-888e-584d32af2251": {"doc_hash": "c203543e53246510c58cd326b56c501de2a1e96c3ec374531f0d1fc160ac5f08", "ref_doc_id": "46d17309-fb24-4414-9036-cd3701e140f6"}, "4c672559-7228-43e9-a984-524f82316751": {"doc_hash": "b0905abb24703d0de28a6ad3026cdd02c25c8c367bce440d738aa9cf7ac7430c", "ref_doc_id": "80774ca2-3b2c-4531-ac74-b9ffe9ac9281"}, "ef78e1f8-6287-4fe6-b0d3-bf374dcab72e": {"doc_hash": "d9d55fdce632af4f5a4bb8daf30a8a9ff700f6163b02c4a2aaf0e86e7e144544", "ref_doc_id": "92c72e6d-1575-424d-a6f7-2ed917db56c4"}, "ae405b8c-ac0e-405d-b6dd-cc26dcbcb3ea": {"doc_hash": "b372c1ab3c2b8090f0506e578de7d76964d3dd522bc958f5e6917b8ec36db48b", "ref_doc_id": "52fbb5cf-2405-4fdf-8dd6-57c246578c1a"}, "e4d45a52-ddef-4688-87ad-e0a249481aac": {"doc_hash": "05743ca7b02e81caf9a5b24edcd06d439e444bdb270a6ca5c9f5d5b3f1eecc18", "ref_doc_id": "74067945-faf5-46aa-b14d-8188fac4b78e"}, "72a1b181-421c-4172-8f6b-1c3e2ec19c21": {"doc_hash": "7b15bad97cad0e4d69be2c2f3185a2f496024ad2c07c209a56267cf0948a4e92", "ref_doc_id": "795dc6d3-e1e4-4846-9906-3cd1acbae209"}, "ad03f177-53cb-409f-b634-0ec1ef471605": {"doc_hash": "7dc864697a22a6997583a1ecb8497a3c6a7a86f231e98965b33c9f1667ac222d", "ref_doc_id": "5b7114f4-1b2c-4bda-968b-17e026c4fd3e"}, "823c3235-c1e6-4727-b33f-6fa9c6e5f9f4": {"doc_hash": "f6c8e1c4c4f61c1dc8427d941ffa6829e01eaf234a166a6d5207f3d31dad2654", "ref_doc_id": "9a270466-e58c-4d09-82fa-a828ace53634"}, "1f3227c9-f252-4ba5-9b4f-2e1842e88794": {"doc_hash": "647483ee438baabbed773a25ffa72687184eba028e639a7309a820ae2f60dd88", "ref_doc_id": "21c637e9-9c73-48ca-b0d0-a7f4e05414bb"}, "47c39e47-9b8c-4fd7-8fa9-cf5825d7126d": {"doc_hash": "1679495bfc335186f26e7da132352d2bbb780d230256f12f0c73906617a6fc6a", "ref_doc_id": "dd835b71-3dee-4e09-94fa-8f98be5a55ca"}, "a5e893e6-6bf8-46cc-98f1-db34321ac02c": {"doc_hash": "fe75a2ae6895f74bf1795d6f79fceaf7e6838cb710c7ce36e3e42d274dbe9fcc", "ref_doc_id": "c7668865-666e-47e5-8d1b-0460e607aae5"}, "90db7e0f-7bcd-48f9-84e6-f33f3f58afdb": {"doc_hash": "4cc461dcdadef786f5ffce71e974fd79b02e3b8a104a65d75971814e041ddd6b", "ref_doc_id": "eb7b55df-2c9c-4aaa-b6bc-f87bad477ed9"}, "80a60630-45d7-431c-960f-1cd66f07fcc6": {"doc_hash": "4900a51b5d2fe2cf04cbcde2e7583c128e08d1b5e203bb572a0a436b9baa07ff", "ref_doc_id": "3a32b0fd-9e60-45aa-82ee-32d4307ff28a"}, "946c6516-4562-4e2f-bce3-019152519132": {"doc_hash": "aaa2fdaaf74d37c52cab22ba4e4b60af898adc1c87816e96ff0fb011b2941ab4", "ref_doc_id": "bfbea66e-0a6b-458b-8150-77dbd9897872"}, "66edf23a-010c-4246-8be1-a73c54ac2beb": {"doc_hash": "ce38941e8ebdb32f9f680f83c57e104fe85002017687604644fea3dc85dbaf9b", "ref_doc_id": "a301c52b-aad1-4cc6-8298-0ac7472c0fee"}, "604c9fb4-9a7e-43c0-8a84-0bdf5a41478a": {"doc_hash": "a919507e0467862e33e9c33c06f7ac44cce1ebcfeed69d3f13c661a68696c3f0", "ref_doc_id": "9cf9275a-9d99-4f72-bd67-a01098ab2b52"}, "3ac789cf-dd1c-4dba-93ec-bb1ea2d31d0f": {"doc_hash": "0160c6603fada0791cc496506fc2f5b9dcebea71cb5e9578c1feb13b2b922e0b", "ref_doc_id": "dd22865c-165e-4d1f-a79c-7d85ebd158ee"}, "bc4ff44d-1d1a-4e5d-9e99-f67b5197be85": {"doc_hash": "85d24585cc73d32753ae10e3d897db135717c85773cee93ca1ac03d640f6902d", "ref_doc_id": "ee0423b8-6beb-444b-b753-0456b2e83b0f"}, "a0546f67-7d0e-463a-b021-aa94f98bb72f": {"doc_hash": "f9c34a6bcb4e34b7a0efd20f4fa48830639d27343fb4d21717b3ad4dc53a5745", "ref_doc_id": "0344ac5a-52ac-42d4-8ac6-67e2494065c1"}, "6ce3e26c-93e2-4ad6-b22b-ee6b746c6d16": {"doc_hash": "eaf02fdcc094bb03d822a27c9a93383367b7f906453fb7daafa87ec8717493ca", "ref_doc_id": "9f2b844b-9cb3-491e-bc85-ae787f0b0c93"}, "3201735d-dfc1-4ce6-b1fe-965dd2b84194": {"doc_hash": "67ecd2a4ab77909a56aaa9e3bee3b5e056f98475599b09670cf0f0493abefd23", "ref_doc_id": "68a34de3-0862-434b-bdbc-4c5288a92de3"}, "eab516d5-ca98-4169-974b-264fd4acb48d": {"doc_hash": "5145f2fa4b4c4cc8beaff032e43940dd7b241fcebcaf167153c54790dc8d2188", "ref_doc_id": "4fbc7182-be77-45b5-9bdf-8e38ea56d4a3"}, "16744abf-266e-4938-ac99-7f50fd584759": {"doc_hash": "c497c16b1442c5e4f31b28b3a1ddf0877c4c820a2c4241bcd89e07d938899d7d", "ref_doc_id": "963b73c8-8738-4927-a4f8-73cb795ed0de"}, "4564161c-39a4-4027-89ae-f88717b641ae": {"doc_hash": "ea46b74ac3e046762e759d197200d2ae282db34f3561ff72444037842305e1c3", "ref_doc_id": "82434318-c953-4844-b730-de7d80778f53"}, "3548821d-92a2-421b-8338-b7b154fff1c1": {"doc_hash": "acd633bd1b9961252d470681c16de98b7e9c2eff09ef89c3f0746b3eab7820ef", "ref_doc_id": "54703c3e-944a-478d-9556-4810241d9312"}, "eff0a380-bd8c-46ba-b9de-2ba8fb70efdd": {"doc_hash": "2f538b5e78d5795f8eb2c111bf17a186cc96b6f915249588d6e233b88ba01a89", "ref_doc_id": "d0ea9fab-630b-4a02-86f4-f9ad7087ac8e"}, "005af69f-ef2f-4996-bef7-c2a67176f626": {"doc_hash": "e20818cc6f359704f3eafd22835091f505317304e64ef114ea18976a5e73fb07", "ref_doc_id": "562df8e9-0372-4fe3-8789-4e43a83ede66"}, "90000692-28d0-466a-a6f9-7cfa23ade06d": {"doc_hash": "2638c8771198d85696bfffc927e7f7d56e024806ac6fbf672ee52b98aa1873b1", "ref_doc_id": "562df8e9-0372-4fe3-8789-4e43a83ede66"}, "e20d452e-8706-490e-9626-3d6b876b1ae5": {"doc_hash": "4f7b419aa615dd67d82e67e43ea0b727f6bc7ef63ab8302e59b36a7ace8d76f0", "ref_doc_id": "562df8e9-0372-4fe3-8789-4e43a83ede66"}, "2cd38dc2-1edb-4b7b-ae7a-be8a52a0e001": {"doc_hash": "8ba50bf6444f5069eb002ca0577557ad16b6ccdfd1cfc67b59f6cac37c9cdd29", "ref_doc_id": "562df8e9-0372-4fe3-8789-4e43a83ede66"}, "1472f464-02ca-4c01-8fd9-36fdd78c4f3f": {"doc_hash": "9264fbf535614a0041a1c8092adf21a0d737679ad70bf08fe290ca3f5a7016b2", "ref_doc_id": "4d20b213-0ac6-4724-99de-1cad1a1f8876"}, "0df6f3d0-ceea-46b4-9931-0d773b98acc6": {"doc_hash": "865cee973133b114c38790541d902db7621282cb4663deb906ae469da61309aa", "ref_doc_id": "58f75cfd-ced0-4bcd-aaec-9adbd21143f4"}, "e0b81967-a3a4-4ba4-b2fa-65876f0c0371": {"doc_hash": "502d2ba6757b7c3c0845c488ab03fe5227e2bae98e0dc062aff6ddc627dcf2a0", "ref_doc_id": "58f75cfd-ced0-4bcd-aaec-9adbd21143f4"}, "f380ffac-a40b-48fa-929c-787134a873ff": {"doc_hash": "fc3391ca2fdc9ef6d65b6e64d2eb5a1966fe390b2085a696aa07ef8ed36906e6", "ref_doc_id": "d826d770-7e0c-4939-9227-19e9e86b3cff"}, "5721b879-b82f-47ad-a48b-3767aed8a865": {"doc_hash": "fba2c186807621c814828901be9d234e9cab416f3ef4bad89562014ad6c68fd3", "ref_doc_id": "3a91a2ff-199a-4b57-af18-dfe1ae368793"}, "92bc0117-1511-45f2-bae1-823604b07c3c": {"doc_hash": "250868ba07fc1dcb72b263b0973f9c7dc37f6bb6e3af46bec0524772ae7e1a58", "ref_doc_id": "503300e6-cbe5-4a9e-894a-b5cfa4ff8298"}, "5b625f3e-e1cb-4f19-8405-3684f94a228c": {"doc_hash": "45077a0baa238fe1a898036b15b52b9f8cc1413480e86e5c7eb5be70094847c0", "ref_doc_id": "489df165-3080-4f9f-8619-36f23bf98d28"}, "d1e8f9fc-55da-4c49-90a6-0bebd4b857bd": {"doc_hash": "04c1c1a081826d990e8e3faacf3378b5b30e79c00b85b260ea810fae7b824cee", "ref_doc_id": "54963b58-0daa-45ae-bac7-7f6527de9389"}, "a66221a1-816e-43a8-98af-81028cbfd0ba": {"doc_hash": "9d354445e507351b0a9c2ba3eb1cdad8c3354f6dad50ed41cbb2b2142bb5fb07", "ref_doc_id": "f92843d8-b210-41b4-a5ee-d671f9d5372d"}, "d409ad5e-9742-4c6c-afde-ba7a3d43c488": {"doc_hash": "04523f85f400fd1bd419f1361d4dd5afcb6d31712c5505cb36b48ea07cd4e828", "ref_doc_id": "f281906c-a218-4b40-b363-8fe59d789839"}, "97ed5e12-198a-406e-982e-d513a01027d7": {"doc_hash": "d927267483350dc71ea6b783365de227e2ce590ea55c58dbcc94225375fa8919", "ref_doc_id": "822e195c-2019-4f68-ba88-8a6bb1381792"}, "f0664842-5249-4267-b3a0-31a5d691216b": {"doc_hash": "aded56e8fed6e9bf0f22ad7991c266fc2e523a30c324510d0f5747d6cd0bdb1e", "ref_doc_id": "2abe28d0-4016-4ddf-8a1b-bed807ca2266"}, "1467602a-6ea8-4cdd-967a-54f78c342d4e": {"doc_hash": "18d0970266d436dca07cb1f464b13e73c6f3b5d887ac03189f40b0357054da41", "ref_doc_id": "66a79f9e-7577-44d3-85f0-b71dd78a3027"}, "b7566439-59ca-43cb-b6fd-9f1b79017586": {"doc_hash": "aa2464b72870be11aa2e4fba6261bc0fe5c39f1dce2d26eb09b9852713395bc3", "ref_doc_id": "5e0dda40-5d34-4513-b38d-601c879304be"}, "97fd28eb-7580-472f-a1ed-3dc2648d9e81": {"doc_hash": "e74bde88303574da9add427956d024cd577b63fb7f54514167969d8bbdb12468", "ref_doc_id": "b2123081-6665-4ecd-b8be-8076262f1c46"}, "936174e5-72d8-42c1-9589-ce0f2cf9270a": {"doc_hash": "dae5ae96eb010dddafdc7855ac16445ed925e38130e422d385f987e9469a6535", "ref_doc_id": "1a176e47-3662-4f44-91cb-717ece66265f"}, "76ce7bbe-3dc7-48b2-b395-0069f6d058a4": {"doc_hash": "ea6435cbe5bb559b07b6435dd5135a2461059fcd7ae38d1abf56aed18cd6a52a", "ref_doc_id": "1e9f3e80-9b1b-4704-8d1f-bda5dac0bbfe"}, "21569f60-f691-4121-a6b7-dfa8feac79c0": {"doc_hash": "b89d491e4d347253281dbe6418416f6cd2f653fd6960c747d678d152acacb857", "ref_doc_id": "2baf0cb0-e551-4d9b-a48c-0bb18bfc6f6b"}, "843843db-8fa1-4a02-b4d6-9f50be987d94": {"doc_hash": "e668a96bbdbbca1fd295d7c0105fa9a8e5831effe52898461165ac259bee52a4", "ref_doc_id": "87e324e5-f85a-439e-aef3-61d5bf72cdbb"}, "e3b400d0-007e-42b1-bd73-5824a8399bc0": {"doc_hash": "5875d26e780c82bc2b2e890c8a47baa97f03aa17c741f7c0350ffbc1221713df", "ref_doc_id": "8d7c9f44-9dee-4d91-aa45-ed7373b52e65"}, "9e3979db-abd7-4720-8470-97c5548fd5d7": {"doc_hash": "033fed08a3440677c287e63eac76201860e431f6e2c0c5189fdb6185bca606b4", "ref_doc_id": "4b9ed1c1-5b18-48e7-8018-f5bcc744b57f"}, "3ed9c838-43fc-436e-b2b9-1cf4fd402789": {"doc_hash": "c03bae6d51381c43d8a9c0f378557636ebe0fd2f4de512772bdded00d1665865", "ref_doc_id": "b21cd3f1-f09a-482f-9a52-efdfbf790c6c"}, "8b32edb7-4980-4b1c-9801-bc527e8dfd13": {"doc_hash": "c5c508da56a8c1b436b9e1abc288a2c6ec55dfd106eb63901baa3c7df12502ef", "ref_doc_id": "5efe1599-b8a4-4f58-9aeb-e2a4076db626"}, "99fa414c-c342-46b5-8b86-9a450d7070a9": {"doc_hash": "25c058c9bd686d87ef24f72a32c9537118ea0eb19ed67171b3b8ad58b4293678", "ref_doc_id": "72b22727-70eb-40de-ae44-64a11aeb3cd4"}, "1c3afa9a-2758-434d-8088-5204bf4f23d2": {"doc_hash": "a0b4a50f0b667bbbd133162ac40497207a6ced58221d2fdae91eb9353a800c9a", "ref_doc_id": "8b5f6116-110a-4731-9554-0aeed1636e21"}, "ab5546d9-3227-4b2e-aac6-98af29270f37": {"doc_hash": "6bf1c2d86774822417c0437ae2f156307bf2e6ac3cc55759b2e3b78b37d6498b", "ref_doc_id": "4837d268-a4ae-4dc5-8ee8-a58db7126c6b"}, "3d09681b-a03a-4cbb-96ac-3a6aee72b7e7": {"doc_hash": "ed2d07f0addc308815941c820484173e185aa957573089222db9fd342cb73ed7", "ref_doc_id": "96465517-6f21-45a3-b3a1-db856be832af"}, "b5b39582-7e39-43ef-b7c5-ddbef18269b7": {"doc_hash": "8b50eef53fb2c8525b25a824f3319f1ec25c181732c35d7f53809cc88f97b2db", "ref_doc_id": "89ff5111-8b61-489d-897c-c0399c0ed95b"}, "0592e598-b858-42b5-85c1-da7fbe793bc6": {"doc_hash": "d22d6383949264e0eaa3560b0480bff4c061b65aa7f5d3e099faffa81ad8917e", "ref_doc_id": "37352313-643f-41e8-9b0d-c5418883c4fc"}, "1bfedfaf-2489-4181-a2f0-98f18f21e558": {"doc_hash": "e2cc2759817173111596b576cb33505b78c7e6f39e0dbb62915b3ea52ccbb7ed", "ref_doc_id": "61ea398f-dbea-411a-87c4-5b76ce919621"}, "435bff85-3394-421e-bf0c-c6c8a599028a": {"doc_hash": "ecf9c2f3bfd4b5a20ba42809e45715f033ec4d516c27287214ffce83a84c63cb", "ref_doc_id": "8fbad48b-935c-4015-a4b8-8c9bd25a09b8"}, "7af6edfd-8eaf-498d-a9e4-d18a0950dce2": {"doc_hash": "95230d69755d14a2a3c80ae8585b2a6214ef0d5ffef7fb6034d08635c7ca2a2b", "ref_doc_id": "b472a290-7385-4441-b009-8ff32fdce009"}, "43a60a64-ae57-40c6-a622-ced246943326": {"doc_hash": "f3883f2ad6590021be2c4c338b269b2507727910b5c090c3971203ed1c5a5803", "ref_doc_id": "e4126b8b-6c9d-4219-9afe-1d61e846c1de"}, "16d09d62-bc28-4abc-bdcc-6b42374f57f4": {"doc_hash": "58b60622d41a72300490f2eff25b59d0406a6fd5fa6cbcacb1d0d9650b466217", "ref_doc_id": "f1bc3856-9d20-4724-a709-cbef52fc6e73"}, "1ec521c8-8d83-48fe-84a4-18a149e64e22": {"doc_hash": "b9777f6dbfe6a1f45b9dafbab4090440980bd7ae601fa91473bf430f21db69ac", "ref_doc_id": "48687e07-bd8a-40c1-860f-8f9bb0bad411"}, "e84bf9af-a1ce-4884-8393-2654282e6e1b": {"doc_hash": "eaad4767b939fcb632089bda7f1095356de9dde4f3d580d298cca774e87b75f0", "ref_doc_id": "a963af26-242b-4378-8550-c66f2f8ec470"}, "3f1a4096-801d-46f7-bfbc-6c490dd90a14": {"doc_hash": "d5989d19fed170c614e104f8220131350fc0c49b3085ca2a28728529852b3876", "ref_doc_id": "f84da628-6a44-4073-ace2-38dae2350a24"}, "2ef6a800-3387-4dc4-84fd-2cc1f99c6410": {"doc_hash": "b407be6d882cdbd7d9142f1abc4aa510367df47ca3034a1e7ed29ad655c4df5c", "ref_doc_id": "c8a3405e-be8f-4453-8a6a-25eaf395202b"}, "f1438c65-a5ec-415c-bc6e-5bbbc0a58012": {"doc_hash": "11cbb7dd0652e284082598dd2d91050841be7646ef68be1ac5f168a005534f6d", "ref_doc_id": "06dd46d8-3c28-47b1-a72e-fc4ec913f24c"}, "686012be-2063-4270-b340-42b2f02f31f0": {"doc_hash": "12e1ee0ae22c2eab14c13b321ed0d6223eb7f1af396cc6496c3a0a1c9c428c14", "ref_doc_id": "dae702d5-0346-4c5c-b8b8-7b1b4e2300a5"}, "6b868a6e-04ed-4cd1-96e0-c5fbfeab7f08": {"doc_hash": "92195db467ac09d4092ee95b68ae3f03e923c892377a414b3a0e5bc62d50cb25", "ref_doc_id": "310705bb-ca2c-4eb7-a451-24da8ab12426"}, "c8a4544e-a90a-41f5-be8c-19728bb2dfe0": {"doc_hash": "5c4c247da407a5720014306d4b6eb3bc2fce84da3558366340fa40d759c19480", "ref_doc_id": "f699c7a8-0ce9-4072-9a95-2645eb316c88"}, "91244c15-b6c3-4ce5-bf0d-5f801b0b7508": {"doc_hash": "9f6f1ebd9c7bf676a406f2a99790c45997e750ac8d8edf06b9fbb8e452422901", "ref_doc_id": "99c28277-0306-4d81-8795-ced83614d1e5"}, "a7404e0c-09fd-45a3-9efc-75c8b7fc6c18": {"doc_hash": "ffbfec86adc58ab1fd05e9f1976734bd0ff5ce98e427e1a352e614e938519da8", "ref_doc_id": "c52466ff-3012-4504-a61c-821e9aad3493"}, "855525dd-a016-462b-8b1a-b6833392e772": {"doc_hash": "23045685d2a0398b6b067879b38c234ff6924f167f9a7ae778cd36351988a654", "ref_doc_id": "6d918a7b-daf6-448c-b89c-8571f605c173"}, "e2a49ec7-2948-4ad9-b06a-65f9b33808cd": {"doc_hash": "8c0c977239413cdd94ebe0c9cc48400773f767cbff6ef6232aeb661dfb038db7", "ref_doc_id": "b8cde3af-b640-47a1-8560-0a852f53bad7"}, "b401357e-0599-498f-9646-ac2867f77daf": {"doc_hash": "542ec3807aaf18d143581f33e2a8a2b2e60eedd6263405a300df6928925678c6", "ref_doc_id": "76fbac15-1297-4e6f-a657-2cef79e2e162"}, "e02b8dff-64b8-45ba-822b-134bd16fc859": {"doc_hash": "b56170c0bc4956a783a97d66acc3d1e110801ea95a1fd630f93ee879376c1529", "ref_doc_id": "db6b1bd0-7e8e-4f96-a6db-24874835b3c5"}, "9a92ce77-ab0b-4fad-95b0-02804c02166b": {"doc_hash": "e0e6ab963523ceadb2b223f7306cb0367b07503c49f101a57150c8abc36ee59d", "ref_doc_id": "db7bedf3-8018-409d-8737-ac87f9cc2f17"}, "43002f80-6558-4a20-84d4-9386c1f51826": {"doc_hash": "968e9f4b97553e21798c0332dc370f7b26c1d66e3fe43537b8c8c43a675931b6", "ref_doc_id": "ecfca604-7fbb-479a-88ab-283d7a212728"}, "b302d055-0f1b-4d00-bfa3-2fcadda52346": {"doc_hash": "0f9e235ba2d0940057633b65fecd3c6d919251c03ae9ff10d898ff2fb2418938", "ref_doc_id": "1e40a18b-a220-4cf8-9621-81a5eef793fa"}, "458063d1-6daa-481e-8423-5d886ddbd807": {"doc_hash": "d707d7c25f0b8168b22085a28deac7154b3cb30d52776e4bc81e18c1e6a90c7a", "ref_doc_id": "0156e4a2-a04a-4dff-89e7-db14bca6eaf7"}, "afb2eb4e-22d1-4baf-9885-a20780c8f898": {"doc_hash": "397c1cf23d07ce45ed4b3e9ddada1a0ff211b42ed470c71ca92247d10e2c43cc", "ref_doc_id": "49f16024-b8eb-4bc4-808b-5c22198eec35"}, "47980806-e92a-4b22-abf6-5e23ecdb474d": {"doc_hash": "b66848cb56dc40bba190617883114af2856ac8b24fbdf8e33827099d31923c81", "ref_doc_id": "15bd04b9-73ea-4679-9a86-a22c733dc51a"}, "d8ce0176-2ab1-4be4-bd91-9849822115f7": {"doc_hash": "7e9ab33f66c8a28fab3266e7e00a1c3c0294cab2dd96d760731a0866774b3b60", "ref_doc_id": "2ab82ab5-8b78-4fb2-b7b7-338844b19ae9"}, "d2529cda-e77a-4516-850d-1a53d92e0efd": {"doc_hash": "3bb5052cb60e0547978ae9c96a70266f8413c8cb2b4d16c933ebf3042184f11f", "ref_doc_id": "2e77509d-0595-4d9c-9390-bc2d9f2d2fda"}, "0112a5e2-596b-447f-826a-b50e6ffdb7d3": {"doc_hash": "3edc6cf9659654a40b472feba3cf2a27953ad42a2b30ac227fede34272a60a18", "ref_doc_id": "9c2fb702-19d5-4c76-bdcc-04465e78b1aa"}, "4ee92651-c4e5-4d73-b552-19d72eb749ea": {"doc_hash": "1bfe279016376a14ac39fdfb0130f3c107e544e612583a543f40727c064c5f9d", "ref_doc_id": "5504e5f5-707f-42b4-84c6-40f09942f9f1"}, "3860b06d-e4ef-43c4-9b62-c96afd496c3f": {"doc_hash": "d890a132ed7b60b81e457008fdd628f2c06adfd95666fb5b7005fdd78dfe7dcd", "ref_doc_id": "a50f42e9-0547-46b9-acb6-c9a57109c585"}, "901ea986-44df-49d9-b70c-f907f213c838": {"doc_hash": "29c265f7050e5fef3853a6539382f6ad24492609ae3dee20f6d40df49f897255", "ref_doc_id": "18cf947d-a387-486d-86f0-4f9ebf308eca"}, "2d074e3c-968e-4cb7-aa37-6f9c8168ed3c": {"doc_hash": "89da127b65a67af1c7a4c3cc4bb18557c8254be052e6baf744bf773d62026baa", "ref_doc_id": "9051c3ce-96ef-4234-8ed3-d807d227c70c"}, "f4250851-2f70-4862-b2b2-7f046a04685b": {"doc_hash": "756ffc864f44860899fff2b054150b0581d92132a3e2168a787e83f23f2bdb77", "ref_doc_id": "0d775ed0-11a5-4365-9e89-ae341a2368f7"}, "bbc1b477-7d58-4505-8316-73ae24a4276d": {"doc_hash": "d2b1ad1530b2c995b6cba6983c336bb007b929269d5d3efca701ef6baa1c042c", "ref_doc_id": "249fea6d-1ddb-49b4-9b56-1b9462b44a40"}, "abfc7f75-32aa-4741-a906-4afe63a1aeba": {"doc_hash": "f8fe47adadd150b8467c9c0acdd5344b5254410c51083c0bb69e73cf6657362f", "ref_doc_id": "3914e61e-a6b9-4f72-b512-0dfb7b8459d3"}, "11a7789b-7c11-4e8e-9152-f318b5336952": {"doc_hash": "55e041afee5dfb9388089bf0529256e2cfda7db6a74b97fe15587e4ed77fb190", "ref_doc_id": "87a02f41-004f-45a1-93d9-93ab7acf6718"}, "7f083894-9231-4036-afa5-878b4c2d633c": {"doc_hash": "9e4604dfc676f6dc99b95108fba897fbfa43c2db94fc895c622de3368a538f1a", "ref_doc_id": "51f18f3d-61e8-4599-8cad-370ea2cb8661"}, "5964dbf0-37d0-4421-b6b4-8e52cfe613f2": {"doc_hash": "981246032abd173221a0ebf38009919a19685911cac077068826f5089aff6caa", "ref_doc_id": "3c0c1bf9-307e-449b-86ff-b236af956e3e"}, "4f0487b5-12e4-4c71-9f11-e00af22b0cc7": {"doc_hash": "ce7590e8233ce7c75bc776677911bd466b52220a6a1125e67a7588d422409031", "ref_doc_id": "03a64d82-0dff-41e3-8978-1bbb104218e3"}, "e44257c1-9830-418b-abf3-6151237bdf3f": {"doc_hash": "8e856794d6707d9bf3ee22ad6a85b32313deb873a1291785173bd5039afccfb6", "ref_doc_id": "9f8c1349-0a25-46d5-8422-da4ed056e86c"}, "1e17afd0-163a-4724-95f9-5700f88661aa": {"doc_hash": "cecf9bc5e2133bae2b74a985a6a435c021fae5ec6ba174df5be1ff17ed75b79e", "ref_doc_id": "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9"}, "d8051d47-e1b1-4f8c-8992-c11e0ea4088a": {"doc_hash": "a518eaaf25f8ddc2a8b928d9f3ea561f9aea395585747e5e85026e15578320c2", "ref_doc_id": "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9"}, "d9264b5f-cd39-4b13-b3d3-9d7029f68ba4": {"doc_hash": "07d5b4683f94715e635072d463e2e32f5db8121f0dbe9d55509944f2ffc4d5ff", "ref_doc_id": "72aa08cf-3996-4b8f-9b51-ca893c918039"}, "f0cfbd3b-d5a1-4d4f-8ecf-b13822454fbf": {"doc_hash": "82b97b9ac3f26f4508eed0c484f66cae1169aed3a436d120f095c08078404bc2", "ref_doc_id": "8b94c90b-2179-49b3-a0cd-a6b6057ea41b"}, "414b8b51-d779-41e2-9352-dfe09ecb10a4": {"doc_hash": "c277bb6533c1737c5744bfa3fbbff88058ad2a3186541a9fd68e4f63efbf7c72", "ref_doc_id": "0ab72737-5ff7-49d2-96d5-86b06d7184e4"}, "c9cd5532-823e-4340-a539-7a73d096283e": {"doc_hash": "c4ecfab74453f03291f8bda5c74d9fc8d5d82234a2acd7cbbd457ba5bec04802", "ref_doc_id": "32119044-3b24-4eda-8f05-1ef4be79a26c"}, "8c86a397-326f-41c6-8cf0-9f288bab2811": {"doc_hash": "07b51a46a1150e62edd3ce99a129a8b669ed8423b13635d695caed545abd6ba3", "ref_doc_id": "3e8bce1e-5123-40f3-be33-bbefd7d0050b"}, "1b181c83-886c-42ed-9122-4ba086d2a077": {"doc_hash": "771e9425d99e923cd037faa10bcb6e70da2c8a8f4122ad2f75b0d4c15dd90641", "ref_doc_id": "3e8bce1e-5123-40f3-be33-bbefd7d0050b"}, "a72895aa-8e46-4ff1-a4aa-67a64a81db3a": {"doc_hash": "f7ab04a1c43ce9397f3cc14b0d29ef7c58753619b509e332fde036b2a2917111", "ref_doc_id": "da6ed72f-561f-426b-95cb-be6f4dd17259"}, "7c67183e-1385-473e-a7b0-ca7954f78b5d": {"doc_hash": "4548dbd3981b91fd186d81d5ad28af8d23dcbf36d27304e38811e63f632e8591", "ref_doc_id": "4526dc34-1d55-470e-8a6e-6d0f37d255fb"}, "cb17fd94-4894-436d-858e-abc71b25c586": {"doc_hash": "bce791bfde12256720bb0998cbf5f8cfa2a8900be9c8382c0adabb0cce8ed8a5", "ref_doc_id": "aa76cb2c-0915-45dc-95fd-7ab858e0e588"}, "cc85b694-e0ba-4401-9c1c-14c5218a16c3": {"doc_hash": "0faf2ed2ca0d0df2f4a8338f6cc9ff747d7da05cc9c690b0c59719b2505c9c74", "ref_doc_id": "b8483b3f-665c-4dd4-9889-4605e60879e3"}, "6379b404-0246-4944-bfb0-b5fdbe087bc5": {"doc_hash": "9f4cabfe5c77b257b5d42a87f24a4ceaa053e54cb6bf3be8b29bd566760290b2", "ref_doc_id": "b8483b3f-665c-4dd4-9889-4605e60879e3"}, "dcb709d3-9c95-4774-96e8-2bdc9b381b11": {"doc_hash": "43029df418e0f401df9f21e4f18f11443784d9925cd8df1f23bccb4549ada4c1", "ref_doc_id": "f82c292c-2274-4be7-8877-5b6719e7b49a"}, "d069fd20-2613-4110-bb1f-6e7b7e7b96fc": {"doc_hash": "bf7f2b5371398233467c28f82313be2a319da788964459bee8693ed33ef5cf79", "ref_doc_id": "efaecf7e-6d2b-462d-8295-47ec19f33d1f"}, "31c25aec-6c32-4468-b0c3-70ff559f0126": {"doc_hash": "673e14f82ae226c124c6537adc80a41463889a0b3c2352c1211b835c5ffe118b", "ref_doc_id": "a263e8b0-1a88-4dcf-b80c-1baf0a500418"}, "de7feb17-a6db-4c38-9f53-8cd8cc5425ae": {"doc_hash": "762f99915b43d2ff7c0bbc1953742df8c43d5f646ea521a7298b02ddfaf3e0d9", "ref_doc_id": "88e7237a-1bd2-4af4-ad0e-193996602605"}, "4620db99-d7f1-4f7e-b825-db9aa950b5cd": {"doc_hash": "2bbeb5b4f52abde2e545c2cc45c2e9576e1842e8d9c930db1a29cf378254521e", "ref_doc_id": "ec7413be-409a-428f-a62e-b88fe99e5142"}, "7ee3dc9d-9c8f-4930-ace1-07d5cbaec157": {"doc_hash": "eb0b59075da4a8b96b32a3f5ee39f15295fbeb347f5cb9f944939237198bcb14", "ref_doc_id": "247e8b3c-2be2-4279-bf00-799b6bf4ca21"}, "b07d7c72-9b25-4a06-a6fa-49bf93a061a3": {"doc_hash": "2840b681ca653608eea6fab2954a54f0e8600f7c929c05bedb41713928b03a40", "ref_doc_id": "751b795f-126b-4e20-93fc-04ca0b769fe1"}, "0bce30c1-459e-4799-8e80-c1c4414799d1": {"doc_hash": "e75b30d36bb332861a06eeda65953e38d9323d18f491fadbb9b8a3396eff2e2a", "ref_doc_id": "4fe082ae-0eeb-4489-84c6-d2d2c5580971"}, "02386565-1812-4697-91b6-8e0ffda4bdb4": {"doc_hash": "e39a4fb4886e02f73539e7d5b8ba4b57f0aac5fbedc56c98698bcbd084d7b43f", "ref_doc_id": "4fe082ae-0eeb-4489-84c6-d2d2c5580971"}, "00cf4590-fcfd-4814-ad16-e79f1490a880": {"doc_hash": "f3ba5b304a5e86271ec06f41882a312c20bebe91eb274d27fbff666bf9343c40", "ref_doc_id": "9ae5531e-9f4e-497d-b523-de45c03c1f98"}, "990d4022-43fc-420b-8edd-cfc3b5998348": {"doc_hash": "e2a8f049b87a99159ca34d02d913f61d100d54b5ea2b3cc3235c54ad231fd83e", "ref_doc_id": "45e35def-1e62-4011-90f1-ad5484586d51"}, "edafeb10-332d-4542-9d52-7f6bd18def82": {"doc_hash": "89a36fd6edbe1cedec812d4e05e2a2f32c0410be6f67f058ce0dc3430ddc0fdd", "ref_doc_id": "c140514e-bd64-48f6-b8f8-1acd67ece23f"}, "4e946726-3dae-4d81-9215-3af8f40519cc": {"doc_hash": "b47a8d05ef3c08136138611b913d31b9217773fc59c946517b6a58fbbc5269cf", "ref_doc_id": "e00921f0-61ba-4bda-b568-bd6023555455"}, "a7a1fd39-d50a-4d07-ac7d-b41b96168102": {"doc_hash": "20a47d23d5a232922ef78b36caeb09ee170d96ca143e273c4fc5b32cb012a91f", "ref_doc_id": "82650227-7313-462c-9c13-c7e7af3e2e11"}, "20c9c89a-9460-4c77-8872-9f23bf40e9cb": {"doc_hash": "bfdcd04f1e77462380fd1bced91f6c1ddae706c46ae0bc7011aec7b6752e837c", "ref_doc_id": "9fbdbf5f-b54b-4646-81dc-7c6e33dde93c"}, "c9053324-d09c-45e0-a110-4ebff6d4d027": {"doc_hash": "03d3d9a3f016b877152a80a73fe744ef34f8985b451756bf39b36d20aaf1122d", "ref_doc_id": "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0"}, "429a90a1-d830-45b7-9dcd-87e0450650f5": {"doc_hash": "8ad84fa340441135d2bd56c93bacf93e7997e7f7af04a3fd1dc8712e57f179c6", "ref_doc_id": "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0"}, "1b55cb08-93ef-45b5-a7fb-f82b1129d661": {"doc_hash": "a18d41aef3da20e47762e661f64db6c6a072892e7d1b7ca4aa50edbdbfa53e7f", "ref_doc_id": "bbc735e7-c463-4e63-89c6-423346652688"}, "11f761b8-7bb8-42be-ab73-98e6864e88d1": {"doc_hash": "740fd853e15ca19f7801c030f261b6ea8721e2637adb336496238cbcef1d1193", "ref_doc_id": "3c806965-ab33-458c-81c5-67d8e2cc5f91"}, "73a92648-749d-4fd1-b7c1-fdf74af5a5f7": {"doc_hash": "090b68f97665d1f5fa8c782c1be3d74a85201bf0595b79d3ce3df5f658b99f96", "ref_doc_id": "e6f57849-1cc8-4988-87be-b0c854a9b116"}, "27904fa7-8afc-45f5-94ee-b3877a68581b": {"doc_hash": "d64fa3d8dd872525d6af8aafdeae65e99cd2197e42be9aaf44e9b0df63a7a819", "ref_doc_id": "e5713057-fdd4-4b21-8a24-8fd26133267d"}, "1fc324e0-d4d9-442f-bb02-cdc59b796d6e": {"doc_hash": "925d447e1f7a58d73c7975c88e442bb2c60d1add431eb8d662df767500244a68", "ref_doc_id": "6117e2a5-9a56-496a-8413-ff02e2800105"}, "f06ed515-19ca-4e58-b42a-64dc8c55b31e": {"doc_hash": "bea8876c17ddb16cdd208a9b9219d7d38568454328a001ece69d9c12555ae276", "ref_doc_id": "c116e219-0619-4234-9f03-35685392358d"}, "b7d056fb-06db-4b43-ab67-08874b8c19a1": {"doc_hash": "03a47d91d6a33a2582d7bfec0e44fc6201337626d5e8876e26adb64a974e7b50", "ref_doc_id": "c116e219-0619-4234-9f03-35685392358d"}, "4806c7cc-7a2a-4b97-a8b9-ff9282fd0fc3": {"doc_hash": "59dd0147357c5d08ce382f729d225cb6b592b70de3b5b5a6c844f5465f499a2e", "ref_doc_id": "f8bdcfa7-c581-4202-b7df-2f0db76126ab"}, "64926f2b-9b14-4e7c-94bb-9da0a6eb914f": {"doc_hash": "3bce4d13eb78f64c09ae99b448dd1044d224faca4d3130b8efc99b713e6db2b1", "ref_doc_id": "f8bdcfa7-c581-4202-b7df-2f0db76126ab"}, "d3fc9bfa-1491-4a7d-9c81-20aaa3f295d7": {"doc_hash": "88354af4688e47c368eb6af24f719ca75a854b529ea348c12fdc388356a0939b", "ref_doc_id": "6c25cec6-ab48-43c6-b6d4-54418f5e017d"}, "6fc64754-69d3-4d02-bf17-fd0e0d1f2f7b": {"doc_hash": "9e124b1e527fa0d9a48c323bd9c7c782b76d1cc41c61221c11ecc3c302f4b533", "ref_doc_id": "f95e6351-1296-4cd4-96ef-0d87e63390f3"}, "488162b9-e72e-4d95-b9b7-cef1a300edd5": {"doc_hash": "98e1bb754fc750b4b99aec918be819c664947b20e3aaeb4ddb20002801b02efa", "ref_doc_id": "4a4dfb54-018a-4949-86d4-d93ff358abcb"}, "6cabe471-be5d-4085-bd30-f617b4f7363a": {"doc_hash": "41a17d285b6b12bea8dc71d6812f43fdab13ef9f903a978f3a556d1b613a8a60", "ref_doc_id": "44f7641a-d637-49eb-a39f-76fc785257b4"}, "6eafd2bc-2965-416f-8ded-c50c64ce6252": {"doc_hash": "1d14af0d28bdebaa57d3e4b4ad4ac957b38a5e18bffb8ba5520c61bee3a85d0c", "ref_doc_id": "58e7993c-96ff-4468-9371-0c5a4158ebae"}, "c1c1a69d-6b06-4eb0-8c9c-4c26549be98e": {"doc_hash": "3344c17f7d758dec0ea1ed061be6598c2137ea5b3d10af937211e3c20c3d971e", "ref_doc_id": "6d9d9cca-705c-4d70-a3a5-6abc5f0179fe"}, "461ac7ec-b794-4260-aa7d-c6c71ad48325": {"doc_hash": "1cd8dec739f36e875e6fc01ded343396ee18da1a2a04b52433ccc0d5cbdd3674", "ref_doc_id": "b0694a68-e407-4d4d-80da-9a16d6801702"}, "954dc33b-39fa-4388-a896-a0209ab1ca6b": {"doc_hash": "60f636f983908cc30ea4cdf15b21c163a3c8fa1fae2a48c8d8c719781098fa8d", "ref_doc_id": "474fe770-43e7-4b48-a00d-ee46f77d93dd"}, "d1a17d64-935e-4af0-bd19-95308ebc4a47": {"doc_hash": "df37f9a4fd1e23d190e8d51c361c5703a08cc9731e1a8b4787ce9823c504d975", "ref_doc_id": "84538c01-eb63-411b-b242-38d0af1e7812"}, "9a20fb4d-782d-4160-9366-767dc2a7eece": {"doc_hash": "c55d2fda3118dd4475eb68208bac8c8943eb033735f727abead6ee02eebb9e57", "ref_doc_id": "00995115-81fe-4552-a0ba-0d263ca0389f"}, "960f11c7-e28b-4ae1-b019-35a9edeec3d3": {"doc_hash": "c065d1e9cfc160f3c074cf8a397a1f21ea863087f87ed699ca402d8fd21fd9d5", "ref_doc_id": "00995115-81fe-4552-a0ba-0d263ca0389f"}, "348f85eb-145e-4766-bfc2-10a8b7219f8f": {"doc_hash": "360190e94ecad13a36f38c6c4cddcc382a2c5ca07fb4fb1a47f6c3a1fba46fd4", "ref_doc_id": "5549ca23-6b43-46e0-a7b5-6a00d8973004"}, "31ae4762-4103-4b84-a0da-f35c3c7d9936": {"doc_hash": "5c49a2844b254a1afc24287f65cf248ceb49f8fb911046bbf3650d35fdd5d33b", "ref_doc_id": "01db9572-6470-4490-a6f8-d8d72e6af061"}, "1fc36e91-946d-4749-a76c-b6a82961315d": {"doc_hash": "8f43371fb55e36ecb8d5b0407bd309a95ac828d082e0a0e4f888442fc2d09fc9", "ref_doc_id": "01db9572-6470-4490-a6f8-d8d72e6af061"}, "b59813be-51b3-48f0-ba6d-013219207d8c": {"doc_hash": "fb4ba259c031698e5a6f922811882be09cf44dc842c98031d43890393cd88c99", "ref_doc_id": "be998502-ad11-4278-b67a-979814606aa7"}, "8586c3e9-5244-4a43-8994-13960cd546b0": {"doc_hash": "6a62316aa32de1bfdb55d50a2769eb706b260acbf83774b366f9ff00ae6640b1", "ref_doc_id": "ecef8314-27e5-48ab-8bb4-2e80c5287a87"}, "c4b4a431-0dac-4db0-afa4-d3eee49b7e8b": {"doc_hash": "b8d9564e0c0f1a2f993d27d7e4ccf1ec4d699174e90a898fa46511d68caf1c80", "ref_doc_id": "c6cf7d10-1b3b-4375-8ca2-eb4fc17361ff"}, "aa594b50-f7de-487b-9c3d-caf3a0023f3f": {"doc_hash": "bd0a9520775839c3c18985b6b815d043fc7ff25fcb038d32d89cdea0e35455e5", "ref_doc_id": "c324bb22-0e17-41ea-8eaa-b52f6521606d"}, "261f2840-102e-4f11-91d7-485db860ba30": {"doc_hash": "be5714194b11ab2bac5b8907bb5748ad2d79c2648881a1e864a49428592432fd", "ref_doc_id": "272a4237-1e18-4f0b-b808-86376975ea72"}, "dcffc13f-c4df-463b-a714-0c3b61ec8c66": {"doc_hash": "aee0bb49a9a218f233ef7f95deafae80f273ad999a9bdb828118fad41c7d2b4c", "ref_doc_id": "24fdc7ba-d644-4c0f-863c-cd03c031fa4e"}, "a6c062d7-06c4-4c5f-a433-23324c80c638": {"doc_hash": "15311c9efb3e5ac04718537bb18b90394c15177c363ebc528d8f3d4860dd9eb0", "ref_doc_id": "5fb3ba6b-5634-41ee-bee1-b174d6784f34"}, "a79742c0-8ea5-4d28-9d12-6db3456821d0": {"doc_hash": "5b65ac6ddd3a0c8eaa77b874ff8dfa3b34a6cb3982e0705a7dab9c24c2267f57", "ref_doc_id": "e453f199-ede1-4549-b9d5-f96e16f9220d"}, "78d37b02-b2f6-49fa-91f7-7d12929f1a0b": {"doc_hash": "d8dcccaf798c28250949b72c91542c6d09366b7697553512a7ce05c41617757c", "ref_doc_id": "d1afb769-c445-4074-85ba-ab9b35108d79"}, "26b6b14b-785a-450b-947f-b23135443514": {"doc_hash": "1c338b6055e4a5cef589bea6517fbad3554ebf5cab4e2de9d42fcbe3078eb61d", "ref_doc_id": "adc8ab33-6743-430c-b25c-7114f2b07044"}, "5fed9849-1ce7-4da2-b410-8600526e610a": {"doc_hash": "67149edb67abf1357aa591d3dc8e2929d5aef908b3e60f7e91a079431892511f", "ref_doc_id": "f516c167-fa7b-4905-8dfb-311f593bad2a"}, "d2c47d91-22ba-48f7-8fd3-9cdbd9b32347": {"doc_hash": "af61c44f9b88eaca4170d20a4dbfd753eeb8e1a42b2269d4b02618b7df4275d4", "ref_doc_id": "91202be0-40df-47cc-aa64-84a17c614d75"}, "3e1fe5fe-f24b-410f-a5a3-b3f4ee30917f": {"doc_hash": "ee762a1523d48a7d1d0b1efc7beb5a3074c893b35c5aece49e5fd5a9fafda904", "ref_doc_id": "de566029-7180-40da-b5fa-777897d28db1"}, "06b5eb91-1302-400a-acb6-e758877aaf3b": {"doc_hash": "23af4693fbe505d5992182dddc9a141bbe23b30751e879a85681a559c8d88e3f", "ref_doc_id": "de566029-7180-40da-b5fa-777897d28db1"}, "d7501230-cf20-4ba8-9757-3674aef47781": {"doc_hash": "996fbb191bceeabb55b0c9194547571099dbf65c6671f7932c2def811da5521d", "ref_doc_id": "68ca7387-9afb-414b-b1fa-971bde07235f"}, "6a67c42d-0bf4-49d0-a875-9af31a1c557a": {"doc_hash": "f1ef03f3a5d5872cc23b0d7b8e77db33a018db6cdb047a4ec67611fb2c6267d8", "ref_doc_id": "68ca7387-9afb-414b-b1fa-971bde07235f"}, "1af58d90-f048-4db3-8d80-b0b521164b81": {"doc_hash": "2807b0a65967562ad6ca22602b9d7844993e1dffe7f81c0e2f14547092d978b3", "ref_doc_id": "29d4a37f-ca6c-465b-a815-5b5955fa6d60"}, "07912f0a-0c19-446c-990b-c8416f96fba5": {"doc_hash": "c62d86c605d6dbd2e3d94a06e3c09bd179825ebe042d7f13c40522ee32b7ffb1", "ref_doc_id": "94c64109-e7d1-46dc-9d9a-17a818417825"}, "8674ed8e-3f50-4796-af16-a3306fb312c6": {"doc_hash": "56e08571cdcc903a745afcc2053dac3bb9b827d63864bef0ecb3acd59f531981", "ref_doc_id": "361468f2-1b62-46c5-98c5-b84e80020968"}, "46d67619-e9c7-48cd-b37c-be49cf74b882": {"doc_hash": "2b43f3a60ae3403e49d67ab8bbc7ab1ea4479602a6b786b0b442cb5bbd786d6d", "ref_doc_id": "e2406c72-0b13-48d0-9fcb-0a45b778e4e9"}, "d1d71578-b9a8-4ec5-9ceb-e86bb5e9ed47": {"doc_hash": "b920f5c8dd171630a120009f7955b755e7147959fdbdeb73980d87fb5fff7819", "ref_doc_id": "1030143a-95a4-47c2-beae-a496579eb29e"}, "29fcc009-954f-45d4-8a15-ed8fd514e7b3": {"doc_hash": "318bd34c28ae0583046d215f4c0a9be253aec51f7a32990ea40dab2786588638", "ref_doc_id": "37edcb88-1125-4ce4-ac35-f0c17986943a"}, "b7c7e773-888f-41fd-9b0f-26a4a45ce02b": {"doc_hash": "f82b56c1c4e7ea7978f5dc1db00aac192684d9235d50da34220d746807781ef7", "ref_doc_id": "c6112bfc-4c50-46f2-ac01-8ec96859ffac"}, "4d67d6b4-42e4-4205-9350-8cf29af526b0": {"doc_hash": "691b6baec1de299a2dd42764a539a749ca4a9a3b72d52329aab49d92ee221d08", "ref_doc_id": "39dffa2c-2b88-4c7d-a570-12402a8ef90d"}, "27f5600d-837a-42ea-9636-8ef2c65f7496": {"doc_hash": "372789096a67012e38b8ced08982ac0c806028a31790281785659557cf640a83", "ref_doc_id": "f225871a-3301-49f5-aa47-e537a9bea192"}, "014e6f0a-da78-4af5-82df-e973de8213cd": {"doc_hash": "ac9fdd9fe6806220418d61a4b7a97863743d324d80373156db2c23e1a6802ff1", "ref_doc_id": "97c0898a-d8a8-411a-9a7a-c83773f967d4"}, "d17c9382-7537-4ff1-a69b-fd78ea32e180": {"doc_hash": "43fcc3d87f563408e002903760fc247a4065f5b43e246fa6b3701b43b874ba61", "ref_doc_id": "de2826bf-768d-4797-9f69-a52677664c3d"}, "b8d08f32-08b5-4741-8456-c3c8b18ebc24": {"doc_hash": "4a2889f927a87a729d74712488698dcf1ed9f99154abe6e528228932a6cc777a", "ref_doc_id": "f73f188b-9c30-477c-b1d8-8e2a8b7f7b34"}, "2cc76a36-8d65-4638-bb28-a6b860725fd5": {"doc_hash": "8c4eb104d900e7fb434519866827811a39266bd0b4f9a7974068463ec718c8f1", "ref_doc_id": "07f0540a-3881-4799-9c57-84674e069fbc"}, "3acc4864-b10b-41aa-a56d-dd709c6495fe": {"doc_hash": "51291d089e3671d9ffc3f83da496157493436e9d0965186112832769f38adb05", "ref_doc_id": "b4f1c2af-c205-4d67-b4b6-49b86c27b36e"}, "b2e16cec-b755-4525-be6a-6d9298b0b5e3": {"doc_hash": "a8361925727e3609c9eaa2cf6c99e3bf97275f14ab961a0fc86ef91b16ff45a7", "ref_doc_id": "0c7670f6-4d4f-4cf6-9917-9e7b916940b1"}, "10b2a4f5-59bf-41e9-83aa-66eda05c0b2b": {"doc_hash": "12db8c70063ea233fb4f4756da9be9350b3a3bf3003240aaea4824eaef990313", "ref_doc_id": "7b18da3b-f1d5-4270-8433-2bda266df9e3"}, "8077592a-52c9-4e9f-a18f-805738a9f255": {"doc_hash": "3df1f9cdd0ea4f2aa1853c43339521d3732228a8870e9a7d647265fcdf15438e", "ref_doc_id": "68243be3-6e9e-4ccf-8b74-5b9caf34eb40"}, "601b8f3c-72e4-4f5c-85f6-d1dfd0987a44": {"doc_hash": "4f05d294040e889024ba450d7033994390c64b49dcf0b6e9e0896c21e4ac20e2", "ref_doc_id": "336bf07d-3a85-4438-a104-26fe75cbc519"}, "aaebc064-5ab7-4a1f-a391-4a4c0e199a74": {"doc_hash": "bb8de66f9ef4897c02ae940f060b0465fbeb8eb715cb5531f19cdb2902bc7d41", "ref_doc_id": "62e896f9-07e4-4c68-a20b-30b33118a8cd"}, "0216a4d9-8096-4703-9d61-df5f4684cb8f": {"doc_hash": "1ba31d3251155e0e12b61f315d7c26cd10d7adae63f56d0dc4a4509ae6137a0d", "ref_doc_id": "97e677cd-ff91-40c4-bbbf-667649ef0085"}, "58577188-9087-4b23-8930-873ab1159a52": {"doc_hash": "f5eae84a71dce34b3a846275f1c8239a5f9d30b4f97561461e71ce788b0149c0", "ref_doc_id": "97e677cd-ff91-40c4-bbbf-667649ef0085"}, "3cd239d1-f70c-4890-84e3-86db363a54c0": {"doc_hash": "b5a35592e2aba3ad04bc6b29ae0247763b84196594ffbbd5e71c1cec63d03a7a", "ref_doc_id": "f4409bb1-ad0a-4fcb-9de7-99970c08306d"}, "fb793c38-202e-43f0-8fa0-6a927751a19d": {"doc_hash": "393bc096d5b614254887bb3c7d1028e0774fd8947925f925e02cae319a9d8fad", "ref_doc_id": "a114a3f6-6adf-4277-9c9c-b3f98d965aec"}, "34ef16fc-1621-47c7-af7a-275fbcaacbfe": {"doc_hash": "3b4bad01c37b76547f57ec6d809428f6cbb96582b82cff96a32bf34a231fa1a6", "ref_doc_id": "f09d8c91-6fef-40a3-87f5-df6b367c9f47"}, "3f74daf1-46e9-4641-a776-7f1d115bbcf7": {"doc_hash": "142b49004e3f00fb1793c47fd3682fbbbbea5b57bd760a8726c224a7543f3e89", "ref_doc_id": "521bf329-12d3-4b09-bc5e-db921bcc1568"}, "8a73df20-799b-4e7d-9008-f61257891952": {"doc_hash": "a27b23c3e6c85b850702ac949e022488ce7db971679c43fcb16bbd56de629282", "ref_doc_id": "bf9fa624-c442-4910-9c76-9202151ad1f7"}, "fd8659bb-2a73-4a1f-9344-57bae35aacc5": {"doc_hash": "bd3e4884fb60bb9980c9e56f039c07c430fbf90b3768ab165973a26230406290", "ref_doc_id": "316747a6-8574-4b16-b75a-7065667b6426"}, "20b602ef-5660-4f47-976e-8f6de9ae04dc": {"doc_hash": "729c30332baa0ed57f4dc451fe4ada18fa8f6bb81b087af55b339847574d82e1", "ref_doc_id": "85513348-7c69-4887-a70e-d774c1cc9696"}, "6771a582-5c30-4221-b694-da22b94c43e0": {"doc_hash": "5df97ac73533372ab16ae495b7e4531b86b7eb8e6c535e991b3439c0bb4835bd", "ref_doc_id": "63deead1-4934-45c0-b454-b43418a89a69"}, "a82c8c13-a929-448e-bf15-7c2ad06636be": {"doc_hash": "84c822b3a1928732cca3c29dc20e052de351db90e468974c2ec9083808213f5d", "ref_doc_id": "4296752a-5fb1-4e62-bce6-9b863c87cf1d"}, "7e75e1d0-79c3-4630-b4bc-552aa48ef0df": {"doc_hash": "a9501dc37a6da5de8e9514680128993be139928146cf3f5df8f175367a93fc27", "ref_doc_id": "b3d92c7d-bfab-4218-a979-da817c8c886c"}, "61497079-eade-478b-befa-4beecaa2474e": {"doc_hash": "704e5565364af57c80791309032326eb022173beeb9673c0447529d84c4022fd", "ref_doc_id": "c3503804-e20f-4a73-95b4-6352ae9cca19"}, "5d7321a8-da1b-433c-9b31-71d2b489846c": {"doc_hash": "542c5838c19581dbf573b179f08f6d6ede4ce3bd5afa4b7ea7cbc923b279f788", "ref_doc_id": "fcac481d-8707-44e1-8f82-4671393f885e"}, "c5a8cbed-67ec-4bef-b83b-824793a460e4": {"doc_hash": "9b866b214077e9754ec725a35bb633617c19120957af4067e701a88f91bb00b7", "ref_doc_id": "d3534ba5-4f16-435d-a65c-ada22090c572"}, "903acb51-a38a-4bb3-8e36-0c314a004e39": {"doc_hash": "df93e6824d9672c11845a3d4ee261890873ee61067d1c77c8964a952c8f0b698", "ref_doc_id": "d3534ba5-4f16-435d-a65c-ada22090c572"}, "1d8012c7-b2cf-466c-8203-ff1a9c898773": {"doc_hash": "c149380b9a1cb7e9fb248035bbaa4fef0171229467cebac4ff2f0a1efeaf7ce3", "ref_doc_id": "928fa89b-066c-403f-9ac9-f6e603bbce1d"}, "f435121b-f821-412d-a725-99e7fb10567e": {"doc_hash": "ac82d6d9877dd3fb25b20b0aa17308d1be9cdb92320ae1f52f1153326b93a140", "ref_doc_id": "7366af7c-34b7-4f13-b9af-5dbb3f72ae91"}, "d668617c-f2e7-4e32-8143-1add3f6e3c27": {"doc_hash": "7c470702b142a62a05f5b302d808fca45233ac37384efa682242bafcf73165f8", "ref_doc_id": "159ceae9-1828-41ca-98b5-cc0912ec1a2a"}, "76a8bc71-e272-4892-b9b0-55accc2f9c4e": {"doc_hash": "ca8e974c57bdd1097865b6fec32a4e020b3c05514c63621c03607c9dc5855eaf", "ref_doc_id": "f2ad0839-7d1f-461b-b4ed-7ec79a4b32a0"}, "e98f159e-8edc-4126-af50-ffbbb317a2aa": {"doc_hash": "fa7256d00396fdcde50add938b56e3b026890631f923235ba1c9448972a0abd0", "ref_doc_id": "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b"}, "df2d50f0-3f04-410e-9824-4e09c7acff61": {"doc_hash": "0d34c51da2890546b5ec13b5c01710e4158c868b9f3e7f9443adf0195063ec5d", "ref_doc_id": "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b"}, "d6d3f303-0054-40c2-971c-b976baf695af": {"doc_hash": "63d4b7aed545fcc959d05d69d648bea81e36008c3e632e2e8d064f79d8c6afab", "ref_doc_id": "05a81a1f-cdcf-4156-911a-563e2c0355d8"}, "5231641c-2003-48b5-9fbd-9f2185c0bdbf": {"doc_hash": "37473d5e1db677840ec8790e099cd98f06ea0e6b781c888130f625421b744302", "ref_doc_id": "78c4369f-52b6-409a-b1f3-1c7185cae957"}, "9a35f282-dc78-4033-a77e-eab92fe50f5e": {"doc_hash": "9d6c7959247a85e29a46951b803b9792c7588bed69ec7f380e07d6e47505cb69", "ref_doc_id": "c19db938-2b78-41c0-b1d6-138d673d90c8"}, "f3932bea-7611-48bd-98f3-da622ab71cb8": {"doc_hash": "aa70d0cd882130873df1eae4ad5f76e9849b1eda152ad39396c21ebb3ddfbc8a", "ref_doc_id": "b63fd3d4-017d-4476-bfba-7843663731df"}, "f9687b30-b97d-4fb3-a059-3db301edc02e": {"doc_hash": "01f9cee357f31b6401432405d786a3c778b6cd427b4e986102733dfbe230f0e7", "ref_doc_id": "2146183c-6988-4989-bb0e-44b202cf84db"}, "8f5b1109-f0b8-4b7b-ae0f-a771ce202542": {"doc_hash": "ab0439ec5b9354eb489e91ab479845dc70f97f812c51eee8c107cf12f403ac69", "ref_doc_id": "1f63e088-db58-40e0-a0e8-bb02467ba6c8"}, "e162e284-b42e-44e4-8af6-059bb04955e1": {"doc_hash": "cc1261420627e4bc15de894be815ef0ef5d0d7e90210f668ca479ffa8742f69a", "ref_doc_id": "1f63e088-db58-40e0-a0e8-bb02467ba6c8"}, "93934a6b-5619-4389-bc16-bdb09684d63d": {"doc_hash": "0fd4ff15144b749d20388389841f4d97819b23e9a13f6441a09df425977c861a", "ref_doc_id": "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff"}, "9b472a98-92b8-4c68-910d-57f3e20b26cb": {"doc_hash": "7bc47ff202431e880765af23997d25e4ac6118be47046c5d55e206e124c0c18f", "ref_doc_id": "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff"}, "0b8b947f-5e1d-48f2-84ef-91360b4f737c": {"doc_hash": "ecd5cfb41c8c0d5b355896fbdbbe191615ae918cdf275f174aa539118c6bd4f0", "ref_doc_id": "ef32bb7d-5293-4e0f-8f93-547d2a7f5bc5"}, "cc214425-62c1-4756-957d-bc975d61f32e": {"doc_hash": "93e14707e6e1b177210212e93e94b4c91d8f89a25e294b2e046bd951b04ba0b3", "ref_doc_id": "1235b604-e3d7-428a-a26b-4dfac09f3bda"}, "5ffb24fa-5799-449e-a545-ecd5ee9a3657": {"doc_hash": "ce8d045abd09baf617b6ed6f0d9e201d7237d51eecbec605b467d6c2a271caa2", "ref_doc_id": "8bfed476-cc99-46ab-8e28-cc0214dd24a6"}, "67fb4d0b-6005-4273-a33f-55698f014ff9": {"doc_hash": "73206b0fc520a519417688a615885fd23c6fb2a42a22c5bcb1c477c5cf50e5fe", "ref_doc_id": "8bfed476-cc99-46ab-8e28-cc0214dd24a6"}, "f2ea27ab-8706-4f92-8104-9e3df548f39d": {"doc_hash": "2fa392aa1d81e8570842c4acfe3363a473d58a0923b56453f46dcdd24210c792", "ref_doc_id": "fe46ace9-1f69-4ab1-b9f3-5b83c03bfb97"}, "7ad1e712-e0c8-46f4-862d-5567cf12b6b5": {"doc_hash": "ace428f681ccb0af186f6c8982627646afb9729672e15d3d0c5d0f80bf62cfe1", "ref_doc_id": "68334d91-a857-416c-ab27-912138f3ce63"}, "04106fa5-ae49-49ce-bdee-f7f750c13799": {"doc_hash": "adaef114f473aaeca3bc7568f91b654939a4d33bf883081e00d663023b4a3e7a", "ref_doc_id": "68334d91-a857-416c-ab27-912138f3ce63"}, "8c46e2ed-f411-45db-ac78-22b0f5afd177": {"doc_hash": "3ef51039412afa44076d49f35f1005b9d315b1d6028a98df2828f6b9d4f0a89f", "ref_doc_id": "18d86c7e-d50b-42a7-820e-c48a45f411d9"}, "575f68f5-43c6-4ae1-b9f6-c840dd8ba112": {"doc_hash": "b893b35a74c2e6ae6861f650d6fc1c5f273996e8d260864e53584c45c2ace1ab", "ref_doc_id": "67a30c90-155e-40d7-a2ff-96cdead6c272"}, "b3e1bc4a-3201-434e-a824-f152c66b807c": {"doc_hash": "73dc5dbfed514ed9898b689e671271f7765303646deba8599aeec5ed18cce542", "ref_doc_id": "462ff9d3-72df-47de-b9cf-034cf572e2f1"}, "6d030643-fd49-46b1-b663-0f0578f372aa": {"doc_hash": "cbeee31ecd6ed49966b8bb1edb9c2c7eeb7b44d1dd547512472a5f46bf637251", "ref_doc_id": "d88905da-5578-42ff-a73e-4ab42110639e"}, "2ee341c7-c112-46bc-a8fe-56dc49cc44a3": {"doc_hash": "05707e38bd19f61f1b3ccf34f423148e520b25a6645057d780e27d2ff872421d", "ref_doc_id": "967d5ff9-6e6e-4a64-831a-509690e70ba2"}, "4e64d332-cb75-4ab7-95f9-e7b2753d4512": {"doc_hash": "c24aaf1418463e9c70d67953cbfb92720f32b0957a1048b0e3d43e70ffb0c096", "ref_doc_id": "c3ebd2a1-3153-4aec-af50-16d89f5af1e9"}, "9186fa57-b856-406d-904a-66a6e1441ae3": {"doc_hash": "9953a09a05f3c5ddc833b1882cb73199557191a6f6d378117e17b665c0151b28", "ref_doc_id": "17143227-4ae8-4193-aac3-6cc76caac9f8"}, "8532b8c0-eaef-494e-955b-1993c9759f0f": {"doc_hash": "2f1a1091d5d91bad435a3dac1a1968b2da326647f275bede5f1d47ff81fad25c", "ref_doc_id": "a277f0d7-21e5-4e0a-bb0e-af5331bbbe4b"}, "0d4e0313-c3e5-4df8-bfaa-a8fc3780d4ba": {"doc_hash": "a0a035c0477a3b93f97ca12cf8b2fbd36e89b0c85bd987e9b0fff5ad94b5f64d", "ref_doc_id": "fa68d2d0-e061-4fd0-b571-222be1d3acb4"}, "e72301cc-d02b-4f74-8f24-d051461a1c5b": {"doc_hash": "9fe8e0476183eafa40de2067d6fe00b685471d246d39e2a70274fbb99378d226", "ref_doc_id": "f833de2f-6e4e-4d96-a776-e19304926723"}, "9f6427a2-514b-4280-95e3-b30ddc2ac6d6": {"doc_hash": "c2720957f63b847f118a0f5446b1cbab12e4b6d7b931dabebceb332b8843ec46", "ref_doc_id": "41fb3893-c4d9-433f-820f-f6a470cc7e03"}, "6074be58-5aef-4152-9cfc-5f5009b24b81": {"doc_hash": "05f174da9e658f76e307dcb638db884fe00be407ad6b98eac30889b68c3e0924", "ref_doc_id": "12750cd8-e4d6-4167-adf2-9967b5321d88"}, "5a2434f2-8f23-4d53-9dbb-d00d35fd1849": {"doc_hash": "e6e654f888c463189f56fc0f462b8f0cc2cd3b3aaa171fbbf5401cede64e6d6a", "ref_doc_id": "7e1c1ac6-4582-4532-b0b4-1639db44dac8"}, "5aef22fb-7eda-46d7-aeec-a0c305a9f884": {"doc_hash": "60ccdaeafbb725748b7a0290b5ddb1a8cfbeff5e8e04e257de15a8109cb1fd8a", "ref_doc_id": "1d4dff0a-6763-4028-9f56-bf44275347bb"}, "eea21cff-a29e-4eca-93fe-1032b57f2d4c": {"doc_hash": "655bdbe40c4177a060f794fec9fd1e09396b194bd1ca252e652e36ee943fe6cc", "ref_doc_id": "fecdbd81-8f7e-42f1-ae6d-a5eaef0fbc1a"}, "b015159f-6cc0-4976-91b4-5fa0f867ad1f": {"doc_hash": "2887e62ca5eb1518cb973516ec3fd3961357e1b107354cc3675e0d90bd6ccea8", "ref_doc_id": "510f4254-fbbf-4c4a-aed5-5088a5f6ccf4"}, "626abff2-5deb-42e2-aeea-55e35f21557e": {"doc_hash": "78d1c98afa99ee04417dcb5442fa80057b345d9932c451e1d860f8f0181de8a9", "ref_doc_id": "981dd2e9-6eb2-4dd4-aedd-00f441c2952d"}, "48c36fe9-f201-4b7e-b028-bd2387f744d8": {"doc_hash": "96d5d5878e9ac3216792ae23e4f9f9fe25a25f52f6c19aca89976df653144918", "ref_doc_id": "17e85e88-e19b-4187-a8b2-90878abd6755"}, "5594af42-aa71-428f-bf41-c447375f8027": {"doc_hash": "56272943917fa0b16fc2ff3532afb8aa063a7a324ebc7a9bae1d047de0d03153", "ref_doc_id": "60d57dc1-204f-4d4c-b2ba-2453c93efdcf"}, "99640b03-58ae-4773-868d-9ea2b2a0b17e": {"doc_hash": "5cfc9c0ac4c2acbe8d54660d91a173966d807a0fbe9bd1e753e98ac90b573c35", "ref_doc_id": "5c313b74-b012-4f41-8b1f-a0ff6685f1b5"}, "cc8615f2-fb57-4524-a217-8952f81f11cc": {"doc_hash": "9c95fcf044e2df88890ad8afd1bfdb8bb7aa825cea63bb1c8fc1cd992c0a0e32", "ref_doc_id": "de49d5c7-ef37-4732-b126-5c3172f7714b"}, "9ac284cc-42fd-4035-923b-e628bfa1552f": {"doc_hash": "e1caba2bf466f9f908f350d47ce0013bd9ba5004f846f403c4c1b815e4ab6f5e", "ref_doc_id": "de49d5c7-ef37-4732-b126-5c3172f7714b"}, "c30ab9f8-217b-4a85-8c39-5f02387076e3": {"doc_hash": "8a58b513fa087acba203314544bf04c4f23d4a825b82ec1b148623764ab1e460", "ref_doc_id": "01190e89-46dc-4721-ad43-8d2d7e45dad7"}, "715035a2-2a4e-43b1-b0d2-dfb1fd8aa3eb": {"doc_hash": "2d150941b807f38ca4b5c7010eea85273ef1df73a8ed0041a2525efd05d885c5", "ref_doc_id": "e8f7a97d-9fa6-4e03-b5a9-94975571a554"}, "2a0d367a-691a-4f5e-8a00-1956dde92de8": {"doc_hash": "240abfc1999ab61eda1aeab91a39f565f6b3b7323940bfd6d035f332679c0b70", "ref_doc_id": "e8f7a97d-9fa6-4e03-b5a9-94975571a554"}, "f5990780-37f8-47a9-a7ff-bf4c9fe868c9": {"doc_hash": "c59f306e97ed31738e80b9e38ade940c3df9e7c68be7d19e1462cf9eb01531ab", "ref_doc_id": "e755e4e5-0568-4484-8118-b6392f1278aa"}, "7e3cddf6-7be1-4f75-8799-412b446831e8": {"doc_hash": "2930a34ee09c1b60416836d443b342764a3801446a7de35b1914235c0c29135a", "ref_doc_id": "80bf8ab2-d4b5-44dd-8f16-e7db6f201947"}, "86edd3e0-d62d-4d0e-8499-c4302a6a3f8f": {"doc_hash": "1a212608294d96796221a8dd80a04d6348ef11fc1dfbb8eef35892fc53f057f4", "ref_doc_id": "9afedf62-17ee-4c31-9fda-4c8ba703245b"}, "25741ada-a801-4a5b-b64d-754a9659cd51": {"doc_hash": "42c175e98680089441b5866c3331f5dae9af5783d43e774f59cfd692c49fa535", "ref_doc_id": "205b8b09-b60e-4046-8984-392328c916d5"}, "0a13dab4-ccad-42af-9286-80fe897c7994": {"doc_hash": "e88ff97dbd55883b4135164f2795446c38280bb9db1538b35d1086c136de1092", "ref_doc_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358"}, "922990f0-a2e8-4f7d-805b-b74f8f81cf94": {"doc_hash": "3f63bdabd6c23236565b664bc3c83d1e64a4a99ae200a66ebc0af2439b2f11c0", "ref_doc_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358"}, "429bbba2-7e2e-497b-aed7-6dd3cb42f088": {"doc_hash": "95920f6b25001c76a841e20ede63334c654e949683b0d81fe9b1cd5462d04432", "ref_doc_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358"}, "f8a0e01b-3faf-472d-ba63-7828edaaadd2": {"doc_hash": "658083ca62a4771b4dc797cd9f8c557cc42f6e5f3dd5d7a310034f393776f878", "ref_doc_id": "a2314912-7ff7-45c6-9d10-42e6279088cb"}, "2bde7892-cfe1-4bac-bf4a-f6748357d975": {"doc_hash": "de02cd764f3421f75a54780f72cb2159c6321ceb57fbd0e077223790bc91ded5", "ref_doc_id": "4cf4e5d8-9d0f-4da1-920c-14110125411b"}, "2be55503-ddcf-4fe4-acac-9bb3aeda409d": {"doc_hash": "8dec5d4a9d5e44ea9f1f72ba38bdf41796f5d5c28020f3ac72abd2fa995e8fba", "ref_doc_id": "767b7250-6a40-4cbe-8f84-154d2576c3bb"}, "85a07487-4ba2-404a-bc89-c7ccdbdcbb34": {"doc_hash": "0cb05169be936a6ee6e536430502626a0188eef9a28b8a708373fbe669eab64b", "ref_doc_id": "639dc327-16d6-4f4c-8cb5-782f9788ce6c"}, "b0843219-7487-4050-bc7f-34ef866ce6b1": {"doc_hash": "63e57254bc7df23c16656cc4823337e48e357e31c0dfc4aa29a127a552dac38e", "ref_doc_id": "8787dcf3-ef10-42be-98e1-8d015d660e62"}, "26225988-5af7-4aae-8856-723ecbc5e3f0": {"doc_hash": "71c4208562d26f7ebb8367eb228a440b4422481808dcb678b549ed09bffbe8e6", "ref_doc_id": "c45a5175-68fb-41fc-b62d-3f75d1144280"}, "0f1434b8-505b-432d-beeb-75ff79fd8d26": {"doc_hash": "6cb35c2e9608204e549bc3374d2e3f4962d3fd11839f03fa1bd4f710fff2d8c5", "ref_doc_id": "45e9b28b-a3ae-411c-99e4-e2e502fe2bb0"}, "e4885781-b8c8-4319-9d29-f98505be5e44": {"doc_hash": "5b8d9fc18c59965f0570dc74291e8b195ad58a82b83bea3a2c0167cea78cc3c6", "ref_doc_id": "0a5219c4-0ca3-4904-914a-6868d880299e"}, "cada206a-8803-4f46-b016-4263bb55a914": {"doc_hash": "385bf911cd6daed7f2e1f65b34fe108e5526897195421140dd4085fd4659f2e1", "ref_doc_id": "de83084d-bb15-485e-94a9-3e0298eee973"}, "33d59046-ecfd-4004-a3ba-f9c6397b020d": {"doc_hash": "a466f2eef082919c6da89c383aa8d551282c9e228d2b057baf596132bb91ace4", "ref_doc_id": "c0670ee6-dd7f-4e25-8d0d-bb665ac99a09"}, "2605b907-da9b-458b-b108-3a2c4a3f00ab": {"doc_hash": "1a891ea46071ab7a004014bbb5817b4a12867f8064c4e1bfbabee7e28955c610", "ref_doc_id": "b2733b70-9120-4ea6-9dd9-c8c76791259a"}, "5dcbad31-d8c0-46fa-a403-a5135e159326": {"doc_hash": "7f39ad8608ed460e7a713b82d29191ea3cbadb3689c40e5cf2cbc7c8791785ae", "ref_doc_id": "61bf4f29-70c6-49fa-a7a8-889435e051c1"}, "1b801e78-98ac-411c-86c4-24fdc159c2fa": {"doc_hash": "4232a83a8e131a820dd977cd50ccebac9fb9805728cf3e68c9ad69921a57455e", "ref_doc_id": "e31e357a-3fba-4eff-b641-cea1362398e3"}, "69528389-7762-47f5-9206-39efd9034b90": {"doc_hash": "b700fb333ae9e4ac3f852ce0734211b606071903cf3d4271db84dc39fd858476", "ref_doc_id": "8231d588-fc2b-479f-aeb7-c181ccf49659"}, "14503817-264a-4e10-a69d-bdba7b99a947": {"doc_hash": "6ebe6bad230f8e3f9c6c5876a882529db5fdc0ba834b0a59dd2bb20bbb1229fd", "ref_doc_id": "71adf83d-2727-497b-98c4-4d8b30f26378"}, "1272c6d3-e577-43ab-aaf4-d09f490b4d8a": {"doc_hash": "4054b50aee3079b0f11b3ebc7a6ea22e9a9991aec4596214f1e37c5241facc0a", "ref_doc_id": "ecdaa948-0ede-440c-b58c-9b0e87de4def"}, "7eb6dd53-cbe2-435f-945c-86cff08e879f": {"doc_hash": "b989a89ee26c38de0e3e849acaf6b9ce4ec51f6be9d29c1c6732f4adde00b9be", "ref_doc_id": "50e7bc77-bccc-4302-ad10-c53e4ad92ee3"}, "8fdefffa-adce-4e0b-a02d-5e4573726c4f": {"doc_hash": "0e43529dac1631efec30b88d85eb684cea55b0fb767b52fdb006186d658a787e", "ref_doc_id": "b6752a87-e523-4e90-83ee-572f7b0bf5f1"}, "9fb4302e-3181-4ec8-9491-f16333f7cf45": {"doc_hash": "7e65ab0815c8952d15edbbcfb38de82d98905aaf18d374f34d3716ffd1c6e32b", "ref_doc_id": "f676f1e1-8b54-40da-9c40-260f38d84e28"}, "85a8ffb7-b128-4b4a-a2f2-dc1bd19fdfd6": {"doc_hash": "7dc2ec6a8b6de13f33a23da57c19cdd7af5739cc30fc3389b852e4685b6525d4", "ref_doc_id": "3dd4ec9f-ec38-4284-b2df-3a3a54a78353"}, "9eb0a1ed-0b62-46fc-b030-95afc58a800e": {"doc_hash": "fe4f435eec233a9736c55d3383a38e10688130fb25b9db5c6b94457182887f81", "ref_doc_id": "c5ff8dfc-ddcf-4bac-a908-d79f876b9373"}, "411df6b8-b5a9-44bc-9308-c19c39b7ff5c": {"doc_hash": "927c9a6f374435c3ad2edccdd42448a6364c3868bbc107445c05b8f797efa008", "ref_doc_id": "cffaec5e-dc72-49de-831c-079ce7de5b33"}, "b02154e7-6abd-403d-abe5-743cf2093e5b": {"doc_hash": "2fe5da058f6c5eac9c492bb5558eec7f6f8b0d588f29d12d222cb44c0826288e", "ref_doc_id": "cdb3ea36-8bc7-4b6e-92f4-e7dde9ee0b61"}, "3add3715-5cc0-411e-9a03-7e866407d017": {"doc_hash": "fae5ccf836a26029ac11e4fdd93a6788750031005feead5dc291fce631203248", "ref_doc_id": "b9ad47d3-3bd5-4ff9-a165-c154ecc6555e"}, "d2468249-5d26-47e8-8eb8-6d6be21f4f3f": {"doc_hash": "52f5f222ad6f3db725dec368c07f11c882abc7bd3311c4193b9e875c7a5d053e", "ref_doc_id": "307ec46d-bcc2-4cc3-9c0e-300f336f2fc1"}, "42572148-d236-457f-b1db-2adbf5bbc63f": {"doc_hash": "8efdc4b885a0d529716630071b1d1bbba35a49563138781760bbe1dcb5fb6a2b", "ref_doc_id": "0a2fab9c-355e-4084-8503-32bae23f8fbd"}, "9708f06f-7773-4d18-99b7-4b5e2977f75a": {"doc_hash": "76c56c6c5498ef0bd237a6a2b2606040aebe9de36249e099ae14e982444f711b", "ref_doc_id": "4b6127e6-e1a8-45a0-bf15-70eadde08e7a"}, "c0f932ee-c116-47eb-8781-b6634f2f2651": {"doc_hash": "2162da268dbea1eef1f65bdecd3e0642d6f121056d7a8eb8853e9bb334ac5168", "ref_doc_id": "94466290-b990-48fc-a3cf-57b3f0e4f356"}, "57b820fa-ac5d-4542-aed9-2e3fc6e593d5": {"doc_hash": "e40243d69e37ca67e478c6abacba8778e2aa2217ee633794da81d953a37f1167", "ref_doc_id": "ae61b928-6756-4a98-be24-2ad9079a9d6f"}, "41003876-0da2-4e6f-94f9-6d431ae631b9": {"doc_hash": "0e605387a33620ce4a1bc74e00204afbc9b09fdd43e81bf075720ac392650aa4", "ref_doc_id": "ce8f0a24-5099-4e73-b11f-8139c55dba1e"}, "c9da0cb7-f3b9-4869-a873-ff98972ead16": {"doc_hash": "23279f404039dc7627c214a4512aed0019343822c2ca52953579dc0c5262c6b9", "ref_doc_id": "aa9ef2e3-8025-4242-87a3-d76128bcbece"}, "dfcd8c5c-d44b-4ceb-acd2-45b758ed491b": {"doc_hash": "25de3434d885557e1a6022a3da9214ff307cc0722b0739b436deafbd4322bf69", "ref_doc_id": "efe2bd23-d880-4a2c-8ef7-c0d738774120"}, "d93b4fe3-4b80-4bb5-bc45-ac15255c66e7": {"doc_hash": "42b36fba8ec8d7bc17893fa9e9d91a7722614b381e447ede46eddc2bf98ff875", "ref_doc_id": "39cedf47-b2e2-4840-99a8-0be4f8faae76"}, "80b847eb-3dfd-4a72-adaa-23bffa7c5eb2": {"doc_hash": "212e60fc2d4925964e0da18188b6fda07a2e6240ea463121e2b8097c6aec5c4b", "ref_doc_id": "4c0d6162-64bf-4944-b58f-e11dad2084ac"}, "5dea3c0a-68d2-44be-be99-eefd77ee8ead": {"doc_hash": "40f79239340f78acb122df18df88bb7fc6573bbb034ab4c3fe670c3d8874a2af", "ref_doc_id": "31147310-dd52-488f-abd6-6a690f146712"}, "94660ef5-3848-4c01-815c-a39e1bf5d3a9": {"doc_hash": "e8adfc86c5f100d6888b49fb125319eec323f8418cecf7e2222e93d2093d6382", "ref_doc_id": "eed7b529-130e-4787-aea3-1b6650b97ffe"}, "fc59bdb0-763f-4471-b5bc-7c6121082a7e": {"doc_hash": "593c8e138c6cd9c908b3a95fa045a9185ab86d66a8c536c75ebf7a983e4b200b", "ref_doc_id": "a94f3e09-47f3-4306-a8e8-e0affa673ca6"}, "636b2b3e-6684-49d8-aa2b-5cf902ab7e05": {"doc_hash": "97f1d2fb7a5f59455c07c9f2a7ac3573a747b7e28737debf9fd3e8e87bb381d3", "ref_doc_id": "131aa035-a9c0-46db-be88-f0e83208082f"}, "52220fe7-562e-44b3-9278-963480aa9472": {"doc_hash": "f696dccaa04841cfc1ae08f0b92f130a80edd053f06f082dc2d9fe3963666ab2", "ref_doc_id": "779ebe71-60ee-4ebb-859b-bed2419039d0"}, "cf24e101-a745-462d-8c22-8e86dcc58aab": {"doc_hash": "e0d66baaa9e08139da6c85bd2f5e451a0fe310c0c2fa5807ae23ab811a22060a", "ref_doc_id": "55dc0d23-4f79-4de0-a552-fd4e3f28cc95"}, "034b8747-b32a-4aff-991a-0d82bdd54d09": {"doc_hash": "42e5ba926e571954fc3b091722ec914c1b87123c9eb530f32a7b89584a976c97", "ref_doc_id": "42a1911a-c31f-40a7-8304-6f0b09876ed7"}, "dd7cebef-df59-4819-b5a9-1742cfec7bca": {"doc_hash": "06a79c20fcf0f9bf67daf7bd35947c93d125a622ead21b6400e450f946bcad13", "ref_doc_id": "66e0b950-44af-4824-9062-9130be86101a"}, "56d2b3a4-a250-498a-a921-a0b5a24ca348": {"doc_hash": "c1e9b133db78d3970eaf4ef4601c143e2811de9aaa40773bd96d76ec509054c5", "ref_doc_id": "81f11a49-6e90-4560-8def-ca3bbbb174c3"}, "a18fe188-1c03-4a6f-9604-c9720cd4447b": {"doc_hash": "d6227f0a38ce283bce867bafc0a7d91c39cd42f1a46178306c9c84b7fe0e3420", "ref_doc_id": "c901ca2e-f784-4414-8b95-1b6ebc9d3ec9"}, "486271c6-3519-447d-a58a-31fe96367426": {"doc_hash": "e50d026a105af050b5e4501240981357170ce8fdaea7bcc6a08d15ffc3c38570", "ref_doc_id": "14f111b0-b213-45d0-9492-dc787c816eb1"}, "0a5991f4-5368-4085-9572-f1c29b7d1cbd": {"doc_hash": "ec79ebd88aab9866eb9663a9960335e40a8a35bf18a33437681055dbe2f7def4", "ref_doc_id": "ea3103f6-c4a4-4322-82f2-48e9e7a52ec1"}, "f17e1255-f947-40cb-940a-bfbddedebbdb": {"doc_hash": "e98d3ba654c836889d896be8e6c4c7a8557ac74c970f89c1bd7fd2198acc9c89", "ref_doc_id": "20189416-ab72-4333-a547-8e392a5763d0"}, "5d5298eb-8779-4769-8e0d-3c6a8cf98598": {"doc_hash": "e4647ea1961d771851dee671717711327faf23f0f8bea0fc69ec844ad0616fe5", "ref_doc_id": "1cbe01d3-2570-478b-850e-3575cceab0e4"}, "f31931cc-4f9d-49e2-86db-190adb4a6b70": {"doc_hash": "690704742700022f87844f8546cd043912654b8b8a91c0aac2321aeeaaad4b38", "ref_doc_id": "99b922f7-93aa-42fe-adb4-2bd704d77882"}, "4fc21fbb-5376-4497-8d42-99c68cdf863b": {"doc_hash": "c8ecc86bb8ad3142d4e940e81484a54df186df02d56c6eed75f7cc195702f0d2", "ref_doc_id": "e5b7a0e8-8d26-4956-af67-1b389e915687"}, "067e0a74-28be-4389-8d6c-0ea328efd9ce": {"doc_hash": "c38f678fad4f3894aa1785396e594e10bf9b966c609c6e6bbf799d5f4a5d787b", "ref_doc_id": "692361cd-f270-4ccc-a259-891e9ea1340b"}, "bfbe2203-c2fb-4b96-986d-4a0ef3bfbff4": {"doc_hash": "f6e8547e23d7f4ecabe605f002080d37c32ec102d6c81fa98fe7d082eb46b04c", "ref_doc_id": "cb18fdf2-706d-4cf3-b53f-ccb3480a40d8"}, "608e282b-ab48-4deb-807b-486b98093fa8": {"doc_hash": "1e7fa621d6ddb5a34740be561b913e8ae94945ddcbbd148b6bf3fb5d44c38e3e", "ref_doc_id": "c07f96be-c3d2-4dd8-b639-05f6d734b6a5"}, "ee5b201a-1e16-4997-b252-103b4b9e64f5": {"doc_hash": "2018d700b73b5a1801b80eabc8520af8efb8a91c746b425330c02cde3a8c7455", "ref_doc_id": "7afd82ea-e6a1-432d-a165-df88e58b5a0a"}, "de169333-3fed-4440-ac80-62841f8a941d": {"doc_hash": "0078a781a19bc0601bb345c8758399d12931c0c86669ace19a3934feaff574d5", "ref_doc_id": "61cc164e-c27d-4c75-8c37-e87aed2da76c"}, "b087c2f7-8db7-4701-b2de-34c78a5b5c02": {"doc_hash": "51a2af05bba4a446564964c8db4fcf8c786a7f13977324fe7791204d6a579515", "ref_doc_id": "962edbc5-0b6c-46ee-a033-e88bf8033d24"}, "456772ca-16b2-4144-ad26-971aca9c7b50": {"doc_hash": "778449d2bf876617b084a104aa7441c7a8bfc2be224d4545880008557f6efce1", "ref_doc_id": "156ef9dd-49ae-4f37-b4cc-c8160caadf55"}, "cb71c7e4-451d-469f-9278-fc08f3ea5463": {"doc_hash": "d42c5b91fdbe2ca3c026673aa5fbb1874c4dab4ad83cce41bdb4627f60ba6623", "ref_doc_id": "d0f1e44b-2ec8-41be-9e98-b24df78fd1df"}, "7ef2d278-eb81-492f-bdeb-f1d4b0867d53": {"doc_hash": "878837bfd4c2e4ac140da569c194d54a5fb07a7c8b4eac67eb92d254ee24972a", "ref_doc_id": "7a4abe2e-f4b4-4daa-8dd8-cd9ede469a94"}, "1b144891-3462-431b-8f0b-efcaeb4bbb27": {"doc_hash": "8946431f288baaad1c3217961532e195abbcee15ff022f4051775007e3bebc0d", "ref_doc_id": "b9e3e7b8-2f29-4f6d-87af-1840b01f1cbe"}, "c867d0fe-a986-4cce-905e-a9d12f95f661": {"doc_hash": "9a6f359003bff4680d052a71d6cf5712c5dc649366148d283deb672203cd04eb", "ref_doc_id": "4862ddeb-5783-4ee6-a1e3-0a19335fc024"}, "7963b6bb-1344-4359-9379-c19251370d3e": {"doc_hash": "60ab8668270fbb3ccf4a05c2fc2f0288404a8113fa2f3e37849cf308712d21d4", "ref_doc_id": "8dac5fb1-d597-4138-8b22-453846af2fe8"}, "54639d29-7d53-42bd-be6c-bdd77c2c986f": {"doc_hash": "ca3a59ac9cad24632f261ae5fab4ac725358dc581f42a4c565559ce78cc9bbe5", "ref_doc_id": "d398e272-2de2-4c5d-b759-0979bf1423e0"}, "43dabf61-d97f-4304-b98d-ac408cf99223": {"doc_hash": "c324c405c2e862a64940ae93ad22f639e15aded72b1d686ed1cbc7f1448f8422", "ref_doc_id": "bfd9870a-646c-491e-957a-ca7962efd698"}, "1b3fe7a2-352c-400f-b554-519e9957bfa5": {"doc_hash": "d3c71ff6c5bba290c672d30c7bbef7cd2d4301e3323f8be0ad1719a293d610b8", "ref_doc_id": "6f09081e-7ba0-43f1-be73-6993318d1c8b"}, "11712e52-41da-4974-9ed4-749e2ba331f7": {"doc_hash": "7c4d2e5cef93fabd09def3bf6d22f0d3cd660d8c9b8d4ca27003cd90dca5bfce", "ref_doc_id": "a7c80cc1-3e08-47b5-9e1c-3eab0e9a3d1c"}, "6752744b-5c77-413d-be9c-5a596c9e7465": {"doc_hash": "8e6eb13f4f4a4c4907d26f8f6e635df53f638f1d2d229d3690fc29c4816e7c1b", "ref_doc_id": "d8e6ed71-f4d6-4b82-a999-8c550bdc5437"}, "b0b1c9e8-10d7-47d1-8c77-08f0b07275bf": {"doc_hash": "18995b001551ec0c86d2ab6f6c596e77b112dd723e06850fdb4946913d643f9a", "ref_doc_id": "d04afa5e-4514-44d6-b040-79f7b7688adc"}, "e226c319-f12f-441e-9aba-a86c33a915c4": {"doc_hash": "6a80b8d6c189d64172c675c88819cf5a3d40272d91d7e14f035dcc4cb688bfd0", "ref_doc_id": "baf8c241-724f-4ab5-b86f-ab440560ba5d"}, "6e16f41a-172b-49e6-abe6-c3030d7f23ab": {"doc_hash": "d9046592fa558d39e78a7e9e134929f86e6f25cb125bf5d4a5eaa1380f6f7fc0", "ref_doc_id": "5377d929-8d3d-4a0e-abe0-fb8ebb492d53"}, "16b58216-691c-4621-8ce8-8a6a97168e65": {"doc_hash": "14cfae66cf644a0473d9368adf0bdf9e01e97cacf23d9bbc5320d0c3c5338d54", "ref_doc_id": "9a070ada-10b2-4516-b388-9f13c0953eaa"}, "ce641b0f-3469-4e06-a624-d2f8171d9823": {"doc_hash": "67bf3e391612b554e3148d68334be31e95cf54368f3008cf8a535bb5affe40de", "ref_doc_id": "afe1e043-3f92-4df6-9421-597b68356f11"}, "8ba94a4e-a25d-436a-a415-edbc9b20704f": {"doc_hash": "403e0d0ea67f00c4046e1860d575194c615405753ad97314a3021d0f632cf00b", "ref_doc_id": "9c7bbd32-64c2-4eee-a147-e54a8b6caa63"}, "2bc9b8bf-4aa9-477a-82c1-cb6fe91065f5": {"doc_hash": "f5bbf351acbdee8512636979b669bc2a02da8ae7d40a49fb5bfbe61ee193e157", "ref_doc_id": "43f7061c-ed72-46ec-94f1-bab1ac42ecfe"}, "b4bc65ea-8fc0-4f86-8eb0-cb8b98e02a5e": {"doc_hash": "40cf3da3c06e579a3ee8d4f222d1ce454f7dd91ae277acc8a10ad8d9bd354c1e", "ref_doc_id": "ec353e76-8c2e-41a0-869c-d0f2ff16a3a8"}, "fe5d221d-5b5e-49d9-af7c-5bf8d0cc15fb": {"doc_hash": "a79b50a83761f5dfb9e4fa969111665c400b982600e9025236192021d6587777", "ref_doc_id": "25f94556-72be-46a7-a7c2-d99c4ebe633d"}, "55490801-9cae-4ce7-a189-7e7ff152a33d": {"doc_hash": "ce535024045c220d5ee876d539e3f2f49c70d4d685abbd46aeeb2b125f1c0fba", "ref_doc_id": "09936982-5c83-4403-914c-c1147dc97e5d"}, "cff496e1-c045-4992-8a5b-e1a80c6b8f35": {"doc_hash": "5e95196d297d1f23c436bb6005547f8640acbae1552fa9c95fa847d487ead40d", "ref_doc_id": "98224082-c00e-4b84-bab1-35d43ac2ab6d"}, "c9f56a8f-d9dc-4f12-8709-9369613bbf71": {"doc_hash": "420c0e85504ee38c7eecb51a0cdd5001c9896673dc0d711605965e0e0094a33e", "ref_doc_id": "98224082-c00e-4b84-bab1-35d43ac2ab6d"}, "538f2613-f738-452b-9d7b-4ed4b8cfe70e": {"doc_hash": "d6f38c4cfcb07964914736c93adee2cd986cbc73c17e79b01866d9f6e31562ce", "ref_doc_id": "c8eccd97-6f2d-46f0-9fdc-75e9088170c6"}, "45345f59-fab0-4e84-a4bc-b70fdbea4bd8": {"doc_hash": "2593e922a878a7f21ed7dfd6efa048dc6a7a4a245851b8e3ac7d94ee14d3bea8", "ref_doc_id": "3095fa76-fa8b-4ffa-9538-6fa38c07999d"}, "c3bfabb1-e505-4720-a30e-93f1bcb82cf7": {"doc_hash": "ce464f279e06eea56e22af72214c8fa8ac76b9390950c2266f31087e30aa94b3", "ref_doc_id": "85b46e10-6d42-4a79-9098-f4cd80ab0648"}, "fb5df875-a300-4ab9-9278-8ace48414315": {"doc_hash": "d7b9a8716a086bc8c7c965b128151abc60b68289dc9b0ab9b2250e3266d27503", "ref_doc_id": "2e9e8479-d4d9-41ff-9d88-29ddf89fd35e"}, "3fab13e6-ddba-4499-8ecd-0787f2672125": {"doc_hash": "75cbcf95c0dcc4292bd323f52b450997f542dae91599aa7dfa6c878b8c01b7a3", "ref_doc_id": "4241b810-872d-4569-876f-a943180e53ed"}, "56d3326c-2f5c-4824-a6dd-f0efd98fa368": {"doc_hash": "cd1b54e245d337e73c9bb44cefa44c780fdc3122a2a8ece98827dc31057307f0", "ref_doc_id": "c8e8419c-7ba1-4acf-85a6-5ee1980b9aa7"}, "e6509348-2659-45a6-83b9-cd5d744205bd": {"doc_hash": "2b733fb88b390de99264c5a4a97b4644d4f7a5f757330764255cf87ca5131e2f", "ref_doc_id": "035606b4-544b-48eb-ae8b-5f52518f4602"}, "dc4fc29a-62ce-4c64-89ee-5c1f46653d12": {"doc_hash": "d6b9596b8b080fcdfd0e49f566eb1ffff2c8534150e0a4a7254a2a8a3a6044d1", "ref_doc_id": "3535fc4a-d5be-4463-a129-cb93f6185e99"}, "39d7bd99-83cd-4c13-929b-20b6d940e92e": {"doc_hash": "c085758ceb157653fa343ce985e26ac4281b35ffbb1f6be470ed9b0d10a9e429", "ref_doc_id": "0cba96fe-8586-4df5-a11c-28842624c59f"}, "3aa1cfee-0a8b-493f-957c-9e8e74a171a4": {"doc_hash": "f4579db2487ea946d33d599ebe67b0e68e531b6bdfba6d409cf947b0ac2311f7", "ref_doc_id": "0cba96fe-8586-4df5-a11c-28842624c59f"}, "9b2469f2-274c-4da2-a9d3-44a16d8aeab0": {"doc_hash": "c4e5eb803859b2fe71749d37ab3bb165f562f74c4e23ef265023b4451d09e232", "ref_doc_id": "0cba96fe-8586-4df5-a11c-28842624c59f"}, "d325947e-c66c-4e1a-9a35-d3e322248f75": {"doc_hash": "cc5cff6b6e38fec2fc9c128bd187267d53c0546907d5d7145fadb46c73dec22b", "ref_doc_id": "40e03306-1774-4bf8-8a92-15b27af18bf9"}, "00313ab9-21d7-4d9d-96f9-0626d9047edd": {"doc_hash": "07c4f3005cbe59ef27e33ced53af01703b350ae39ec0432a6ca51df824bac8bb", "ref_doc_id": "058bae11-91c1-4669-942f-9186e97f7698"}, "5f51c805-7d29-487e-ab41-a9822d6658db": {"doc_hash": "aaea7bf69f63e1fe216331fa3b93fb007a52a1091df4004b2cc592b873abc148", "ref_doc_id": "43922029-82b1-4fed-83ac-2214cd395e0d"}, "a2e7f045-0599-421d-bad8-5a7b9f2ed7b3": {"doc_hash": "f2570afc8d2922cbdaa9687b10cb61afce4adb4f57016de0be64ac5794f95d1e", "ref_doc_id": "78f2e61a-9210-409c-a56e-1afbb3e419d8"}, "a2af6627-f2bf-493c-b69d-ae5cf50fe259": {"doc_hash": "1553abd9b2392c31a3089c63a255ac330a3eec0efb3649262a50f7c373c555c9", "ref_doc_id": "da4f3104-87ff-42ec-8a20-c72079600f9b"}, "327d85cc-4165-46dc-8a63-6141420ab7d2": {"doc_hash": "fe65e1f3d6d0c2118779dbaa3818919687619bc6e0a4f6eb22c9f184329b8d5e", "ref_doc_id": "26c9b5c6-402a-4078-8221-78b473855541"}, "670df57d-e5ba-4984-959a-042e4bd03c38": {"doc_hash": "70c5994d00ab1d76c63bfc4f46f14f2cf2b4b2689bcdbe3466514e944ed43728", "ref_doc_id": "6fc2bfae-574e-49a4-8029-c3a4f3f02312"}, "aae377d7-9e7d-4343-8389-290001934a0c": {"doc_hash": "31006c83316c93b8899603cc28d65478c6c01a67b555ed8bbc6b485b50fed7a5", "ref_doc_id": "9ae00fe7-4464-4c26-bb1a-ba09a54b4462"}, "acee59a3-77de-428d-8eca-f995569c1025": {"doc_hash": "6b7eca9c012366a0c51e4f802593dd22d58a3206c981cddaec17570205e0dc85", "ref_doc_id": "4356cc9c-e479-4e4f-b678-8bc32717836f"}, "93254a38-7dbd-4079-987c-7eb666a7acd0": {"doc_hash": "4908dbb22b97916f95d31cafb29206367df565fda3e2a011285543c67d4e6e1a", "ref_doc_id": "4356cc9c-e479-4e4f-b678-8bc32717836f"}, "4398c950-d0a9-4b24-8288-b22a12228b21": {"doc_hash": "4581252b6df116bfda03bc2ee3d7405d20c2a6078ec7c7814863dec2f3e2cae6", "ref_doc_id": "1e448c4f-45b8-41e3-820a-265f4cf291db"}, "1aa78d56-e96c-4e2d-838c-7aa36b8db75c": {"doc_hash": "094747c1f5be10c326571939c38a2ae4843eee2b513b08c419860084567f4df0", "ref_doc_id": "f1b7d0b0-635c-4086-8a8f-b2ca020d5864"}, "c70426e3-adcb-4a33-a007-85c5a2bed133": {"doc_hash": "8851e0f30f92ad4b2f2988a1c8739ccf096bc7620f1e61db62f559da30cd755f", "ref_doc_id": "ccc3fec1-8090-4fb2-90c5-091c1d793674"}, "014050ab-2d54-4427-945c-0f8c9842ba3b": {"doc_hash": "2d97069cc5278deedddce814e92e24c4d4d5bfc0e70b1c6dc917f529e5d01494", "ref_doc_id": "f383d7a5-0806-434e-b9bd-9ecd77b28972"}, "8c2f9c76-93cd-4b70-a58b-0d8dd14e0489": {"doc_hash": "2ff4f6307c58d68c39c90a245ee6ae4286819720763173b79d0c3d1a1093aa3b", "ref_doc_id": "bf2f627a-410c-4ffe-bf1b-18d3b2267ffb"}, "a9a763c2-8c54-4981-ae4d-9de5a5cc00f4": {"doc_hash": "a7ae70cdafd8e429a9d5607c344b88cd81f503dc793be16dc6a79c49292d1828", "ref_doc_id": "b051ff89-97dc-4642-bf49-f7eb24b7f04a"}, "9572ea8b-52b0-4522-8762-7012971a2028": {"doc_hash": "84e5cf0275fe92f63844dbf477b4f0a4ad639182a17739675f68faf3f4350beb", "ref_doc_id": "a6f66eb2-0f1f-48b9-9e53-bbc0ebc9bba1"}, "1bc6dd15-00ed-4a23-908b-26e0dd834f6c": {"doc_hash": "96d2f8a1c60c5d16c72f0435ffa0d4a23bbdf626bd7606f72b13b29b5732a6f3", "ref_doc_id": "23765350-7fca-4482-83df-e937f03efada"}, "445aba9b-ae03-4655-9dcd-f45846757b20": {"doc_hash": "81c9f6f1683e404f6358761315116483679be9d9b61cb18118ec0cb4a1bcf555", "ref_doc_id": "52a44651-3ac0-45d6-b516-ae5de5f2881f"}, "ad9e6521-011b-40e1-b060-2aa3222241c9": {"doc_hash": "4fe4228e0b356fb32a71be2071f5a90c692610538359e9341a4d3903406502df", "ref_doc_id": "6543837e-54b4-4a98-9f75-c8cfb1ad3773"}, "4cf2a539-3bf2-45a4-8792-e1d955cde729": {"doc_hash": "97d7d53104bba739f68d5e8e5785a3f3484f5bc1bd65e778ac58f10e46fc9614", "ref_doc_id": "3f7605d3-4035-445c-a16e-97d6353b9412"}, "a9679332-87db-412d-8a09-906590e17334": {"doc_hash": "d221f01879125e13eeabbe2ac1dab5fa96830ce00529958d2de64c296c730ab2", "ref_doc_id": "c3546a68-cee5-4cfd-8bea-646f4790a18a"}, "c371639a-3374-4997-b988-f03cd763e796": {"doc_hash": "108ce91f77e3a449bf43d6ae127f64e439b47feda7865abd627d146ef51d5307", "ref_doc_id": "85b8130c-dff1-4718-86b9-77f1d6ee4965"}, "14437062-602f-4b3c-b7af-73a424b67f30": {"doc_hash": "623da7b1404cb45ab186fbfde644e639c62885e169d27ecbc439f020bdfed053", "ref_doc_id": "85b8130c-dff1-4718-86b9-77f1d6ee4965"}, "81c6e890-e248-4ccb-a329-2fda2c28ee1c": {"doc_hash": "f0a50590cc6d42fcfefc2a0e5e4758bb3205743f1cbbb51d1249c70c1010337e", "ref_doc_id": "925bfe0e-cd31-437a-80c5-fc28a3e1fe85"}, "882ed4e7-1079-47e9-9f86-b00e1748ffdb": {"doc_hash": "fb676f08077db669254f325b4bacd986a6af9f478083030bc825f0ea734a267b", "ref_doc_id": "925bfe0e-cd31-437a-80c5-fc28a3e1fe85"}, "d24e0ceb-4db5-4ff5-9921-bcd18e5896f9": {"doc_hash": "7d554229c54b1b1e0a7bd4e33b186e2a6b523f58ee2c83dcd6269e799a1a226f", "ref_doc_id": "a6551b08-86e2-4f1a-bea4-34bbcf0c5a15"}, "5ca5dd57-f0eb-449e-81bb-436e2b37bc4f": {"doc_hash": "d39605713bf2e7f0345dc2074a98d2ce8a2dc57576a43ecb676f5bcb8da75c00", "ref_doc_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c"}, "781b552d-227a-455f-aed7-a82cca9dbe06": {"doc_hash": "fe01b7e5d8a26433be0b913c655b6277274d8fca86bf6cf76dda8adb566e2a78", "ref_doc_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c"}, "d78b9269-6f52-41a0-906d-795dbd96f5cc": {"doc_hash": "191b55a0a6e51b08445cbe90a92d337504667d0826ed3bcac118bff1cf1e8765", "ref_doc_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c"}, "a4aef53b-9c63-4901-8ad2-a4b737191a24": {"doc_hash": "9a347cae2d01e6ac7a900537795cca281db85ed373539d84991ade6d461fcc21", "ref_doc_id": "5ba18dce-aba2-4b17-8f87-9983330f0467"}, "2eebe9ac-a5d5-47e7-af8b-cd205ceb5c1a": {"doc_hash": "2bcd9f33837fd74931d72b025fb7f1f6e0bc966fc0fd0663fb9db025b1a6a0d9", "ref_doc_id": "5ba18dce-aba2-4b17-8f87-9983330f0467"}, "1a8077d3-2f4f-4674-a9fc-a4306e0fbb77": {"doc_hash": "efb504ad1fb2659725f0f53789474ad4dfc4a86877aee2ccd001fa642510d792", "ref_doc_id": "0c346b92-0e8a-41c3-83fc-bee7182d0f1b"}, "e11a765c-0d6d-43d8-b53f-8e7b191d87a6": {"doc_hash": "534b06766820fb33069ae53bc98ab070c3702f874475d85001b9745276d030c2", "ref_doc_id": "0c346b92-0e8a-41c3-83fc-bee7182d0f1b"}, "b295623c-9726-4ad2-87ca-eb90300fff0c": {"doc_hash": "e5bfd9a12bdb634d37feb04f8ff0e9426e8a005cafaeb8caef57cc192e8f39c0", "ref_doc_id": "e9021f73-844f-4211-8bf6-247bd4f61fea"}, "873e1a60-3dc8-49d0-bcc3-953bc6cd294b": {"doc_hash": "71304332026f0763b508d0fcf44a8e1f8b69d207c8ba55236c5dcec36a9fba2e", "ref_doc_id": "5763e346-9cb4-40a1-9428-af1e07d0f65c"}, "f01ecadc-d380-4fd3-a7d3-c7be51e44ad9": {"doc_hash": "dc098a6467ff32ce2beacf4606a71aaef465d6a8c7db6f63079964e726995253", "ref_doc_id": "ac6f3569-1e53-4a82-b341-c87fbe8f269e"}, "41fa639c-d2de-4d52-9621-09a477ff8c32": {"doc_hash": "1793c6a47a409d78b79f5836207c58466744cc8746fb834646d22ed41f08f841", "ref_doc_id": "ecbc5010-745b-46fc-93da-b353023212cd"}, "1b1f5aef-85a5-4b1e-b7d1-6261cc6b548c": {"doc_hash": "16d0c74d4c7fe432d464dfcdaed75fc15cca21f43b2a4cbfaa948e473fbcd10c", "ref_doc_id": "4f67c5ea-9c86-4e17-953c-a8f1d89c93da"}, "dbd86541-5069-4209-9b59-2189106be92e": {"doc_hash": "e5151f78f0a2c7df90eafc80b4068387b791fbfd5b5c6388cec8a5587201649a", "ref_doc_id": "e5581563-0d73-402c-8c09-3f58a52974c9"}, "586d9b5b-bc0b-4713-8221-01b5779571ac": {"doc_hash": "860b2099fc8f0df1ee5284cdbf4ba55fff4a9742acae837b15e400380b7abfa9", "ref_doc_id": "e5581563-0d73-402c-8c09-3f58a52974c9"}, "88fb84ea-d2fc-4f85-bd50-44ed82fc4d04": {"doc_hash": "d53e7f28101d7e13c25fd0764b8d5af518a64c0e3dc4712a18b5e1e618edd126", "ref_doc_id": "45220eb8-b17a-4508-a605-4c1d3ca3364b"}, "d0b8f101-92b2-465a-a38a-0f9dd7bc37ce": {"doc_hash": "ffc2948e94f142b1c0aef4f06494de356bc77c851a917e54fec6e9b6836bae07", "ref_doc_id": "ab00adb2-a47a-4c15-98de-8bcbf7d76b65"}, "1123ecde-86ec-43ca-bf4a-f21c7c45e65a": {"doc_hash": "e5624c2591830d41a2017e0c9d7387b36dbdec71e85b69a9685435f243fdf1e4", "ref_doc_id": "af2e03b1-4b3a-436c-8bb5-9d9a89e51c04"}, "6f63a470-5575-4d08-91df-323bca8fcd4f": {"doc_hash": "c1f8f2c83d995ac6d68107a271dd17cd77adcfc415f1d4ddfb1113642ed5f81f", "ref_doc_id": "14fa417f-48aa-437d-abf0-8fdf2082e526"}, "c3211808-78e8-42e7-bd15-99e8e5ec92b7": {"doc_hash": "935ec51f4ae1ab298e06973744d7a098f9da308d2e2fbc1635e0f15384b3aba6", "ref_doc_id": "6bf3b90a-4754-4f3e-be24-b5a5e820c904"}, "e1a453a5-9359-4009-84fb-a2909fae0329": {"doc_hash": "160dfd0955272d9e06237fd3c1e68ff6173f8b68d135e6461ec9bd89dc39848d", "ref_doc_id": "b87e3821-2fd3-4813-9b53-5ecf6494fc6b"}, "ea31c832-7744-496c-80a1-09036627bf14": {"doc_hash": "3ded3023e82a73f963e6061acafcc40b251e16f314a99df57d626e581676f891", "ref_doc_id": "e0e4d2aa-0f6a-417e-8561-416f84c65d5a"}, "6c7cc860-7702-4ecd-9f22-e6cd1eecb452": {"doc_hash": "745f58de1929cdf5c333da47f656c1e6b6378eb1bfd39193a2b2c2b0cbeaaa8a", "ref_doc_id": "1d883de3-40a2-4e2d-944b-a2a9f8d7d8f8"}, "0889090b-6e95-4745-aa8d-54912fb7c563": {"doc_hash": "b6706dbd25ee071a803562ac98b427838607d1bb50eb7a008117ef7c1b5095b7", "ref_doc_id": "a62b6be4-bffe-40e9-943d-1677c315572b"}, "011a797a-26c2-4989-bc84-fd094c500037": {"doc_hash": "0a42261d80481f578f4cd8a3c7a89d548d00e85a3d8f0161cc060d57ff03bfc0", "ref_doc_id": "f1c4f0f6-9ae0-4964-8f09-807596f8ce82"}, "3e027dc8-7af8-4d4f-8bd8-183aeb26e240": {"doc_hash": "3f3ae6b4de1d68834586a0101c66b0183f9f2c084fd4c10a2137a98528376031", "ref_doc_id": "f1c4f0f6-9ae0-4964-8f09-807596f8ce82"}, "a32b7d90-e763-4e24-b40a-e4268baa4619": {"doc_hash": "9bc68b355b0bc46b11c320c7de5a09fecd5c9025b5fe4efb019d6a5cdbbe95a6", "ref_doc_id": "0736c0e3-9dcc-4296-ba51-01c3960d5f5b"}, "8716e4fb-494e-4564-b457-cc0029093f1d": {"doc_hash": "55b6dcf5560a72bd31a6463026461b3a14f6b56e8d33673ada75d6ee3b49bb29", "ref_doc_id": "07875832-6012-4b2c-be23-717cafae3638"}, "cb089af5-c4dc-4c8c-94fb-bdb6082d6e8e": {"doc_hash": "e360a67b99294ea6c108ce05f5f45297ba5a5a002db0768ce127f973d54e06ce", "ref_doc_id": "31e36b5e-cd51-4e22-8cbc-a33ba694adba"}, "1322d6ea-75b3-47de-969e-1c8259388e2d": {"doc_hash": "56527df45c957f6e6fe6f88ba67b85527207d813a63732003b3bade07cd32931", "ref_doc_id": "7d05bafa-599b-48f2-9f2f-e05b93d7b10a"}, "c1f54705-fe67-4b30-84df-4020ad79310e": {"doc_hash": "1689381fe1ac3f9c18c2a65a634fa3e3f56e81d2f876a4ffc4d370fcbafeb844", "ref_doc_id": "acf0788c-c9f2-4353-9781-6593c1f60cf3"}, "36d00718-5489-4d12-9574-660f3c01b6d8": {"doc_hash": "50a78a25756fe9a855155caec01acbab33e11e54a690dd57f5f39ad9dd9e9ddd", "ref_doc_id": "e8bccb3e-e780-402d-9ec6-cff775918578"}, "7df13e1d-c51e-4e78-9025-816bf60e607e": {"doc_hash": "1e5d752372e7b6956320819860667b50d78570f0d37aa89cd27fc1bb9c6e6102", "ref_doc_id": "e8bccb3e-e780-402d-9ec6-cff775918578"}, "035c784d-2c59-4226-bfd2-d768b9bf8a71": {"doc_hash": "ab36ab5ea8cb53d6a401984567a35a99676d17e794ba973d5b55356b3ebfc3c5", "ref_doc_id": "e8bccb3e-e780-402d-9ec6-cff775918578"}, "b0ff9f2e-370a-4e96-bcba-8dba9c3144aa": {"doc_hash": "aba6665fd951d23bcd3203e7a4d00d073e80b9c5b4cf092de0e6cd34a8707a11", "ref_doc_id": "e8bccb3e-e780-402d-9ec6-cff775918578"}, "6b55efe6-a667-4667-9500-ce458dc84e18": {"doc_hash": "1674ae40f8955a5b6f56054b86a01f55d32978bfe575858703de24402479098c", "ref_doc_id": "5037c7aa-19e6-4150-aff4-fc39138524a4"}, "34708d25-6ec0-451a-9837-9d09cb107924": {"doc_hash": "085c3bd35a307adc2205de26dbcf3c0bb87495d75fab76c5a1083e479e447c45", "ref_doc_id": "27f9eecc-bff3-4ddf-aba0-59b523b016d5"}, "644a01c1-ddba-4f5c-a744-facf9aaec141": {"doc_hash": "f41f0f5cc948be33ed4e61c54f408932dfac5fa24722aeee8d16906112d634f7", "ref_doc_id": "27f9eecc-bff3-4ddf-aba0-59b523b016d5"}, "f3d122cc-8431-4f83-ba16-8b5254b5728d": {"doc_hash": "f0844e4b6ca21122b18b5b60660da52f0c769ac39d8f3e3ca3c88326bfab7447", "ref_doc_id": "2fcef851-2c54-4e61-8e40-bde6b4026a4e"}, "c2b8da66-754a-4b31-9e30-17f4e5d3153d": {"doc_hash": "9068cf70613d0acd1fcc20bebe8ba4e7b2f5a8494c9424116d117a62accb6bf2", "ref_doc_id": "c66bab98-a7a0-41ac-b717-3cfce2e25f78"}, "5451deea-3150-468d-82bb-3d16caea2cbc": {"doc_hash": "68678ba03b38014f114ba63bc0a8a8b27b6005b2439d5492be3f9b8845c7af73", "ref_doc_id": "fb9bccfd-54f7-4a9d-926d-707627eca7be"}, "1ddc69a4-9b6f-4fdf-a196-bb4f7e43e33c": {"doc_hash": "8346d5a2a8d4a19a8f4a455df0bdab5f592123dc2ee99b22adb41277fabc3d97", "ref_doc_id": "4c00647d-cb87-4890-b499-c0294ac209c2"}, "cfa2e3ca-9432-41ad-8376-b3ee9879c964": {"doc_hash": "560314a277962184c52ca8ba638b1e6d994c2dff08573702f933a745d19c157b", "ref_doc_id": "db91eb4b-86c2-4d58-960a-c2ecf134d746"}, "88633947-f14a-4b67-a1cf-ba9a807e8c43": {"doc_hash": "bef2ec1896ec6601258f4edafa0f3bfd4371e5b3307f9ebd7487a0aeadf334d5", "ref_doc_id": "09b11af0-7fc7-4f52-9c9c-93600f0aad18"}, "6eb07bc5-ed7d-4ab3-ac95-6c2dee223058": {"doc_hash": "f6952f794cae8b42ae5e64ab608d108248afe8b9c340c535011fdd30669979c3", "ref_doc_id": "d38d7c4d-6db6-4fb0-b0a0-7679bae6abf4"}, "fdad76c7-3523-4a21-b946-57eff47b232c": {"doc_hash": "d185f1aae924506d6391f72c6907101f674afdb4daf923fe27c5ce7ee8ef6a61", "ref_doc_id": "8fc0108a-f3fd-49fe-90ef-abca3cc98c2f"}, "2c1dac92-2b1e-4595-b166-965c1a265b97": {"doc_hash": "4c786e131a9b687d7871fa318aa914cb07f6d7bc64c053bdc4c64e716ce3871f", "ref_doc_id": "a56bff9f-cc99-445f-92ab-f05261deac86"}, "4bc9ff0d-d75b-4535-ae5d-9564ed832c8b": {"doc_hash": "2ba1965c5fe800942b37f188a69698c985b36b36e1d6f0d43da9afc8376c87dc", "ref_doc_id": "cdc13056-b1dd-4019-9374-9b336ea78aa7"}, "16847bff-6b82-42bb-9028-161e345cbe65": {"doc_hash": "df0bd086689cf8610b4c02125bd11c71316793fcad8f3c5895a00f65ef44ca30", "ref_doc_id": "cdc13056-b1dd-4019-9374-9b336ea78aa7"}, "996e8ac9-4d42-40b6-8cd0-7cb500d9b35e": {"doc_hash": "e411862e3c5cf1fd531109d450f63ebb0828c03992bf5cfd6b11f00f0dcb3163", "ref_doc_id": "19aee23c-c7fa-436e-b912-5ca6509f6fbb"}, "da0d77f5-0b31-45a4-b5a2-a45c5ffa542a": {"doc_hash": "b9003cffebd837afde1f66527cd4e3918d1a40b927064b9c655dbf2051789d5c", "ref_doc_id": "3148399d-5bf1-4643-a8c0-58997b3443b9"}, "056f3ab5-fa04-443d-afb7-7697d7fe91e2": {"doc_hash": "636f59e94398f71c29b85764f4bb7290b23488f06300d4a265eed57380f38e24", "ref_doc_id": "d8e967e6-d19b-4d42-97d5-99c58a92db35"}, "2484d867-1426-4a27-b661-9970539d95d2": {"doc_hash": "19f85968a6c1a70820e87bdfeabee915e5d767c3cc6c8457b7b12a07d5c41448", "ref_doc_id": "398d34d0-c8e5-4041-949a-7d9cc65e75b0"}, "977ffc62-3dc5-43a2-aec8-c81dad7fd3f2": {"doc_hash": "55e62a4b32521922ce4810dcc87d1819b1e8165d010cc80de9ec5b79fc942883", "ref_doc_id": "398d34d0-c8e5-4041-949a-7d9cc65e75b0"}, "5b067f62-5f57-4d95-a1ac-827439f7cfaa": {"doc_hash": "37d919b6203cde00e4e96bc2d0f04657df11529b1f56b98b2763ac3aaa01f990", "ref_doc_id": "9c4674dc-d7e2-4148-8177-e5fd88a7579c"}, "86b85cac-8ae8-4895-9e29-e4fb704f17a3": {"doc_hash": "0779551e117395493e535698ce9be8e86e61cff3cacaccafe5222bc93f3f0602", "ref_doc_id": "f4482510-2e99-4003-8256-b2005c75b455"}, "2da1b58b-e8f0-491d-b51a-c57b128b637a": {"doc_hash": "635e4b804d7676091f33e1ec22395401a64af51cb323afb259427a8df130a7de", "ref_doc_id": "a7845a33-6799-4a78-9edc-55529349690a"}, "fdfd8b59-043d-439f-80dd-7c634a500a61": {"doc_hash": "7a59f06b55beb94d11afbf98f02b18d85a7808ff47d1331755e6080212e9e2bd", "ref_doc_id": "dda35d9b-615e-46e2-9145-a912d4b3dd44"}, "66102849-2e0f-4ba4-b918-1b36199f9c26": {"doc_hash": "612ee8b0f95afe4f5a04cf08c85d27b038f8518b0417dbca69cd7eae1718bfac", "ref_doc_id": "a5a23529-c2cc-4063-89c9-f30940b93220"}, "1fe9a21d-847f-48e2-8a13-8172b2f0e636": {"doc_hash": "d7c08e6b0b10ca88c7311427a432b8c940b68844de49a59e5c8978ce63a9e4fd", "ref_doc_id": "51545695-b5ff-41de-bbb2-85b26b563d87"}, "579a251a-6573-4fd9-a8df-7b74845ba0eb": {"doc_hash": "98f09a34471a93cea797cff82d4c7968ca781cb704423f048149ecda502b9bde", "ref_doc_id": "d2330684-3a47-4efd-934c-6e67dbd5eb70"}, "c365df37-e799-4a64-9c30-5502e7166f94": {"doc_hash": "14a6d98bcfdf85b2228399113a786a90a64c8057fdb2194b7027fa77300d50b2", "ref_doc_id": "67bfcbb3-f050-478c-abef-05d68aafa0af"}, "c6491fce-af7d-423c-aed4-3d8b75c2a850": {"doc_hash": "f4abc5c1fc43c6471566b070cba65c3615993b6aad70662b0ab8902eb21ab2db", "ref_doc_id": "bf06b587-fc80-47bb-8167-f9adde88f61b"}, "684d1db1-3581-4dcd-b183-e67ca1a0ba51": {"doc_hash": "edbf655f2f9863c186b4a618e7b9bffc9555cdcaec12e3674a63eeb2a55c33bb", "ref_doc_id": "a0ed2503-0d36-45f9-bbd6-98c19c035f82"}, "ca844fd9-9eb6-4346-8a25-0d5512094555": {"doc_hash": "e0affb6712564f556ed2ed2cdeff85849d2e05aada500fc2fa4e47fd2fae4e7b", "ref_doc_id": "6ece8501-e8ec-497c-a777-5ee722e99219"}, "9524e68c-d3a8-4e24-8d6f-dd8054f77241": {"doc_hash": "7e1ca25b5a27e43da1bcfb477ece950fbe1826d43c1981cd5ad5caab9b2567d0", "ref_doc_id": "8f45074f-9b0b-4059-9cde-f0414a152747"}}, "docstore/data": {"aa6c4ad2-fba7-47f6-b500-a4244720c81d": {"__data__": {"id_": "aa6c4ad2-fba7-47f6-b500-a4244720c81d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Algebraic_Datatypes_description.md", "file_name": "Algebraic_Datatypes_description.md", "file_type": "text/markdown", "file_size": 395, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "872ef8d4-258e-4938-8202-614e2f5fd192", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Algebraic_Datatypes_description.md", "file_name": "Algebraic_Datatypes_description.md", "file_type": "text/markdown", "file_size": 395, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a45b9d833151de0586370f5dc602903f4b1288d1fc6a3f87788259dd06788a4f", "class_name": "RelatedNodeInfo"}}, "text": "5.14. Algebraic Datatypes (grammar) {sec-datatype}\n\nDafny offers two kinds of algebraic datatypes, those defined\ninductively (with `datatype`)  and those defined coinductively (with `codatatype`).\nThe salient property of\nevery datatype is that each value of the type uniquely identifies one\nof the datatype's constructors and each constructor is injective in\nits parameters.", "start_char_idx": 2, "end_char_idx": 376, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47cd1cf0-4179-4958-a962-13fb7a5e9d13": {"__data__": {"id_": "47cd1cf0-4179-4958-a962-13fb7a5e9d13", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Allocated_Expressions_description.md", "file_name": "Allocated_Expressions_description.md", "file_type": "text/markdown", "file_size": 1479, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c452930-e8ce-4d1f-a70d-456d345cdb59", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Allocated_Expressions_description.md", "file_name": "Allocated_Expressions_description.md", "file_type": "text/markdown", "file_size": 1479, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0b43b37cca83ac68d6ea1c9370a1e4025c32a8f433912eb35e30d24e804ba87a", "class_name": "RelatedNodeInfo"}}, "text": "9.24. Allocated Expressions (grammar) {sec-allocated-expression}\n\nExamples:\n\n```dafny\nallocated(c)\nallocated({c1,c2})\n```\n\nFor any expression `e`, the expression `allocated(e)` evaluates to `true`\nin a state if the value of `e` is available in that state, meaning that\nit could in principle have been the value of a variable in that state.\n\nFor example, consider this valid program:\n\n\n```dafny\nclass C { constructor() {} }\ndatatype D = Nil | Cons(C, D)\nmethod f() {\n  var d1, d2 := Nil, Nil;\n  var c1 := new C();\n  label L1:\n  var c2 := new C();\n  label L2:\n  assert old(allocated(d1) && allocated(d2));\n  d1 := Cons(c1, Nil);\n  assert old(!allocated(d1) && allocated(d2));\n  d2 := Cons(c2, Nil);\n  assert old(!allocated(d1) && !allocated(d2));\n  assert allocated(d1) && allocated(d2);\n  assert old@L1(allocated(d1) && !allocated(d2));\n  assert old@L2(allocated(d1) && allocated(d2));\n  d1 := Nil;\n  assert old(allocated(d1) && !allocated(d2));\n}\n```\n\nThis can be useful when, for example, `allocated(e)` is evaluated in an\n`old` state. Like in the example, where `d1` is a local variable holding a datatype value\n`Cons(c1, Nil)` where `c1` is an object that was allocated in the enclosing\nmethod, then `old(allocated(d))` is `false`.\n\nIf the expression `e` is of a reference type, then `!old(allocated(e))`\nis the same as `fresh(e)`.", "start_char_idx": 2, "end_char_idx": 1336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91d4899d-5d18-4ff9-b01b-88346cc86ab0": {"__data__": {"id_": "91d4899d-5d18-4ff9-b01b-88346cc86ab0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_Allocation_description.md", "file_name": "Array_Allocation_description.md", "file_type": "text/markdown", "file_size": 1761, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be9a2a5d-df65-4b9f-a951-dff151657df4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_Allocation_description.md", "file_name": "Array_Allocation_description.md", "file_type": "text/markdown", "file_size": 1761, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "093a50478a06cbb217c468047e88d432c443f7b9e74ac0db6b7e01f5f046dec8", "class_name": "RelatedNodeInfo"}}, "text": "9.16. Array Allocation (grammar) {sec-array-allocation}\n\nExamples:\n\n```dafny\nnew int[5,6]\nnew int[5][2,3,5,7,11]\nnew int[][2,3,5,7,11]\nnew int5\nnew int2,3 => i*j)\n```\n\nThis right-hand-side expression allocates a new single or multi-dimensional array (cf. Section 5.10).\nThe initialization portion is optional. One form is an\nexplicit list of values, in which case the dimension is optional:\n\n```dafny\nvar a := new int[5];\nvar b := new int[5][2,3,5,7,11];\nvar c := new int[][2,3,5,7,11];\nvar d := new int[3][4,5,6,7]; // error\n```\nThe comprehension form requires a dimension and uses a function of\ntype `nat -> T` where `T` is the array element type:\n\n```dafny\nvar a := new int5;\n```\n\nTo allocate a multi-dimensional array, simply give the sizes of\neach dimension. For example,\n\n```dafny\nvar m := new real[640, 480];\n```\nallocates a 640-by-480 two-dimensional array of `real`s. The initialization\nportion cannot give a display of elements like in the one-dimensional\ncase, but it can use an initialization function. A function used to initialize\na n-dimensional array requires a function from n `nat`s to a `T`, where `T`\nis the element type of the array. Here is an example:\n\n```dafny\nvar diag := new int30, 30 => if i == j then 1 else 0);\n```\n\nArray allocation is permitted in ghost contexts. If any expression\nused to specify a dimension or initialization value is ghost, then the\n`new` allocation can only be used in ghost contexts. Because the\nelements of an array are non-ghost, an array allocated in a ghost\ncontext in effect cannot be changed after initialization.", "start_char_idx": 2, "end_char_idx": 1573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "722ff829-ad0c-4ff1-bffd-5013c83fbc45": {"__data__": {"id_": "722ff829-ad0c-4ff1-bffd-5013c83fbc45", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_types_description.md", "file_name": "Array_types_description.md", "file_type": "text/markdown", "file_size": 549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a325dee-bae2-436c-8a74-63b1b31376d2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_types_description.md", "file_name": "Array_types_description.md", "file_type": "text/markdown", "file_size": 549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6fd975ca98d8182af5c67188f7dc62d8b6b7c1da02edf7c7cfb6f11091fc4fed", "class_name": "RelatedNodeInfo"}}, "text": "5.10. Array types (grammar) {sec-array-type}\n\nDafny supports mutable fixed-length _array types_ of any positive\ndimension.  Array types are (heap-based) reference types.\n\n`arrayToken` is a kind of reserved token,\nsuch as `array`, `array?`, `array2`, `array2?`, `array3`, and so on (but not `array1`).\nThe type parameter suffix giving the element type can be omitted if the element type can be inferred, though in that case it is likely that the `arrayToken` itself is also\ninferrable and can be omitted.", "start_char_idx": 2, "end_char_idx": 505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db2f9b0a-5fe3-4ce2-899f-81e83ca2c047": {"__data__": {"id_": "db2f9b0a-5fe3-4ce2-899f-81e83ca2c047", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53b3bdfc-3c02-433e-bb87-bcd0378ded4f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b824bd92f199b3ae2a3a98e0d41c62f405cfeac6ac96c11bf58f44a63807cda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "129b9fda-ff30-4023-8565-69838968cb5b", "node_type": "1", "metadata": {}, "hash": "b57f9fadb92ddb18456a656857ef24b2bc6344e66899217b63e46625a9fab8fe", "class_name": "RelatedNodeInfo"}}, "text": "5.12. Arrow types (grammar) {sec-arrow-types}\n\nExamples:\n\n```dafny\n(int) -> int\n(bool,int) ~> bool\n() --> object?\n```\n\nFunctions are first-class values in Dafny. The types of function values\nare called _arrow types_ (aka, _function types_).\nArrow types have the form `(TT) ~> U` where `TT` is a (possibly empty)\ncomma-delimited list of types and `U` is a type.\n`TT` is called the function's _domain type(s)_ and `U` is its\n_range type_.  For example, the type of a function\n\n```dafny\nfunction F(x: int, arr: array): real\n  requires x < 1000\n  reads arr\n```\nis `(int, array) ~> real`.\n\nAs seen in the example above, the functions that are values of a type\n`(TT) ~> U` can have a precondition (as indicated by the `requires` clause)\nand can read values in the heap (as indicated by the `reads` clause).\nAs described in Section 5.6.3.3,\n\n- the subset type `(TT) --> U` denotes partial (but heap-independent) functions\n- and the subset type `(TT) -> U` denotes total functions.\n\nA function declared without a `reads` clause is known by the type\nchecker to be a partial function. For example, the type of\n\n```dafny\nfunction F(x: int, b: bool): real\n  requires x < 1000\n```\nis `(int, bool) --> real`.\nSimilarly, a function declared with neither a `reads` clause nor a\n`requires` clause is known by the type checker to be a total function.\nFor example, the type of\n\n```dafny\nfunction F(x: int, b: bool): real\n```\nis `(int, bool) -> real`.\nIn addition to functions declared by name, Dafny also supports anonymous\nfunctions by means of _lambda expressions_ (see Section 9.13).\n\nTo simplify the appearance of the basic case where a function's\ndomain consists of a list of exactly one non-function, non-tuple type, the parentheses around\nthe domain type can be dropped in this case. For example, you may\nwrite just `T -> U` for a total arrow type.\nThis innocent simplification requires additional explanation in the\ncase where that one type is a tuple type, since tuple types are also\nwritten with enclosing parentheses.\nIf the function takes a single argument that is a tuple, an additional\nset of parentheses is needed.  For example, the function\n\n```dafny\nfunction G(pair: (int, bool)): real\n```\nhas type `((int, bool)) -> real`.  Note the necessary double\nparentheses.  Similarly, a function that takes no arguments is\ndifferent from one that takes a 0-tuple as an argument.  For instance,\nthe functions\n\n```dafny\nfunction NoArgs(): real\nfunction Z(unit: ()): real\n```\nhave types `() -> real` and `(()) -> real`, respectively.\n\nThe function arrows are right associative.\nFor example, `A -> B -> C` means `A -> (B -> C)`, whereas\nthe other association requires explicit parentheses: `(A -> B) -> C`.\nAs another example, `A -> B --> C ~> D` means\n`A -> (B --> (C ~> D))`.\n\nNote that the receiver parameter of a named function is not part of\nthe type.  Rather, it is used when looking up the function and can\nthen be thought of as being captured into the function definition.\nFor example, suppose function `F` above is declared in a class `C` and\nthat `c` references an object of type `C`; then, the following is type\ncorrect:\n\n```dafny\nvar f: (int, bool) -> real := c.F;\n```\nwhereas it would have been incorrect to have written something like:\n\n```dafny\nvar f': (C, int, bool) -> real := F;  // not correct\n```\n\nThe arrow types themselves do not divide a function's parameters into ghost\nversus non-ghost. Instead, a function used as a first-class value is\nconsidered to be ghost if either the function or any of its arguments\nis ghost.", "start_char_idx": 2, "end_char_idx": 3529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "129b9fda-ff30-4023-8565-69838968cb5b": {"__data__": {"id_": "129b9fda-ff30-4023-8565-69838968cb5b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53b3bdfc-3c02-433e-bb87-bcd0378ded4f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b824bd92f199b3ae2a3a98e0d41c62f405cfeac6ac96c11bf58f44a63807cda", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db2f9b0a-5fe3-4ce2-899f-81e83ca2c047", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cd01cb3944b3fe4bd4e0eb558ed0ff12f112721e5b0debfb39359d0d4b5e6ffb", "class_name": "RelatedNodeInfo"}}, "text": "Note that the receiver parameter of a named function is not part of\nthe type.  Rather, it is used when looking up the function and can\nthen be thought of as being captured into the function definition.\nFor example, suppose function `F` above is declared in a class `C` and\nthat `c` references an object of type `C`; then, the following is type\ncorrect:\n\n```dafny\nvar f: (int, bool) -> real := c.F;\n```\nwhereas it would have been incorrect to have written something like:\n\n```dafny\nvar f': (C, int, bool) -> real := F;  // not correct\n```\n\nThe arrow types themselves do not divide a function's parameters into ghost\nversus non-ghost. Instead, a function used as a first-class value is\nconsidered to be ghost if either the function or any of its arguments\nis ghost. The following example program illustrates:\n\n```dafny\nfunction F(x: int, ghost y: int): int\n{\n  x\n}\n\nmethod Example() {\n  ghost var f: (int, int) -> int;\n  var g: (int, int) -> int;\n  var h: (int) -> int;\n  var x: int;\n  f := F;\n  x := F(20, 30);\n  g := F; // error: tries to assign ghost to non-ghost\n  h := F; // error: wrong arity (and also tries to assign ghost to non-ghost)\n}\n```\n\nIn addition to its type signature, each function value has three properties,\ndescribed next.\n\nEvery function implicitly takes the heap as an argument.  No function\never depends on the _entire_ heap, however.  A property of the\nfunction is its declared upper bound on the set of heap locations it\ndepends on for a given input.  This lets the verifier figure out that\ncertain heap modifications have no effect on the value returned by a\ncertain function.  For a function `f: T ~> U` and a value `t` of type\n`T`, the dependency set is denoted `f.reads(t)` and has type\n`set`.\n\nThe second property of functions stems from the fact that every function\nis potentially _partial_. In other words, a property of a function is its\n_precondition_. For a function `f: T ~> U`, the precondition of `f` for a\nparameter value `t` of type `T` is denoted `f.requires(t)` and has type\n`bool`.\n\nThe third property of a function is more obvious---the function's\nbody.  For a function `f: T ~> U`, the value that the function yields\nfor an input `t` of type `T` is denoted `f(t)` and has type `U`.\n\nNote that `f.reads` and `f.requires` are themselves functions.\nWithout loss of generality, suppose `f` is defined as:\n\n```dafny \nfunction f(x: T): U\n  reads R(x)\n  requires P(x)\n{\n  body(x)\n}\n```\nwhere `P`, `R`, and `body` are declared as:\n\n```dafny \npredicate P(x: T)\nfunction R(x: T): set\nfunction body(x: T): U\n```\nThen, `f.reads` is a function of type `T ~> set` \nwhose `reads` and `requires` properties are given by the definition:\n\n```dafny\nfunction f.reads(x: T): set\n  reads R(x)\n  requires P(x)\n{\n  R(x)\n}\n```\n`f.requires` is a function of type `T ~> bool` whose `reads` and\n`requires` properties are given by the definition:\n\n```dafny\npredicate f_requires(x: T)\n  requires true\n  reads if P(x) then R(x) else *\n{\n  P(x)\n}\n```\nwhere `*` is a notation to indicate that any memory location can\nbe read, but is not valid Dafny syntax.\n\nIn these examples, if `f` instead had type `T --> U` or `T -> U`,\nthen the type of `f.reads` is `T -> set` and the type\nof `f.requires` is `T -> bool`.\n\nDafny also supports anonymous functions by means of\n_lambda expressions_. See Section 9.13.", "start_char_idx": 2766, "end_char_idx": 6080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a0e95ab-33ff-4f65-8e1e-6c261f84af3d": {"__data__": {"id_": "7a0e95ab-33ff-4f65-8e1e-6c261f84af3d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_name": "As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_type": "text/markdown", "file_size": 3430, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccc9914c-91f4-4015-ac1c-5eed912cdd2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_name": "As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_type": "text/markdown", "file_size": 3430, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "75f5c42cc5babaddb781dea2540636021a5e15a69d78b9098599bf8cac5ee844", "class_name": "RelatedNodeInfo"}}, "text": "9.10. As (Conversion) and Is (type test) Expressions (grammar) {sec-as-is-expression}\n\nExamples:\n\n```dafny\ne as MyClass\ni as bv8\ne is MyClass\n```\n\nThe `as` expression converts the given LHS to the type stated on the RHS,\nwith the result being of the given type. The following combinations\nof conversions are permitted:\n\n* Any type to itself\n* Any int or real based numeric type or bit-vector type to another int or real based numeric type or bit-vector type\n* Any base type to a subset or newtype with that base\n* Any subset or newtype to its base type or a subset or newtype of the same base\n* Any type to a subset or newtype that has the type as its base\n* Any trait to a class or trait that extends (perhaps recursively) that trait\n* Any class or trait to a trait extended by that class or trait\n\nSome of the conversions above are already implicitly allowed, without the\n`as` operation, such as from a subset type to its base. In any case, it\nmust be able to be proved that the value of the given expression is a\nlegal value of the given type. For example, `5 as MyType` is permitted (by the verifier) only if `5` is a legitimate value of`MyType` (which must be a numeric type).\n\nThe `as` operation is like a grammatical suffix or postfix operation.\nHowever, note that the unary operations bind more tightly than does `as`.\nThat is `- 5 as nat` is `(- 5) as nat` (which fails), whereas `a * b as nat`\nis `a * (b as nat)`. On the other hand, `- a[4]` is `- (a[4])`.\n\nThe `is` expression is grammatically similar to the `as` expression, with the\nsame binding power. The `is` expression is a type test that\nreturns a `bool` value indicating whether the LHS expression is a legal\nvalue of the RHS type. The expression can be used to check\nwhether a trait value is of a particular class type. That is, the expression\nin effect checks the allocated type of a trait.\n\nThe RHS type of an `is` expression can always be a supertype of the type of the LHS\nexpression, in which case the result is trivally true. \nOther than that, the RHS must be based on a reference type and the\nLHS expression must be assignable to the RHS type. Furthermore, in order to be\ncompilable, the RHS type must not be a subset type other than a non-null reference\ntype, and the type parameters of the RHS must be uniquely determined from the\ntype parameters of the LHS type. The last restriction is designed to make it\npossible to perform type tests without inspecting type parameters at run time.\nFor example, consider the following types:\n\n\n```dafny\ntrait A { }\ntrait B { }\nclass C extends B { }\nclass D extends B> { }\nclass E extends B { }\nclass F extends A { }\n```\n\nA LHS expression of type `B>` can be used in a type test where the RHS is\n`B>`, `C>`, or `D`, and a LHS expression of type `B`\ncan be used in a type test where the RHS is `B`, `C`, or `E`. Those\nare always allowed in compiled (and ghost) contexts.\nFor an expression `a` of type `A`, the expression `a is F` is a ghost expression;\nit can be used in ghost contexts, but not in compiled contexts.\n\nFor an expression `e` and type `t`, `e is t` is the condition determining whether\n`e as t` is well-defined (but, as noted above, is not always a legal expression).\n\n*The repertoire of types allowed in `is` tests may be expanded in the future.*", "start_char_idx": 2, "end_char_idx": 3279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7d38c56-b737-441f-9aa8-ca0b767b6a43": {"__data__": {"id_": "b7d38c56-b737-441f-9aa8-ca0b767b6a43", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assert_statement_description.md", "file_name": "Assert_statement_description.md", "file_type": "text/markdown", "file_size": 2379, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "401bc58e-a0a4-4315-8399-27a24bc03db8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assert_statement_description.md", "file_name": "Assert_statement_description.md", "file_type": "text/markdown", "file_size": 2379, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "11b5ec728b4f3dbde10014c42501a1d6bffc5d65272a609d125567b70ca7cd29", "class_name": "RelatedNodeInfo"}}, "text": "8.17. Assert statement (grammar) {sec-assert-statement}\n\nExamples:\n\n```dafny\nassert i > 0;\nassert IsPositive: i > 0;\nassert i > 0 by {\n ...\n}\n```\n\n`Assert` statements are used to express logical propositions that are\nexpected to be true. Dafny will attempt to prove that the assertion\nis true and give an error if the assertion cannot be proven.\nOnce the assertion is proved,\nits truth may aid in proving subsequent deductions.\nThus if Dafny is having a difficult time verifying a method,\nthe user may help by inserting assertions that Dafny can prove,\nand whose truth may aid in the larger verification effort,\nmuch as lemmas might be used in mathematical proofs.\n\n`Assert` statements are ignored by the compiler.\n\nIn the `by` form of the `assert` statement, there is an additional block of statements that provide the Dafny verifier with additional proof steps.\nThose statements are often a sequence of lemmas, `calc` statements, `reveal` statements or other `assert` statements,\ncombined with ghost control flow, ghost variable declarations and ghost update statements of variables declared in the `by` block.\nThe intent is that those statements be evaluated in support of proving the `assert` statement.\nFor that purpose, they could be simply inserted before the `assert` statement.\nBut by using the `by` block, the statements in the block are discarded after the assertion is proved.\nAs a result, the statements in the block do not clutter or confuse the solver in performing subsequent\nproofs of assertions later in the program. Furthermore, by isolating the statements in the `by` block,\ntheir purpose -- to assist in proving the given assertion -- is manifest in the structure of the code.\n\nExamples of this form of assert are given in the section of the `reveal` statement and in _Different Styles of Proof_\n\nAn assert statement may have a label, whose use is explained in Section 8.20.1.\n\nThe attributes recognized for assert statements are discussed in Section 11.4.\n\nUsing `...` as the argument of the statement is deprecated.\n\nAn assert statement can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 2105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec5a64e0-c92f-4df8-a793-bcc8addd73f2": {"__data__": {"id_": "ec5a64e0-c92f-4df8-a793-bcc8addd73f2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assume_Statement_description.md", "file_name": "Assume_Statement_description.md", "file_type": "text/markdown", "file_size": 1033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35aabd4e-1d7c-433b-80b8-1c40b091857b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assume_Statement_description.md", "file_name": "Assume_Statement_description.md", "file_type": "text/markdown", "file_size": 1033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f0d1b0d92ad6eb223c1809cfd84b7140eb873dab54014d04d3fab4b33ee0eed9", "class_name": "RelatedNodeInfo"}}, "text": "8.18. Assume Statement (grammar) {sec-assume-statement}\n\nExamples:\n\n```dafny\nassume i > 0;\nassume {:axiom} i > 0 ==> -i < 0;\n```\n\nThe `assume` statement lets the user specify a logical proposition\nthat Dafny may assume to be true without proof. If in fact the\nproposition is not true this may lead to invalid conclusions.\n\nAn `assume` statement would ordinarily be used as part of a larger\nverification effort where verification of some other part of\nthe program required the proposition. By using the `assume` statement\nthe other verification can proceed. Then when that is completed the\nuser would come back and replace the `assume` with `assert`.\n\nTo help the user not forget about that last step, a warning is emitted for any assume statement.\nAdding the `{:axiom}` attribute to the assume will suppress the warning,\nindicating the user takes responsibility for being absolutely sure \nthat the proposition is indeed true.\n\nUsing `...` as the argument of the statement is deprecated.", "start_char_idx": 2, "end_char_idx": 988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02760963-0b72-4c5d-91e0-f2b8a31ff124": {"__data__": {"id_": "02760963-0b72-4c5d-91e0-f2b8a31ff124", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ef30cb4-a53b-4ce9-8fa6-0e873a4b07fe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3eba00b4caf90234e9e0fe986759b1b0e9305f6e6a401375d6e2aa4e89d18439", "class_name": "RelatedNodeInfo"}}, "text": "11. Attributes {sec-attributes}\nDafny allows many of its entities to be annotated with _Attributes_.\nAttributes are declared between `{:` and `}` like this:\n\n```dafny\n{:attributeName \"argument\", \"second\" + \"argument\", 57}\n```\n(White-space may follow but not precede the `:` in `{:`.)\n\nIn general an attribute may have any name the user chooses. It may be\nfollowed by a comma-separated list of expressions. These expressions will\nbe resolved and type-checked in the context where the attribute appears.\n\nAny Dafny entity may have a list of attributes.\nDafny does not check that the attributes listed for an entity\nare appropriate for it (which means that misspellings may\ngo silently unnoticed).\n\nThe grammar shows where the attribute annotations may appear:\n````grammar\nAttribute = \"{:\" AttributeName [ Expressions ] \"}\"\n````\n\nDafny has special processing for some attributes[^boogie-attributes].  Of those,\nsome apply only to the entity bearing the attribute, while others (inherited\nattributes) apply to the entity and its descendants (such as nested modules,\ntypes, or declarations).  The attribute declaration closest to the entity\noverrides those further away.\n\n^boogie-attributes]: All entities that Dafny translates to Boogie have their attributes passed on to Boogie except for the [`{:axiom}` attribute (which conflicts with Boogie usage) and the `{:trigger}` attribute which is instead converted into a Boogie quantifier _trigger_. See Section 11 of [@Leino:Boogie2-RefMan].\n\nFor attributes with a single boolean expression argument, the attribute\nwith no argument is interpreted as if it were true.", "start_char_idx": 2, "end_char_idx": 1611, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccab87ed-54f3-419a-8444-3b462aae82b9": {"__data__": {"id_": "ccab87ed-54f3-419a-8444-3b462aae82b9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b11a403e-52b7-4460-b9e4-2972db2105b1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08fe03bb84d89c35953ceb55d645e23b9240cf33d1d23170b65bfd38921e41ef", "class_name": "RelatedNodeInfo"}}, "text": "11.1. Attributes on top-level declarations", "start_char_idx": 2, "end_char_idx": 44, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab1d6b2c-9c7c-4809-916a-da13a41dd8e1": {"__data__": {"id_": "ab1d6b2c-9c7c-4809-916a-da13a41dd8e1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15fe3296-0130-4541-a122-301ba4b2bf5e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ce2926c51786ee330b8bd01e2543368032fbad6cdcde165cf6dc9bb47c636a8e", "class_name": "RelatedNodeInfo"}}, "text": "11.1.1. `{:autocontracts}` {sec-attributes-autocontracts}\nDynamic frames [@Kassios:FM2006;@SmansEtAl:VeriCool;@SmansEtAl:ImplicitDynamicFrames;\n@LEINO:Dafny:DynamicFrames]\nare frame expressions that can vary dynamically during\nprogram execution. AutoContracts is an experimental feature that will\nfill much of the dynamic-frames boilerplate into a class.\n\nFrom the user's perspective, what needs to be done is simply:\n\n* mark the class with `{:autocontracts}`\n* declare a function (or predicate) called `Valid()`\n\n\nAutoContracts will then:\n\n*  Declare:\n\n```dafny\n   ghost var Repr: set\n```\n\n* For function/predicate `Valid()`, insert:\n\n```dafny\n   reads this, Repr\n```\n* Into body of `Valid()`, insert (at the beginning of the body):\n\n```dafny\n   this in Repr && null !in Repr\n```\n* and also insert, for every array-valued field `A` declared in the class:\n\n```dafny\n   && (A != null ==> A in Repr)\n```\n* and for every field `F` of a class type `T` where `T` has a field called `Repr`, also insert:\n\n```dafny\n   (F != null ==> F in Repr && F.Repr <= Repr && this !in F.Repr)\n```\n  Except, if A or F is declared with `{:autocontracts false}`, then the implication will not\nbe added.\n\n* For every constructor, add:\n\n```dafny\n   modifies this\n   ensures Valid() && fresh(Repr - {this})\n```\n* At the end of the body of the constructor, add:\n\n```dafny\n   Repr := {this};\n   if (A != null) { Repr := Repr + {A}; }\n   if (F != null) { Repr := Repr + {F} + F.Repr; }\n```\n* For every method, add:\n\n```dafny\n   requires Valid()\n   modifies Repr\n   ensures Valid() && fresh(Repr - old(Repr))\n```\n* At the end of the body of the method, add:\n\n```dafny\n   if (A != null) { Repr := Repr + {A}; }\n   if (F != null) { Repr := Repr + {F} + F.Repr; }\n```", "start_char_idx": 2, "end_char_idx": 1737, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd2f67fd-9a44-40a5-84ac-159a10acd3a3": {"__data__": {"id_": "bd2f67fd-9a44-40a5-84ac-159a10acd3a3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57a88cc4-420d-43b3-94c2-8d981900e282", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8e80be39a01237b57e41a38d9308433eacd4ec88592e5b34b5a97fd88d594583", "class_name": "RelatedNodeInfo"}}, "text": "11.1.2. `{:nativeType}` {sec-nativetype}\nThe `{:nativeType}` attribute is only recognized by a `newtype` declaration\nwhere the base type is an integral type or a real type. For example:\n\n\n```dafny\nnewtype {:nativeType \"byte\"} ubyte = x : int | 0 <= x < 256\nnewtype {:nativeType \"byte\"} bad_ubyte = x : int | 0 <= x < 257 // Fails\n```\n\nIt can take one of the following forms:\n\n* `{:nativeType}` - With no parameters it has no effect and the declaration\nwill have its default behavior, which is to choose a native type that can hold any\nvalue satisfying the constraints, if possible, and otherwise to use BigInteger.\n* `{:nativeType true}` - Also gives default behavior,\nbut gives an error if the base type is not integral.\n* `{:nativeType false}` - Inhibits using a native type. BigInteger is used.\n* `{:nativeType \"typename\"}` - This form has an native integral\ntype name as a string literal. Acceptable values are:\n   * `\"byte\"`      8 bits, unsigned\n   * `\"sbyte\"`     8 bits, signed\n   * `\"ushort\"`    16 bits, unsigned\n   * `\"short\"`     16 bits, signed\n   * `\"uint\"`      32 bits, unsigned\n   * `\"int\"`       32 bits, signed\n   * `\"number\"`    53 bits, signed\n   * `\"ulong\"`     64 bits, unsigned\n   * `\"long\"`      64 bits, signed\n\n  If the target compiler\n  does not support a named native type X, then an error is generated. Also, if, after\n  scrutinizing the constraint predicate, the compiler cannot confirm\n  that the type's values will fit in X, an error is generated.\n  The names given above do not have to match the names in the target compilation language,\n  just the characteristics of that type.", "start_char_idx": 2, "end_char_idx": 1614, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bdb51f5-7b46-449f-b0fa-f4bd577afb1f": {"__data__": {"id_": "8bdb51f5-7b46-449f-b0fa-f4bd577afb1f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea6b12d5-5ead-4f5f-b4c2-601af8d4bbae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "73a185879f26da3f604d5b9618c3dbc08a342f22770f0ad5c6611c67b34e1713", "class_name": "RelatedNodeInfo"}}, "text": "11.1.3. `{:ignore}` (deprecated)\nIgnore the declaration (after checking for duplicate names).", "start_char_idx": 2, "end_char_idx": 95, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95e9edf2-a3d4-41ba-be30-364c28241a70": {"__data__": {"id_": "95e9edf2-a3d4-41ba-be30-364c28241a70", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf3c0563-8ffe-43e1-9235-df8d940ed2d7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9104bb909f98191a3c2f5c0f9a32b6a45ddb58c844c46cabc1cdd8e992b210bf", "class_name": "RelatedNodeInfo"}}, "text": "11.1.4. `{:extern}` {sec-extern}\n\n`{:extern}` is a target-language dependent modifier used\n\n* to alter the `CompileName` of entities such as modules, classes, methods, etc.,\n* to alter the `ReferenceName` of the entities,\n* to decide how to define external abstract types,\n* to decide whether to emit target code or not, and\n* to decide whether a declaration is allowed not to have a body.\n\nThe `CompileName` is the name for the entity when translating to one of the target languages.\nThe `ReferenceName` is the name used to refer to the entity in the target language.\nA common use case of `{:extern}` is to avoid name clashes with existing library functions.\n\n`{:extern}` takes 0, 1, or 2 (possibly empty) string arguments:\n\n- `{:extern}`: Dafny will use the Dafny-determined name as the `CompileName` and not affect the `ReferenceName`\n- `{:extern s1}`: Dafny will use `s1` as the `CompileName`, and replaces the last portion of the `ReferenceName` by `s1`.\n     When used on an abstract type, s1 is used as a hint as to how to declare that type when compiling.\n- `{:extern s1, s2}` Dafny will use `s2` as the `CompileName`.\n     Dafny will use a combination of `s1` and `s2` such as for example `s1.s2` as the `ReferenceName`\n     It may also be the case that one of the arguments is simply ignored.\n\nDafny does not perform sanity checks on the arguments---it is the user's responsibility not to generate\n  malformed target code.\n\nFor more detail on the use of `{:extern}`, see the corresponding section in the user's guide.", "start_char_idx": 2, "end_char_idx": 1529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90e5d357-0a56-4d32-bfdd-634833f98663": {"__data__": {"id_": "90e5d357-0a56-4d32-bfdd-634833f98663", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cea15f6-9e29-4004-955c-d1c33be8ed9d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cd9c5e5dcec33cd9381d92a7865830f1935b1f423138d0498d302255d8d97df0", "class_name": "RelatedNodeInfo"}}, "text": "11.1.5. `{:disable-nonlinear-arithmetic}` {sec-disable-nonlinear-arithmetic}\nThis attribute only applies to module declarations. It overrides the global option `--disable-nonlinear-arithmetic` for that specific module. The attribute can be given true or false to disable or enable nonlinear arithmetic. When no value is given, the default value is true.", "start_char_idx": 2, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57fdf6e0-eb50-4065-9462-324a1e3ea1e3": {"__data__": {"id_": "57fdf6e0-eb50-4065-9462-324a1e3ea1e3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6005146d-2b05-4c5a-8375-14c949506c2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "22e099fb8850157d8c363f97fb1a265cc4edce291cb63b3563b2724c40bf06c0", "class_name": "RelatedNodeInfo"}}, "text": "11.2. Attributes on functions and methods", "start_char_idx": 2, "end_char_idx": 43, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cfc86a8-bd85-4187-b40d-8a0ea17ce993": {"__data__": {"id_": "6cfc86a8-bd85-4187-b40d-8a0ea17ce993", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c67acc52-cbae-4339-af67-1374ba162a68", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "341440ec9777e86b822532b0ffbe48de42d5686db7b7889b2d35e73492cad927", "class_name": "RelatedNodeInfo"}}, "text": "11.2.1. `{:abstemious}`\nThe `{:abstemious}` attribute is appropriate for functions on codatatypes.\nIf appropriate to a function, the attribute can aid in proofs that the function is _productive_.\nSee the section on abstemious functions for more description.", "start_char_idx": 2, "end_char_idx": 259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e97d06e2-a9af-495b-a0a6-a488c4fb9c3e": {"__data__": {"id_": "e97d06e2-a9af-495b-a0a6-a488c4fb9c3e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23ba42d1-4b2f-4ae5-85ce-73b9de9eb238", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bf8d7f4e50a7af5880a9a88b09906823b4e92d03bd3e90de4a9c0cc01fa59904", "class_name": "RelatedNodeInfo"}}, "text": "11.2.2. `{:autoReq}`\nFor a function declaration, if this attribute is set true at the nearest\nlevel, then its `requires` clause is strengthened sufficiently so that\nit may call the functions that it calls.\n\nFor following example\n\n```dafny\nfunction f(x:int) : bool\n  requires x > 3\n{\n  x > 7\n}\n\n// Should succeed thanks to auto_reqs\nfunction {:autoReq} g(y:int, b:bool) : bool\n{\n  if b then f(y + 2) else f(2*y)\n}\n```\nthe `{:autoReq}` attribute causes Dafny to\ndeduce a `requires` clause for g as if it had been\ndeclared\n\n```dafny\nfunction f(x:int) : bool\n  requires x > 3\n{\n  x > 7\n}\nfunction g(y:int, b:bool) : bool\n  requires if b then y + 2 > 3 else 2 * y > 3\n{\n  if b then f(y + 2) else f(2*y)\n}\n```", "start_char_idx": 2, "end_char_idx": 705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7589b28d-9a7d-456e-aadd-f3e9e3932a73": {"__data__": {"id_": "7589b28d-9a7d-456e-aadd-f3e9e3932a73", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae01f717-c721-40ca-a8c5-a67220297583", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5ff3db38a8c7438a9bb6df1fcd4ccbcbafc5d524a61a8490129805ae16346f50", "class_name": "RelatedNodeInfo"}}, "text": "11.2.3. `{:autoRevealDependencies k}` {sec-autorevealdependencies}\nWhen setting `--default-function-opacity` to `autoRevealDependencies`, the `{:autoRevealDependencies k}` attribute can be set on methods and functions to make sure that only function dependencies of depth `k` in the call-graph or less are revealed automatically. As special cases, one can also use `{:autoRevealDependencies false}` (or `{:autoRevealDependencies 0}`) to make sure that no dependencies are revealed, and `{:autoRevealDependencies true}` to make sure that all dependencies are revealed automatically.\n\nFor example, when the following code is run with `--default-function-opacity` set to `autoRevealDependencies`, the function `p()` should verify and `q()` should not.\n\n```dafny\n   function t1() : bool { true }\n   \n   function t2() : bool { t1() }\n\n   function {:autoRevealDependencies 1} p() : (r: bool) \n     ensures r\n   { t1() }\n   \n   function {:autoRevealDependencies 1} q() : (r: bool) \n     ensures r\n   { t2() }\n```", "start_char_idx": 2, "end_char_idx": 1007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1b72711-dc07-4c7a-80fb-26e0358d66c0": {"__data__": {"id_": "d1b72711-dc07-4c7a-80fb-26e0358d66c0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82a63874-9db5-48e6-8967-8eb4810c918f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0fd1029b3db9c430ce909c5eb4a5aeebfe3fdd2a9a1812aa83d16faf4150b9ed", "class_name": "RelatedNodeInfo"}}, "text": "11.2.4. `{:axiom}` {sec-axiom}\nThe `{:axiom}` attribute may be placed on a function or method.\nIt means that the post-condition may be assumed to be true\nwithout proof. In that case also the body of the function or\nmethod may be omitted.\n\nThe `{:axiom}` attribute only prevents Dafny from verifying that the body matches the post-condition.\nDafny still verifies the well-formedness of pre-conditions, of post-conditions, and of the body if provided.\nTo prevent Dafny from running all these checks, one would use `{:verify false}`, which is not recommended.\n\nThe compiler will still emit code for an `{:axiom}`, if it is a `function`, a `method` or a `function by method` with a body.", "start_char_idx": 2, "end_char_idx": 685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a5c2155-bbbf-4776-a812-0507c23d29aa": {"__data__": {"id_": "6a5c2155-bbbf-4776-a812-0507c23d29aa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "acbf23fa-3f83-47c5-8e0c-bbb1b62d1298", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7b51974b7b00b692545fc7c54c78ac59f7742b5c997f12bb8de74e5cf6dcafe8", "class_name": "RelatedNodeInfo"}}, "text": "11.2.5. `{:compile}`\nThe `{:compile}` attribute takes a boolean argument. It may be applied to\nany top-level declaration. If that argument is false, then that declaration\nwill not be compiled at all.\nThe difference with `{:extern}` is that `{:extern}`\nwill still emit declaration code if necessary,\nwhereas `{:compile false}` will just ignore the declaration for compilation purposes.", "start_char_idx": 2, "end_char_idx": 386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4007994-d641-478d-9256-c8287512d985": {"__data__": {"id_": "f4007994-d641-478d-9256-c8287512d985", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b0963a3-dba3-4ccc-b8de-3f8c47a428e2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83fbcbfe0a1dfe0abdffab7b762c3b3eb105c7464a9b48584653f0eee0efcb91", "class_name": "RelatedNodeInfo"}}, "text": "11.2.6. `{:concurrent}`  {sec-concurrent-attribute}\nThe `{:concurrent}` attribute indicates that the compiled code for a function or method\nmay be executed concurrently.\nWhile Dafny is a sequential language and does not support any native concepts for spawning\nor controlling concurrent execution,\nit does support restricting the specification of declarations such that it is safe to execute them concurrently\nusing integration with the target language environment.\n\nCurrently, the only way to satisfy this requirement is to ensure that the specification\nof the function or method includes the equivalent of `reads {}` and `modifies {}`.\nThis ensures that the code does not read or write any shared mutable state,\nalthough it is free to read and write newly allocated objects.", "start_char_idx": 2, "end_char_idx": 778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0cf9d54a-3f97-4e3e-93c8-09d559583e3b": {"__data__": {"id_": "0cf9d54a-3f97-4e3e-93c8-09d559583e3b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41c6c7d9-f98e-48ae-8218-9d50115c8a0e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "69536aeb13e606a2110017e5cdbd2edc30fca5bd31d4ee5c79459533291ab566", "class_name": "RelatedNodeInfo"}}, "text": "11.2.7. `{:extern <name>}` {sec-extern-method}\nSee `{:extern }`.", "start_char_idx": 2, "end_char_idx": 66, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0f58366-dcef-4d50-ab95-1800de1870c7": {"__data__": {"id_": "f0f58366-dcef-4d50-ab95-1800de1870c7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "636c6bbc-5e53-4589-b722-5c4f75386c79", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dd592d97cb0d303c4469ffc88da0302bf23bb582cb75b5c6e2ccff8d0c286142", "class_name": "RelatedNodeInfo"}}, "text": "11.2.8. `{:fuel X}` {sec-fuel}\nThe fuel attribute is used to specify how much \"fuel\" a function should have,\ni.e., how many times the verifier is permitted to unfold its definition.  The\n`{:fuel}` annotation can be added to the function itself, in which\ncase it will apply to all uses of that function, or it can be overridden\nwithin the scope of a module, function, method, iterator, calc, forall,\nwhile, assert, or assume.  The general format is:\n\n\n```dafny\n{:fuel functionName,lowFuel,highFuel}\n```\n\nWhen applied as an annotation to the function itself, omit\nfunctionName.  If highFuel is omitted, it defaults to lowFuel + 1.\n\nThe default fuel setting for recursive functions is 1,2.  Setting the\nfuel higher, say, to 3,4, will give more unfoldings, which may make\nsome proofs go through with less programmer assistance (e.g., with\nfewer assert statements), but it may also increase verification time,\nso use it with care.  Setting the fuel to 0,0 is similar to making the\ndefinition opaque, except when used with all literal arguments.", "start_char_idx": 2, "end_char_idx": 1041, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bb27971-31ee-49ed-99a3-1f7a6fb1a640": {"__data__": {"id_": "4bb27971-31ee-49ed-99a3-1f7a6fb1a640", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aea235bb-13e9-46f7-b7da-573c9c366178", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e17438fab09c01ce75cdcd8345548e87e3454e1b42cedf94c4538741c2d3df85", "class_name": "RelatedNodeInfo"}}, "text": "11.2.9. `{:id <string>}`\nAssign a custom unique ID to a function or a method to be used for verification\nresult caching.", "start_char_idx": 2, "end_char_idx": 122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73093360-c107-4c8e-be41-988506788026": {"__data__": {"id_": "73093360-c107-4c8e-be41-988506788026", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2af55d6-1780-4584-8160-b99051685021", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "685803e2dc5f4c30dc74ad74f6ddacf0d5349ae2695a45c3bae2275447a7614b", "class_name": "RelatedNodeInfo"}}, "text": "11.2.10. `{:induction}` {sec-induction}\nThe `{:induction}` attribute controls the application of\nproof by induction to two contexts. Given a list of\nvariables on which induction might be applied, the\n`{:induction}` attribute selects a sub-list of those\nvariables (in the same order) to which to apply induction.\n\nDafny issue 34\nproposes to remove the restriction that the sub-list\nbe in the same order, and would apply induction in the\norder given in the `{:induction}` attribute.\n\nThe two contexts are:\n\n* A method, in which case the bound variables are all the\n  in-parameters of the method.\n* A quantifier expression, in which case the bound variables\n  are the bound variables of the quantifier expression.\n\nThe form of the `{:induction}` attribute is one of the following:\n\n* `{:induction}` -- apply induction to all bound variables\n* `{:induction false}` -- suppress induction, that is, don't apply it to any bound variable\n* `{:induction L}` where `L` is a list consisting entirely of bound variables\n-- apply induction to the specified bound variables\n* `{:induction X}` where `X` is anything else -- treat the same as\n`{:induction}`, that is, apply induction to all bound variables. For this\nusage conventionally `X` is `true`.\n\nHere is an example of using it on a quantifier expression:\n\n```dafny\ndatatype Unary = Zero | Succ(Unary)\n\nfunction UnaryToNat(n: Unary): nat {\n  match n\n  case Zero => 0\n  case Succ(p) => 1 + UnaryToNat(p)\n}\n\nfunction NatToUnary(n: nat): Unary {\n  if n == 0 then Zero else Succ(NatToUnary(n - 1))\n}\n\nlemma Correspondence()\n  ensures forall n: nat {:induction n} :: UnaryToNat(NatToUnary(n)) == n\n{\n}\n```", "start_char_idx": 2, "end_char_idx": 1643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ee49bfa-fdca-4983-8514-efcba7a9474a": {"__data__": {"id_": "6ee49bfa-fdca-4983-8514-efcba7a9474a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf104b3c-3a1a-45b9-b21c-9f1d93c58355", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "03901f835018fa870f5b35c9edae9ecb05e142d3ae9422bcb367bac4b247e444", "class_name": "RelatedNodeInfo"}}, "text": "11.2.11. `{:only}` {sec-only-functions-methods}\n\n`method {:only} X() {}` or `function {:only} X() {}`  temporarily disables the verification of all other non-`{:only}` members, e.g. other functions and methods, in the same file, even if they contain assertions with `{:only}`.\n\n\n```dafny\nmethod {:only} TestVerified() {\n  assert true;                  // Unchecked\n  assert {:only} true by {      // Checked\n    assert true;                // Checked\n  }\n  assert true;                  // Unchecked\n}\n\nmethod TestUnverified() {\n  assert true;                  // Unchecked\n  assert {:only} true by {      // Unchecked because of {:only} Test()\n    assert true;                // Unchecked\n  }\n  assert true;                  // Unchecked\n}\n```\n\n`{:only}` can help focusing on a particular member, for example a lemma or a function, as it simply disables the verification of all other lemmas, methods and functions in the same file. It's equivalent to adding `{:verify false}` to all other declarations simulatenously on the same file. Since it's meant to be a temporary construct, it always emits a warning.\n\nMore information about the Boogie implementation of `{:opaque}` is here.", "start_char_idx": 2, "end_char_idx": 1184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73b84d2d-305e-4f69-87dc-97f82240e950": {"__data__": {"id_": "73b84d2d-305e-4f69-87dc-97f82240e950", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aca8fbae-a1c7-4b3a-b5f2-bdcb2eba9009", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "96502edd49a3b6df5b3bbfcacc30ec5d0445ad0ee13e02f15d614125a88dba2e", "class_name": "RelatedNodeInfo"}}, "text": "11.2.12. `{:print}` {sec-print}\nThis attribute declares that a method may have print effects,\nthat is, it may use `print` statements and may call other methods\nthat have print effects. The attribute can be applied to compiled\nmethods, constructors, and iterators, and it gives an error if\napplied to functions or ghost methods. An overriding method is\nallowed to use a `{:print}` attribute only if the overridden method\ndoes.\nPrint effects are enforced only with `--track-print-effects`.", "start_char_idx": 2, "end_char_idx": 489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7644c7ee-c58e-4b44-8d2c-0052b1d16acc": {"__data__": {"id_": "7644c7ee-c58e-4b44-8d2c-0052b1d16acc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ed4c058a-0301-448c-b37f-bdddaf17940f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "15ad6260204c03da50e7e74caddf6f9a66133a24987e392e66397d87a2ebfd04", "class_name": "RelatedNodeInfo"}}, "text": "11.2.13. `{:priority}`\n`{:priority N}` assigns a positive priority 'N' to a method or function to control the order\nin which methods or functions are verified (default: N = 1).", "start_char_idx": 2, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a962233-af0d-497a-ab83-dd4ce9703fb9": {"__data__": {"id_": "3a962233-af0d-497a-ab83-dd4ce9703fb9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b27fa1a5-890b-4fd1-ae21-e9a250b15937", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "84c0a7d0f961ed9d0be45f02556a8d906ee485a102a14cf3d5fc9d51ae88a0db", "class_name": "RelatedNodeInfo"}}, "text": "11.2.14. `{:resource_limit}` and `{:rlimit}` {sec-rlimit}\n\n`{:resource_limit N}` limits the verifier resource usage to verify the method or function to `N`.\n\nThis is the per-method equivalent of the command-line flag `/rlimit:N` or `--resource-limit N`.\nIf using `{:isolate_assertions}` as well, the limit will be set for each assertion.\n\nThe attribute `{:rlimit N}` is also available, and limits the verifier resource usage to verify the method or function to `N * 1000`. This version is deprecated, however.\n\nTo give orders of magnitude about resource usage, here is a list of examples indicating how many resources are used to verify each method:\n\n* 8K resource usage\n\n  ```dafny\n  method f() {\n    assert true;\n  }\n  ```\n* 10K resource usage using assertions that do not add assumptions:\n\n  ```dafny\n  method f(a: bool, b: bool) {\n    assert a: (a ==> b)  (!b ==> !a);\n    assert b: (a ==> b)  (!b ==> !a);\n    assert c: (a ==> b)  (!b ==> !a);\n    assert d: (a ==> b)  (!b ==> !a);\n  }\n  ```\n\n* 40K total resource usage using `{:isolate_assertions}`\n\n  ```dafny\n  method {:isolate_assertions} f(a: bool, b: bool) {\n    assert a: (a ==> b)  (!b ==> !a);\n    assert b: (a ==> b)  (!b ==> !a);\n    assert c: (a ==> b)  (!b ==> !a);\n    assert d: (a ==> b)  (!b ==> !a);\n  }\n  ```\n*  37K total resource usage and thus fails with `out of resource`.\n\n   ```dafny\n   method {:rlimit 30} f(a: int, b: int, c: int) {\n     assert ((1 + a*a)*c) / (1 + a*a) == c;\n   }\n   ```\n\nNote that, the default solver Z3 tends to overshoot by `7K` to `8K`, so if you put `{:rlimit 20}` in the last example, the total resource usage would be `27K`.", "start_char_idx": 2, "end_char_idx": 1631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a486392f-debb-4929-bfd3-cf4cf38cc736": {"__data__": {"id_": "a486392f-debb-4929-bfd3-cf4cf38cc736", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8c99711-e4d4-4239-b7fa-229b31fa04f5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8068ac34f93b784722157bf7ca79fb0fcc17ddf80258c44e0ae9bfeaacb6b299", "class_name": "RelatedNodeInfo"}}, "text": "11.2.15. `{:selective_checking}`\nTurn all assertions into assumptions except for the ones reachable from after the\nassertions marked with the attribute `{:start_checking_here}`.\nThus, `assume {:start_checking_here} something;` becomes an inverse\nof `assume false;`: the first one disables all verification before\nit, and the second one disables all verification after.", "start_char_idx": 2, "end_char_idx": 370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af81c920-5fe2-477a-a534-1e541592b8f8": {"__data__": {"id_": "af81c920-5fe2-477a-a534-1e541592b8f8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ca8ca76-ec9e-4ccf-a236-7673a97ef40c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "29ac1ec1f84fca5eaddc1ed571c8c2b80931a768d40be172b039f1dae697e961", "class_name": "RelatedNodeInfo"}}, "text": "11.2.16. `{:tailrecursion}`\nThis attribute is used on method or function declarations. It has a boolean argument.\n\nIf specified with a `false` value, it means the user specifically\nrequested no tail recursion, so none is done.\n\nIf specified with a `true` value, or if no argument is specified,\nthen tail recursive optimization will be attempted subject to\nthe following conditions:\n\n* It is an error if the method is a ghost method and tail\nrecursion was explicitly requested.\n* Only direct recursion is supported, not mutually recursive methods.\n* If `{:tailrecursion true}` was specified but the code does not allow it,\nan error message is given.\n\nIf you have a stack overflow, it might be that you have\na function on which automatic attempts of tail recursion\nfailed, but for which efficient iteration can be implemented by hand. To do this,\nuse a function by method and\ndefine the loop in the method yourself,\nproving that it implements the function.\n\nUsing a function by method to implement recursion can\nbe tricky. It usually helps to look at the result of the function\non two to three iterations, without simplification,\nand see what should be the first computation. For example,\nconsider the following tail-recursion implementation:\n\n\n```dafny\ndatatype Result = Success(value: V) | Failure(error: E)\n\nfunction f(x: int): Result\n\n//  {:tailrecursion true}  Not possible here\nfunction MakeTailRec(\n  obj: seq\n): Result, string>\n{\n  if |obj| == 0 then Success([])\n  else\n    var tail := MakeTailRec(obj[1..]);\n    var r := f(obj[0]);\n    if r.Failure? then\n      Failure(r.error)\n    else if tail.Failure? then\n      tail\n    else\n      Success([r.value] + tail.value)\n} by method {\n  var i: nat := |obj|;\n  var tail := Success([]); // Base case\n  while i != 0\n    decreases i\n    invariant tail == MakeTailRec(obj[i..])\n  {\n    i := i - 1;\n    var r := f(obj[i]);\n    if r.Failure? {\n      tail := Failure(r.error);\n    } else if tail.Success? {\n      tail := Success([r.value] + tail.value);\n    } else {\n    }\n  }\n  return tail;\n}\n```\n\nThe rule of thumb to unroll a recursive call into a sequential one\nis to look at how the result would be computed if the operations were not\nsimplified. For example, unrolling the function on `[1, 2, 3]` yields the result\n`Success([f(1).value] + ([f(2).value] + ([f(3).value] + [])))`.\nIf you had to compute this expression manually, you'd start with\n`([f(3).value] + [])`, then add `[f(2).value]` to the left, then \n`[f(1).value]`.\nThis is why the method loop iterates with the objects\nfrom the end, and why the intermediate invariants are\nall about proving `tail == MakeTailRec(obj[i..])`, which\nmakes verification succeed easily because we replicate\nexactly the behavior of `MakeTailRec`.\nIf we were not interested in the first error but the last one,\na possible optimization would be, on the first error, to finish\niterate with a ghost loop that is not executed.\n\nNote that the function definition can be changed by computing\nthe tail closer to where it's used or switching the order of computing\n`r` and `tail`, but the `by method` body can stay the same.", "start_char_idx": 2, "end_char_idx": 3106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38b13c10-2f2c-4e03-88d3-224760bed133": {"__data__": {"id_": "38b13c10-2f2c-4e03-88d3-224760bed133", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "677d9d0d-5da0-4d14-bcb7-84cfbf47a95b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "10b1cf4338fea24c7b4093b03bece08e3890bc6db090200c7223965042492a1d", "class_name": "RelatedNodeInfo"}}, "text": "11.2.17. `{:test}` {sec-test-attribute}\nThis attribute indicates the target function or method is meant\nto be executed at runtime in order to test that the program is working as intended.\n\nThere are two different ways to dynamically test functionality in a test:\n\n1. A test can optionally return a single value to indicate success or failure.\n   If it does, this must be a _failure-compatible_ type\n   just as the update-with-failure statement requires. That is,\n   the returned type must define a `IsFailure()` function method. If `IsFailure()`\n   evaluates to `true` on the return value, the test will be marked a failure, and this\n   return value used as the failure message.\n2. Code in the control flow of the test can use `expect` statements\n   to dynamically test if a boolean expression is true, and cause the test to halt\n   if not (but not the overall testing process). The optional second argument to \n   a failed `expect` statement will be used as the test failure message.\n\nNote that the `expect` keyword can also be used to form \"assign or halt\" statements\nsuch as `var x :- expect CalculateX();`, which is a convenient way to invoke a method\nthat may produce a failure within a test without having to return a value from the test.\n\nThere are also two different approaches to executing all tests in a program:\n\n1. By default, the compiler will mark each compiled method as necessary so that\n   a designated target language testing framework will discover and run it.\n   This is currently only implemented for C#, using the xUnit `[Fact]` annotation.\n2. If `dafny test` is used, Dafny will instead produce a main method\n   that invokes each test and prints the results.\n   This runner is currently very basic, but avoids introducing any additional target\n   language dependencies in the compiled code.\n\nA method marked `{:test}` may not have any input arguments. If there is an\noutput value that does not have a failure-compatible type, that value is \nignored. A method that does have input arguments can be wrapped in a test\nharness that supplies input arguments but has no inputs of its own and that\nchecks any output values, perhaps with `expect` statements. The test harness\nis then the method marked with `{:test}`.", "start_char_idx": 2, "end_char_idx": 2234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0a3130c-7c95-4b62-8b86-4bc2b513e35b": {"__data__": {"id_": "f0a3130c-7c95-4b62-8b86-4bc2b513e35b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e9f8615-3ab5-435b-91c1-4b0a780c2b76", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e67739406ebf5a52e63a5fdb3e1828d82b900e0afce5a84557e6d6f62f66ca4f", "class_name": "RelatedNodeInfo"}}, "text": "11.2.18. `{:timeLimit N}` {sec-time-limit}\nSet the time limit for verifying a given function or method.", "start_char_idx": 2, "end_char_idx": 105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3596c42-9381-4a2d-8f75-1f0bddfd2729": {"__data__": {"id_": "e3596c42-9381-4a2d-8f75-1f0bddfd2729", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10e3f926-8709-44cb-b391-50db5c8e143c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83a01c6b8965ea3f99e26a8d966d725f4c7f2323d628c8ba5a098cd75da29179", "class_name": "RelatedNodeInfo"}}, "text": "11.2.19. `{:timeLimitMultiplier X}`\nThis attribute may be placed on a method or function declaration\nand has an integer argument. If `{:timeLimitMultiplier X}` was\nspecified a `{:timeLimit Y}` attribute is passed on to Boogie\nwhere `Y` is `X` times either the default verification time limit\nfor a function or method, or times the value specified by the\nBoogie `-timeLimit` command-line option.", "start_char_idx": 2, "end_char_idx": 396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fcd86b08-f072-49bc-baba-d78d99e0d91a": {"__data__": {"id_": "fcd86b08-f072-49bc-baba-d78d99e0d91a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0a29749-8a8b-4c45-b04b-e8096be81f84", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ecb34e202cab2500e8f7b0e8f055318f7a016b37bc2b323a5d1d008df1ca057b", "class_name": "RelatedNodeInfo"}}, "text": "11.2.20. `{:transparent}` {sec-transparent}\n\nBy default, the body of a function is transparent to its users. This can be overridden using the `--default-function-opacity` command line flag. If default function opacity is set to `opaque` or `autoRevealDependencies`, then this attribute can be used on functions to make them always non-opaque.", "start_char_idx": 2, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb4caf81-6413-4e20-a302-77ace40b19b0": {"__data__": {"id_": "fb4caf81-6413-4e20-a302-77ace40b19b0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f08a91d-4c9f-4a2c-82b6-5a04fc01d45f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83955f44b46da4ee68b681f1e3aebbc712e322f8eb4e33a08e1c7c91e969be62", "class_name": "RelatedNodeInfo"}}, "text": "11.2.21. `{:verify false}` {sec-verify}\n     \nSkip verification of a function or a method altogether,\nnot even trying to verify the well-formedness of postconditions and preconditions.\nWe discourage using this attribute and prefer `{:axiom}`,\nwhich performs these minimal checks while not checking that the body satisfies the postconditions.\n\nIf you simply want to temporarily disable all verification except on a single function or method, use the `{:only}` attribute on that function or method.", "start_char_idx": 2, "end_char_idx": 498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7050e128-6444-423c-bb7d-d4d2768670b0": {"__data__": {"id_": "7050e128-6444-423c-bb7d-d4d2768670b0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfd7d51e-d356-41af-ac54-c31e1cb4feeb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bb4ed80961dc61058c77c1fc3bc32d3a28603dac1f6802953816edb8b7d8ab50", "class_name": "RelatedNodeInfo"}}, "text": "11.2.22. `{:vcs_max_cost N}` {sec-vcs_max_cost}\nPer-method version of the command-line option `/vcsMaxCost`.\n\nThe assertion batch of a method\nwill not be split unless the cost of an assertion batch exceeds this\nnumber, defaults to 2000.0. In\nkeep-going mode, only applies to the first round.\nIf `{:isolate_assertions}` is set, then this parameter is useless.", "start_char_idx": 2, "end_char_idx": 360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57df07a1-42e7-4a1d-8e27-110626c16346": {"__data__": {"id_": "57df07a1-42e7-4a1d-8e27-110626c16346", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c13dbf5b-bd4d-4035-9edd-519726d18abe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ff7e9c0e412eb97c9adc009b7783bbcf93b700cb88f66a78bba840daaa382d8e", "class_name": "RelatedNodeInfo"}}, "text": "11.2.23. `{:vcs_max_keep_going_splits N}` {sec-vcs_max_keep_going_splits}\n\nPer-method version of the command-line option `/vcsMaxKeepGoingSplits`.\nIf set to more than 1, activates the _keep going mode_ where, after the first round of splitting,\nassertion batches that timed out are split into N assertion batches and retried\nuntil we succeed proving them, or there is only one\nsingle assertion that it timeouts (in which\ncase an error is reported for that assertion).\nDefaults to 1.\nIf `{:isolate_assertions}` is set, then this parameter is useless.", "start_char_idx": 2, "end_char_idx": 551, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b3437a7-d8ee-4c5a-ab57-cca237b89716": {"__data__": {"id_": "7b3437a7-d8ee-4c5a-ab57-cca237b89716", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cdc2664-e16b-477b-a522-f5cebf19d857", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "93ff49560cf25acaa40dfe029d520243ebedbdd9f880665d869d89fc9ba53b35", "class_name": "RelatedNodeInfo"}}, "text": "11.2.24. `{:vcs_max_splits N}` {sec-vcs_max_splits}\n\nPer-method version of the command-line option `/vcsMaxSplits`.\nMaximal number of assertion batches generated for this method.\nIn keep-going mode, only applies to the first round.\nDefaults to 1.\nIf `{:isolate_assertions}` is set, then this parameter is useless.", "start_char_idx": 2, "end_char_idx": 315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e65c0324-86bc-49c0-aa01-31a8ffbb4fd9": {"__data__": {"id_": "e65c0324-86bc-49c0-aa01-31a8ffbb4fd9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a060fec-d950-4f8e-9495-a7e7080175ba", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1b0cb12cf7b1f14fc035fd8a362c83df95554412bbfcaa1be880cdfa240b42bf", "class_name": "RelatedNodeInfo"}}, "text": "11.2.25. `{:isolate_assertions}` {sec-isolate_assertions}\nPer-method version of the command-line option `/vcsSplitOnEveryAssert`\n\nIn the first and only verification round, this option will split the original assertion batch\ninto one assertion batch per assertion.\nThis is mostly helpful for debugging which assertion is taking the most time to prove, e.g. to profile them.", "start_char_idx": 2, "end_char_idx": 374, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a3a594e-2952-4920-937f-48a4a548ca2b": {"__data__": {"id_": "5a3a594e-2952-4920-937f-48a4a548ca2b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "808ae3d6-7097-4f9e-aa2c-3ad4eabb21bf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "feb43e3f85008410ef3e007c7bc0ed956f012ca40d028b96dff76abbb9462b28", "class_name": "RelatedNodeInfo"}}, "text": "11.2.26. `{:synthesize}` {sec-synthesize-attr}\n\nThe `{:synthesize}` attribute must be used on methods that have no body and\nreturn one or more fresh objects. During compilation, \nthe postconditions associated with such a\nmethod are translated to a series of API calls to the target languages's\nmocking framework. The object returned, therefore, behaves exactly as the\npostconditions specify. If there is a possibility that this behavior violates\nthe specifications on the object's instance methods or hardcodes the values of\nits fields, the compiler will throw an error but the compilation will go\nthrough. Currently, this compilation pass is only supported in C# and requires\nadding the latest version of the Moq library to the .csproj file before\ngenerating the binary.\n\nNot all Dafny postconditions can be successfully compiled - below is the\ngrammar for postconditions that are supported (`S` is the start symbol, `EXPR`\nstands for an arbitrary Dafny expression, and `ID` stands for\nvariable/method/type identifiers):\n\n```text\nS         = FORALL\n          | EQUALS\n          | S && S\nEQUALS    = ID.ID (ARGLIST) == EXPR // stubs a function call\n          | ID.ID           == EXPR // stubs field access\n          | EQUALS && EQUALS\nFORALL    = forall BOUNDVARS :: EXPR ==> EQUALS\nARGLIST   = ID   // this can be one of the bound variables\n          | EXPR // this expr may not reference any of the bound variables\n          | ARGLIST, ARGLIST\nBOUNDVARS = ID : ID\n          | BOUNDVARS, BOUNDVARS\n```", "start_char_idx": 2, "end_char_idx": 1505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0cc9cb88-d1bd-4f64-8b6b-082737523db1": {"__data__": {"id_": "0cc9cb88-d1bd-4f64-8b6b-082737523db1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e727d45f-449a-4514-b354-33b447303cd3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0c88157573d3f66949d01bc6f832463a4aa6d6b18b33c72cc7de0aca6a55ae77", "class_name": "RelatedNodeInfo"}}, "text": "11.2.27. `{:options OPT0, OPT1, ... }` {sec-attr-options}\n\nThis attribute applies only to modules. It configures Dafny as if\n`OPT0`, `OPT1`, \u2026 had been passed on the command line.  Outside of the module,\noptions revert to their previous values.\n\nOnly a small subset of Dafny's command line options is supported.  Use the\n`/attrHelp` flag to see which ones.", "start_char_idx": 2, "end_char_idx": 358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae1d8cf0-7d96-4113-8fc4-404147d367f9": {"__data__": {"id_": "ae1d8cf0-7d96-4113-8fc4-404147d367f9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f43fcbd5-c462-4dfc-a915-42f3fa8176b4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dcf675e31a615327a8a2209379b2b38d5183535c00d296215c71acfdcebfe2f3", "class_name": "RelatedNodeInfo"}}, "text": "11.3. Attributes on reads and modifies clauses", "start_char_idx": 2, "end_char_idx": 48, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aedd7d05-8460-40d2-a1ce-82b4e9410a4a": {"__data__": {"id_": "aedd7d05-8460-40d2-a1ce-82b4e9410a4a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d4258c0-aa92-4041-89ef-cca685bb131e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b269c205d20a40efb8ca2a1007501218b1afdc9fff5e4983bf9bc2b976607789", "class_name": "RelatedNodeInfo"}}, "text": "11.3.1. `{:assume_concurrent}`\nThis attribute is used to allow non-empty `reads` or `modifies` clauses on methods\nwith the `{:concurrent}` attribute, which would otherwise reject them.\n\nIn some cases it is possible to know that Dafny code that reads or writes shared mutable state\nis in fact safe to use in a concurrent setting, especially when that state is exclusively ghost.\nSince the semantics of `{:concurrent}` aren't directly expressible in Dafny syntax,\nit isn't possible to express this assumption with an `assume {:axiom} ...` statement.\n\nSee also the `{:concurrent}` attribute.", "start_char_idx": 2, "end_char_idx": 590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5070b6a-fd70-49b0-a309-bad8b3054589": {"__data__": {"id_": "d5070b6a-fd70-49b0-a309-bad8b3054589", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "857f82b5-8ad0-4cf2-8e02-69774d793b92", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "75671b40bdb6a25e0abf0082d724f6242b62868b068e8ab4e0fed709a68adef3", "class_name": "RelatedNodeInfo"}}, "text": "11.4. Attributes on assertions, preconditions and postconditions {sec-verification-attributes-on-assertions}", "start_char_idx": 2, "end_char_idx": 110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b998088-fd5d-4eab-8a5c-ce6994dec80e": {"__data__": {"id_": "5b998088-fd5d-4eab-8a5c-ce6994dec80e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a0af2f4-b313-48ca-9ff4-d4847d04bdad", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4f140d1184228344671493e2daaf8744452dbd1227bcdf23fb759b8c4dc73386", "class_name": "RelatedNodeInfo"}}, "text": "11.4.1. `{:only}` {sec-only}\n\n`assert {:only} X;` temporarily transforms all other non-`{:only}` assertions in the surrounding declaration into assumptions.\n\n\n```dafny\nmethod Test() {\n  assert true;                  // Unchecked\n  assert {:only} true by {      // Checked\n    assert true;                // Checked\n  }\n  assert true;                  // Unchecked\n  assert {:only \"after\"} true;  // Checked\n  assert true;                  // Checked\n  assert {:only \"before\"} true; // Checked\n  assert true;                  // Unchecked\n}\n```\n\n`{:only}` can help focusing on a particular proof or a particular branch, as it transforms not only other explicit assertions, but also other implicit assertions, and call requirements, into assumptions.\nSince it's meant to be a temporary construct, it always emits a warning.\nIt also has two variants `assert {:only \"before\"}` and `assert {:only \"after\"}`.\nHere is precisely how Dafny determines what to verify or not.\nEach `{:only}` annotation defines a \"verification interval\" which is visual:\n\n* `assert {:only} X [by {...} | ;]` sets a verification interval that starts at the keyword `assert` and ends either at the end of the proof `}` or the semicolon `;`, depending on which variant of `assert` is being used.\n* `assert {:only} ...` inside another verification interval removes that verification interval and sets a new one.\n* `assert {:only \"before\"} ...` inside another verification interval finishes that verification interval earlier at the end of this assertion. Outside a verification interval, it sets a verification interval from the beginning of the declaration to the end of this assertion, but only if there were no other verification intervals before.\n* `assert {:only \"after\"} ...` inside another verification interval moves the start of that verification interval to the start of this new assert. Outside a verification interval, it sets a verification interval from the beginning of this `assert` to the end of the declaration.\n\nThe start of an asserted expression is used to determines if it's inside a verification interval or not.\nFor example, in `assert B ==> (assert {:only \"after\"} true; C)`, `C` is actually the start of the asserted expression, so it is verified because it's after `assert {:only \"after\"} true`.\n\nAs soon as a declaration contains one `assert {:only}`, none of the postconditions are verified; you'd need to make them explicit with assertions if you wanted to verify them at the same time.\n\nYou can also isolate the verification of a single member using a similar `{:only}` attribute.", "start_char_idx": 2, "end_char_idx": 2580, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09f1454f-a858-42c6-b774-ec72a022b03b": {"__data__": {"id_": "09f1454f-a858-42c6-b774-ec72a022b03b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9084c239-97a5-4025-8232-8ae8334ffb01", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2f4112ae8af109e5c445c8a780bbf8b5121c6874a39008a406c9aca924c360f2", "class_name": "RelatedNodeInfo"}}, "text": "11.4.2. `{:focus}` {sec-focus}\n`assert {:focus} X;` splits verification into two assertion batches.\nThe first batch considers all assertions that are not on the block containing the `assert {:focus} X;`\nThe second batch considers all assertions that are on the block containing the `assert {:focus} X;` and those that will _always_ follow afterwards.\nHence, it might also occasionally double-report errors.\nIf you truly want a split on the batches, prefer `{:split_here}`.\n\nHere are two examples illustrating how `{:focus}` works, where `--` in the comments stands for `Assumption`:\n\n```dafny\nmethod doFocus1(x: bool) returns (y: int) {\n  y := 1;                     // Batch 1    Batch 2\n  assert y == 1;              // Assertion  --\n  if x {\n    if false {\n      assert y >= 0;          // --         Assertion\n      assert {:focus} y <= 2; // --         Assertion\n      y := 2;\n      assert y == 2;          // --         Assertion\n    }\n  } else {\n    assert y == 1;            // Assertion  --\n  }\n  assert y == 1;              // Assertion  Assertion\n  if !x {\n    assert y >= 1;            // Assertion  Assertion\n  } else {\n    assert y <= 1;            // Assertion  Assertion\n  }\n}\n```\n\nAnd another one where the focused block is guarded with a `while`, resulting in remaining assertions not being part of the first assertion batch:\n\n```dafny\nmethod doFocus2(x: bool) returns (y: int) {\n  y := 1;                     // Batch 1    Batch 2\n  assert y == 1;              // Assertion  --\n  if x {\n    while false {\n      assert y >= 0;          // --         Assertion\n      assert {:focus} y <= 2; // --         Assertion\n      y := 2;\n      assert y == 2;          // --         Assertion\n    }\n  } else {\n    assert y == 1;            // Assertion  --\n  }\n  assert y == 1;              // Assertion  --\n  if !x {\n    assert y >= 1;            // Assertion  --\n  } else {\n    assert y <= 1;            // Assertion  --\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e22ea816-f7fb-4cf7-a61d-73cdc9bed4b9": {"__data__": {"id_": "e22ea816-f7fb-4cf7-a61d-73cdc9bed4b9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dedc2df8-f2d0-4c66-ad2e-f15456eb0976", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a0e82198555f07bf0918c00503566bf5cee247d3df31fbbc7c2e945a11fc1d4b", "class_name": "RelatedNodeInfo"}}, "text": "11.4.3. `{:split_here}` {sec-split_here}\n`assert {:split_here} X;` splits verification into two assertion batches.\nIt verifies the code leading to this point (excluded) in a first assertion batch,\nand the code leading from this point (included) to the next `{:split_here}` or until the end in a second assertion batch.\nIt might help with timeouts.\n\nHere is one example, where `--` in the comments stands for `Assumption`:\n\n```dafny\nmethod doSplitHere(x: bool) returns (y: int) {\n  y := 1;                      // Batch 1    Batch 2     Batch 3\n  assert y >= 0;               // Assertion  --          --\n  if x {\n    assert y <= 1;             // Assertion  --          --\n    assert {:split_here} true; // --         Assertion   --\n    assert y <= 2;             // --         Assertion   --\n    assert {:split_here} true; // --         --          Assertion\n    if x {\n      assert y == 1;           // --         --          Assertion\n    } else {\n      assert y >= 1;           // --         --          Assertion\n    }\n  } else {\n    assert y <= 3;             // Assertion  --          --\n  }\n  assert y >= -1;              // Assertion  --          --\n}\n```", "start_char_idx": 2, "end_char_idx": 1166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4a162aa-9d8f-489c-b2d5-420d6a58ea44": {"__data__": {"id_": "a4a162aa-9d8f-489c-b2d5-420d6a58ea44", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4be285d6-bf6a-462a-9f2b-6d10c3f78ae2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a2fe38ccfb04562f9f4d5a2336a1f7745be3af3599e17aa4f4188e55fb819cd5", "class_name": "RelatedNodeInfo"}}, "text": "11.4.4. `{:subsumption n}`\nOverrides the `/subsumption` command-line setting for this assertion.\n`{:subsumption 0}` checks an assertion but does not assume it after proving it.\nYou can achieve the same effect using labelled assertions.", "start_char_idx": 2, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2de6421e-7df1-42c0-aca6-01f429a0c282": {"__data__": {"id_": "2de6421e-7df1-42c0-aca6-01f429a0c282", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f3730ac-0a97-4c45-9d85-2d95112152f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fb20026417858a999f2fab839c2d999b4ab717f91785771b805463c8aa5b8d2b", "class_name": "RelatedNodeInfo"}}, "text": "11.4.5. `{:error \"errorMessage\", \"successMessage\"}` {sec-error-attribute}\nProvides a custom error message in case the assertion fails.\nAs a hint, messages indicating what the user needs to do to fix the error are usually better than messages that indicate the error only.\nFor example:\n\n\n```dafny\nmethod Process(instances: int, price: int)\n  requires {:error \"There should be an even number of instances\", \"The number of instances is always even\"} instances % 2 == 0\n  requires {:error \"Could not prove that the price is positive\", \"The price is always positive\"} price >= 0\n{\n}\nmethod Test()\n{\n  if * {\n    Process(1, 0); // Error: There should be an even number of instances\n  }\n  if * {\n    Process(2, -1); // Error: Could not prove that the price is positive\n  }\n  if * {\n    Process(2, 5); // Success: The number of instances is always even\n                   // Success: The price is always positive\n  }\n}\n```\n\nThe success message is optional but is recommended if errorMessage is set.", "start_char_idx": 2, "end_char_idx": 992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92279790-556f-4c7d-b2f4-ddd2da48956d": {"__data__": {"id_": "92279790-556f-4c7d-b2f4-ddd2da48956d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf00b852-4c8f-48a4-b691-fd5e5c81efaa", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c3bc4a592b59a5b6979d1279733eafad044b7615f3fe7657ea139aad882434c5", "class_name": "RelatedNodeInfo"}}, "text": "11.4.6. `{:contradiction}`\n\nSilences warnings about this assertion being involved in a proof using contradictory assumptions when `--warn-contradictory-assumptions` is enabled. This allows clear identification of intentional proofs by contradiction.", "start_char_idx": 2, "end_char_idx": 251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcff24c1-4094-4484-96ca-dc58fed7c202": {"__data__": {"id_": "dcff24c1-4094-4484-96ca-dc58fed7c202", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "865c5c39-5f2c-4cc2-837e-8501073e823b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae4768cba09ac99d5ed4bca84b0624b68f8b425bfaee2a672d956c6ab9aebae7", "class_name": "RelatedNodeInfo"}}, "text": "11.5. Attributes on variable declarations", "start_char_idx": 2, "end_char_idx": 43, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "883c5cd5-eb17-49b9-8757-9f7a2767bb85": {"__data__": {"id_": "883c5cd5-eb17-49b9-8757-9f7a2767bb85", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ef92be6-42c1-49c8-83d0-7028df64f103", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "890e8b0409aefc77edcd55af6d68bd7772ec5b6e54676bdd40e06b1a57494a20", "class_name": "RelatedNodeInfo"}}, "text": "11.5.1. `{:assumption}` {sec-assumption}\nThis attribute can only be placed on a local ghost bool\nvariable of a method. Its declaration cannot have a rhs, but it is\nallowed to participate as the lhs of exactly one assignment of the\nform: `b := b && expr;`. Such a variable declaration translates in the\nBoogie output to a declaration followed by an `assume b` command.\nSee [@LeinoWuestholz2015], Section 3, for example uses of the `{:assumption}`\nattribute in Boogie.", "start_char_idx": 2, "end_char_idx": 468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56010cba-ef34-4ad0-b7ec-4fad74801621": {"__data__": {"id_": "56010cba-ef34-4ad0-b7ec-4fad74801621", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae35cbfd-18d9-45a2-a1e6-726cb34cdb89", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "04281457d5735b236918ba9bb4ea0a38cb23ac4e58ef547ab88809e41d02559a", "class_name": "RelatedNodeInfo"}}, "text": "11.6. Attributes on quantifier expressions (forall, exists)", "start_char_idx": 2, "end_char_idx": 61, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c94ea81-a19c-4dcc-9542-92fa9e1af13b": {"__data__": {"id_": "6c94ea81-a19c-4dcc-9542-92fa9e1af13b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93aefc33-8552-48f0-9001-59c2021e7252", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "86efaa35017f68b0220dcc089be9fd75fb96090917df6b6fa9629fbbcbcc2c39", "class_name": "RelatedNodeInfo"}}, "text": "11.6.1. `{:heapQuantifier}`\n\n_This attribute has been removed._", "start_char_idx": 2, "end_char_idx": 65, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b87cfc3b-2820-4096-bb0c-562b84b8b66a": {"__data__": {"id_": "b87cfc3b-2820-4096-bb0c-562b84b8b66a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33afcc55-9efe-4401-aeac-b17fc0408dbb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d69f5a4afbcff552d325f7e82b27776f81cc9bdc19eb0465e2e71d3ff37ee8ad", "class_name": "RelatedNodeInfo"}}, "text": "11.6.2. `{:induction}` {sec-induction-quantifier}\nSee `{:induction}` for functions and methods.", "start_char_idx": 2, "end_char_idx": 97, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b1fead6-662b-4d2d-9c1c-ff554597ecbc": {"__data__": {"id_": "4b1fead6-662b-4d2d-9c1c-ff554597ecbc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0132562a-fa53-4779-952c-78a6dec89197", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2ff33c570129756a3201da6f06bd500e1ae5b9f24fc28c5757db6c11622cccce", "class_name": "RelatedNodeInfo"}}, "text": "11.6.3. `{:trigger}` {sec-trigger}\nTrigger attributes are used on quantifiers and comprehensions.\n\nThe verifier instantiates the body of a quantified expression only when it can find an expression that matches the provided trigger.  \n\nHere is an example:\n\n```dafny\npredicate P(i: int)\npredicate Q(i: int)\n\nlemma {:axiom} PHoldEvenly()\n  ensures  forall i {:trigger Q(i)} :: P(i) ==> P(i + 2) && Q(i)\n\nlemma PHoldsForTwo()\n  ensures forall i :: P(i) ==> P(i + 4)\n{\n  forall j: int\n    ensures P(j) ==> P(j + 4)\n  {\n    if P(j) {\n      assert P(j); // Trivial assertion\n      \n      PHoldEvenly();\n      // Invoking the lemma assumes `forall i :: P(i) ==> P(i + 4)`,\n      // but it's not instantiated yet\n      \n      // The verifier sees `Q(j)`, so it instantiates\n      // `forall i :: P(i) ==> P(i + 4)` with `j`\n      // and we get the axiom `P(j) ==> P(j + 2) && Q(j)`\n      assert Q(j);     // hence it can prove `Q(j)`\n      assert P(j + 2); //   and it can prove `P(j + 2)`\n      assert P(j + 4); // But it cannot prove this\n      // because it did not instantiate `forall i :: P(i) ==> P(i + 4)` with `j+2`\n    }\n  }\n}\n```\n\nHere are ways one can prove `assert P(j + 4);`:\n* Add `assert Q(j + 2);` just before `assert P(j + 4);`, so that the verifier sees the trigger.\n* Change the trigger `{:trigger Q(i)}` to `{:trigger P(i)}` (replace the trigger)\n* Change the trigger `{:trigger Q(i)}` to `{:trigger Q(i)} {:trigger P(i)}` (add a trigger)\n* Remove `{:trigger Q(i)}` so that it will automatically determine all possible triggers thanks to the option `/autoTriggers:1` which is the default.", "start_char_idx": 2, "end_char_idx": 1601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a9b450e-845c-407f-8fab-83c0e40d1392": {"__data__": {"id_": "7a9b450e-845c-407f-8fab-83c0e40d1392", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c6e37dd-bff2-45ec-b8fa-87e71094a571", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7dd3d4a01ace08cd48c424c05185df58df28d7281dcaf490d7f027807548e7e2", "class_name": "RelatedNodeInfo"}}, "text": "11.7. Deprecated attributes\n\nThese attributes have been deprecated or removed. They are no longer useful (or perhaps never were) or were experimental.\nThey will likely be removed entirely sometime soon after the release of Dafny 4.\n\nRemoved:\n- :heapQuantifier\n- :dllimport\n- :handle\n\nDeprecated:\n- :opaque : This attribute has been promoted to a first-class modifier for functions. Find more information here.", "start_char_idx": 2, "end_char_idx": 411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01c35eef-54c7-44ae-9454-8a7341600401": {"__data__": {"id_": "01c35eef-54c7-44ae-9454-8a7341600401", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4478f41e-58fe-4a89-b5ef-23f03bcdf3b0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a6800ead11591a822dee8b1e0fcf1e2a72a193a7870f1e861f4db236025f3f0c", "class_name": "RelatedNodeInfo"}}, "text": "11.8. Other undocumented verification attributes\n\nA scan of Dafny's sources shows it checks for the\nfollowing attributes.\n\n* `{:$}`\n* `{:$renamed$}`\n* `{:InlineAssume}`\n* `{:PossiblyUnreachable}`\n* `{:__dominator_enabled}`\n* `{:__enabled}`\n* `{:a##post##}`\n* `{:absdomain}`\n* `{:ah}`\n* `{:assumption}`\n* `{:assumption_variable_initialization}`\n* `{:atomic}`\n* `{:aux}`\n* `{:both}`\n* `{:bvbuiltin}`\n* `{:candidate}`\n* `{:captureState}`\n* `{:checksum}`\n* `{:constructor}`\n* `{:datatype}`\n* `{:do_not_predicate}`\n* `{:entrypoint}`\n* `{:existential}`\n* `{:exitAssert}`\n* `{:expand}`\n* `{:extern}`\n* `{:focus}`\n* `{:hidden}`\n* `{:ignore}`\n* `{:inline}`\n* `{:left}`\n* `{:linear}`\n* `{:linear_in}`\n* `{:linear_out}`\n* `{:msg}`\n* `{:name}`\n* `{:originated_from_invariant}`\n* `{:partition}`\n* `{:positive}`\n* `{:post}`\n* `{:pre}`\n* `{:precondition_previous_snapshot}`\n* `{:qid}`\n* `{:right}`\n* `{:selective_checking}`\n* `{:si_fcall}`\n* `{:si_unique_call}`\n* `{:sourcefile}`\n* `{:sourceline}`\n* `{:split_here}`\n* `{:stage_active}`\n* `{:stage_complete}`\n* `{:staged_houdini_tag}`\n* `{:start_checking_here}`\n* `{:subsumption}`\n* `{:template}`\n* `{:terminates}`\n* `{:upper}`\n* `{:verified_under}`\n* `{:weight}`\n* `{:yields}`", "start_char_idx": 2, "end_char_idx": 1213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc89f6f5-838e-4c2e-8b21-1596177f7ed5": {"__data__": {"id_": "fc89f6f5-838e-4c2e-8b21-1596177f7ed5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Binding_Guards_description.md", "file_name": "Binding_Guards_description.md", "file_type": "text/markdown", "file_size": 1195, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a290dc7b-7570-4d3b-830f-66fb90e1a0a1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Binding_Guards_description.md", "file_name": "Binding_Guards_description.md", "file_type": "text/markdown", "file_size": 1195, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5462beb27f19a7a064851c89e7bcd20c04b2b8f769ba8534e546a83d482120e9", "class_name": "RelatedNodeInfo"}}, "text": "8.9. Binding Guards (grammar) {sec-binding-guards}\n\nExamples (in `if` statements):\n\n```dafny\nmethod m(i: int) {\n  ghost var k: int;\n  if i, j :| 0 < i+j < 10 {\n    k := 0;\n  } else {\n    k := 1;\n  }\n}\n```\n\nAn `if` statement can also take a _binding guard_.\nSuch a guard checks if there exist values for the given variables that satisfy the given expression.\nIf so, it binds some satisfying values to the variables and proceeds\ninto the \"then\" branch; otherwise it proceeds with the \"else\" branch,\nwhere the bound variables are not in scope.\n\nIn other words, the statement\n\n\n```dafny\nif x :| P { S } else { T }\n```\n\nhas the same meaning as\n\n\n```dafny\nif exists x :: P { var x :| P; S } else { T }\n```\n\nThe identifiers bound by the binding guard are ghost variables\nand cannot be assigned to non-ghost variables. They are only\nused in specification contexts.\n\nHere is another example:\n\n\n```dafny\npredicate P(n: int)\n{\n  n % 2 == 0\n}\n\nmethod M1() returns (ghost y: int)\n    requires exists x :: P(x)\n    ensures P(y)\n{\n  if x : int :| P(x) {\n      y := x;\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5742f3a-79cf-44e5-b965-69a7f301cfe8": {"__data__": {"id_": "d5742f3a-79cf-44e5-b965-69a7f301cfe8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit-vector_Operations_description.md", "file_name": "Bit-vector_Operations_description.md", "file_type": "text/markdown", "file_size": 1091, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "196f922b-50c1-4760-a16a-fe35c10f2036", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit-vector_Operations_description.md", "file_name": "Bit-vector_Operations_description.md", "file_type": "text/markdown", "file_size": 1091, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9f698a37a6b65f50d1e2ed96ef0865b011abcf8b9502efe4f7d2ab5ae68a2c42", "class_name": "RelatedNodeInfo"}}, "text": "9.9. Bit-vector Operations (grammar) {sec-bitvector-expression}\n\nExamples:\n\n```dafny\nx | y\nx & y\nx ^ y\n```\n\n\nThese operations take two bit-vector values of the same type, returning\na value of the same type. The operations perform bit-wise _or_ (`|`),\n_and_ (`&`), and _exclusive-or_ (`^`). To perform bit-wise equality, use\n`^` and `!` (unary complement) together. (`==` is boolean equality of the whole bit-vector.)\n\nThese operations are associative and commutative but do not associate with each other.\nUse parentheses: `a & b | c` is illegal; use `(a & b) | c` or `a & (b | c)`\ninstead.\n\nBit-vector operations are not allowed in some contexts.\nThe `|` symbol is used both for bit-wise or and as the delimiter in a\ncardinality expression: an ambiguity arises if\nthe expression E in `| E |` contains a `|`. This situation is easily\nremedied: just enclose E in parentheses, as in `|(E)|`.\nThe only type-correct way this can happen is if the expression is\na comprehension, as in `| set x: int :: x | 0x101 |`.", "start_char_idx": 2, "end_char_idx": 1010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bcea7f6-48e8-46d9-9aea-b655541ebf80": {"__data__": {"id_": "3bcea7f6-48e8-46d9-9aea-b655541ebf80", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit_Shifts_description.md", "file_name": "Bit_Shifts_description.md", "file_type": "text/markdown", "file_size": 560, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b2d2eaf-65ed-4e82-8e28-5fcca945e805", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit_Shifts_description.md", "file_name": "Bit_Shifts_description.md", "file_type": "text/markdown", "file_size": 560, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "da3d70c525a5c54f16f729a7444903c9162d23a3457887cbcea3087ec995b89f", "class_name": "RelatedNodeInfo"}}, "text": "9.6. Bit Shifts (grammar) {sec-bit-shift-expression}\n\nExamples:\n\n```dafny\nk << 5\nj >> i\n```\n\nThese operators are the left and right shift operators for bit-vector values.\nThey take a bit-vector value and an `int`, shifting the bits by the given\namount; the result has the same bit-vector type as the LHS.\nFor the expression to be well-defined, the RHS value must be in the range 0 to the number of\nbits in the bit-vector type, inclusive.\n\nThe operations are left-associative: `a > j` is `(a > j`.", "start_char_idx": 2, "end_char_idx": 498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dce6ca5-cdaf-4ef9-a42a-8f79e8863156": {"__data__": {"id_": "7dce6ca5-cdaf-4ef9-a42a-8f79e8863156", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e3670bfe5ff3a49a057de25f8d5cc312faa9ee827f661458db1c4b50a30da31b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc611a1f-cef2-4cd2-9ed2-557a8e71f19a", "node_type": "1", "metadata": {}, "hash": "5f5fda77fb7673926e851afa4ca789744676804f44383f6f61640aaa40af3d21", "class_name": "RelatedNodeInfo"}}, "text": "8.14. Break and Continue Statements (grammar) {sec-break-continue-statement}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nmethod m(a: A) {\n  label x:\n  while true {\n    if (*) { break; }\n  }\n  label y: {\n    var z := 1;\n    if * { break y; }\n    z := 2;\n  }\n\n}\n```\n\nBreak and continue statements provide a means to transfer control\nin a way different than the usual nested control structures.\nThere are two forms of each of these statements: with and without a label.\n\nIf a label is used, the break or continue statement must be enclosed in a statement\nwith that label. The enclosing statement is called the _target_ of the break\nor continue.\n\nA `break` statement transfers control to the point immediately\nfollowing the target statement. For example, such a break statement can be\nused to exit a sequence of statements in a block statement before\nreaching the end of the block.\n\nFor example,\n\n```dafny\nlabel L: {\n  var n := ReadNext();\n  if n < 0 {\n    break L;\n  }\n  DoSomething(n);\n}\n```\nis equivalent to\n\n```dafny\n{\n  var n := ReadNext();\n  if 0 <= n {\n    DoSomething(n);\n  }\n}\n```\n\nIf no label is specified and the statement lists `n`\noccurrences of `break`, then the statement must be enclosed in\nat least `n` levels of loop statements. Control continues after exiting `n`\nenclosing loops. For example,\n\n\n```dafny\nmethod m() {\n  for i := 0 to 10 {\n    for j := 0 to 10 {\n      label X: {\n        for k := 0 to 10 {\n          if j + k == 15 {\n            break break;\n          }\n        }\n      }\n    }\n    // control continues here after the \"break break\", exiting two loops\n  }\n}\n```\n\nNote that a non-labeled `break` pays attention only to loops, not to labeled\nstatements. For example, the labeled block `X` in the previous example\ndoes not play a role in determining the target statement of the `break break;`.\n\nFor a `continue` statement, the target statement must be a loop statement.\nThe continue statement transfers control to the point immediately\nbefore the closing curly-brace of the loop body.\n\nFor example,\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    if i == 17 {\n      continue;\n    }\n    DoSomething(i);\n  }\n}\nmethod DoSomething(i:int){}\n```\nis equivalent to\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    if i != 17 {\n      DoSomething(i);\n    }\n  }\n}\nmethod DoSomething(i:int){}\n```\nThe same effect can also be obtained by wrapping the loop body in a labeled\nblock statement and then using `break` with a label, but that usually makes\nfor a more cluttered program:\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    label LoopBody: {\n      if i == 17 {\n        break LoopBody;\n      }\n      DoSomething(i);\n    }\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nStated differently, `continue` has the effect of ending the current loop iteration,\nafter which control continues with any remaining iterations. This is most natural\nfor `for` loops. For a `while` loop, be careful to make progress toward termination\nbefore a `continue` statement. For example, the following program snippet shows\nan easy mistake to make (the verifier will complain that the loop may not terminate):\n\n\n```dafny\nmethod m() {\n  var i := 0;\n  while i < 100 {\n    if i == 17 {\n      continue; // error: this would cause an infinite loop\n    }\n    DoSomething(i);\n    i := i + 1;\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nThe `continue` statement can give a label, provided the label is a label of a loop.\nFor example,", "start_char_idx": 2, "end_char_idx": 3408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc611a1f-cef2-4cd2-9ed2-557a8e71f19a": {"__data__": {"id_": "dc611a1f-cef2-4cd2-9ed2-557a8e71f19a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e3670bfe5ff3a49a057de25f8d5cc312faa9ee827f661458db1c4b50a30da31b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dce6ca5-cdaf-4ef9-a42a-8f79e8863156", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "745479fd17640d19706559d006e4269e275a1768b72581ebcc1d999f8829b717", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nmethod m() {\n  var i := 0;\n  while i < 100 {\n    if i == 17 {\n      continue; // error: this would cause an infinite loop\n    }\n    DoSomething(i);\n    i := i + 1;\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nThe `continue` statement can give a label, provided the label is a label of a loop.\nFor example,\n\n\n```dafny\nmethod m() {\n  label Outer:\n  for i := 0 to 100 {\n    for j := 0 to 100 {\n      if i + j == 19 {\n        continue Outer;\n      }\n      WorkIt(i, j);\n    }\n    PostProcess(i);\n    // the \"continue Outer\" statement above transfers control to here\n  }\n}\nmethod WorkIt(i:int, j:int){}\nmethod PostProcess(i:int){}\n```\n\nIf a non-labeled continue statement lists `n` occurrences of `break` before the\n`continue` keyword, then the statement must be enclosed in at least `n + 1` levels\nof loop statements. The effect is to `break` out of the `n` most closely enclosing\nloops and then `continue` the iterations of the next loop. That is, `n` occurrences\nof `break` followed by one more `break;` will break out of `n` levels of loops\nand then do a `break`, whereas `n` occurrences of `break` followed by `continue;`\nwill break out of `n` levels of loops and then do a `continue`.\n\nFor example, the `WorkIt` example above can equivalently be written without labels\nas\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    for j := 0 to 100 {\n      if i + j == 19 {\n        break continue;\n      }\n      WorkIt(i, j);\n    }\n    PostProcess(i);\n    // the \"break continue\" statement above transfers control to here\n  }\n}\nmethod WorkIt(i:int, j:int){}\nmethod PostProcess(i:int){}\n```\n\nNote that a loop invariant is checked on entry to a loop and at the closing curly-brace\nof the loop body. It is not checked at break statements. For continue statements, \nthe loop invariant is checked as usual at the closing curly-brace\nthat the continue statement jumps to.\nThis checking ensures that the loop invariant holds at the very top of\nevery iteration. Commonly, the only exit out of a loop happens when the loop guard evaluates\nto `false`. Since no state is changed between the top of an iteration (where the loop\ninvariant is known to hold) and the evaluation of the loop guard, one can also rely on\nthe loop invariant to hold immediately following the loop. But the loop invariant may\nnot hold immediately following a loop if a loop iteration changes the program state and\nthen exits the loop with a break statement.\n\nFor example, the following program verifies:\n\n```dafny\nmethod m() {\n  var i := 0;\n  while i < 10\n    invariant 0 <= i <= 10\n  {\n    if P(i) {\n      i := i + 200;\n      break;\n    }\n    i := i + 1;\n  }\n  assert i == 10 || 200 <= i < 210;\n}\npredicate P(i:int)\n```\nTo explain the example, the loop invariant `0 <= i <= 10` is known to hold at the very top\nof each iteration,\nthat is, just before the loop guard `i < 10` is evaluated. If the loop guard evaluates\nto `false`, then the negated guard condition (`10 <= i`) and the invariant hold, so\n`i == 10` will hold immediately after the loop. If the loop guard evaluates to `true`\n(that is, `i < 10` holds), then the loop body is entered. If the test `P(i)` then evaluates\nto `true`, the loop adds `200` to `i` and breaks out of the loop, so on such a\npath, `200 <= i < 210` is known to hold immediately after the loop. This is summarized\nin the assert statement in the example.\nSo, remember, a loop invariant holds at the very top of every iteration, not necessarily\nimmediately after the loop.", "start_char_idx": 3100, "end_char_idx": 6559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2017a57a-80e9-4514-a948-526d69b3eef1": {"__data__": {"id_": "2017a57a-80e9-4514-a948-526d69b3eef1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25717d12-9c3b-400e-beaa-4d89ce20ffa3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9eaa2c45c2fd06ab0fba7708c97216753be1e99ab11aa89376354527981f744b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2221091b-0764-4bdf-9558-6e915a965431", "node_type": "1", "metadata": {}, "hash": "c1baab42d6aa1e88e2639ab28a14409cfd02eedc07eababa1541dc0d77d01f4f", "class_name": "RelatedNodeInfo"}}, "text": "8.23. Calc Statement (grammar) {sec-calc-statement}\n\nSee also: Verified Calculations.\n\nThe `calc` statement supports _calculational proofs_ using a language\nfeature called _program-oriented calculations_ (poC). This feature was\nintroduced and explained in the [_Verified Calculations_] paper by Leino\nand Polikarpova[@LEINO:Dafny:Calc]. Please see that paper for a more\ncomplete explanation of the `calc` statement. We here mention only the\nhighlights.\n\nCalculational proofs are proofs by stepwise formula manipulation\nas is taught in elementary algebra. The typical example is to prove\nan equality by starting with a left-hand-side and through a series of\ntransformations morph it into the desired right-hand-side.\n\nNon-syntactic rules further restrict hints to only ghost and side-effect\nfree statements, as well as imposing a constraint that only\nchain-compatible operators can be used together in a calculation. The\nnotion of chain-compatibility is quite intuitive for the operators\nsupported by poC; for example, it is clear that \"\" cannot be used within\nthe same calculation, as there would be no relation to conclude between\nthe first and the last line. See the [paper][Verified Calculations] for\na more formal treatment of chain-compatibility.\n\nNote that we allow a single occurrence of the intransitive operator \"!=\" to\nappear in a chain of equalities (that is, \"!=\" is chain-compatible with\nequality but not with any other operator, including itself). Calculations\nwith fewer than two lines are allowed, but have no effect. If a step\noperator is omitted, it defaults to the calculation-wide operator,\ndefined after the `calc` keyword. If that operator is omitted, it defaults\nto equality.\n\nHere is an example using `calc` statements to prove an elementary\nalgebraic identity. As it turns out, Dafny is able to prove this without\nthe `calc` statements, but the example illustrates the syntax.\n\n\n```dafny\nlemma docalc(x : int, y: int)\n  ensures (x + y) * (x + y) == x * x + 2 * x * y + y * y\n{\n  calc {\n    (x + y) * (x + y);\n    ==\n    // distributive law: (a + b) * c == a * c + b * c\n    x * (x + y) + y * (x + y);\n    ==\n    // distributive law: a * (b + c) == a * b + a * c\n    x * x + x * y + y * x + y * y;\n    ==\n    calc {\n\t    y * x;\n      ==\n\t    x * y;\n    }\n    x * x + x * y + x * y + y * y;\n    ==\n    calc {\n      x * y + x * y;\n      ==\n      // a = 1 * a\n      1 * x * y + 1 * x * y;\n      ==\n      // Distributive law\n      (1 + 1) * x * y;\n      ==\n      2 * x * y;\n    }\n    x * x + 2 * x * y + y * y;\n  }\n}\n```\n\nHere we started with `(x + y) * (x + y)` as the left-hand-side\nexpressions and gradually transformed it using distributive,\ncommutative and other laws into the desired right-hand-side.\n\nThe justification for the steps are given as comments or as\nnested `calc` statements that prove equality of some sub-parts\nof the expression.\n\nThe `==` operators show the relation between\nthe previous expression and the next. Because of the transitivity of\nequality we can then conclude that the original left-hand-side is\nequal to the final expression.\n\nWe can avoid having to supply the relational operator between\nevery pair of expressions by giving a default operator between\nthe `calc` keyword and the opening brace as shown in this abbreviated\nversion of the above calc statement:", "start_char_idx": 2, "end_char_idx": 3316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2221091b-0764-4bdf-9558-6e915a965431": {"__data__": {"id_": "2221091b-0764-4bdf-9558-6e915a965431", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25717d12-9c3b-400e-beaa-4d89ce20ffa3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9eaa2c45c2fd06ab0fba7708c97216753be1e99ab11aa89376354527981f744b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2017a57a-80e9-4514-a948-526d69b3eef1", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4c2c5a59421e59dd1bafb9c1ab8602211965c4cb457f60c918a4204c39e6b3c1", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nlemma docalc(x : int, y: int)\n  ensures (x + y) * (x + y) == x * x + 2 * x * y + y * y\n{\n  calc == {\n    (x + y) * (x + y);\n    x * (x + y) + y * (x + y);\n    x * x + x * y + y * x + y * y;\n    x * x + x * y + x * y + y * y;\n    x * x + 2 * x * y + y * y;\n  }\n}\n```\n\nAnd since equality is the default operator, we could have omitted\nit after the `calc` keyword.\nThe purpose of the block statements or the `calc` statements between\nthe expressions is to provide hints to aid Dafny in proving that\nstep. As shown in the example, comments can also be used to aid\nthe human reader in cases where Dafny can prove the step automatically.", "start_char_idx": 3319, "end_char_idx": 3959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82f4cf3c-56c2-4bd6-af30-106ea0f98bc1": {"__data__": {"id_": "82f4cf3c-56c2-4bd6-af30-106ea0f98bc1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Cardinality_Expressions_description.md", "file_name": "Cardinality_Expressions_description.md", "file_type": "text/markdown", "file_size": 595, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d7d8390-b3bb-47b1-9f1e-ebec3e93a31c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Cardinality_Expressions_description.md", "file_name": "Cardinality_Expressions_description.md", "file_type": "text/markdown", "file_size": 595, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2afcec1587b6ed7d31b98821da26268dfa5bb816f29f0a09e237ff69a585d75d", "class_name": "RelatedNodeInfo"}}, "text": "9.26. Cardinality Expressions (grammar) {sec-cardinality-expression}\n\nExamples:\n\n```dafny\n|s|\n|s[1..i]|\n```\n\nFor a finite-collection expression `c`, `|c|` is the cardinality of `c`. For a\nfinite set or sequence, the cardinality is the number of elements. For\na multiset, the cardinality is the sum of the multiplicities of the\nelements. For a finite map, the cardinality is the cardinality of the\ndomain of the map. Cardinality is not defined for infinite sets or infinite maps.\nFor more information, see Section 5.5.", "start_char_idx": 2, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea9121be-f4ad-440a-9d6f-73909b7b77e7": {"__data__": {"id_": "ea9121be-f4ad-440a-9d6f-73909b7b77e7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Class_types_description.md", "file_name": "Class_types_description.md", "file_type": "text/markdown", "file_size": 3461, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a15bdab6-0119-4c31-9c78-62ca3508ac93", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Class_types_description.md", "file_name": "Class_types_description.md", "file_type": "text/markdown", "file_size": 3461, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bd4ca35847c72537e5d471efd40a41e21c329b0032b8262b9d16b55c7de0ce4f", "class_name": "RelatedNodeInfo"}}, "text": "5.8. Class types (grammar) {sec-class-types}\n\nExamples:\n\n```dafny\ntrait T {}\nclass A {}\nclass B extends T {\n  const b: B?\n  var v: int\n  constructor (vv: int) { v := vv; b := null; }\n  function toString(): string { \"a B\" }\n  method m(i: int) { var x := new B(0); }\n  static method q() {}\n}\n```\n\nDeclarations within a class all begin with keywords and do not end with semicolons.\n\n\n\nA _class_ `C` is a reference type declared as follows:\n\n```dafny\nclass C extends J1, ..., Jn\n{\n  _members_\n}\n```\nwhere the -enclosed list of one-or-more type parameters `T` is optional. The text\n\"`extends J1, ..., Jn`\" is also optional and says that the class extends traits `J1` ... `Jn`.\nThe members of a class are _fields_, _constant fields_, _functions_, and\n_methods_.  These are accessed or invoked by dereferencing a reference\nto a `C` instance.\n\nA function or method is invoked on an _instance_\nof `C`, unless the function or method is declared `static`.\nA function or method that is not `static` is called an\n_instance_ function or method.\n\nAn instance function or method takes an implicit _receiver_\nparameter, namely, the instance used to access the member.  In the\nspecification and body of an instance function or method, the receiver\nparameter can be referred to explicitly by the keyword `this`.\nHowever, in such places, members of `this` can also be mentioned\nwithout any qualification.  To illustrate, the qualified `this.f` and\nthe unqualified `f` refer to the same field of the same object in the\nfollowing example:\n\n```dafny\nclass C {\n  var f: int\n  var x: int\n  method Example() returns (b: bool)\n  {\n    var x: int;\n    b := f == this.f;\n  }\n}\n```\nso the method body always assigns `true` to the out-parameter `b`.\nHowever, in this example, `x` and `this.x` are different because\nthe field `x` is shadowed by the declaration of the local variable `x`.\nThere is no semantic difference between qualified and\nunqualified accesses to the same receiver and member.\n\nA `C` instance is created using `new`. There are three forms of `new`,\ndepending on whether or not the class declares any _constructors_\n(see Section 6.3.2):\n\n\n```dafny\nc := new C;\nc := new C.Init(args);\nc := new C(args);\n```\n\nFor a class with no constructors, the first two forms can be used.\nThe first form simply allocates a new instance of a `C` object, initializing\nits fields to values of their respective types (and initializing each `const` field\nwith a RHS to its specified value). The second form additionally invokes\nan _initialization method_ (here, named `Init`) on the newly allocated object\nand the given arguments. It is therefore a shorthand for\n\n```dafny\nc := new C;\nc.Init(args);\n```\nAn initialization method is an ordinary method that has no out-parameters and\nthat modifies no more than `this`.\n\nFor a class that declares one or more constructors, the second and third forms\nof `new` can be used. For such a class, the second form invokes the indicated\nconstructor (here, named `Init`), which allocates and initializes the object.\nThe third form is the same as the second, but invokes the _anonymous constructor_\nof the class (that is, a constructor declared with the empty-string name).\n\nThe details of constructors and other class members are described in Section 6.3.2.", "start_char_idx": 2, "end_char_idx": 3260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7547a18-9a8e-404f-b9a4-1b38dc90ee1e": {"__data__": {"id_": "a7547a18-9a8e-404f-b9a4-1b38dc90ee1e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/CommandLineOptions.md", "file_name": "CommandLineOptions.md", "file_type": "text/markdown", "file_size": 428, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "938bb9da-7f9e-4128-825c-c3b7c72feee8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/CommandLineOptions.md", "file_name": "CommandLineOptions.md", "file_type": "text/markdown", "file_size": 428, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d32ed77f746a9316e156bb16f5ce242b95f3653de8325d93fac7404dff65368b", "class_name": "RelatedNodeInfo"}}, "text": "16. Full list of legacy command-line options {sec-full-command-line-options} <!-- PDFOMIT -->\nFor the on-line version only, the output of `dafny -?` follows. Note that with the advent of dafny commands, many options are only applicable to some (if any) commands, some are renamed, and some are obsolete and will eventually be removed. \n{% include_relative Options.txt %}", "start_char_idx": 2, "end_char_idx": 372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a36bf35d-3b7b-4538-a20e-fff523efe52b": {"__data__": {"id_": "a36bf35d-3b7b-4538-a20e-fff523efe52b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Field_Declarations_description.md", "file_name": "Constant_Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1397, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08a44331-c855-4b58-838f-6cda76f8d746", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Field_Declarations_description.md", "file_name": "Constant_Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1397, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "da744b0b22b2572374193a549a869d676c107fc81f44756e5cf07e48e142c5cc", "class_name": "RelatedNodeInfo"}}, "text": "6.2. Constant Field Declarations (grammar) {sec-constant-field-declaration}\n\nExamples:\n\n```dafny\nconst c: int\nghost const d := 5\nclass A {\n  const e: bool\n  static const f: int\n}\n```\nA `const` declaration declares a name bound to a value,\nwhich value is fixed after initialization.\n\nThe declaration must either have a type or an initializing expression (or both).\nIf the type is omitted, it is inferred from the initializing expression.\n\n* A const declaration may include the `ghost`, `static`, and `opaque` modifiers, but no\nothers.\n* A const declaration may appear within a module or within any declaration\nthat may contain members (class, trait, datatype, newtype).\n* If it is in a module, it is implicitly `static`, and may not also be declared\n`static`.\n* If the declaration has an initializing expression that is a ghost\nexpression, then the ghost-ness of the declaration is inferred; the `ghost`\nmodifier may be omitted.\n* If the declaration includes the `opaque` modifier, then uses of the declared\nvariable know its name and type but not its value. The value can be made known for\nreasoning purposes by using the reveal statement.\n* The initialization expression may refer to other constant fields that are in scope and declared either\nbefore or after this declaration, but circular references are not allowed.", "start_char_idx": 2, "end_char_idx": 1321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "abf3ccaf-f22e-493f-8a20-f7582e99f2f5": {"__data__": {"id_": "abf3ccaf-f22e-493f-8a20-f7582e99f2f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Or_Atomic_Expressions_description.md", "file_name": "Constant_Or_Atomic_Expressions_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db4969de-b28d-4c8d-8099-a2151eab112a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Or_Atomic_Expressions_description.md", "file_name": "Constant_Or_Atomic_Expressions_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4aac98a26ad3b1b8178ad3f75e988f9dae32a68ecd5fb72c807a7a6f1cc96228", "class_name": "RelatedNodeInfo"}}, "text": "9.19. Constant Or Atomic Expressions (grammar) {sec-atomic-expression}\n\nExamples:\n\n```dafny\nthis\nnull\n5\n5.5\ntrue\n'a'\n\"dafny\"\n( e )\n| s |\nold(x)\nallocated(x)\nunchanged(x)\nfresh(e)\nassigned(x)\n```\n\nThese expressions are never l-values. They include\n\n- literal expressions\n- parenthesized expressions\n- `this` expressions\n- fresh expressions\n- allocated expressions\n- unchanged expressions\n- old expressions\n- cardinality expressions\n- assigned expressions", "start_char_idx": 2, "end_char_idx": 455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfd9f44e-7338-42e6-9261-1d46f105cb41": {"__data__": {"id_": "cfd9f44e-7338-42e6-9261-1d46f105cb41", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8c6cbae-50e7-4025-9100-3c240edccfbd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1d658cf5d929e2ffb6926553128affade5455d7009b5944ccdb4ae64e8529c68", "class_name": "RelatedNodeInfo"}}, "text": "---\nlayout: default\n---\n\n\n\n\n\n\nDafny Reference Manual \nThe dafny-lang community \n document.write(new Date(document.lastModified));  \n\n{% include_relative version.txt %} \n\n\n\n**Abstract:**\nThis is the Dafny reference manual; it describes the Dafny programming\nlanguage and how to use the Dafny verification system.\nParts of this manual are more tutorial in nature in order to help the\nuser understand how to do proofs with Dafny.\n\n(Link to current document as html)\n\n- numbered toc\n{:toc}\n\n{% include_relative Introduction.md %}\n\n\n{% include_relative Grammar.md %}\n\n\n{% include_relative Programs.md %}\n\n\n{% include_relative Modules.md %}\n\n\n{% include_relative Types.md %}\n\n\n{% include_relative Specifications.md %}\n\n\n{% include_relative Statements.md %}\n\n\n{% include_relative Expressions.md %}\n\n\n{% include_relative Refinement.md %}\n\n\n{% include_relative Attributes.md %}\n\n\n{% include_relative Topics.md %}\n\n\n{% include_relative UserGuide.md %}\n\n\n{% include_relative VSCodeIDE.md %}\n\n\n{% include_relative Plugins.md %}\n\n\n{% include_relative CommandLineOptions.md %}\n\n\n{% include_relative GrammarDetails.md %}\n\n{% include_relative SyntaxTests.md %}", "start_char_idx": 0, "end_char_idx": 1144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91ff3508-355b-462f-98aa-1ab8d1f0346a": {"__data__": {"id_": "91ff3508-355b-462f-98aa-1ab8d1f0346a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca8606f7-97ea-4497-9b35-9ab3fa82b2c5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8c7cf30fe0519933e18efbf0ac7df7557103dbd959b4285d740108758f538441", "class_name": "RelatedNodeInfo"}}, "text": "19. References", "start_char_idx": 2, "end_char_idx": 16, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "504f1590-af2d-4af2-9093-5f57ef7b4d69": {"__data__": {"id_": "504f1590-af2d-4af2-9093-5f57ef7b4d69", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaration_Modifiers_description.md", "file_name": "Declaration_Modifiers_description.md", "file_type": "text/markdown", "file_size": 2372, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "412471cf-e7c0-48d2-afe4-52fcf3a849f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaration_Modifiers_description.md", "file_name": "Declaration_Modifiers_description.md", "file_type": "text/markdown", "file_size": 2372, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a22716b091060574ae9c69072c5382208e0051807f2de95b1ef5793b1112d2d5", "class_name": "RelatedNodeInfo"}}, "text": "3.3. Declaration Modifiers (grammar) {sec-declaration-modifier}\n\nExamples:\n\n```dafny\nabstract module M {\n  class C {\n    static method m() {}\n  }\n}\nghost opaque const c : int\n```\n\nTop level declarations may be preceded by zero or more declaration\nmodifiers. Not all of these are allowed in all contexts.\n\nThe `abstract` modifier may only be used for module declarations.\nAn abstract module can leave some entities underspecified.\nAbstract modules are not compiled.\n\nThe `ghost` modifier is used to mark entities as being used for\nspecification only, not for compilation to code.\n\nThe `opaque` modifier may be used on const declarations and functions.\n\nThe `static` modifier is used for class members that\nare associated with the class as a whole rather than with\nan instance of the class. This modifier may not be used with\ndeclarations that are implicitly static, as are members of the \ntop-level, unnamed implicit class.\n\nThe following table shows modifiers that are available\nfor each of the kinds of declaration. In the table\nwe use already-ghost (already-non-ghost) to denote that the item is not\nallowed to have the ghost modifier because it is already\nimplicitly ghost (non-ghost).\n\n\n Declaration              | allowed modifiers\n--------------------------|---------------------------------------\n module                   | abstract\n class                    | -\n trait                    | -\n datatype or codatatype   | -\n field (const)            | ghost opaque\n newtype                  | -\n synonym types            | -\n iterators                | -\n method                   | ghost static\n lemma                    | already-ghost static\n least lemma              | already-ghost static\n greatest lemma           | already-ghost static\n constructor              | ghost\n function                 | ghost static opaque             (Dafny 4)\n function method          | already-non-ghost static opaque (Dafny 3)\n function (non-method)    | already-ghost static opaque     (Dafny 3)\n predicate                | ghost static opaque             (Dafny 4)\n predicate method         | already-non-ghost static opaque (Dafny 3)\n predicate (non-method)   | already-ghost static opaque     (Dafny 3)\n least predicate          | already-ghost static opaque\n greatest predicate       | already-ghost static opaque", "start_char_idx": 2, "end_char_idx": 2317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cd0e18a-200e-49b7-9d14-cd7fb1f4b077": {"__data__": {"id_": "9cd0e18a-200e-49b7-9d14-cd7fb1f4b077", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaring_New_Modules_description.md", "file_name": "Declaring_New_Modules_description.md", "file_type": "text/markdown", "file_size": 1900, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "036fbd6b-d0bf-4efc-849c-44d5b0b03ef2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaring_New_Modules_description.md", "file_name": "Declaring_New_Modules_description.md", "file_type": "text/markdown", "file_size": 1900, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3b9703f4abd34caaef1c071a9abe3aae52e06e9a8e8b21b81c6e29b34bbafb5f", "class_name": "RelatedNodeInfo"}}, "text": "4.1. Declaring New Modules (grammar) {sec-module-definition}\n\nExamples:\n\n```dafny\nmodule P { const i: int }\nabstract module A.Q { method m() {} }\nmodule M { module N { } }\n```\n\nA _module definition_\n- has an optional modifier (only `abstract` is allowed)\n- followed by the keyword \"module\"\n- followed by a name (a sequence of dot-separated identifiers)\n- followed by a body enclosed in curly braces\n\nA module body consists of any declarations that are allowed at the top\nlevel: classes, datatypes, types, methods, functions, etc.\n\n\n```dafny\nmodule Mod {\n  class C {\n    var f: int\n    method m()\n  }\n  datatype Option = A(int) | B(int)\n  type T\n  method m()\n  function f(): int\n}\n```\n\nYou can also put a module inside another, in a nested fashion:\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    class C {\n      method doIt()\n      var f: int\n    }\n  }\n}\n```\n\nThen you can refer to the members of the `Helpers` module within the\n`Mod` module by prefixing them with \"Helpers.\". For example:\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    class C {\n      constructor () { f := 0; }\n      method doIt()\n      var f: int\n    }\n  }\n  method m() {\n    var x := new Helpers.C();\n    x.doIt();\n    x.f := 4;\n  }\n}\n```\n\nMethods and functions defined at the module level are available like\nclasses, with just the module name prefixing them. They are also\navailable in the methods and functions of the classes in the same\nmodule.\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    function addOne(n: nat): nat {\n      n + 1\n    }\n  }\n  method m() {\n    var x := 5;\n    x := Helpers.addOne(x); // x is now 6\n  }\n}\n```\n\nNote that everything declared at the top-level\n(in all the files constituting the program) is implicitly part\nof a single implicit unnamed global module.", "start_char_idx": 2, "end_char_idx": 1757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "963b9335-f703-419e-b1b1-63c0d73d1b00": {"__data__": {"id_": "963b9335-f703-419e-b1b1-63c0d73d1b00", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Endless_Expression_description.md", "file_name": "Endless_Expression_description.md", "file_type": "text/markdown", "file_size": 367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e5fbdb9-ca51-4ce4-b666-86b7b397106f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Endless_Expression_description.md", "file_name": "Endless_Expression_description.md", "file_type": "text/markdown", "file_size": 367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "58e3eb48c4f31e7f0c0da241da3e285e538ba3e6a74b4de347615c2c3fb2146e", "class_name": "RelatedNodeInfo"}}, "text": "9.31. Endless Expression (grammar) {sec-endless-expression}\n\n_Endless expression_ gets it name from the fact that all its alternate\nproductions have no terminating symbol to end them, but rather they\nall end with an arbitrary expression at the end. The various\nendless expression alternatives are described in the following subsections.", "start_char_idx": 2, "end_char_idx": 338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9a25a0d-37f0-4ece-9e8b-ec16bc66517b": {"__data__": {"id_": "d9a25a0d-37f0-4ece-9e8b-ec16bc66517b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Equivalence_Expressions_description.md", "file_name": "Equivalence_Expressions_description.md", "file_type": "text/markdown", "file_size": 801, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd838098-9af5-409a-8c70-290aaf7280b5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Equivalence_Expressions_description.md", "file_name": "Equivalence_Expressions_description.md", "file_type": "text/markdown", "file_size": 801, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d31be76bd7adc886ccb48854f9a5a0de74a5b6c45d439e3a397fcbf11c0f6b8d", "class_name": "RelatedNodeInfo"}}, "text": "9.2. Equivalence Expressions (grammar) {sec-equivalence-expression}\n\nExamples:\n\n```dafny\nA\nA  B\nA  C ==> D  B \n```\n\nAn Equivalence Expression that contains one or more ``s is\na boolean expression and all the operands\nmust also be boolean expressions. In that case each ``\noperator tests for logical equality which is the same as\nordinary equality (but with a different precedence).\n\nSee Section 5.2.1.1 for an explanation of the\n`` operator as compared with the `==` operator.\n\nThe `` operator is commutative and associative: `A  B  C` and `(A  B)  C` and `A  (B  C)` and `C  B  A`\nare all equivalent and are all true iff an even number of operands are false.", "start_char_idx": 2, "end_char_idx": 661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5492a253-e954-4b74-9c9e-4b252b5f953e": {"__data__": {"id_": "5492a253-e954-4b74-9c9e-4b252b5f953e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d918163c-84f2-4162-8979-c5d09423384f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c89ee862176cb1d286285c2b4e6e379dd2767c3f94bd12595fc76559e91c4485", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f49ca8c-b920-47f7-baed-88ead3f83535", "node_type": "1", "metadata": {}, "hash": "eaa9438167cddad7f13518e490c8f58d0881d382e634041e4b7e450a7f47a9bd", "class_name": "RelatedNodeInfo"}}, "text": "8.19. Expect Statement (grammar) {sec-expect-statement}\n\nExamples:\n\n```dafny\nexpect i > 0;\nexpect i > 0, \"i is positive\";\n```\n\nThe `expect` statement states a boolean expression that is\n(a) assumed to be true by the verifier\nand (b) checked to be true\nat run-time. That is, the compiler inserts into the run-time executable a\ncheck that the given expression is true; if the expression is false, then\nthe execution of the program halts immediately. If a second argument is\ngiven, it may be a value of any type.\nThat value is converted to a string (just like the `print` statement)\nand the string is included\nin the message emitted by the program\nwhen it halts; otherwise a default message is emitted.\n\nBecause the expect expression and optional second argument are compiled, they cannot be ghost expressions.\n\nThe `expect` statement behaves like\n`assume` for the verifier, but also inserts a run-time check that the\nassumption is indeed correct (for the test cases used at run-time).\n\nHere are a few use-cases for the `expect` statement.\n\nA) To check the specifications of external methods.\n\nConsider an external method `Random` that takes a `nat` as input\nand returns a `nat` value that is less than the input.\nSuch a method could be specified as\n\n```dafny\nmethod {:extern} Random(n: nat) returns (r: nat)\n  ensures r < n\n```\nBut because there is no body for `Random` (only the external non-dafny implementation),\nit cannot be verified that `Random` actually satisfies this specification.\n\nTo mitigate this situation somewhat, we can define a wrapper function, `Random'`,\nthat calls `Random` but in which we can put some run-time checks:\n\n```dafny\nmethod {:extern} Random(n: nat) returns (r: nat)\n\nmethod Random'(n: nat) returns (r: nat)\n  ensures r < n\n{\n  r := Random(n);\n  expect r < n;\n}\n```\nHere we can verify that `Random'` satisfies its own specification,\nrelying on the unverified specification of `Random`.\nBut we are also checking at run-time that any input-output pairs for `Random`\nencountered during execution\ndo satisfy the specification,\nas they are checked by the `expect` statement.\n\nNote, in this example, two problems still remain.\nOne problem is that the out-parameter of the extern `Random` has type `nat`,\nbut there is no check that the value returned really is non-negative.\nIt would be better to declare the out-parameter of `Random` to be `int` and\nto include `0 <= r` in the condition checked by the `expect` statement in `Random'`.\nThe other problem is that `Random` surely will need `n` to be strictly positive.\nThis can be fixed by adding `requires n != 0` to `Random'` and `Random`.\n\nB) Run-time testing\n\nVerification and run-time testing are complementary\nand both have their role in assuring that software does what is intended.\nDafny can produce executables\nand these can be instrumented with unit tests.\nAnnotating a method with the `{:test}` attribute\nindicates to the compiler\nthat it should produce target code\nthat is correspondingly annotated to mark the method\nas a unit test (e.g., an XUnit test) in the target language.\nAlternatively, the `dafny test` command will produce a main method\nthat invokes all methods with the `{:test}` attribute, and hence does not\ndepend on any testing framework in the target language.\nWithin such methods one might use `expect` statements (as well as `print` statements)\nto insert checks that the target program is behaving as expected.\n\nC) Debugging\n\nWhile developing a new program, one work style uses proof attempts and runtime tests in combination.\nIf an assert statement does not prove, one might run the program with a corresponding expect statement\nto see if there are some conditions when the assert is not actually true. So one might have\npaired assert/expect statements:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nOnce the program is debugged, both statements can be removed.\nNote that it is important that the `assert` come before the `expect`, because\nby the verifier, the `expect` is interpreted as an `assume`, which would automatically make\na subsequent `assert` succeed.", "start_char_idx": 2, "end_char_idx": 4057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f49ca8c-b920-47f7-baed-88ead3f83535": {"__data__": {"id_": "4f49ca8c-b920-47f7-baed-88ead3f83535", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d918163c-84f2-4162-8979-c5d09423384f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c89ee862176cb1d286285c2b4e6e379dd2767c3f94bd12595fc76559e91c4485", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5492a253-e954-4b74-9c9e-4b252b5f953e", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c37d9a1d5251a7ed4fd4ad3fe988fa22b2f52137e2036d5b890be2de8eeb0b46", "class_name": "RelatedNodeInfo"}}, "text": "Within such methods one might use `expect` statements (as well as `print` statements)\nto insert checks that the target program is behaving as expected.\n\nC) Debugging\n\nWhile developing a new program, one work style uses proof attempts and runtime tests in combination.\nIf an assert statement does not prove, one might run the program with a corresponding expect statement\nto see if there are some conditions when the assert is not actually true. So one might have\npaired assert/expect statements:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nOnce the program is debugged, both statements can be removed.\nNote that it is important that the `assert` come before the `expect`, because\nby the verifier, the `expect` is interpreted as an `assume`, which would automatically make\na subsequent `assert` succeed.\n\nD) Compiler tests\n\nThe same approach might be taken to assure that compiled code is behaving at run-time consistently with the statically verified code,\none can again use paired assert/expect statements with the same expression:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nThe verifier will check that _P_ is always true at the given point in a program\n(at the `assert` statement).\n\nAt run-time, the compiler will insert checks that the same predicate,\nin the `expect` statement, is true.\nAny difference identifies a compiler bug.\nAgain the `expect` must be after the `assert`:\nif the `expect` is first,\nthen the verifier will interpret the `expect` like an `assume`,\nin which case the `assert` will be proved trivially\nand potential unsoundness will be hidden.\n\nUsing `...` as the argument of the statement is deprecated.", "start_char_idx": 3261, "end_char_idx": 4875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c72807dd-b189-45bb-a244-85accdc4bbcd": {"__data__": {"id_": "c72807dd-b189-45bb-a244-85accdc4bbcd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f584b482-9f4f-402a-acf6-e13f6a8ad0ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2574793fd629171f4a090de0fcd768d6a3a45a409a978406741666c4471c6a31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aeb43029-42fc-4583-9438-ac89bf9baaee", "node_type": "1", "metadata": {}, "hash": "99699782bdd338d935239ef67d4772c272ba9152fb530b85bcc6b2b07b53b6d9", "class_name": "RelatedNodeInfo"}}, "text": "4.5. Export Sets and Access Control (grammar) {sec-export-sets}\n\nExamples:\n\n```dafny\nexport E extends F reveals f,g provides g,h\nexport E reveals *\nexport reveals f,g provides g,h\nexport E\nexport E ... reveals f\n```\n\nIn some programming languages, keywords such as `public`, `private`, and `protected`\nare used to control access to (that is, visibility of) declared program entities.\nIn Dafny, modules and export sets provide that capability.\nModules combine declarations into logically related groups.\nExport sets then permit selectively exposing subsets of a module's declarations;\nanother module can import the export set appropriate to its needs.\nA user can define as many export sets as are needed to provide different\nkinds of access to the module's declarations.\nEach export set designates a list of names, which must be\nnames that are declared in the module (or in a refinement parent).\n\nBy default (in the absence of any export set declarations)\nall the names declared in a module are available outside the\nmodule using the `import` mechanism.\nAn _export set_ enables a module to disallow the\nuse of some declarations outside the module.\n\nAn export set has an optional name used to disambiguate\nin case of multiple export sets;\nIf specified, such names are used in `import` statements\nto designate which export set of a module is being imported.\nIf a module `M` has export sets `E1` and `E2`,\nwe can write ``import A = M`E1`` to create a module alias\n`A` that contains only the names in `E1`.\nOr we can write ``import A = M`{E1,E2}`` to import the union\nof names in `E1` and `E2` as module alias `A`.\nAs before, ``import M`E1`` is an abbreviation of ``import M = M`E1``.\n\nIf no export set is given in an import\nstatement, the default export set of the module is used.\n\n There are various\ndefaults that apply differently in different cases.\nThe following description is with respect to an example module `M`:\n\n_`M` has no export sets declared_. Then another module may simply `import Z = M`\nto obtain access to all of M's declarations.\n\n_`M` has one or more named export sets (e.g., `E`, `F`)_. Then another module can\nwrite ``import Z = M`E`` or ``import Z = M`{E,F}`` to obtain access to the\nnames that are listed in export set `E` or to the union of those in export sets\n`E` and `F`, respectively. If no export set has the same name as the module,\nthen an export set designator must be used: in that case you cannot write\nsimply ``import Z = M``.\n\n_`M` has an unnamed export set, along with other export sets (e.g., named `E`)_. The unnamed\nexport set is the default export set and implicitly has the same name as\nthe module. Because there is a default export set, another module may write\neither ``import Z = M`` or ``import Z = M`M`` to import the names in that\ndefault export set. You can also still use the other export sets with the\nexplicit designator: ``import Z = M`E``\n\n_`M` declares an export set with the same name as the module_. This is equivalent\nto declaring an export set without a name. ``import M`` and ``import M`M``\nperform the same function in either case; the export set with or without\nthe name of the module is the default export set for the module.\n\nNote that names of module aliases (declared by import statements) are\njust like other names in a module; they can be included or omitted from\nexport sets.\nNames brought into a module by _refinement_ are treated the same as\nlocally declared names and can be listed in export set declarations.\nHowever, names brought into a module by `import opened` (either into a module\nor a refinement parent of a module) may\nnot be further exported.", "start_char_idx": 2, "end_char_idx": 3622, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aeb43029-42fc-4583-9438-ac89bf9baaee": {"__data__": {"id_": "aeb43029-42fc-4583-9438-ac89bf9baaee", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f584b482-9f4f-402a-acf6-e13f6a8ad0ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2574793fd629171f4a090de0fcd768d6a3a45a409a978406741666c4471c6a31", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c72807dd-b189-45bb-a244-85accdc4bbcd", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8456ca63c9140f92ed1618f4e33907d103036af20748c13426bf9acf77504c64", "class_name": "RelatedNodeInfo"}}, "text": "You can also still use the other export sets with the\nexplicit designator: ``import Z = M`E``\n\n_`M` declares an export set with the same name as the module_. This is equivalent\nto declaring an export set without a name. ``import M`` and ``import M`M``\nperform the same function in either case; the export set with or without\nthe name of the module is the default export set for the module.\n\nNote that names of module aliases (declared by import statements) are\njust like other names in a module; they can be included or omitted from\nexport sets.\nNames brought into a module by _refinement_ are treated the same as\nlocally declared names and can be listed in export set declarations.\nHowever, names brought into a module by `import opened` (either into a module\nor a refinement parent of a module) may\nnot be further exported. For example,\n\n```dafny\nmodule A {\n  const a := 10\n  const z := 10\n}\nmodule B {\n  import opened Z = A // includes a, declares Z\n  const b := Z.a // OK\n}\nmodule C {\n  import opened B // includes b, Z, but not a\n  method m() {\n    //assert b == a; // error: a is not known\n    //assert b == B.a; // error: B.a is not valid\n    //assert b == A.a; // error: A is not known\n    assert b == Z.a; // OK: module Z is known and includes a\n  }\n}\n```\n\nHowever, in the above example,\n\n* if `A` has one export set `export Y reveals a`\nthen the import in module `B` is invalid because `A` has no default\nexport set;\n* if `A` has one export set `export Y reveals a` and `B` has ``import Z = A`Y``\nthen `B`'s import is OK. So is the use of `Z.a` in the assert because `B`\ndeclares `Z` and `C` brings in `Z` through the `import opened` and\n`Z` contains `a` by virtue of its declaration. (The alias `Z` is not able to\nhave export sets; all of its names are visible.)\n* if `A` has one export set `export provides z` then `A` does have a\ndefault export set, so the import in `B` is OK, but neither the use of `a`\nin `B` nor as `Z.a` in C would be valid, because `a` is not in `Z`.\n\nThe default export set is important in the resolution of qualified\nnames, as described in Section 4.8.\n\nThere are a few unusual cases to be noted:\n- an export set can be completely empty, as in `export Nothing`\n- an eponymous export set can be completely empty, as in `export`, which by default has the same name as the enclosing module; this is a way to make the module completely private\n- an export set declaration followed by an extreme predicate declaration looks like this:\n`export least predicate P() { true }`\nIn this case, the `least` (or `greatest`) is the identifier naming the export set.\nConsequently, `export least predicate Pnat { true }` is illegal because `[nat]` cannot be part of a non-extreme predicate.\nSo, it is not possible to declare an eponymous, empty export set by omitting the export id immediately prior to a declaration of an extreme predicate,\nbecause the `least` or `greatest` token is parsed as the export set identifier. The workaround for this situation is to \neither put the name of the module in explicitly as the export ID (not leaving it to the default) or reorder the declarations.\n- To avoid confusion, the code\n\n```dafny\nmodule M {\n  export\n  least predicate P() { true }\n}\n```\nprovokes a warning telling the user that the `least` goes with the `export`.", "start_char_idx": 2797, "end_char_idx": 6080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40f04d37-1e61-471c-b3e9-3a6134ea2041": {"__data__": {"id_": "40f04d37-1e61-471c-b3e9-3a6134ea2041", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expression_Lists_description.md", "file_name": "Expression_Lists_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fca7e88-5296-4f43-b834-0c876023e317", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expression_Lists_description.md", "file_name": "Expression_Lists_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c0eb6979d94b5d66cb46801ca1f25c083f6e6dc23423311087347c7a7383912e", "class_name": "RelatedNodeInfo"}}, "text": "9.35. Expression Lists (grammar) {sec-expression-list}\n\nExamples:\n\n```dafny\n                // empty list\na\na, b\n```\n\nAn expression list is a comma-separated sequence of expressions, used, for example,\nas actual araguments in a method or function call or in parallel assignment.", "start_char_idx": 2, "end_char_idx": 280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f3b6a35-28d0-47b1-a322-bdd051ea6b82": {"__data__": {"id_": "2f3b6a35-28d0-47b1-a322-bdd051ea6b82", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60ea2c42-796c-4087-97da-d7f98f6516b4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6589cbcb2d78bd161f8bac675e93bcfa89c5eca73d1bdba1d72f46f14cc9590f", "class_name": "RelatedNodeInfo"}}, "text": "9. Expressions {sec-expressions}\n\nDafny expressions come in three flavors.\n- The bulk of expressions have no side-effects and can be used within\nmethods, functions, and specifications, and in either compiled or ghost code.\n- Some expressions, called right-hand-side expressions,\ndo have side-effects and may only be used in specific syntactic locations,\nsuch as the right-hand-side of update (assignment) statements; \nobject allocation and method calls are two typical examples of right-hand-side expressions. Note that method calls are syntactically\nindistinguishable from function calls; both are Expressions (PrimaryExpressions\nwith an ArgumentList suffix). However, method calls are semantically permitted\nonly in right-hand-side expression locations.\n- Some expressions are allowed only in specifications and other ghost code,\nas listed here.\n\nThe grammar of Dafny expressions follows a hierarchy that\nreflects the precedence of Dafny operators. The following\ntable shows the Dafny operators and their precedence\nin order of increasing binding power.\n\n operator                 | precedence | description\n--------------------------|:----------:|-----------------------\n `;`                      | 0 | That is LemmaCall; Expression\n--------------------------|------------------------------------\n ``                   | 1 | equivalence (if and only if)\n--------------------------|------------------------------------\n `==>`                    | 2 | implication (implies)\n `<==`                    | 2 | reverse implication (follows from)\n--------------------------|------------------------------------\n `&&`, `&`                | 3 | conjunction (and)\n `||`, `|`                | 3 | disjunction (or)\n--------------------------|------------------------------------\n `==`                     | 4 | equality\n `==#k]`                 | 4 | [prefix equality (coinductive)\n `!=`                     | 4 | disequality\n `!=#k]`                 | 4 | [prefix disequality (coinductive)\n `<`                      | 4 | less than\n `<=`                     | 4 | at most\n `>=`                     | 4 | at least\n `>`                      | 4 | greater than\n `in`                     | 4 | collection membership\n `!in`                    | 4 | collection non-membership\n `!!`                     | 4 | disjointness\n--------------------------|------------------------------------\n `<<`                     | 5 | left-shift\n `>>`                     | 5 | right-shift\n--------------------------|------------------------------------\n `+`                      | 6 | addition (plus)\n `-`                      | 6 | subtraction (minus)\n--------------------------|------------------------------------\n `*`                      | 7 | multiplication (times)\n `/`                      | 7 | division (divided by)\n `%`                      | 7 | modulus (mod)\n--------------------------|------------------------------------\n `|`                      | 8 | bit-wise or\n `&`                      | 8 | bit-wise and\n `^`                      | 8 | bit-wise exclusive-or (not equal)\n--------------------------|------------------------------------\n `as` operation           | 9 | type conversion\n `is` operation           | 9 | type test\n--------------------------|------------------------------------\n `-`                      | 10 | arithmetic negation (unary minus)\n `!`                      | 10 | logical negation, bit-wise complement\n--------------------------|------------------------------------\n Primary Expressions      | 11 |", "start_char_idx": 2, "end_char_idx": 3513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f41f21be-309d-49db-ac28-860eb4231de6": {"__data__": {"id_": "f41f21be-309d-49db-ac28-860eb4231de6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f38ab062-5919-497a-b970-88809954e5c0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "064300e3ac07e4fd47ef8cf2b3f6d1694d63f5ccd38079f822c0658d8a7fa22e", "class_name": "RelatedNodeInfo"}}, "text": "9.1. Lemma-call expressions (grammar) {sec-top-level-expression}\n\nExamples:\n\n```dafny\nvar a := L(a,b); a*b\n```\n\nThis expression has the form `S; E`.\nThe type of the expression is the type of `E`.\n`S` must be a lemma call (though the grammar appears more lenient).\nThe lemma introduces a fact necessary to establish properties of `E`.\n\nSometimes an expression will fail unless some relevant fact is known.\nIn the following example the `F_Fails` function fails to verify\nbecause the `Fact(n)` divisor may be zero. But preceding\nthe expression by a lemma that ensures that the denominator\nis not zero allows function `F_Succeeds` to succeed.\n\n```dafny\nfunction Fact(n: nat): nat\n{\n  if n == 0 then 1 else n * Fact(n-1)\n}\n\nlemma L(n: nat)\n  ensures 1 <= Fact(n)\n{\n}\n\nfunction F_Fails(n: nat): int\n{\n  50 / Fact(n)  // error: possible division by zero\n}\n\nfunction F_Succeeds(n: nat): int\n{\n  L(n); // note, this is a lemma call in an expression\n  50 / Fact(n)\n}\n```\n\nOne restriction is that a lemma call in this form is permitted only in situations in which the expression itself is not terminated by a semicolon.\n\nA second restriction is that `E` is not always permitted to contain lambda expressions, such \nas in the expressions that are the body of a lambda expression itself, function, method and iterator specifications,\nand if and while statements with guarded alternatives.\n\nA third restriction is that `E` is not always permitted to contain a bit-wise or (`|`) operator, \nbecause it would be ambiguous with the vertical bar used in comprehension expressions.\n\nNote that the effect of the lemma call only extends to the succeeding expression `E` (which may be another `;` expression).", "start_char_idx": 2, "end_char_idx": 1688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9176d00-3565-4a2e-a0c4-d301d8c3101f": {"__data__": {"id_": "b9176d00-3565-4a2e-a0c4-d301d8c3101f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f94c5fa-595b-4c02-9d66-136876f1c1dc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "149df65251ba628b717854d37f4306aed9a78a667b09876c483cfa5350e8a3ba", "class_name": "RelatedNodeInfo"}}, "text": "9.2. Equivalence Expressions (grammar) {sec-equivalence-expression}\n\nExamples:\n\n```dafny\nA\nA  B\nA  C ==> D  B \n```\n\nAn Equivalence Expression that contains one or more ``s is\na boolean expression and all the operands\nmust also be boolean expressions. In that case each ``\noperator tests for logical equality which is the same as\nordinary equality (but with a different precedence).\n\nSee Section 5.2.1.1 for an explanation of the\n`` operator as compared with the `==` operator.\n\nThe `` operator is commutative and associative: `A  B  C` and `(A  B)  C` and `A  (B  C)` and `C  B  A`\nare all equivalent and are all true iff an even number of operands are false.", "start_char_idx": 2, "end_char_idx": 661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d84adc8e-fa68-4505-8564-3e96dd49188f": {"__data__": {"id_": "d84adc8e-fa68-4505-8564-3e96dd49188f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a550727-a7e2-42b4-a226-b8ac59004429", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "92021dab056eb422cf8ca57a001c65fc6ffde596d373850902c1147ebcd1daad", "class_name": "RelatedNodeInfo"}}, "text": "9.3. Implies or Explies Expressions (grammar) {sec-implies-expression}\n\nExamples:\n\n```dafny\nA ==> B\nA ==> B ==> C ==> D\nB <== A\n```\n\nSee Section 5.2.1.3 for an explanation\nof the `==>` and `<==` operators.", "start_char_idx": 2, "end_char_idx": 207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b00ce97e-27b2-404c-8f40-d3f31c71d227": {"__data__": {"id_": "b00ce97e-27b2-404c-8f40-d3f31c71d227", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0dc77923-7625-4a11-a9e6-f2dac5886b20", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0186eff688973d7ae57138d59cf8591d086bea880557c899a41c09b943219994", "class_name": "RelatedNodeInfo"}}, "text": "9.4. Logical Expressions (grammar) {sec-logical-expression}\n\nExamples:\n\n```dafny\nA && B\nA || B\n&& A && B && C\n```\n\nNote that the Dafny grammar allows a conjunction or disjunction to be\n_prefixed_ with `&&` or `||` respectively. This form simply allows a\nparallel structure to be written:\n\n```dafny\nmethod m(x: object?, y:object?, z: object?) {\n  var b: bool :=\n    && x != null\n    && y != null\n    && z != null\n    ;\n}\n```\nThis is purely a syntactic convenience allowing easy edits such as reordering\nlines or commenting out lines without having to check that the infix\noperators are always where they should be.\n\nNote also that `&&` and `||` cannot be mixed without using parentheses:\n`A && B || C` is not permitted. Write `(A && B) || C` or `A && (B || C)` instead.\n\nSee Section 5.2.1.2 for an explanation\nof the `&&` and `||` operators.", "start_char_idx": 2, "end_char_idx": 842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "321ee683-08f0-4634-82a1-aee16a4d81d9": {"__data__": {"id_": "321ee683-08f0-4634-82a1-aee16a4d81d9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afb7ded0-00c6-499b-a1a6-ded9bf8bfcbc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "738b889eef9e9519d2611e5b6d18a8f8b5cf4dad8553edd743786e17b67b91e0", "class_name": "RelatedNodeInfo"}}, "text": "9.5. Relational Expressions (grammar) {sec-relational-expression}\n\nExamples:\n\n```dafny\nx == y\nx != y\nx < y\nx >= y\nx in y\nx ! in y\nx !! y\nx ==#[k] y\n```\n\nThe relation expressions compare two or more terms.\nAs explained in the section about basic types, `==`, `!=`, ```, `=`\nare _chaining_.\n\nThe `in` and `!in` operators apply to collection types as explained in\nSection 5.5 and represent membership or non-membership\nrespectively.\n\nThe `!!` represents disjointness for sets and multisets as explained in\nSection 5.5.1 and Section 5.5.2.\n\n`x ==#[k] y` is the prefix equality operator that compares\ncoinductive values for equality to a nesting level of k, as\nexplained in the section about co-equality.", "start_char_idx": 2, "end_char_idx": 701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2626ec8e-50a9-464d-9ec1-c8e415db391f": {"__data__": {"id_": "2626ec8e-50a9-464d-9ec1-c8e415db391f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d988a062-9cc3-45c5-9034-cf08bdb6c13c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9f97edc05e1cccd0231a84aa7f9aa2b7ac89827ac1dc0b3f541332e5ced0311d", "class_name": "RelatedNodeInfo"}}, "text": "9.6. Bit Shifts (grammar) {sec-bit-shift-expression}\n\nExamples:\n\n```dafny\nk << 5\nj >> i\n```\n\nThese operators are the left and right shift operators for bit-vector values.\nThey take a bit-vector value and an `int`, shifting the bits by the given\namount; the result has the same bit-vector type as the LHS.\nFor the expression to be well-defined, the RHS value must be in the range 0 to the number of\nbits in the bit-vector type, inclusive.\n\nThe operations are left-associative: `a > j` is `(a > j`.", "start_char_idx": 2, "end_char_idx": 498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c5562f3-4752-41a6-9c4d-5ed45f5b1f03": {"__data__": {"id_": "9c5562f3-4752-41a6-9c4d-5ed45f5b1f03", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd5e876b-31bf-445e-8fc7-c7789ddddc5e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cb3bb5f4fab49e43db2392f67295b30ebd5c269f8c353a51b2c3543b7e4c51c0", "class_name": "RelatedNodeInfo"}}, "text": "9.7. Terms (grammar) {sec-addition-expression}\n\nExamples:\n\n```dafny\nx + y - z\n```\n\n`Terms` combine `Factors` by adding or subtracting.\nAddition has these meanings for different types:\n\n* arithmetic addition for numeric types (Section 5.2.2])\n* union for sets and multisets (Section 5.5.1 and Section 5.5.2)\n* concatenation for sequences (Section 5.5.3)\n* map merging for maps (Section 5.5.4)\n\nSubtraction is \n\n* arithmetic subtraction for numeric types\n* set or multiset subtraction for sets and multisets\n* domain subtraction for maps.\n\nAll addition operations are associative. Arithmetic addition and union are commutative. Subtraction is neither; it groups to the left as expected:\n`x - y -z` is `(x - y) -z`.", "start_char_idx": 2, "end_char_idx": 714, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97904b3e-b1ce-429a-8b6e-43bd1e6cce90": {"__data__": {"id_": "97904b3e-b1ce-429a-8b6e-43bd1e6cce90", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e0818a2-f243-464f-93c9-09a9acf4ceec", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c101efb469987f38bd23de1a28ac465037f3d12b52f895fe40c1db04d28c21a4", "class_name": "RelatedNodeInfo"}}, "text": "9.8. Factors (grammar) {sec-multiplication-expression}\n\nExamples:\n\n```dafny\nx * y\nx / y\nx % y\n```\n\nA ``Factor`` combines expressions using multiplication,\ndivision, or modulus. For numeric types these are explained in\nSection 5.2.2.\nAs explained there, `/` and `%` on `int` values represent _Euclidean_\ninteger division and modulus and not the typical C-like programming\nlanguage operations.\n\nOnly `*` has a non-numeric application. It represents set or multiset\nintersection as explained in Section 5.5.1 and Section 5.5.2.\n\n`*` is commutative and associative; `/` and `%` are neither but do group to the left.", "start_char_idx": 2, "end_char_idx": 613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6093198-8014-4b6b-80bd-479baba3dc13": {"__data__": {"id_": "c6093198-8014-4b6b-80bd-479baba3dc13", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d5561fb-e7d3-43db-a8ad-da149e29f3ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8aec21c1b3caa5b75fd25f2ba681918875b63d269af2e0eeae707feedc5d35c8", "class_name": "RelatedNodeInfo"}}, "text": "9.9. Bit-vector Operations (grammar) {sec-bitvector-expression}\n\nExamples:\n\n```dafny\nx | y\nx & y\nx ^ y\n```\n\n\nThese operations take two bit-vector values of the same type, returning\na value of the same type. The operations perform bit-wise _or_ (`|`),\n_and_ (`&`), and _exclusive-or_ (`^`). To perform bit-wise equality, use\n`^` and `!` (unary complement) together. (`==` is boolean equality of the whole bit-vector.)\n\nThese operations are associative and commutative but do not associate with each other.\nUse parentheses: `a & b | c` is illegal; use `(a & b) | c` or `a & (b | c)`\ninstead.\n\nBit-vector operations are not allowed in some contexts.\nThe `|` symbol is used both for bit-wise or and as the delimiter in a\ncardinality expression: an ambiguity arises if\nthe expression E in `| E |` contains a `|`. This situation is easily\nremedied: just enclose E in parentheses, as in `|(E)|`.\nThe only type-correct way this can happen is if the expression is\na comprehension, as in `| set x: int :: x | 0x101 |`.", "start_char_idx": 2, "end_char_idx": 1010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b859fdf-c613-4a5d-becb-97f2baa5bfdf": {"__data__": {"id_": "3b859fdf-c613-4a5d-becb-97f2baa5bfdf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4801b7df-eadf-4362-8b38-fd77949fa7ef", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dc5fad50ac4466f18190b5f795970d392f15c81c192506a4c1c1d5be935fac23", "class_name": "RelatedNodeInfo"}}, "text": "9.10. As (Conversion) and Is (type test) Expressions (grammar) {sec-as-is-expression}\n\nExamples:\n\n```dafny\ne as MyClass\ni as bv8\ne is MyClass\n```\n\nThe `as` expression converts the given LHS to the type stated on the RHS,\nwith the result being of the given type. The following combinations\nof conversions are permitted:\n\n* Any type to itself\n* Any int or real based numeric type or bit-vector type to another int or real based numeric type or bit-vector type\n* Any base type to a subset or newtype with that base\n* Any subset or newtype to its base type or a subset or newtype of the same base\n* Any type to a subset or newtype that has the type as its base\n* Any trait to a class or trait that extends (perhaps recursively) that trait\n* Any class or trait to a trait extended by that class or trait\n\nSome of the conversions above are already implicitly allowed, without the\n`as` operation, such as from a subset type to its base. In any case, it\nmust be able to be proved that the value of the given expression is a\nlegal value of the given type. For example, `5 as MyType` is permitted (by the verifier) only if `5` is a legitimate value of`MyType` (which must be a numeric type).\n\nThe `as` operation is like a grammatical suffix or postfix operation.\nHowever, note that the unary operations bind more tightly than does `as`.\nThat is `- 5 as nat` is `(- 5) as nat` (which fails), whereas `a * b as nat`\nis `a * (b as nat)`. On the other hand, `- a[4]` is `- (a[4])`.\n\nThe `is` expression is grammatically similar to the `as` expression, with the\nsame binding power. The `is` expression is a type test that\nreturns a `bool` value indicating whether the LHS expression is a legal\nvalue of the RHS type. The expression can be used to check\nwhether a trait value is of a particular class type. That is, the expression\nin effect checks the allocated type of a trait.\n\nThe RHS type of an `is` expression can always be a supertype of the type of the LHS\nexpression, in which case the result is trivally true. \nOther than that, the RHS must be based on a reference type and the\nLHS expression must be assignable to the RHS type. Furthermore, in order to be\ncompilable, the RHS type must not be a subset type other than a non-null reference\ntype, and the type parameters of the RHS must be uniquely determined from the\ntype parameters of the LHS type. The last restriction is designed to make it\npossible to perform type tests without inspecting type parameters at run time.\nFor example, consider the following types:\n\n\n```dafny\ntrait A { }\ntrait B { }\nclass C extends B { }\nclass D extends B> { }\nclass E extends B { }\nclass F extends A { }\n```\n\nA LHS expression of type `B>` can be used in a type test where the RHS is\n`B>`, `C>`, or `D`, and a LHS expression of type `B`\ncan be used in a type test where the RHS is `B`, `C`, or `E`. Those\nare always allowed in compiled (and ghost) contexts.\nFor an expression `a` of type `A`, the expression `a is F` is a ghost expression;\nit can be used in ghost contexts, but not in compiled contexts.\n\nFor an expression `e` and type `t`, `e is t` is the condition determining whether\n`e as t` is well-defined (but, as noted above, is not always a legal expression).\n\n*The repertoire of types allowed in `is` tests may be expanded in the future.*", "start_char_idx": 2, "end_char_idx": 3279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a0fbc80-209b-4944-a7bd-f9530a492411": {"__data__": {"id_": "9a0fbc80-209b-4944-a7bd-f9530a492411", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f6e07cb-1b9d-4e9b-8665-1a10aa497e6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b73814af698f13044d9cdbfae761f1023f1c64ae0b7d8234dc52c250fa42c17e", "class_name": "RelatedNodeInfo"}}, "text": "9.11. Unary Expressions (grammar) {sec-unary-expression}\n\nExamples:\n\n```dafny\n-x\n- - x\n! x\n```\n\nA unary expression applies \n\n- logical complement (`!` -- Section 5.2.1),\n- bit-wise complement (`!` -- Section 5.2.3),\n- numeric negation (`-` -- Section 5.2.2), or\n- bit-vector negation (`-` -- Section 5.2.3)\n\nto its operand.", "start_char_idx": 2, "end_char_idx": 325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1df14cb-d975-406d-abf4-10edf62bb543": {"__data__": {"id_": "f1df14cb-d975-406d-abf4-10edf62bb543", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf31067d-9470-41b6-9815-3a875afcec8e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7549c94644f6fde980415fe7b9249310f54f061b2e57c94004c6a463cb77e28b", "class_name": "RelatedNodeInfo"}}, "text": "9.12. Primary Expressions (grammar) {sec-primary-expression}\n\nExamples:\n\n```dafny\ntrue\n34\nM(i,j)\nb.c.d\n[1,2,3]\n{2,3,4}\nmap[1 => 2, 3 => 4]\n(i:int,j:int)=>i+j\nif b then 4 else 5\n```\n\nAfter descending through all the binary and unary operators we arrive at\nthe primary expressions, which are explained in subsequent sections. \nA number of these can be followed by 0 or more suffixes\nto select a component of the value.", "start_char_idx": 2, "end_char_idx": 418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8db1eb7b-e656-42f0-b0a1-edcf7bbc54be": {"__data__": {"id_": "8db1eb7b-e656-42f0-b0a1-edcf7bbc54be", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebe5086c-f442-4c1c-bc90-0aadea8e4832", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0b16f1e7d24c95fc35473dd3747e36de0311433f8c18378941f88621b04f568a", "class_name": "RelatedNodeInfo"}}, "text": "9.13. Lambda expressions (grammar) {sec-lambda-expression}\n\nExamples:\n\n```dafny\nx => -x\n_ => true\n(x,y) => x*y\n(x:int, b:bool) => if b then x else -x\nx requires x > 0 => x-1\n```\n\nSee Section 7.4 for a description of specifications for lambda expressions.\n\nIn addition to named functions, Dafny supports expressions that define\nfunctions.  These are called _lambda (expression)s_ (some languages\nknow them as _anonymous functions_).  A lambda expression has the\nform:\n\n```dafny\n( _params_ ) _specification_ => _body_\n```\nwhere _params_ is a comma-delimited list of parameter\ndeclarations, each of which has the form `x` or `x: T`.  The type `T`\nof a parameter can be omitted when it can be inferred.  If the\nidentifier `x` is not needed, it can be replaced by `_`.  If\n_params_ consists of a single parameter `x` (or `_`) without an\nexplicit type, then the parentheses can be dropped; for example, the\nfunction that returns the successor of a given integer can be written\nas the following lambda expression:\n\n```dafny\nx => x + 1\n```\n\nThe _specification_ is a list of clauses `requires E` or\n`reads W`, where `E` is a boolean expression and `W` is a frame\nexpression.\n\n_body_ is an expression that defines the function's return\nvalue.  The body must be well-formed for all possible values of the\nparameters that satisfy the precondition (just like the bodies of\nnamed functions and methods).  In some cases, this means it is\nnecessary to write explicit `requires` and `reads` clauses.  For\nexample, the lambda expression\n\n```dafny\nx requires x != 0 => 100 / x\n```\nwould not be well-formed if the `requires` clause were omitted,\nbecause of the possibility of division-by-zero.\n\nIn settings where functions cannot be partial and there are no\nrestrictions on reading the heap, the _eta expansion_ of a function\n`F: T -> U` (that is, the wrapping of `F` inside a lambda expression\nin such a way that the lambda expression is equivalent to `F`) would\nbe written `x => F(x)`.  In Dafny, eta expansion must also account for\nthe precondition and reads set of the function, so the eta expansion\nof `F` looks like:\n\n```dafny\nx requires F.requires(x) reads F.reads(x) => F(x)\n```", "start_char_idx": 2, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca3a1fee-3e6a-4313-8349-60e6ce97b134": {"__data__": {"id_": "ca3a1fee-3e6a-4313-8349-60e6ce97b134", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73aa0fc9-d0ab-47b6-9930-16e9081a56d2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "560b70dd8ee4901576afa2a0d32c914d197477bf9ddea39561217395e256bd97", "class_name": "RelatedNodeInfo"}}, "text": "9.14. Left-Hand-Side Expressions (grammar) {sec-lhs-expression}\n\nExamples:\n\n```dafny\nx\na[k]\nLibraryModule.F().x\nold(o.f).x\n```\n\nA left-hand-side expression is only used on the left hand\nside of an Update statement\nor an Update with Failure Statement.\n\nAn LHS can be\n\n- a simple identifier: `k`\n- an expression with a dot suffix: `this.x`, `f(k).y`\n- an expression with an array selection: `a[k]`, `f(a8)[6]`", "start_char_idx": 2, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "377334b3-d4c7-4b61-a604-d4e9ec66a8e9": {"__data__": {"id_": "377334b3-d4c7-4b61-a604-d4e9ec66a8e9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d1b669f-bc33-416f-8fd5-76e7aac65a56", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "07c5544e4d3873c60495f387badd0784f41c26fb906e8debdeb0aad0aafae747", "class_name": "RelatedNodeInfo"}}, "text": "9.15. Right-Hand-Side Expressions (grammar) {sec-rhs-expression}\n\nExamples: \n\n```dafny\nnew int[6]\nnew MyClass\nnew MyClass(x,y,z)\nx+y+z\n*\n```\n\nA Right-Hand-Side expression is an expression-like construct that may have \nside-effects. Consequently such expressions\n can only be used within certain statements\nwithin methods, and not as general expressions or within functions or specifications.\n\nAn RHS is either an array allocation, an object allocation,\na havoc right-hand-side, a method call, or a simple expression, optionally followed\nby one or more attributes.\n\nRight-hand-side expressions (that are not just regular expressions) appear in the following constructs:\n\n- return statements,\n- yield statements,\n- update statements,\n- update-with-failure statements, or\n- variable declaration statements.\n\nThese are the only contexts in which arrays or objects may be\nallocated or in which havoc may be stipulated.", "start_char_idx": 2, "end_char_idx": 915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9185816a-0f9a-4b10-aa66-40665608b35d": {"__data__": {"id_": "9185816a-0f9a-4b10-aa66-40665608b35d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6c18d11-f556-479d-b0f7-dece37847285", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1ef10c5417c2781bb8f40e00198675146bfb83f4a48ddd32dd8f561d3d1dc072", "class_name": "RelatedNodeInfo"}}, "text": "9.16. Array Allocation (grammar) {sec-array-allocation}\n\nExamples:\n\n```dafny\nnew int[5,6]\nnew int[5][2,3,5,7,11]\nnew int[][2,3,5,7,11]\nnew int5\nnew int2,3 => i*j)\n```\n\nThis right-hand-side expression allocates a new single or multi-dimensional array (cf. Section 5.10).\nThe initialization portion is optional. One form is an\nexplicit list of values, in which case the dimension is optional:\n\n```dafny\nvar a := new int[5];\nvar b := new int[5][2,3,5,7,11];\nvar c := new int[][2,3,5,7,11];\nvar d := new int[3][4,5,6,7]; // error\n```\nThe comprehension form requires a dimension and uses a function of\ntype `nat -> T` where `T` is the array element type:\n\n```dafny\nvar a := new int5;\n```\n\nTo allocate a multi-dimensional array, simply give the sizes of\neach dimension. For example,\n\n```dafny\nvar m := new real[640, 480];\n```\nallocates a 640-by-480 two-dimensional array of `real`s. The initialization\nportion cannot give a display of elements like in the one-dimensional\ncase, but it can use an initialization function. A function used to initialize\na n-dimensional array requires a function from n `nat`s to a `T`, where `T`\nis the element type of the array. Here is an example:\n\n```dafny\nvar diag := new int30, 30 => if i == j then 1 else 0);\n```\n\nArray allocation is permitted in ghost contexts. If any expression\nused to specify a dimension or initialization value is ghost, then the\n`new` allocation can only be used in ghost contexts. Because the\nelements of an array are non-ghost, an array allocated in a ghost\ncontext in effect cannot be changed after initialization.", "start_char_idx": 2, "end_char_idx": 1573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6885c31-23f5-46fd-a900-1dad88bcb328": {"__data__": {"id_": "a6885c31-23f5-46fd-a900-1dad88bcb328", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "548368f8-6d86-4734-a156-70100ad0f5d7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a9a6bae924d91e83550cd15edc001a3f7ac4484a30c955ad9ca7116ec8366599", "class_name": "RelatedNodeInfo"}}, "text": "9.17. Object Allocation (grammar) {sec-object-allocation}\n\nExamples:\n\n```dafny\nnew MyClass\nnew MyClass.Init\nnew MyClass.Init(1,2,3)\n```\n\nThis right-hand-side expression \nallocates a new object of a class type as explained\nin section Class Types.", "start_char_idx": 2, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1554b803-f305-4c34-ab01-a6c30ab2b714": {"__data__": {"id_": "1554b803-f305-4c34-ab01-a6c30ab2b714", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1814515f-8bcd-4920-b294-9fd6e6c2fd3d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "38f74c2deec568608ca03136be63ef05f8c87fc4f62231458bea2c8c174cd05d", "class_name": "RelatedNodeInfo"}}, "text": "9.18. Havoc Right-Hand-Side (grammar) {sec-havoc-expression}\n\nExamples:\n\n```dafny\n*\n```\nA havoc right-hand-side is just a `*` character.\nIt produces an arbitrary value of its associated\ntype. The \"assign-such-that\"\noperator (`:|`) can be used to obtain a more constrained arbitrary value. \nSee Section 8.5.", "start_char_idx": 2, "end_char_idx": 308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7219080-a85d-4528-bccc-7ddfb53d099f": {"__data__": {"id_": "b7219080-a85d-4528-bccc-7ddfb53d099f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c0dc2b2-19c9-4cd7-b818-0d4a80732e4e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "969f533017a8818d7079b9c27ae1450ecd5b928928b581ac52e9f165484dd2fa", "class_name": "RelatedNodeInfo"}}, "text": "9.19. Constant Or Atomic Expressions (grammar) {sec-atomic-expression}\n\nExamples:\n\n```dafny\nthis\nnull\n5\n5.5\ntrue\n'a'\n\"dafny\"\n( e )\n| s |\nold(x)\nallocated(x)\nunchanged(x)\nfresh(e)\nassigned(x)\n```\n\nThese expressions are never l-values. They include\n\n- literal expressions\n- parenthesized expressions\n- `this` expressions\n- fresh expressions\n- allocated expressions\n- unchanged expressions\n- old expressions\n- cardinality expressions\n- assigned expressions", "start_char_idx": 2, "end_char_idx": 455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c080fbb6-7994-4711-ba2b-eb197b4625d6": {"__data__": {"id_": "c080fbb6-7994-4711-ba2b-eb197b4625d6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55bf9020-47ad-4353-94be-b924faf49ab0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a3d707487033361cf6ab1ef524d166ebd36625539c66a6b0873b46080cbe941a", "class_name": "RelatedNodeInfo"}}, "text": "9.20. Literal Expressions (grammar} {sec-literal-expression}\n\nExamples:\n\n```dafny\n5\n5.5\ntrue\n'a'\n\"dafny\"\n```\n\nA literal expression is a null object reference or a boolean,\ninteger, real, character or string literal.", "start_char_idx": 2, "end_char_idx": 217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6971a50-5080-4c40-ba3f-097585384bd9": {"__data__": {"id_": "a6971a50-5080-4c40-ba3f-097585384bd9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ffcde50-a660-42f1-9cfe-2fa9f8854e9c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b94f4de00c4d4df485d945919dd64a60d3e27147a26a519203bafa5567589f29", "class_name": "RelatedNodeInfo"}}, "text": "9.21. `this` Expression (grammar) {sec-this-expression}\n\nExamples:\n\n```dafny\nthis\n```\n\nThe `this` token denotes the current object in the context of \na constructor, instance method, or instance function.", "start_char_idx": 2, "end_char_idx": 205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6af89bb-5f46-4be0-9b7f-775bd6c460f5": {"__data__": {"id_": "f6af89bb-5f46-4be0-9b7f-775bd6c460f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18e60c67576c8970cb05be74766fec9837d5d88a136344b46c8a56ddc9e8b897", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6", "node_type": "1", "metadata": {}, "hash": "e50146cdfd0f0e5760b0fc4b3b890a3e8daefe55dae29816e83d1f2aaba55a54", "class_name": "RelatedNodeInfo"}}, "text": "9.22. Old and Old@ Expressions (grammar) {sec-old-expression}\n\nExamples:\n\n```dafny\nold(c)\nold@L(c)\n```\n\nAn _old expression_ is used in postconditions or in the body of a method\nor in the body or specification of any two-state function or two-state lemma;\nan _old_ expression with a label is used only in the body of a method at a point\nwhere the label dominates its use in the expression.\n\n`old(e)` evaluates\nthe argument using the value of the heap on entry to the method;\n`old@ident(e)` evaluates the argument using the value of the heap at the\ngiven statement label.\n\nNote that **old** and **old@** only affect heap dereferences,\nlike `o.f` and `a[i]`.\nIn particular, neither form has any effect on the value returned for local\nvariables or out-parameters (as they are not on the heap).[^Old]\nIf the value of an entire expression at a\nparticular point in the method body is needed later on in the method body,\nthe clearest means is to declare a ghost variable, initializing it to the\nexpression in question.\nIf the argument of `old` is a local variable or out-parameter. Dafny issues a warning.\n\n[^Old]: The semantics of `old` in Dafny differs from similar constructs in other specification languages like ACSL or JML.\n\nThe argument of an `old` expression may not contain nested `old`,\n`fresh`,\nor `unchanged` expressions,\nnor two-state functions or two-state lemmas.\n\nHere are some explanatory examples. All `assert` statements verify to be true.", "start_char_idx": 2, "end_char_idx": 1452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6": {"__data__": {"id_": "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18e60c67576c8970cb05be74766fec9837d5d88a136344b46c8a56ddc9e8b897", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6af89bb-5f46-4be0-9b7f-775bd6c460f5", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "07c60b5c92b687af3ab3ebe3e70d0573f0eeefe098135df190e77f80620280fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "313f3963-f4df-48f9-b8d2-0a394602dae5", "node_type": "1", "metadata": {}, "hash": "d7b90a2ffe8c3eb844b9bcca4a54a28ca76d0277fd65e6e963d4b9c581379e84", "class_name": "RelatedNodeInfo"}}, "text": "In particular, neither form has any effect on the value returned for local\nvariables or out-parameters (as they are not on the heap).[^Old]\nIf the value of an entire expression at a\nparticular point in the method body is needed later on in the method body,\nthe clearest means is to declare a ghost variable, initializing it to the\nexpression in question.\nIf the argument of `old` is a local variable or out-parameter. Dafny issues a warning.\n\n[^Old]: The semantics of `old` in Dafny differs from similar constructs in other specification languages like ACSL or JML.\n\nThe argument of an `old` expression may not contain nested `old`,\n`fresh`,\nor `unchanged` expressions,\nnor two-state functions or two-state lemmas.\n\nHere are some explanatory examples. All `assert` statements verify to be true.\n\n```dafny\nclass A {\n\n  var value: int\n\n  method m(i: int)\n    requires i == 6\n    requires value == 42\n    modifies this\n  {\n    var j: int := 17;\n    value := 43;\n    label L:\n    j := 18;\n    value := 44;\n    label M:\n    assert old(i) == 6; // i is local, but can't be changed anyway\n    assert old(j) == 18; // j is local and not affected by old\n    assert old@L(j) == 18; // j is local and not affected by old\n    assert old(value) == 42;\n    assert old@L(value) == 43;\n    assert old@M(value) == 44 && this.value == 44;\n    // value is this.value; 'this' is the same\n    // same reference in current and pre state but the\n    // values stored in the heap as its fields are different;\n    // '.value' evaluates to 42 in the pre-state, 43 at L,\n    // and 44 in the current state\n  }\n}\n```\n\n```dafny\nclass A {\n  var value: int\n  constructor ()\n     ensures value == 10\n  {\n     value := 10;\n  }\n}\n\nclass B {\n   var a: A\n   constructor () { a := new A(); }\n\n   method m()\n     requires a.value == 11\n     modifies this, this.a\n   {\n     label L:\n     a.value := 12;\n     label M:\n     a := new A(); // Line X\n     label N:\n     a.value := 20;\n     label P:\n\n     assert old(a.value) == 11;\n     assert old(a).value == 12; // this.a is from pre-state,\n                                // but .value in current state\n     assert old@L(a.value) == 11;\n     assert old@L(a).value == 12; // same as above\n     assert old@M(a.value) == 12; // .value in M state is 12\n     assert old@M(a).value == 12;\n     assert old@N(a.value) == 10; // this.a in N is the heap\n                                  // reference at Line X\n     assert old@N(a).value == 20; // .value in current state is 20\n     assert old@P(a.value) == 20;\n     assert old@P(a).value == 20;\n  }\n}\n```\n\n```dafny\nclass A {\n  var value: int\n  constructor ()\n     ensures value == 10\n  {\n     value := 10;\n  }\n}\n\nclass B {\n   var a: A\n   constructor () { a := new A(); }\n\n   method m()\n     requires a.value == 11\n     modifies this, this.a\n   {\n     label L:\n     a.value := 12;\n     label M:\n     a := new A(); // Line X\n     label N:\n     a.value := 20;\n     label P:\n\n     assert old(a.value) == 11;\n     assert old(a).value == 12; // this.a is from pre-state,\n                                // but .value in current state\n     assert old@L(a.value) == 11;\n     assert old@L(a).value == 12; // same as above\n     assert old@M(a.value) == 12; // .value in M state is 12\n     assert old@M(a).value == 12;\n     assert old@N(a.value) == 10; // this.a in N is the heap\n                                  // reference at Line X\n     assert old@N(a).value == 20; // .value in current state is 20\n     assert old@P(a.value) == 20;\n     assert old@P(a).value == 20;\n  }\n}\n```\nThe next example demonstrates the interaction between `old` and array elements.", "start_char_idx": 658, "end_char_idx": 4258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "313f3963-f4df-48f9-b8d2-0a394602dae5": {"__data__": {"id_": "313f3963-f4df-48f9-b8d2-0a394602dae5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18e60c67576c8970cb05be74766fec9837d5d88a136344b46c8a56ddc9e8b897", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "32d6aab4094ab2b22d15b7904989b8f599448c7317ad708d63c09057091435a5", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nclass A {\n  var z1: array\n  var z2: array\n\n  method mm()\n    requires z1.Length > 10 && z1[0] == 7\n    requires z2.Length > 10 && z2[0] == 17\n    modifies z2\n  {\n    var a: array := z1;\n    assert a[0] == 7;\n    a := z2;\n    assert a[0] == 17;\n    assert old(a[0]) == 17; // a is local with value z2\n    z2[0] := 27;\n    assert old(a[0]) == 17; // a is local, with current value of\n                            // z2; in pre-state z2[0] == 17\n    assert old(a)[0] == 27; // a is local, so old(a) has no effect\n  }\n}\n```", "start_char_idx": 4260, "end_char_idx": 4787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ab03fad-a398-4556-802a-340af97448ea": {"__data__": {"id_": "4ab03fad-a398-4556-802a-340af97448ea", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9363ea3-4760-4b0a-8db0-bc5ecac49b90", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d0d6fee1528498151f3ef3e955e4e44bd544c98844e02bb01c93a9a21de7bce6", "class_name": "RelatedNodeInfo"}}, "text": "9.23. Fresh Expressions (grammar) {sec-fresh-expression}\n\nExamples:\n\n```dafny\nfresh(e)\nfresh@L(e)\n```\n\n`fresh(e)` returns a boolean value that is true if\nthe objects denoted by expression `e` were all\nfreshly allocated since the time of entry to the enclosing method,\nor since `label L:` in the variant `fresh@L(e)`.\nThe argument is an object or set of objects.\nFor example, consider this valid program:\n\n\n```dafny\nclass C { constructor() {} }\nmethod f(c1: C) returns (r: C)\n  ensures fresh(r)\n{\n  assert !fresh(c1);\n  var c2 := new C();\n  label AfterC2:\n  var c3 := new C();\n  assert fresh(c2) && fresh(c3);\n  assert fresh({c2, c3});\n  assert !fresh@AfterC2(c2) && fresh@AfterC2(c3);\n  r := c2;\n}\n```\n\nThe `L` in the variant `fresh@L(e)` must denote a label that, in the\nenclosing method's control flow, dominates the expression. In this\ncase, `fresh@L(e)` returns `true` if the objects denoted by `e` were all\nfreshly allocated since control flow reached label `L`.\n\nThe argument of `fresh` must be either an `object` reference\nor a set or sequence of object references.\nIn this case, `fresh(e)` (respectively `fresh@L(e)` with a label)\nis a synonym of `old(!allocated(e))`\n(respectively `old@L(!allocated(e))`)", "start_char_idx": 2, "end_char_idx": 1215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29e955d9-c95e-4963-a8b7-99185cf5787d": {"__data__": {"id_": "29e955d9-c95e-4963-a8b7-99185cf5787d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fb90c6c-f5eb-41e2-902c-6215e4e7b30d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f13dd9eb68e0d9c6f51c2c845cfaddf94eb51f44ad4710e15c2f33c874cb872e", "class_name": "RelatedNodeInfo"}}, "text": "9.24. Allocated Expressions (grammar) {sec-allocated-expression}\n\nExamples:\n\n```dafny\nallocated(c)\nallocated({c1,c2})\n```\n\nFor any expression `e`, the expression `allocated(e)` evaluates to `true`\nin a state if the value of `e` is available in that state, meaning that\nit could in principle have been the value of a variable in that state.\n\nFor example, consider this valid program:\n\n\n```dafny\nclass C { constructor() {} }\ndatatype D = Nil | Cons(C, D)\nmethod f() {\n  var d1, d2 := Nil, Nil;\n  var c1 := new C();\n  label L1:\n  var c2 := new C();\n  label L2:\n  assert old(allocated(d1) && allocated(d2));\n  d1 := Cons(c1, Nil);\n  assert old(!allocated(d1) && allocated(d2));\n  d2 := Cons(c2, Nil);\n  assert old(!allocated(d1) && !allocated(d2));\n  assert allocated(d1) && allocated(d2);\n  assert old@L1(allocated(d1) && !allocated(d2));\n  assert old@L2(allocated(d1) && allocated(d2));\n  d1 := Nil;\n  assert old(allocated(d1) && !allocated(d2));\n}\n```\n\nThis can be useful when, for example, `allocated(e)` is evaluated in an\n`old` state. Like in the example, where `d1` is a local variable holding a datatype value\n`Cons(c1, Nil)` where `c1` is an object that was allocated in the enclosing\nmethod, then `old(allocated(d))` is `false`.\n\nIf the expression `e` is of a reference type, then `!old(allocated(e))`\nis the same as `fresh(e)`.", "start_char_idx": 2, "end_char_idx": 1336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41fdc6d1-0808-4edf-92ea-82c85a206af9": {"__data__": {"id_": "41fdc6d1-0808-4edf-92ea-82c85a206af9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fbafed2e-4d79-44a6-9fef-0952b0880cdd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "24102c35d182eff4e7cfbc74f72863c6aaaa996583057ab1939d2b9d9bc06eda", "class_name": "RelatedNodeInfo"}}, "text": "9.25. Unchanged Expressions (grammar) {sec-unchanged-expression}\n\nExamples:\n\n```dafny\nunchanged(c)\nunchanged([c1,c2])\nunchanged@L(c)\n```\n\nThe `unchanged` expression returns `true` if and only if every reference\ndenoted by its arguments has the same value for all its fields in the\nold and current state. For example, if `c` is an object with two\nfields, `x` and `y`, then `unchanged(c)` is equivalent to\n\n```dafny\nc.x == old(c.x) && c.y == old(c.y)\n```\n\nEach argument to `unchanged` can be a reference, a set of references, or\na sequence of references, each optionally followed by a back-tick and field name. \nThis form with a frame field expresses that just the field `f`,\nnot necessarily all fields, has the same value in the old and current\nstate.\nIf there is such a frame field, all the references must have the same type,\nwhich must have a field of that name.\n\nThe optional `@`-label says to use the state at that label as the old-state instead of using\nthe `old` state (the pre-state of the method). That is, using the example `c` from above, the expression\n`unchanged@Lbl(c)` is equivalent to\n\n```dafny\nc.x == old@Lbl(c.x) && c.y == old@Lbl(c.y)\n```\n\nEach reference denoted by the arguments of `unchanged` must be non-null and\nmust be allocated in the old-state of the expression.", "start_char_idx": 2, "end_char_idx": 1289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09f1a3b2-7eb1-43c6-b958-10e7330d1ca1": {"__data__": {"id_": "09f1a3b2-7eb1-43c6-b958-10e7330d1ca1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71e0efab-2dd6-42de-8ac3-40d85ec7a8a1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ca0fba404177a92ac1f759a8f45566ffdfe540aac045c1d12cc2e16d3f13a25b", "class_name": "RelatedNodeInfo"}}, "text": "9.26. Cardinality Expressions (grammar) {sec-cardinality-expression}\n\nExamples:\n\n```dafny\n|s|\n|s[1..i]|\n```\n\nFor a finite-collection expression `c`, `|c|` is the cardinality of `c`. For a\nfinite set or sequence, the cardinality is the number of elements. For\na multiset, the cardinality is the sum of the multiplicities of the\nelements. For a finite map, the cardinality is the cardinality of the\ndomain of the map. Cardinality is not defined for infinite sets or infinite maps.\nFor more information, see Section 5.5.", "start_char_idx": 2, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f41845b-1a4c-45ef-8588-90daca741815": {"__data__": {"id_": "6f41845b-1a4c-45ef-8588-90daca741815", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4aa0c4d2-c40f-4bc4-ac5b-9f184a859a2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae78aa0e5083dd91ac92d60777c1272d9d911783967af7f4c08292f5ca9d08e9", "class_name": "RelatedNodeInfo"}}, "text": "9.27. Parenthesized Expressions (grammar) {sec-parenthesized-expression}\n\nA parenthesized expression is a list of zero or more expressions\nenclosed in parentheses.\n\nIf there is exactly one expression enclosed then the value is just\nthe value of that expression.\n\nIf there are zero or more than one, the result is a `tuple` value.\nSee Section 5.13.", "start_char_idx": 2, "end_char_idx": 349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2f98747-731a-4e87-96fc-33b2d0f086b3": {"__data__": {"id_": "b2f98747-731a-4e87-96fc-33b2d0f086b3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e6bc9df-d7f4-448b-9da2-f62b36c681bf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4ea668d5e05dd995c76208bee23b731f0db2f821da1f695477899fcdf2a843fc", "class_name": "RelatedNodeInfo"}}, "text": "9.28. Sequence Display Expression (grammar) {sec-seq-comprehension}\n\nExamples:\n\n```dafny\n[1, 2, 3]\n[1]\n[]\nseq(k, n => n+1)\n```\n\nA sequence display expression provides a way to construct\na sequence with given values. For example\n\n\n```dafny\n[1, 2, 3]\n```\nis a sequence with three elements in it.\n\n\n```dafny\nseq(k, n => n+1)\n```\nis a sequence of k elements whose values are obtained by evaluating the\nsecond argument (a function, in this case a lambda expression) on the indices 0 up to k.\n\nSee this section for more information on\nsequences.", "start_char_idx": 2, "end_char_idx": 541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b80840b-f548-43bd-bb23-762345b194b8": {"__data__": {"id_": "7b80840b-f548-43bd-bb23-762345b194b8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8763d56e-cbcb-4835-a47b-a38a18d84cfe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8944284a670118ab06c4ddd82e6656323ee3caed6c1eb1b84cb1bfef9b8537f0", "class_name": "RelatedNodeInfo"}}, "text": "9.29. Set Display Expression (grammar) {sec-set-display-expression}\n\nExamples:\n\n```dafny\n{}\n{1,2,3}\niset{1,2,3,4}\nmultiset{1,2,2,3,3,3}\nmultiset(s)\n```\n\nA set display expression provides a way of constructing a set with given\nelements. If the keyword `iset` is present, then a potentially infinite\nset (with the finite set of given elements) is constructed.\n\nFor example\n\n\n```dafny\n{1, 2, 3}\n```\nis a set with three elements in it.\nSee Section 5.5.1 for more information on\nsets.\n\nA multiset display expression provides a way of constructing\na multiset with given elements and multiplicities. For example\n\n\n```dafny\nmultiset{1, 1, 2, 3}\n```\nis a multiset with three elements in it. The number 1 has a multiplicity of 2,\nand the numbers 2 and 3 each have a multiplicity of 1.\n\nA multiset cast expression converts a set or a sequence\ninto a multiset as shown here:\n\n\n```dafny\nvar s : set := {1, 2, 3};\nvar ms : multiset := multiset(s);\nms := ms + multiset{1};\nvar sq : seq := [1, 1, 2, 3];\nvar ms2 : multiset := multiset(sq);\nassert ms == ms2;\n```\n\nNote that `multiset{1, 1}` is a multiset holding the value `1` with multiplicity 2,\nbut in `multiset({1,1})` the multiplicity is 1, because the expression `{1,1}` is the set `{1}`,\nwhich is then converted to a multiset.\n\nSee Section 5.5.2 for more information on multisets.", "start_char_idx": 2, "end_char_idx": 1322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96510040-8403-4943-8488-458eb5848cd1": {"__data__": {"id_": "96510040-8403-4943-8488-458eb5848cd1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53f24a68-56f7-4d4f-b7e8-8b90ab177949", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3202871b22d07e2b15a40ea326ce36b73160f29c1988c2469741f1021e7dd9d8", "class_name": "RelatedNodeInfo"}}, "text": "9.30. Map Display Expression (grammar) {sec-map-display-expression}\n\nExamples:\n\n```dafny\nmap[]\nmap[1 := \"a\", 2 := \"b\"]\nimap[1 := \"a\", 2 := \"b\"]\n```\n\nA map display expression builds a finite or potentially infinite\nmap from explicit mappings. For example:\n\n\n```dafny\nconst m := map[1 := \"a\", 2 := \"b\"]\nghost const im := imap[1 := \"a\", 2 := \"b\"]\n```\n\nSee Section 5.5.4 for more details on maps and imaps.", "start_char_idx": 2, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21b96d08-a285-45bc-8737-2edddc26ae81": {"__data__": {"id_": "21b96d08-a285-45bc-8737-2edddc26ae81", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f0492be-8274-4263-a322-e0bccb9d47e9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c071e1fbd65c48d9e38f7e3845c09c212e1e9b77b8514dff1aeb684d7b303830", "class_name": "RelatedNodeInfo"}}, "text": "9.31. Endless Expression (grammar) {sec-endless-expression}\n\n_Endless expression_ gets it name from the fact that all its alternate\nproductions have no terminating symbol to end them, but rather they\nall end with an arbitrary expression at the end. The various\nendless expression alternatives are described in the following subsections.", "start_char_idx": 2, "end_char_idx": 338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5ed1225-cc76-40e8-bd56-d8531413bb18": {"__data__": {"id_": "d5ed1225-cc76-40e8-bd56-d8531413bb18", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b016d73-7141-4c41-a39c-d697f7851907", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c065dbc77220250ea0ea55f2f5cedd161338899a6e993d19d07ca2af255c6833", "class_name": "RelatedNodeInfo"}}, "text": "9.31.1. If Expression (grammar) {sec-if-expression}\n\nExamples:\n\n```dafny\nif c then e1 else e2\nif x: int :| P(x) then x else 0\n```\n\n\nAn _if expression_ is a conditional (ternary) expression. It first evaluates\nthe condition expression that follows the `if`. If the condition evaluates to `true` then\nthe expression following the `then` is evaluated and its value is the\nresult of the expression. If the condition evaluates to `false` then the\nexpression following the `else` is evaluated and that value is the result\nof the expression. It is important that only the selected expression\nis evaluated as the following example shows.\n\n\n```dafny\nvar k := 10 / x; // error, may divide by 0.\nvar m := if x != 0 then 10 / x else 1; // ok, guarded\n```\n\nThe `if` expression also permits a binding form.\nIn this case the condition of the `if` is an existential asking\n\"does there exist a value satisfying the given predicate?\".\nIf not, the else branch is evaluated. But if so, then an\n(arbitrary) value that does satisfy the given predicate is\nbound to the given variable and that variable is in scope in \nthe then-branch of the expression.\n\nFor example, in the code\n\n```dafny\npredicate P(x: int) {\n  x == 5 || x == -5\n}\nmethod main() {\n  assert P(5);\n  var y := if x: int :| P(x) then x else 0;\n  assert y == 5 || y == -5;\n}\n```\n`x` is given some value that satisfies `P(x)`, namely either `5` or `-5`.\nThat value of `x` is the value of the expression in the `then` branch above; if there is no value satisfying `P(x)`,\nthen `0` is returned. Note that if `x` is declared to be a `nat` in this example, then only\nthe value `5` would be permissible.\n\nThis binding form of the `if` expression acts in the same way as the binding form of the `if` statement.\n\nIn the example given, the binder for `x` has no constraining range, so the expression is `ghost`;\nif a range is given, such as `var y := if x: int :| 0 <= x < 10 && P(x) then x else 0;`,\nthen the `if` and `y` are no longer ghost, and `y` could be used, for example, in a `print` statement.", "start_char_idx": 2, "end_char_idx": 2036, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ab804c2-f753-4447-bc52-5ba44aca92e6": {"__data__": {"id_": "9ab804c2-f753-4447-bc52-5ba44aca92e6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc0a82d2-c704-4131-ab48-b0b955ad3c41", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "56abed29092ce1f2cf8b21d2d69759c18d8dd596047ed7a808ba475577cd6000", "class_name": "RelatedNodeInfo"}}, "text": "9.31.2. Case and Extended Patterns (grammar) {sec-case-pattern}\n\nPatterns are used for (possibly nested)\npattern matching on inductive, coinductive or base type values.\nThey are used in \nmatch statements,\nmatch expressions,\nlet expressions,\nand variable declarations.\nThe match expressions and statements allow literals,\nsymbolic constants, and disjunctive (\u201cor\u201d) patterns.\n\nWhen matching an inductive or coinductive value in\na match statement or expression, the pattern\nmust correspond to one of the following:\n\n* (0) a case disjunction (\u201cor-pattern\u201d)\n* (1) bound variable (a simple identifier),\n* (2) a constructor of the type of the value,\n* (3) a literal of the correct type, or\n* (4) a symbolic constant.\n\nIf the extended pattern is\n\n* a sequence of `|`-separated sub-patterns, then the pattern matches values\n  matched by any of the sub-patterns.\n* a parentheses-enclosed possibly-empty list of patterns,\nthen the pattern matches a tuple.\n* an identifier followed\nby a parentheses-enclosed possibly-empty list of patterns, then the pattern\nmatches a constructor.\n* a literal, then the pattern matches exactly that literal.\n* a simple identifier, then the pattern matches\n   * a parameter-less constructor if there is one defined with the correct type and the given name, else\n   * the value of a symbolic constant, if a name lookup finds a declaration for\n     a constant with the given name (if the name is declared but with a non-matching type, a type resolution error will occur),\n   * otherwise, the identifier is a new bound variable\n\nDisjunctive patterns may not bind variables, and may not be nested inside other\npatterns.\n\nAny patterns inside the parentheses of a constructor (or tuple) pattern are then\nmatched against the arguments that were given to the\nconstructor when the value was constructed.\nThe number of patterns must match the number\nof parameters to the constructor (or the arity of the\ntuple).\n\nWhen matching a value of base type, the pattern should\neither be a literal expression of the same type as the value,\nor a single identifier matching all values of this type.\n\nPatterns may be nested. The  bound variable\nidentifiers contained in all the patterns must be distinct.\nThey are bound to the corresponding values in the value being\nmatched. (Thus, for example, one cannot repeat a bound variable to\nattempt to match a constructor that has two identical arguments.)", "start_char_idx": 2, "end_char_idx": 2398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f87ec824-70f3-4bbb-874f-7a4c2b3ea43e": {"__data__": {"id_": "f87ec824-70f3-4bbb-874f-7a4c2b3ea43e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f62e4f7f-648b-4e03-9187-6839707f12cd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f7f877a7aede0e55fbbb5fe6c2e25e43717063a946bf1370d29b633c4970d394", "class_name": "RelatedNodeInfo"}}, "text": "9.31.3. Match Expression (grammar) {sec-match-expression}\n\nA _match expression_ is used to conditionally evaluate and select an\nexpression depending on the value of an algebraic type, i.e. an inductive\ntype, a coinductive type, or a base type.\n\nAll of the variables in the patterns must be distinct.\nIf types for the identifiers are not given then types are inferred\nfrom the types of the constructor's parameters. If types are\ngiven then they must agree with the types of the\ncorresponding parameters.\n\nThe expression following the `match` keyword is called the\n_selector_. A match expression is evaluated by first evaluating the selector.\nThe patterns of each match alternative are then compared, in order,\n with the resulting value until a matching pattern is found, as described in\nthe section on case bindings.\nIf the constructor had\nparameters, then the actual values used to construct the selector\nvalue are bound to the identifiers in the identifier list.\nThe expression to the right of the `=>` in the matched alternative is then\nevaluated in the environment enriched by this binding. The result\nof that evaluation is the result of the match expression.\n\nNote that the braces enclosing the sequence of match alternatives may be omitted.\nThose braces are required if lemma or lambda expressions are used in the\nbody of any match alternative; they may also be needed for disambiguation if\nthere are nested match expressions.", "start_char_idx": 2, "end_char_idx": 1433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2de0ce7-374e-4b64-ba9e-71edf8da9db4": {"__data__": {"id_": "e2de0ce7-374e-4b64-ba9e-71edf8da9db4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0854176-05df-4eee-a7c3-01a3e063d94b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9bb105d95edcaf1c24ecff8cbf369b62671de0585e61e47a21deb6dfdc814570", "class_name": "RelatedNodeInfo"}}, "text": "9.31.4. Quantifier Expression (grammar) {sec-quantifier-expression}\n\nExamples:\n\n```dafny\nforall x: int :: x > 0\nforall x: nat | x < 10 :: x*x < 100\nexists x: int :: x * x == 25\n```\n\nA _quantifier expression_ is a boolean expression that specifies that a\ngiven expression (the one following the `::`) is true for all (for\n**forall**) or some (for **exists**) combination of values of the\nquantified variables, namely those in the given quantifier domain.\nSee Section 2.7.4 for more details on quantifier domains.\n\nHere are some examples:\n\n```dafny\nassert forall x : nat | x <= 5 :: x * x <= 25;\n(forall n :: 2  (exists d :: n < d < 2*n))\nassert forall x: nat | 0 <= x < |s|, y <- s[x] :: y < x;\n```\n\nThe quantifier identifiers are _bound_ within the scope of the\nexpressions in the quantifier expression.\n\nIf types are not given for the quantified identifiers, then Dafny\nattempts to infer their types from the context of the expressions.\nIt this is not possible, the program is in error.", "start_char_idx": 2, "end_char_idx": 989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba268173-4923-4531-a93b-52ab62133a27": {"__data__": {"id_": "ba268173-4923-4531-a93b-52ab62133a27", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b1480c7-567d-4f02-9aeb-b748f81e16dd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fdb5920c5681e663961ec36b64e60cbc261126bfc9d7f62072082daf6538ce76", "class_name": "RelatedNodeInfo"}}, "text": "9.31.5. Set Comprehension Expressions (grammar) {sec-set-comprehension-expression}\n\nExamples:\n\n```dafny\nconst c1 := set x: nat | x < 100\nconst c2 := set x: nat | x < 100 :: x * x\nconst c3 := set x: nat, y: nat | x < y < 100 :: x * y\nghost const c4 := iset x: nat | x > 100\nghost const c5: iset := iset s\nconst c6 := set x <- c3 :: x + 1\n```\n\nA set comprehension expression is an expression that yields a set\n(possibly infinite only if `iset` is used) that\nsatisfies specified conditions. There are two basic forms.\n\nIf there is only one quantified variable, the optional ``\"::\" Expression``\nneed not be supplied, in which case it is as if it had been supplied\nand the expression consists solely of the quantified variable.\nThat is,\n\n\n```dafny\nset x : T | P(x)\n```\n\nis equivalent to\n\n\n```dafny\nset x : T | P(x) :: x\n```\n\nFor the full form\n\n\n```dafny\nvar S := set x1: T1 <- C1 | P1(x1),\n             x2: T2 <- C2 | P2(x1, x2),\n             ... \n             :: Q(x1, x2, ...)\n```\n\nthe elements of `S` will be all values resulting from evaluation of `Q(x1, x2, ...)`\nfor all combinations of quantified variables `x1, x2, ...` (from their respective `C1, C2, ...`\ndomains) such that all predicates `P1(x1), P2(x1, x2), ...` hold. \n\nFor example,\n\n\n```dafny\nvar S := set x:nat, y:nat | x < y < 3 :: (x, y)\n```\nyields `S == {(0, 1), (0, 2), (1, 2) }`\n\nThe types on the quantified variables are optional and if not given Dafny\nwill attempt to infer them from the contexts in which they are used in the\nvarious expressions. The `<- C` domain expressions are also optional and default to\n`iset x: T` (i.e. all values of the variable's type), as are the `| P` expressions which\ndefault to `true`. See also Section 2.7.4 for more details on quantifier domains.\n\nIf a finite set was specified (\"set\" keyword used), Dafny must be able to prove that the\nresult is finite otherwise the set comprehension expression will not be\naccepted.\n\nSet comprehensions involving reference types such as\n\n\n```dafny\nset o: object\n```\n\nare allowed in ghost expressions within methods, but not in ghost functions[^set-of-objects-not-in-functions].\nIn particular, in ghost contexts, the\ncheck that the result is finite should allow any set comprehension\nwhere the bound variable is of a reference type. In non-ghost contexts,\nit is not allowed, because--even though the resulting set would be\nfinite--it is not pleasant or practical to compute at run time.\n\n^set-of-objects-not-in-functions]: In order to be deterministic, the result of a function should only depend on the arguments and of the objects  it [reads, and Dafny does not provide a way to explicitly pass the entire heap as the argument to a function. See this post for more insights.\n\nThe universe in which set comprehensions are evaluated is the set of all\n_allocated_ objects, of the appropriate type and satisfying the given predicate.\nFor example, given\n\n\n```dafny\nclass I {\n  var i: int\n}\n\nmethod test() {\n  ghost var m := set x: I :: 0 <= x.i <= 10;\n}\n```\nthe set `m` contains only those instances of `I` that have been allocated\nat the point in program execution that `test` is evaluated. This could be\nno instances, one per value of `x.i` in the stated range, multiple instances\nof `I` for each value of `x.i`, or any other combination.", "start_char_idx": 2, "end_char_idx": 3276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e40b9c5-f55c-4cd0-8a14-7eba0a4811b4": {"__data__": {"id_": "1e40b9c5-f55c-4cd0-8a14-7eba0a4811b4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "586ea008-5928-4bda-be9a-20ac71716c91", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bd67bb7392ef096b883d08e11a976f120c6d234dda194100d42d055c3c474ec1", "class_name": "RelatedNodeInfo"}}, "text": "9.31.6. Statements in an Expression (grammar) {sec-statement-in-an-expression}\n\nExamples:\n\n```dafny\nassert x != 0; 10/x\nassert x != 0; assert y > 0; y/x\nassume x != 0; 10/x\nexpect x != 0; 10/x\nreveal M.f; M.f(x)\ncalc { x * 0; == 0; } x/1;\n```\n\nA ``StmtInExpr`` is a kind of statement that is allowed to\nprecede an expression in order to ensure that the expression\ncan be evaluated without error. For example:\n\n\n```dafny\nassume x != 0; 10/x\n```\n\n`Assert`, `assume`, `expect`, `reveal` and `calc` statements can be used in this way.", "start_char_idx": 2, "end_char_idx": 532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d285894f-31c0-4cdf-b10c-6699360d4000": {"__data__": {"id_": "d285894f-31c0-4cdf-b10c-6699360d4000", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2491524a-8284-453f-8519-0f3eb9caf79f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d05c4ba73c0278478c2ce690742bb74f07fa8890819562d9611b9bed9195f21c", "class_name": "RelatedNodeInfo"}}, "text": "9.31.7. Let and Let or Fail Expression (grammar) {sec-let-expression}\n\nExamples:\n\n```dafny\nvar x := f(y); x*x\nvar x :- f(y); x*x\nvar x :| P(x); x*x\nvar (x, y) := T(); x + y   // T returns a tuple\nvar R(x,y) := T(); x + y   // T returns a datatype value R\n```\n\n\nA `let` expression allows binding of intermediate values to identifiers\nfor use in an expression. The start of the `let` expression is\nsignaled by the `var` keyword. They look much like a local variable\ndeclaration except the scope of the variable only extends to the\nenclosed expression.\n\nFor example:\n\n```dafny\nvar sum := x + y; sum * sum\n```\n\nIn the simple case, the pattern is just an identifier with optional\ntype (which if missing is inferred from the rhs).\n\nThe more complex case allows destructuring of constructor expressions.\nFor example:\n\n\n```dafny\ndatatype Stuff = SCons(x: int, y: int) | Other\nfunction GhostF(z: Stuff): int\n  requires z.SCons?\n{\n  var SCons(u, v) := z; var sum := u + v; sum * sum\n}\n```\n\nThe Let expression has a failure variant\nthat simply uses `:-` instead of `:=`. This Let-or-Fail expression also permits propagating\nfailure results. However, in statements (Section 8.6), failure results in\nimmediate return from the method; expressions do not have side effects or immediate return\nmechanisms. Rather, if the expression to the right of `:-` results in a failure value `V`,\nthe overall expression returns `V.PropagateFailure()`; if there is no failure, the expression following the \nsemicolon is returned. Note that these two possible return values must have the same type (or be \nimplicitly convertible to the same type). Typically that means that `tmp.PropagateFailure()` is a failure value and\n`E` is a value-carrying success value, both of the same failure-compatible type, \nas described in Section 8.6.\n\nThe expression `:- V; E` is desugared into the _expression_\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse E\n```\n\nThe expression `var v :- V; E` is desugared into the _expression_\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse var v := tmp.Extract(); E\n```\n\nIf the RHS is a list of expressions then the desugaring is similar. `var v, v1 :- V, V1; E` becomes\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse var v, v1 := tmp.Extract(), V1; E\n```\n\nSo, if tmp is a failure value, then a corresponding failure value is propagated along; otherwise, the expression\nis evaluated as normal.", "start_char_idx": 2, "end_char_idx": 2473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d682282-0a81-4426-b4ec-f73157e310e2": {"__data__": {"id_": "9d682282-0a81-4426-b4ec-f73157e310e2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7e60fc3-46e0-4f89-ac29-7f7006f9bd1d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aba08410a973c380e14051d2baab2705cc4dca34ce80728ab3440228a8239e97", "class_name": "RelatedNodeInfo"}}, "text": "9.31.8. Map Comprehension Expression (grammar) {sec-map-comprehension-expression}\n\nExamples:\n\n```dafny\nmap x : int | 0 <= x <= 10 :: x * x;\nmap x : int | 0 <= x <= 10 :: -x := x * x;\nimap x : int | 10 < x :: x * x;\n```\n\nA _map comprehension expression_  defines a finite or infinite map value\nby defining a domain and for each value in the domain,\ngiving the mapped value using the expression following the \"::\".\nSee Section 2.7.4 for more details on quantifier domains.\n\nFor example:\n\n```dafny\nfunction square(x : int) : int { x * x }\nmethod test()\n{\n  var m := map x : int | 0 <= x <= 10 :: x * x;\n  ghost var im := imap x : int :: x * x;\n  ghost var im2 := imap x : int :: square(x);\n}\n```\n\nDafny finite maps must be finite, so the domain must be constrained to be finite.\nBut imaps may be infinite as the examples show. The last example shows\ncreation of an infinite map that gives the same results as a function.\n\nIf the expression includes the `:=` token, that token separates\ndomain values from range values. For example, in the following code\n\n```dafny\nmethod test()\n{\n  var m := map x : int | 1 <= x <= 10 :: 2*x := 3*x;\n}\n```\n`m` maps `2` to `3`, `4` to `6`, and so on.", "start_char_idx": 2, "end_char_idx": 1181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d00e257f-df41-456f-9ad3-b992708af53b": {"__data__": {"id_": "d00e257f-df41-456f-9ad3-b992708af53b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14e8aa00-198c-49c7-bf22-6fa8c808fb33", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a3ad6cbaba02222f6f28b72fdaab0fb2877266d96ac65bea7f796916b476a38f", "class_name": "RelatedNodeInfo"}}, "text": "9.32. Name Segment (grammar) {sec-name-segment}\n\nExamples:\n\n```dafny\nI\nI\nI#[k]\nI#[k]\n```\n\nA _name segment_ names a Dafny entity by giving its declared\nname optionally followed by information to\nmake the name more complete. For the simple case, it is\njust an identifier. Note that a name segment may be followed\nby suffixes, including the common '.' and further name segments.\n\nIf the identifier is for a generic entity, it is followed by\na ``GenericInstantiation`` which provides actual types for\nthe type parameters.\n\nTo reference a prefix predicate (see Section 5.14.3.5) or\nprefix lemma (see Section 5.14.3.6.3), the identifier\nmust be the name of the greatest predicate or greatest lemma and it must be\nfollowed by a _hash call_.", "start_char_idx": 2, "end_char_idx": 735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a913742-64bf-4de6-b65a-402db0e165ad": {"__data__": {"id_": "9a913742-64bf-4de6-b65a-402db0e165ad", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4104afb6-caff-4a1c-8d82-9a2acc3692f7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "30b7f620275dfcd65cb86407b381cef709ef7ea0b8924eaa7d31d5785ab043a4", "class_name": "RelatedNodeInfo"}}, "text": "9.33. Hash call (grammar) {sec-hash-call}\n\nA _hash call_  is used to call the prefix for a greatest predicate or greatest lemma.\nIn the non-generic case, just insert `\"#[k]\"` before the call argument\nlist where k is the number of recursion levels.\n\nIn the case where the `greatest lemma` is generic, the generic type\nargument is given before. Here is an example:\n\n\n```dafny\ncodatatype Stream = Nil | Cons(head: int, stuff: T,\n                                  tail: Stream)\n\nfunction append(M: Stream, N: Stream): Stream\n{\n  match M\n  case Nil => N\n  case Cons(t, s, M') => Cons(t, s, append(M', N))\n}\n\nfunction zeros(s : T): Stream\n{\n  Cons(0, s, zeros(s))\n}\n\nfunction ones(s: T): Stream\n{\n  Cons(1, s, ones(s))\n}\n\ngreatest predicate atmost(a: Stream, b: Stream)\n{\n  match a\n  case Nil => true\n  case Cons(h,s,t) => b.Cons? && h <= b.head && atmost(t, b.tail)\n}\n\ngreatest lemma {:induction false} Theorem0(s: T)\n  ensures atmost(zeros(s), ones(s))\n{\n  // the following shows two equivalent ways to state the\n  // coinductive hypothesis\n  if (*) {\n    Theorem0#_k-1;\n  } else {\n    Theorem0(s);\n  }\n}\n```\n\nwhere the ``HashCall`` is `\"Theorem0#_k-1;\"`.\nSee Section 5.14.3.5 and Section 5.14.3.6.3.", "start_char_idx": 2, "end_char_idx": 1198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b5721a8-d803-4898-9b2d-9ab4bc8c44a8": {"__data__": {"id_": "1b5721a8-d803-4898-9b2d-9ab4bc8c44a8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "044b3ffc-00c0-41bf-8a29-52cdeb51805d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c904f560e58a7a149db6c710ac173fa42e46c845cfed37259a0cb2f2bd6a99c9", "class_name": "RelatedNodeInfo"}}, "text": "9.34. Suffix (grammar) {sec-suffix}\n\nA _suffix_ describes ways of deriving a new value from\nthe entity to which the suffix is appended. The several kinds\nof suffixes are described below.", "start_char_idx": 2, "end_char_idx": 188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3b6fbc9-160c-4295-b386-cd95dfd151bf": {"__data__": {"id_": "e3b6fbc9-160c-4295-b386-cd95dfd151bf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3da8c214-6c56-4f2b-a3af-133088937f5d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "637440aca073f3c7c53aa05939aeb360e09292c9fb3156eca2d42c3dae5a00fb", "class_name": "RelatedNodeInfo"}}, "text": "9.34.1. Augmented Dot Suffix (grammar) {sec-augmented-dot-suffix}\n\nExamples: (expression with suffix)\n\n```dafny\na.b\n(a).b\na.b#[k]\na.b#[k]\n```\n\nAn augmented dot suffix consists of a simple dot suffix optionally\nfollowed by either\n\n* a ``GenericInstantiation`` (for the case where the item\nselected by the ``DotSuffix`` is generic), or\n* a ``HashCall`` for the case where we want to call a prefix predicate\n  or prefix lemma. The result is the result of calling the prefix predicate\n  or prefix lemma.", "start_char_idx": 2, "end_char_idx": 501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f46b974-6b8a-4c39-917f-5e935dc626bf": {"__data__": {"id_": "3f46b974-6b8a-4c39-917f-5e935dc626bf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a91625d-339e-416d-8a11-94b6d706db59", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0531428bbdc970c649fee843e02a949b7693d516deab2bae59e1a9ec16b829b2", "class_name": "RelatedNodeInfo"}}, "text": "9.34.2. Datatype Update Suffix (grammar) {sec-datatype-update-suffix}\n\nExamples: (expression with suffix)\n\n```dafny\na.(f := e1, g:= e2)\na.(0 := e1)\n(e).(f := e1, g:= e2)\n```\n\nA _datatype update suffix_ is used to produce a new datatype value\nthat is the same as an old datatype value except that the\nvalue corresponding to a given destructor has the specified value.\nIn a _member binding update_, the given identifier (or digit sequence) is the\nname of a destructor (i.e. the formal parameter name) for one of the\nconstructors of the datatype. The expression to the right of the\n`:=` is the new value for that formal.\n\nAll of the destructors in a datatype update suffix must be\nfor the same constructor, and if they do not cover all of the\ndestructors for that constructor then the datatype value being\nupdated must have a value derived from that same constructor.\n\nHere is an example:\n\n\n```dafny\nmodule NewSyntax {\n  datatype MyDataType = MyConstructor(myint:int, mybool:bool)\n                    | MyOtherConstructor(otherbool:bool)\n                    | MyNumericConstructor(42:int)\n\n  method test(datum:MyDataType, x:int)\n    returns (abc:MyDataType, def:MyDataType,\n             ghi:MyDataType, jkl:MyDataType)\n    requires datum.MyConstructor?\n    ensures abc == datum.(myint := x + 2)\n    ensures def == datum.(otherbool := !datum.mybool)  // error\n    ensures ghi == datum.(myint := 2).(mybool := false)\n    // Resolution error: no non_destructor in MyDataType\n    //ensures jkl == datum.(non_destructor := 5) // error\n    ensures jkl == datum.(42 := 7)\n  {\n    abc := MyConstructor(x + 2, datum.mybool);\n    abc := datum.(myint := x + 2);\n    def := MyOtherConstructor(!datum.mybool);\n    ghi := MyConstructor(2, false);\n    jkl := datum.(42 := 7); // error\n\n    assert abc.(myint := abc.myint - 2) == datum.(myint := x);\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f85c8a3a-f581-4cfd-8cca-f8d8f6a0c308": {"__data__": {"id_": "f85c8a3a-f581-4cfd-8cca-f8d8f6a0c308", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e753edda-d35a-4629-88ff-98d1ed4a9c9e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5139a2f59e0a0a9357ae2cdd8b35b4ffc18d0e1a8484a44c1d7ed888c5b2f751", "class_name": "RelatedNodeInfo"}}, "text": "9.34.3. Subsequence Suffix (grammar) {sec-subsequence-suffix}\n\nExamples: (with leading expression)\n\n```dafny\na[lo .. hi ]\n(e)[ lo .. ]\ne[ .. hi ]\ne[ .. ]\n```\n\nA subsequence suffix applied to a sequence produces a new sequence whose\nelements are taken from a contiguous part of the original sequence. For\nexample, expression `s[lo..hi]` for sequence `s`, and integer-based\nnumeric bounds `lo` and `hi` satisfying `0 <= lo <= hi <= |s|`. See\nthe section about other sequence expressions for details.\n\nA subsequence suffix applied to an array produces a _sequence_ consisting of \nthe values of the designated elements. A concise way of converting a whole \narray to a sequence is to write `a[..]`.", "start_char_idx": 2, "end_char_idx": 695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eeff740e-a466-4136-9670-bacfbca435d1": {"__data__": {"id_": "eeff740e-a466-4136-9670-bacfbca435d1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a097f88-3f25-44ed-b185-c359b755fea0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2d40ee4f406a20444bf5d04d1723d59307c441cebc296991907c8d2dc0d4a7dc", "class_name": "RelatedNodeInfo"}}, "text": "9.34.4. Subsequence Slices Suffix (grammar) {sec-subsequence-slices-suffix}\n\nExamples: (with leading expression)\n\n```dafny\na[ 0 : 2 : 3 ]\na[ e1 : e2 : e3 ]\na[ 0 : 2 : ]\n```\n\nApplying a _subsequence slices suffix_ to a sequence produces a\nsequence of subsequences of the original sequence.\nSee the section about other sequence expressions for details.", "start_char_idx": 2, "end_char_idx": 352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "665f7a55-f167-4310-9c81-30b4332bc1e1": {"__data__": {"id_": "665f7a55-f167-4310-9c81-30b4332bc1e1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fce3dab9-6d08-4d2a-806f-e550646bcba3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "809dd3160101be86ac3e7c20eb6804d789e94963ea6b0ac445ae05ed0797f59b", "class_name": "RelatedNodeInfo"}}, "text": "9.34.5. Sequence Update Suffix (grammar) {sec-sequence-update-suffix}\n\nExamples:\n\n```dafny\ns[1 := 2, 3 := 4]\n```\n\nFor a sequence `s` and expressions `i` and `v`, the expression\n`s[i := v]` is the same as the sequence `s` except that at\nindex `i` it has value `v`.\n\nIf the type of `s` is `seq`, then `v` must have type `T`.\nThe index `i` can have any integer- or bit-vector-based type\n(this is one situation in which Dafny implements implicit\nconversion, as if an `as int` were appended to the index expression).\nThe expression `s[i := v]` has the same type as `s`.", "start_char_idx": 2, "end_char_idx": 566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "847984c0-1c58-448d-bcaf-c1a6cca66b97": {"__data__": {"id_": "847984c0-1c58-448d-bcaf-c1a6cca66b97", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab5e71f2-a22c-4ef1-b63f-e36d45213fbc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7edc50f7fd1a6b0927a6e02bc7df4fd406256efb8ca2d6752214bf165bb7d54c", "class_name": "RelatedNodeInfo"}}, "text": "9.34.6. Selection Suffix (grammar) {sec-selection-suffix}\n\nExamples:\n\n```dafny\na[9]\na[i.j.k]\n```\n\nIf a selection suffix  has only one expression in it, it is a\nzero-based index that may be used to select a single element of a\nsequence or from a single-dimensional array.\n\nIf a selection suffix has more than one expression in it, then\nit is a list of indices to index into a multi-dimensional array.\nThe rank of the array must be the same as the number of indices.\n\nIf the selection suffix is used with an array or a sequence,\nthen each index expression can have any integer- or bit-vector-based\ntype\n(this is one situation in which Dafny implements implicit\nconversion, as if an `as int` were appended to the index expression).", "start_char_idx": 2, "end_char_idx": 730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfdae8d2-39f5-4d90-9296-e79d09883b44": {"__data__": {"id_": "cfdae8d2-39f5-4d90-9296-e79d09883b44", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c0d1f46-edbb-498a-9424-a778ea9fb8d9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b5788c701c51736a0fcb2a4f61a526d75700d00b64d6f4d539729f8af11db087", "class_name": "RelatedNodeInfo"}}, "text": "9.34.7. Argument List Suffix (grammar) {sec-argument-list-suffix}\n\nExamples:\n\n```dafny\n()\n(a)\n(a, b)\n```\nAn argument list suffix is a parenthesized list of expressions that\nare the arguments to pass to a method or function that is being\ncalled. Applying such a suffix causes the method or function\nto be called and the result is the result of the call.\n\nNote that method calls may only appear in right-hand-side\nlocations, whereas function calls may appear in expressions and specifications;\nthis distinction can be made only during name and type resolution, not by the\nparser.", "start_char_idx": 2, "end_char_idx": 579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28939f44-c2b7-4377-ba04-beb5abb7cd40": {"__data__": {"id_": "28939f44-c2b7-4377-ba04-beb5abb7cd40", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f6124a3-3ac8-4471-939c-c6720096bc90", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f8f5a327d909146b436e56ea7de0b4dbf1547a6e834101558e89b8481b411ade", "class_name": "RelatedNodeInfo"}}, "text": "9.35. Expression Lists (grammar) {sec-expression-list}\n\nExamples:\n\n```dafny\n                // empty list\na\na, b\n```\n\nAn expression list is a comma-separated sequence of expressions, used, for example,\nas actual araguments in a method or function call or in parallel assignment.", "start_char_idx": 2, "end_char_idx": 280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36a9448d-d880-40f3-a5e9-f6e43dc7fd94": {"__data__": {"id_": "36a9448d-d880-40f3-a5e9-f6e43dc7fd94", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd34ebb1-fb89-4dca-af88-e6db6d601576", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0cd74820ef9c3396c9387a11feff9c48a01371fa6e5921e254f17fcfa882ad94", "class_name": "RelatedNodeInfo"}}, "text": "9.36. Parameter Bindings (grammar) {sec-parameter-bindings}\n\nExamples: \n\n```dafny\na\na, b\na, optimize := b\n```\n\nMethod calls, object-allocation calls (`new`), function calls, and\ndatatype constructors can be called with both positional arguments\nand named arguments.\n\nFormal parameters have three ways to indicate how they are to be passed in:\n- nameonly: the only way to give a specific argument value is to name the parameter\n- positional only: these are nameless parameters (which are allowed only for datatype constructor parameters)\n- either positional or by name: this is the most common parameter\n\nA parameter is either required or optional:\n- required: a caller has to supply an argument\n- optional: the parameter has a default value that is used if a caller omits passing a specific argument\n\nThe syntax for giving a positional-only (i.e., nameless) parameter does not allow a default-value expression, so a positional-only parameter is always required.\n\nAt a call site, positional arguments are not allowed to follow named arguments. Therefore, if `x` is a nameonly parameter, then there is no way to supply the parameters after `x` by position. \nThus, any parameter that follows `x` must either be passed by name or have a default value. \nThat is, if a later (in the formal parameter declaration) parameter does not have a default value, it is effectively nameonly. \n\nPositional arguments must be given before any named arguments.\nPositional arguments are passed to the formals in the corresponding\nposition. Named arguments are passed to the formal of the given\nname. Named arguments can be given out of order from how the corresponding\nformal parameters are declared. A formal declared with the modifier\n`nameonly` is not allowed to be passed positionally.\nThe list of bindings for a call must\nprovide exactly one value for every required parameter and at most one\nvalue for each optional parameter, and must never name\nnon-existent formals. Any optional parameter that is not given a value\ntakes on the default value declared in the callee for that optional parameter.", "start_char_idx": 2, "end_char_idx": 2083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdbe887a-d2e8-4fb3-a99b-f11043af99ed": {"__data__": {"id_": "fdbe887a-d2e8-4fb3-a99b-f11043af99ed", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2fb79b6c-5972-4d7e-b372-e977eb8218d3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "633175505ec45bc648b1dc8b1ca3f27822f2472ed08cdb132dd65e6a27a11321", "class_name": "RelatedNodeInfo"}}, "text": "9.37. Assigned Expressions {sec-assigned-expression}\n\nExamples:\n\n```dafny\nassigned(x)\n```\n\nFor any variable, constant, out-parameter, or object field `x`,\nthe expression `assigned(x)` evaluates to `true` in a state\nif `x` is definitely assigned in that state.\n\nSee Section 12.6 for more details on definite assignment.", "start_char_idx": 2, "end_char_idx": 320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e40849a5-2cec-49a1-a86a-2cadb3966838": {"__data__": {"id_": "e40849a5-2cec-49a1-a86a-2cadb3966838", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3087a7f-38a6-4154-91bc-49ac1edeea43", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8a4ab281a9762072377f2969763fb41feed0e0b9d6cdbfad528bbc338eff6212", "class_name": "RelatedNodeInfo"}}, "text": "9.38. Termination Ordering Expressions {sec-termination-ordering-expressions}\n\nWhen proving that a loop or recursive callable terminates, Dafny\nautomatically generates a proof obligation that the sequence of\nexpressions listed in a `decreases` clause gets smaller (in the\nlexicographic termination ordering) with each\niteration or recursive call. Normally, this proof obligation is purely\ninternal. However, it can be written as a Dafny expression using the\n`decreases to` operator.\n\nThe Boolean expression `(a, ..., b decreases to a', ..., b')` encodes\nthis ordering. For example, the following assertions are valid:\n\n```dafny\nmethod M(x: int, y: int) {\n  assert (1 decreases to 0);\n  assert (true, false decreases to false, true);\n  assert (x, y decreases to x - 1, y);\n}\n```\n\nConversely, the following assertion is invalid:\n\n```dafny\nmethod M(x: int, y: int) {\n  assert (x decreases to x + 1);\n}\n```\n\nCurrently, `decreases to` expressions must be written in parentheses to\navoid parsing ambiguities.", "start_char_idx": 2, "end_char_idx": 1004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a00abcf-5e48-4eb3-9177-a4741ae5add0": {"__data__": {"id_": "8a00abcf-5e48-4eb3-9177-a4741ae5add0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a16b7085-280f-4e56-9201-48819a2c6bbf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "003bbe951185d6b90a3836645777104cec1dc3bb33bbeec66b46fdcbdba9754e", "class_name": "RelatedNodeInfo"}}, "text": "9.39. Compile-Time Constants {sec-compile-time-constants}\n\nIn certain situations in Dafny it is helpful to know what the value of a\nconstant is during program analysis, before verification or execution takes\nplace. For example, a compiler can choose an optimized representation of a\n`newtype` that is a subset of `int` if it knows the range of possible values\nof the subset type: if the range is within 0 to less than 256, then an\nunsigned 8-bit representation can be used.\n\nTo continue this example, suppose a new type is defined as\n\n```dafny\nconst MAX := 47\nnewtype mytype = x | 0 <= x < MAX*4\n```\nIn this case, we would prefer that Dafny recognize that `MAX*4` is\nknown to be constant with a value of `188`. The kinds of expressions\nfor which such an optimization is possible are called\n_compile-time constants_. Note that the representation of `mytype` makes\nno difference semantically, but can affect how compiled code is represented at run time.\nIn addition, though, using a symbolic constant (which may\nwell be used elsewhere as well) improves the self-documentation of the code.\n\nIn Dafny, the following expressions are compile-time constants[^CTC], recursively\n(that is, the arguments of any operation must themselves be compile-time constants):\n\n- int, bit-vector, real, boolean, char and string literals\n- int operations: `+ - * / %` and unary `-` and comparisons ` >= == !=`\n- real operations: `+ - *` and unary `-` and comparisons ` >= == !=`\n- bool operations: `&& || ==>  == !=` and unary `!`\n- bit-vector operations: `+ - * / % > & | ^` and unary `! -` and comparisons ` >= == !=`\n- char operations: ` >= == !=`\n- string operations: length: `|...|`, concatenation: `+`, comparisons `< <= == !=`, indexing `[]`\n- conversions between: `int` `real` `char` bit-vector\n- newtype operations: newtype arguments, but not newtype results\n- symbolic values that are declared `const` and have an explicit initialization value that is a compile-time constant\n- conditional (if-then-else) expressions\n- parenthesized expressions\n\n[^CTC]: This set of operations that are constant-folded may be enlarged in future versions of `dafny`.", "start_char_idx": 2, "end_char_idx": 2137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51700a4b-f588-4537-9d36-ab55949669de": {"__data__": {"id_": "51700a4b-f588-4537-9d36-ab55949669de", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5b64b4e-31d3-4958-92a4-da4b948e9f15", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2faf8c12b27581e336c049eb99ad8c6a628dd590a156a7e998d6664353d90aa7", "class_name": "RelatedNodeInfo"}}, "text": "9.40. List of specification expressions {sec-list-of-specification-expressions}\n\nThe following is a list of expressions that can only appear in specification contexts or in ghost blocks.\n\n* Fresh expressions\n* Allocated expressions\n* Unchanged expressions\n* Old expressions\n- Assigned expressions\n* Assert and calc expressions\n* Hash Calls\n* Termination ordering expression", "start_char_idx": 2, "end_char_idx": 375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "974873d4-85dd-452a-9049-665c5b869e37": {"__data__": {"id_": "974873d4-85dd-452a-9049-665c5b869e37", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Factors_description.md", "file_name": "Factors_description.md", "file_type": "text/markdown", "file_size": 701, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0de144e-aa87-4146-ac32-ca455b437956", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Factors_description.md", "file_name": "Factors_description.md", "file_type": "text/markdown", "file_size": 701, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b4f34b708bdf66a56355e893db38e0aa59c242b7973586791e688505f906976f", "class_name": "RelatedNodeInfo"}}, "text": "9.8. Factors (grammar) {sec-multiplication-expression}\n\nExamples:\n\n```dafny\nx * y\nx / y\nx % y\n```\n\nA ``Factor`` combines expressions using multiplication,\ndivision, or modulus. For numeric types these are explained in\nSection 5.2.2.\nAs explained there, `/` and `%` on `int` values represent _Euclidean_\ninteger division and modulus and not the typical C-like programming\nlanguage operations.\n\nOnly `*` has a non-numeric application. It represents set or multiset\nintersection as explained in Section 5.5.1 and Section 5.5.2.\n\n`*` is commutative and associative; `/` and `%` are neither but do group to the left.", "start_char_idx": 2, "end_char_idx": 613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4dc2fd82-4aa5-4496-93be-c0ef71d2b0d7": {"__data__": {"id_": "4dc2fd82-4aa5-4496-93be-c0ef71d2b0d7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b3ecc5d3e8431f349de7c910d869fe4c5a5984f61c0f9bc2bfa5f0b54c96c2d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f35d35d-f537-4655-b05e-691dffc28444", "node_type": "1", "metadata": {}, "hash": "9f425ea3a1872aea466ecbf06f3f5d6f43cb2468fed7657fe213191b38ec58a3", "class_name": "RelatedNodeInfo"}}, "text": "| Feature | C# | JavaScript | Go | Java | Python | C++ | Dafny Library (.doo) |\n|-|-|-|-|-|-|-|-|\n| Unbounded integers |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Real numbers |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Ordinals |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Function values |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Iterators |  X  |  X  |  X  |  |  X  |  |  X  |\n| Collections with trait element types |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| External module names with only underscores |  X  |  X  |  |  X  |  X  |  X  |  X  |\n| Co-inductive datatypes |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Multisets |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Runtime type descriptors |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Multi-dimensional arrays |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Map comprehensions |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Traits |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Let-such-that expressions |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Non-native numeric newtypes |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Method synthesis |  X  |  |  |  |  |  |  X  |\n| External classes |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Instantiating the `object` type |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| `forall` statements that cannot be sequentialized[^compiler-feature-forall-note] |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Taking an array's length |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| `m.Items` when `m` is a map |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| The /runAllTests option |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Integer range constraints in quantifiers (e.g.", "start_char_idx": 0, "end_char_idx": 1612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f35d35d-f537-4655-b05e-691dffc28444": {"__data__": {"id_": "1f35d35d-f537-4655-b05e-691dffc28444", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b3ecc5d3e8431f349de7c910d869fe4c5a5984f61c0f9bc2bfa5f0b54c96c2d6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4dc2fd82-4aa5-4496-93be-c0ef71d2b0d7", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1465c780c656ba8f74a149e68d7e4bbe49c4a0883b256b88b84497d68b0f185a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "deb490a9-d318-4668-a78d-649a5c2024d5", "node_type": "1", "metadata": {}, "hash": "cd8228f0a50826e38408c1e4e3d469795b6e3bf94cd910f7f68aa352d3b5bb83", "class_name": "RelatedNodeInfo"}}, "text": "`a <= x <= b`) |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Exact value constraints in quantifiers (`x == C`) |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Sequence displays of characters[^compiler-sequence-display-of-characters-note] |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Type test expressions (`x is T`) |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Type test expressions on subset types |  |  |  |  |  |  |  X  |\n| Quantifiers |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Bitvector RotateLeft/RotateRight functions |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| `for` loops |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| `continue` statements |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Assign-such-that statements with potentially infinite bounds[^compiler-infinite-assign-such-that-note] |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Sequence update expressions |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Sequence constructions with non-lambda initializers[^compiler-sequence-display-nolambda-note] |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Externally-implemented constructors |  X  |  |  |  X  |  X  |  X  |  X  |\n| Auto-initialization of tuple variables |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Subtype constraints in quantifiers |  X  |  X  |  X  |  X  |  X  |  X  |  X  |\n| Tuples with more than 20 arguments |  |  X  |  X  |  |  X  |  X  |  X  |\n| Arrays with more than 16 dimensions |  |  X  |  X  |  |  X  |  X  |  X  |\n| Arrow types with more than 16 arguments |  |  X  |  X  |  |  X  |  X  |  X  |\n| Unicode chars |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Converting values to strings |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Legacy CLI without commands |  X  |  X  |  X  |  X  |  X  |  X  |  |\n| Separate compilation |  X  |  |  X  |  X  |  X  |  X  |  X  |\n| All built-in types in runtime library |  X  |  X  |  X  |  X  |  X  |  |  X  |\n| Execution coverage report |  X  |  |  |  |  |  |  |\n\n[^compiler-feature-forall-note]: 'Sequentializing' a `forall` statement refers to compiling it directly to a series of nested loops\n    with the statement's body directly inside. The alternative, default compilation strategy\n    is to calculate the quantified variable bindings separately as a collection of tuples,\n    and then execute the statement's body for each tuple.\n    Not all `forall` statements can be sequentialized.\n\n[^compiler-sequence-display-of-characters-note]: This refers to an expression such as `['H', 'e', 'l', 'l', 'o']`, as opposed to a string literal such as `\"Hello\"`.\n\n[^compiler-infinite-assign-such-that-note]: This refers to assign-such-that statements with multiple variables,\n    and where at least one variable has potentially infinite bounds.", "start_char_idx": 1613, "end_char_idx": 4308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "deb490a9-d318-4668-a78d-649a5c2024d5": {"__data__": {"id_": "deb490a9-d318-4668-a78d-649a5c2024d5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c608a67-e495-4bbf-975a-9e0d94c08dae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b3ecc5d3e8431f349de7c910d869fe4c5a5984f61c0f9bc2bfa5f0b54c96c2d6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f35d35d-f537-4655-b05e-691dffc28444", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e97ec60f22f029211e8d27cfdfa22370899b490b08c44d5331ffc1316edddc11", "class_name": "RelatedNodeInfo"}}, "text": "The alternative, default compilation strategy\n    is to calculate the quantified variable bindings separately as a collection of tuples,\n    and then execute the statement's body for each tuple.\n    Not all `forall` statements can be sequentialized.\n\n[^compiler-sequence-display-of-characters-note]: This refers to an expression such as `['H', 'e', 'l', 'l', 'o']`, as opposed to a string literal such as `\"Hello\"`.\n\n[^compiler-infinite-assign-such-that-note]: This refers to assign-such-that statements with multiple variables,\n    and where at least one variable has potentially infinite bounds.\n    For example, the implementation of the statement `var x: nat, y: nat :| 0 < x && 0 < y && x*x == y*y*y + 1;`\n    needs to avoid the naive approach of iterating all possible values of `x` and `y` in a nested loop.\n\n[^compiler-sequence-display-nolambda-note]: Sequence construction expressions often use a direct lambda expression, as in `seq(10, x => x * x)`,\n    but they can also be used with arbitrary function values, as in `seq(10, squareFn)`.", "start_char_idx": 3711, "end_char_idx": 4760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a358c8be-2e91-48ef-9e31-3979aae4b72a": {"__data__": {"id_": "a358c8be-2e91-48ef-9e31-3979aae4b72a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Field_Declarations_description.md", "file_name": "Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1572, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5297cf74-3357-4ca0-855a-4963162db071", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Field_Declarations_description.md", "file_name": "Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1572, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "444fed944f0d1fdea91b0d8ab4f5dec676f9cf41a3c57d3c70ca6ce1482ec2ae", "class_name": "RelatedNodeInfo"}}, "text": "6.1. Field Declarations (grammar) {sec-field-declaration}\n\nExamples:\n\n```dafny\nclass C {\n  var c: int  // no initialization\n  ghost var 123: bv10  // name may be a sequence of digits\n  var d: nat, e: real  // type is required\n}\n```\nA field declaration is not permitted in a value type nor as a member of a module\n(despite there being an implicit unnamed class).\n\nThe field name is either an\nidentifier (that is not allowed to start with a leading underscore) or\nsome digits. Digits are used if you want to number your fields, e.g. \"0\",\n\"1\", etc. The digits do not denote numbers but sequences of digits,\nso 0, 00, 0_0 are all different.\n\nA field x of some type T is declared as:\n\n```dafny\nvar x: T\n```\n\nA field declaration declares one or more fields of the enclosing class.\nEach field is a named part of the state of an object of that class. A\nfield declaration is similar to but distinct from a variable declaration\nstatement. Unlike for local variables and bound variables, the type is\nrequired and will not be inferred.\n\nUnlike method and function declarations, a field declaration\nis not permitted as a member of a module, even though there is an implicit class.\nFields can be declared in either an explicit\nclass or a trait. A class that inherits from multiple traits will\nhave all the fields declared in any of its parent traits.\n\nFields that are declared as `ghost` can only be used in specifications,\nnot in code that will be compiled into executable code.\n\nFields may not be declared static.", "start_char_idx": 2, "end_char_idx": 1503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77351c54-362e-4f53-84d2-32b459567772": {"__data__": {"id_": "77351c54-362e-4f53-84d2-32b459567772", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/For_Loops_description.md", "file_name": "For_Loops_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a215c4e9-ae8b-4759-8d0f-829db92f8b7b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/For_Loops_description.md", "file_name": "For_Loops_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3b80c9f5fad9623c95de291e050c14b07933610e8ea2d5097919bb80492e1826", "class_name": "RelatedNodeInfo"}}, "text": "8.13. For Loops (grammar) {sec-for-statement}\n\nExamples:\n\n```dafny\nmethod m() decreases * {\n  for i := 0 to 10 {}\n  for _ := 0 to 10 {}\n  for i := 0 to * invariant i >= 0 decreases * {}\n  for i: int := 10 downto 0 {}\n  for i: int := 10 downto 0 \n}\n```\nThe `for` statement provides a convenient way to write some common loops.\n\nThe statement introduces a local variable with optional type, which is called\nthe _loop index_. The loop index is in scope in the specification and the body,\nbut not after the `for` loop. Assignments to the loop index are not allowed.\nThe type of the loop index can typically be inferred; if so, it need not be given\nexplicitly. If the identifier is not used, it can be written as `_`, as illustrated\nin this repeat-20-times loop:\n\n```dafny\nfor _ := 0 to 20 {\n  Body\n}\n```\n\nThere are four basic variations of the `for` loop:\n\n```dafny\nfor i: T := lo to hi\n  LoopSpec\n{ Body }\n\nfor i: T := hi downto lo\n  LoopSpec\n{ Body }\n\nfor i: T := lo to *\n  LoopSpec\n{ Body }\n\nfor i: T := hi downto *\n  LoopSpec\n{ Body }\n```\nSemantically, they are defined as the following respective `while` loops:\n\n```dafny\n{\n  var _lo, _hi := lo, hi;\n  assert _lo  _i is T;\n  var i := _lo;\n  while i != _hi\n    invariant _lo <= i <= _hi\n    LoopSpec\n    decreases _hi - i\n  {\n    Body\n    i := i + 1;\n  }\n}\n\n{\n  var _lo, _hi := lo, hi;\n  assert _lo  _i is T;\n  var i := _hi;\n  while i != lo\n    invariant _lo <= i <= _hi\n    LoopSpec\n    decreases i - _lo\n  {\n    i := i - 1;\n    Body\n  }\n}\n\n{\n  var _lo := lo;\n  assert forall _i: int :: _lo  _i is T;\n  var i := _lo;\n  while true\n    invariant _lo <= i\n    LoopSpec\n  {\n    Body\n    i := i + 1;\n  }\n}\n\n{\n  var _hi := hi;\n  assert forall _i: int :: _i  _i is T;\n  var i := _hi;\n  while true\n    invariant i <= _hi\n    LoopSpec\n  {\n    i := i - 1;\n    Body\n  }\n}\n```\n\nThe expressions `lo` and `hi` are evaluated just once, before the loop\niterations start.\n\nAlso, in all variations the values of `i` in the body are the values\nfrom `lo` to, _but not including_, `hi`. This makes it convenient to\nwrite common loops, including these:\n\n\n```dafny\nfor i := 0 to a.Length {\n  Process(a[i]);\n}\nfor i := a.Length downto 0 {\n  Process(a[i]);\n}\n```\nNevertheless, `hi` must be a legal value for the type of the index variable,\nsince that is how the index variable is used in the invariant.\n\nIf the end-expression is not `*`, then no explicit `decreases` is\nallowed, since such a loop is already known to terminate.\nIf the end-expression is `*`, then the absence of an explicit `decreases`\nclause makes it default to `decreases *`. So, if the end-expression is `*` and no\nexplicit `decreases` clause is given, the loop is allowed only in methods\nthat are declared with `decreases *`.\n\nThe directions `to` or `downto` are contextual keywords. That is, these two\nwords are part of the syntax of the `for` loop, but they are not reserved\nkeywords elsewhere.\n\nJust like for while loops, the body of a for-loop may be omitted during\nverification. This suppresses attempts to check assertions (like invariants)\nthat would occur at the end of the loop. Eventually, however a body must\nbe provided; the compiler will not compile a method containing a body-less\nfor-loop. There is more discussion about bodyless loops in Section 8.15.4.", "start_char_idx": 2, "end_char_idx": 3267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d778c8bc-99ba-49ed-bf5e-bf4d3652015c": {"__data__": {"id_": "d778c8bc-99ba-49ed-bf5e-bf4d3652015c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Forall_Statement_description.md", "file_name": "Forall_Statement_description.md", "file_type": "text/markdown", "file_size": 3697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6b1cafb-0382-4866-b256-f6b178ab8dad", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Forall_Statement_description.md", "file_name": "Forall_Statement_description.md", "file_type": "text/markdown", "file_size": 3697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3e81e12352e24c9fdeb99ff53fd62b9522fd0c20eab8bb979eac1e543fa6fe75", "class_name": "RelatedNodeInfo"}}, "text": "8.21. Forall Statement (grammar) {sec-forall-statement}\n\nExamples:\n\n```dafny\nforall i | 0 <= i < a.Length {\n  a[i] := 0;\n}\nforall i | 0 <= i < 100 {\n  P(i); // P a lemma\n}\nforall i | 0 <= i < 100\n  ensures i < 1000 {\n} \n```\n\nThe `forall` statement executes the body\nsimultaneously for all quantified values in the specified quantifier domain.\nYou can find more details about quantifier domains here.\n\nThere are several variant uses of the `forall`\nstatement and there are a number of restrictions.\nA `forall` statement can be classified as one of the following:\n\n* _Assign_ - the `forall` statement is used for simultaneous assignment.\nThe target must be an array element or an object field.\n* _Call_ - The body consists of a single call to a ghost method without side effects\n* _Proof_ - The `forall` has `ensure` expressions which are effectively\nquantified or proved by the body (if present).\n\nAn _assign_ `forall` statement performs simultaneous assignment.\nThe left-hand sides must denote different l-values, unless the\ncorresponding right-hand sides also coincide.\n\nThe following is an excerpt of an example given by Leino in\n[_Developing Verified Programs with Dafny_][leino233].\nWhen the buffer holding the queue needs to be resized,\nthe `forall` statement is used to simultaneously copy the old contents\ninto the new buffer.\n\n[leino233]: http://research.microsoft.com/en-us/um/people/leino/papers/krml233.pdf\n\n\n```dafny\nclass SimpleQueue\n{\n  ghost var Contents: seq\n  var a: array  // Buffer holding contents of queue.\n  var m: int          // Index head of queue.\n  var n: int          // Index just past end of queue\n   \n  method Enqueue(d: Data)\n    requires a.Length > 0\n    requires 0 <= m <= n <= a.Length\n    modifies this, this.a\n    ensures Contents == old(Contents) + [d]\n  {\n    if n == a.Length {\n      var b := a;\n      if m == 0 { b := new Data[2 * a.Length]; }\n      forall i | 0 <= i < n - m {\n      \tb[i] := a[m + i];\n      }\n      a, m, n := b, 0, n - m;\n    }\n    a[n], n, Contents := d, n + 1, Contents + [d];\n  }\n}\n```\n\nHere is an example of a _call_ `forall` statement and the\ncallee. This is contained in the `CloudMake-ConsistentBuilds.dfy`\ntest in the Dafny repository.\n\n\n```dafny\nmethod m() {\n  forall cmd', deps', e' |\n       Hash(Loc(cmd', deps', e')) == Hash(Loc(cmd, deps, e)) {\n    HashProperty(cmd', deps', e', cmd, deps, e);\n  }\n}\n\nlemma HashProperty(cmd: Expression, deps: Expression, ext: string,\n    cmd': Expression, deps': Expression, ext': string)\n  requires Hash(Loc(cmd, deps, ext)) == Hash(Loc(cmd', deps', ext'))\n  ensures cmd == cmd' && deps == deps' && ext == ext'\n```\n\nThe following example of a _proof_ `forall` statement comes from the same file:\n\n\n```dafny\nforall p | p in DomSt(stCombinedC.st) && p in DomSt(stExecC.st)\n  ensures GetSt(p, stCombinedC.st) == GetSt(p, stExecC.st)\n{\n  assert DomSt(stCombinedC.st) <= DomSt(stExecC.st);\n  assert stCombinedC.st == Restrict(DomSt(stCombinedC.st),\n                                               stExecC.st);\n}\n```\n\nMore generally, the statement\n\n```dafny\nforall x | P(x) { Lemma(x); }\n```\nis used to invoke `Lemma(x)` on all `x` for which `P(x)` holds. If\n`Lemma(x)` ensures `Q(x)`, then the forall statement establishes\n\n```dafny\nforall x :: P(x) ==> Q(x).\n```\n\nThe `forall` statement is also used extensively in the de-sugared forms of\nco-predicates and co-lemmas. See datatypes.", "start_char_idx": 2, "end_char_idx": 3387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c70c16da-ae8c-4978-9e00-8b1201faa419": {"__data__": {"id_": "c70c16da-ae8c-4978-9e00-8b1201faa419", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Fresh_Expressions_description.md", "file_name": "Fresh_Expressions_description.md", "file_type": "text/markdown", "file_size": 1439, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ef63664-9657-48b2-b82a-02950108b47e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Fresh_Expressions_description.md", "file_name": "Fresh_Expressions_description.md", "file_type": "text/markdown", "file_size": 1439, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "304558f34fc82b7a676ee73af777999f816fa51c8b34f6b1422c097c7caaa0fa", "class_name": "RelatedNodeInfo"}}, "text": "9.23. Fresh Expressions (grammar) {sec-fresh-expression}\n\nExamples:\n\n```dafny\nfresh(e)\nfresh@L(e)\n```\n\n`fresh(e)` returns a boolean value that is true if\nthe objects denoted by expression `e` were all\nfreshly allocated since the time of entry to the enclosing method,\nor since `label L:` in the variant `fresh@L(e)`.\nThe argument is an object or set of objects.\nFor example, consider this valid program:\n\n\n```dafny\nclass C { constructor() {} }\nmethod f(c1: C) returns (r: C)\n  ensures fresh(r)\n{\n  assert !fresh(c1);\n  var c2 := new C();\n  label AfterC2:\n  var c3 := new C();\n  assert fresh(c2) && fresh(c3);\n  assert fresh({c2, c3});\n  assert !fresh@AfterC2(c2) && fresh@AfterC2(c3);\n  r := c2;\n}\n```\n\nThe `L` in the variant `fresh@L(e)` must denote a label that, in the\nenclosing method's control flow, dominates the expression. In this\ncase, `fresh@L(e)` returns `true` if the objects denoted by `e` were all\nfreshly allocated since control flow reached label `L`.\n\nThe argument of `fresh` must be either an `object` reference\nor a set or sequence of object references.\nIn this case, `fresh(e)` (respectively `fresh@L(e)` with a label)\nis a synonym of `old(!allocated(e))`\n(respectively `old@L(!allocated(e))`)", "start_char_idx": 2, "end_char_idx": 1215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ec7191f-a634-460f-888b-0f55fa206626": {"__data__": {"id_": "5ec7191f-a634-460f-888b-0f55fa206626", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Declarations_description.md", "file_name": "Function_Declarations_description.md", "file_type": "text/markdown", "file_size": 96, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b8122d2-80d0-4831-b434-8c376ac0f14b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Declarations_description.md", "file_name": "Function_Declarations_description.md", "file_type": "text/markdown", "file_size": 96, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bee40c1134c6a3b5e21e9c1453b51551674c4904c0a671d56a1a18ad51f058fc", "class_name": "RelatedNodeInfo"}}, "text": "6.4. Function Declarations (grammar) {sec-function-declaration}", "start_char_idx": 2, "end_char_idx": 65, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3251aa52-bae0-491b-abcb-690a91089182": {"__data__": {"id_": "3251aa52-bae0-491b-abcb-690a91089182", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Specification_description.md", "file_name": "Function_Specification_description.md", "file_type": "text/markdown", "file_size": 536, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1c4741f-2e31-4ffb-afd7-79efaa6513e4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Specification_description.md", "file_name": "Function_Specification_description.md", "file_type": "text/markdown", "file_size": 536, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "043c70f7597ba7d38b980da097e3762d97f60330b09eec0798876c80f88953e7", "class_name": "RelatedNodeInfo"}}, "text": "7.3. Function Specification (grammar) {sec-function-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  function M(i: int): (r: int)\n    requires i >= 0\n    reads this\n    decreases i\n    ensures r >= 0\n  { \n    0 \n  }\n}\n```\n\nA function specification is zero or more `reads`, `requires`,\n`ensures` or `decreases` clauses, in any order. A function\nspecification does not have `modifies` clauses because functions are not\nallowed to modify any memory.", "start_char_idx": 2, "end_char_idx": 480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "290b09a7-5f01-400d-ab67-55916930e336": {"__data__": {"id_": "290b09a7-5f01-400d-ab67-55916930e336", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Generic_Instantiation_description.md", "file_name": "Generic_Instantiation_description.md", "file_type": "text/markdown", "file_size": 472, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "38463957-4d24-4a2d-8e86-7cac79b415b7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Generic_Instantiation_description.md", "file_name": "Generic_Instantiation_description.md", "file_type": "text/markdown", "file_size": 472, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "24a3886877f52436a531b8238430991e594c3239908e62ecc17027942b1197bd", "class_name": "RelatedNodeInfo"}}, "text": "5.4. Generic Instantiation (grammar) {sec-generic-instantiation}\n\nA generic instantiation consists of a comma-separated list of 1 or more Types,\nenclosed in angle brackets (``),\nproviding actual types to be used in place of the type parameters of the \ndeclaration of the generic type.\nIf there is no instantion for a generic type, type inference will try\nto fill these in (cf. Section 12.2).", "start_char_idx": 2, "end_char_idx": 393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ae19bae-2258-4dd2-bf22-4e146bdf10a7": {"__data__": {"id_": "6ae19bae-2258-4dd2-bf22-4e146bdf10a7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17722a28-b126-4ad2-bf9b-9b8df004cd16", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d304f35fea26b92da6c3fbd38dbcfb3406cb97a03dc1c9ecf80a313a4646b41b", "class_name": "RelatedNodeInfo"}}, "text": "2. Lexical and Low Level Grammar {sec-lexical-grammar}\n\nAs with most languages, Dafny syntax is defined in two levels. First the stream\nof input characters is broken up into _tokens_. Then these tokens are parsed\nusing the Dafny grammar. \n\nThe Dafny grammar is designed as an _attributed grammar_, which is a \nconventional BNF-style set of productions, but in which the productions can\nhave arguments. The arguments control some alternatives within\nthe productions, such as whether an alternative is allowed or not in a specific context.\nThese arguments allow for a more compact and understandable grammar.\n\nThe precise, technical details of the grammar are presented together in Section 17.\nThe expository parts of this manual present the language structure less formally.\nThroughout this document there are embedded hyperlinks to relevant grammar sections, \nmarked as grammar.", "start_char_idx": 2, "end_char_idx": 880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "244cb074-d452-4bec-9a4d-6a3223194343": {"__data__": {"id_": "244cb074-d452-4bec-9a4d-6a3223194343", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc328de7-d166-4dc4-af76-e49512c7bbaf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ee09c5a075d9a63a91dc011f9888f06220b4d10854a0998cdd3c3af5f31814b5", "class_name": "RelatedNodeInfo"}}, "text": "2.1. Dafny Input {sec-unicode}\n\nDafny source code files are readable text encoded in UTF-8.\nAll program text other than the contents of comments, character, string and verbatim string literals\nconsists of printable and white-space ASCII characters,\nthat is, ASCII characters in the range `!` to `~`, plus space, tab, \ncarriage return and newline (ASCII 9, 10, 13, 32) characters.\n(In some past versions of Dafny, non-ASCII, unicode representations of some mathematical symbols were\npermitted in Dafny source text; these are no longer recognized.)\n\nString and character literals and comments may contain any unicode character,\neither directly or as an escape sequence.", "start_char_idx": 2, "end_char_idx": 669, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7fc69d2-0134-4f39-a397-fbc889e3f477": {"__data__": {"id_": "a7fc69d2-0134-4f39-a397-fbc889e3f477", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0da7ad64-78df-4344-b3ea-22136f5435ea", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b558386f32728931c9b1617e91be025817a77403691e9a5ab2080475f17b69d9", "class_name": "RelatedNodeInfo"}}, "text": "2.2. Tokens and whitespace {sec-token-types}\nThe characters used in a Dafny program fall into four groups:\n\n* White space characters: space, tab, carriage return and newline\n* alphanumerics: letters, digits, underscore (`_`), apostrophe (`'`), and question mark (`?`)\n* punctuation: ``(){}[],.`;``\n* operator characters (the other printable characters)\n\nExcept for string and character literals, each Dafny token consists of a \nsequence of consecutive characters from just one of these\ngroups, excluding white-space. White-space is ignored except that it\nseparates tokens and except in the bodies of character and string literals.\n\nA sequence of alphanumeric characters (with no preceding or following additional\nalphanumeric characters) is a _single_ token. This is true even if the token\nis syntactically or semantically invalid and the sequence could be separated into\nmore than one valid token. For example, `assert56` is one identifier token,\nnot a keyword `assert` followed by a number; `ifb!=0` begins with the token\n`ifb` and not with the keyword `if` and token `b`; `0xFFFFZZ` is an illegal\ntoken, not a valid hex number `0xFFFF` followed by an identifier `ZZ`.\nWhite-space must be used to separate two such tokens in a program.\n\nSomewhat differently, operator tokens need not be separated.\nOnly specific sequences of operator characters are recognized and these\nare somewhat context-sensitive. For example, in `seq>`, the grammar\nknows that `>>` is two individual `>` tokens terminating the nested\ntype parameter lists; the right shift operator `>>` would never be valid here. Similarly, the\nsequence `==>` is always one token; even if it were invalid in its context,\nseparating it into `==` and `>` would always still be invalid.\n\nIn summary, except for required white space between alphanumeric tokens,\nadding or removing white space between tokens can never result in changing the meaning of a Dafny program.\nFor most of this document, we consider Dafny programs as sequences of tokens.", "start_char_idx": 2, "end_char_idx": 2001, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1024c9f4-465b-49a0-88f0-a0e0192dbc93": {"__data__": {"id_": "1024c9f4-465b-49a0-88f0-a0e0192dbc93", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a86bbf9-ea73-4445-99da-098770e28852", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "88ba22a636895546b488b2dd24be18751d5e522858a12fc4055cee479929071d", "class_name": "RelatedNodeInfo"}}, "text": "2.3. Character Classes {sec-character-classes}\n\nThis section defines character classes used later in the token definitions.\nIn this section \n\n* a backslash is used to start an escape sequence (so for example\n`'\\n'` denotes the single linefeed character)\n* double quotes\nenclose the set of characters constituting a character class\n* enclosing single\nquotes are used when there is just one character in the class\n(perhaps expressed with a `\\` escape character)\n* `+` indicates\nthe union of two character classes\n* `-` is the set-difference between the\ntwo classes\n* `ANY` designates all unicode characters.\n\n name              | description\n-------------------|---------------------------\nletter             | ASCII upper or lower case letter; no unicode characters\ndigit              | base-ten digit (\"0123456789\")\nposDigit           | digits, excluding 0 (\"123456789\")\nposDigitFrom2      | digits excluding 0 and 1 (\"23456789\")\nhexdigit           | a normal hex digit (\"0123456789abcdefABCDEF\")\nspecial            | `?_\"\ncr                 | carriage return character (ASCII 10)\nlf                 | line feed character (ASCII 13)\ntab                | tab character (ASCII 9)\nspace              | space character (ASCII 32)\n                   |\nnondigitIdChar     | characters allowed in an identifier, except digits (letter + special)\nidchar             | characters allowed in an identifier (nondigitIdChar + digits)\nnonidchar          | characters not in identifiers (ANY - idchar)\ncharChar           | characters allowed in a character constant (ANY - '\\'' - '\\\\' - cr - lf)\nstringChar         | characters allowed in a string constant (ANY - '\"' - '\\\\' - cr - lf)\nverbatimStringChar | characters allowed in a verbatim string constant (ANY - '\"')\n\n\n\n\nThe _special_ characters are the characters in addition to alphanumeric characters\nthat are allowed to appear in a Dafny identifier. These are\n\n* `'` because mathematicians like to put primes on identifiers and some ML\n  programmers like to start names of type parameters with a `'`,\n* `_` because computer scientists expect to be able to have underscores in identifiers, and\n* `?` because it is useful to have `?` at the end of names of predicates,\n  e.g., `Cons?`.\n\nA `nonidchar` is any character except those that can be used in an identifier.\nHere the scanner generator will interpret `ANY` as any unicode character.\nHowever, `nonidchar` is used only to mark the end of the `!in` token;\nin this context any character other than whitespace or printable ASCII\nwill trigger a subsequent scanning or parsing error.", "start_char_idx": 2, "end_char_idx": 2573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "840dcef0-d886-44ea-bd65-fab0670449bf": {"__data__": {"id_": "840dcef0-d886-44ea-bd65-fab0670449bf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92573ad7-a5d7-42b3-99f6-b88ebcca56e8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a282534ceb18ee29ce5384d0538cbc80bcb8eebddf1ec672595072e32987efac", "class_name": "RelatedNodeInfo"}}, "text": "2.4. Comments {sec-comments}\nComments are in two forms.\n\n* They may go from `/*` to `*/` .\n* They may go from `//` to the end of the line.\n\nA comment is identified as a token during the tokenization of \ninput text and is then discarded for the purpose of interpreting the \nDafny program. (It is retained to enable auto-formatting\nand provide accurate source locations for error messages.)\nThus comments are token separators: `a/*x*/b` becomes two tokens\n`a` and `b`.\n\nComments may be nested,\nbut note that the nesting of multi-line comments is behavior that is different\nfrom most programming languages. In Dafny,\n\n```dafny\nmethod m() {\n  /* comment\n     /* nested comment\n     */\n     rest of outer comment\n  */\n}\n```\nis permitted; this feature is convenient for commenting out blocks of\nprogram statements that already have multi-line comments within them.\nOther than looking for end-of-comment delimiters,\nthe contents of a comment are not interpreted.\nComments may contain any characters.\n\nNote that the nesting is not fool-proof. In\n\n```dafny\nmethod m() {\n  /* var i: int;\n     // */ line comment\n     var j: int;\n  */\n}\n```\nand\n\n```dafny\nmethod m() {\n  /* var i: int;\n     var s: string := \"a*/b\";\n     var j: int;\n   */\n}\n```\nthe `*/` inside the line comment and the string are seen as the end of the outer\ncomment, leaving trailing text that will provoke parsing errors.", "start_char_idx": 2, "end_char_idx": 1380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e48a430-8165-4c93-ac88-e7f2d6df916e": {"__data__": {"id_": "6e48a430-8165-4c93-ac88-e7f2d6df916e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "759f5d68-0788-4876-82d1-b4d35ef44241", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9a35b415df0538d9382485bc73168e4e2b68b84778a2f7289ba18b1c5ea01931", "class_name": "RelatedNodeInfo"}}, "text": "2.5. Documentation comments {sec-documentation-comments}\n\nLike many other languages, Dafny permits _documentation comments_ in a program file.\nSuch comments contain natural language descriptions of program elements and may be used\nby IDEs and documentation generation tools to present information to users.\n\nIn Dafny programs.\n* Documentation comments (a) either begin with `/**` or (b) begin with `//` or /*` in specific locations\n* Doc-comments may be associated with any declaration, including type definitions, export declarations, and datatype constructors.\n* They may be placed before or after the declaration. \n   * If before, it must be a `/**` comment and may not have any blank or white-space lines between the comment\n     and the declaration.\n   * If after, any comments are placed after the signature (with no intervening lines), but before any\n     specifications or left-brace that starts a body, and may be `//` or `/**` or `/*` comments.\n   * If doc-comments are in both places, only the comments after the declaration are used.\n* Doc-comments after the declaration are preferred.\n* If the first of a series of single-line or multi-line comments is interpreted as a doc-string, then any subsequent comments\n  are appended to it, so long as there are no intervening lines, whether blank, all white-space or containing program text.\n* The extraction of the doc-string from a multiline comment follow these rules \n  * On the first line, an optional `*` right after `/*` and an optional space are removed, if present\n  * On other lines, the indentation space (with possibly one star in it) is removed, as if the content was supposed to align with A if the comment started with `/** A` for example.\n* The documentation string is interpreted as plain text, but it is possible to provide a user-written\n  plugin that provides other interpretations. VSCode as used by Dafny interprets any markdown\n  syntax in the doc-string.\n\nHere are examples:\n\n```dafny\nconst c0 := 8\n/** docstring about c0 */\n\n/** docstring about c1 */\nconst c1 := 8\n\n/** first line of docstring */\nconst c2 := 8\n/** second line of docstring */\n\nconst c3 := 8\n// docstring about c3\n// on two lines\n\nconst c4 := 8\n\n// just a comment\n\n\n// just a comment\nconst c5 := 8\n\n```\n\nDatatype constructors may also have comments:\n\n```dafny\ndatatype T =  // Docstring for T\n  | A(x: int,\n      y: int) // Docstring for A\n  | B()       /* Docstring for B */ |\n    C()       // Docstring for C\n\n/** Docstring for T0*/\ndatatype T0 =\n  | /** Docstring for A */\n    A(x: int,\n      y: int)\n  | /** Docstring for B */\n    B()\n  | /** Docstring for C */\n    C()\n```\n\nAs can `export` declarations:\n\n```dafny\nmodule M {\nconst A: int\nconst B: int\nconst C: int\nconst D: int\n\nexport\n  // This is the eponymous export set intended for most clients\n  provides A, B, C\n\n\nexport Friends extends M\n  // This export set is for clients who need to know more of the\n  // details of the module's definitions.\n  reveals A\n  provides D\n}\n```", "start_char_idx": 2, "end_char_idx": 2986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45c19f94-c1b2-4fa8-bfa5-15368ca460d9": {"__data__": {"id_": "45c19f94-c1b2-4fa8-bfa5-15368ca460d9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27359d21-2016-449f-a935-1fb348a7bc6a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5121c74d1efc2570b23331755b21dac6ed023f4eb18a3666326a737f1ecc1c21", "class_name": "RelatedNodeInfo"}}, "text": "2.6. Tokens (grammar) {sec-tokens}\n\nThe Dafny tokens are defined in this section.", "start_char_idx": 2, "end_char_idx": 83, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fb85b97-ef2f-476f-ba55-e16a30e40deb": {"__data__": {"id_": "0fb85b97-ef2f-476f-ba55-e16a30e40deb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "744b1bd3-b6de-4173-8aee-99f237884244", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "acf82e56d58f7acb8cb96e352a0361d019c890affd5d015b9fe7ef56e611903a", "class_name": "RelatedNodeInfo"}}, "text": "2.6.1. Reserved Words {sec-reserved-words}\n\nDafny has a set of reserved words that may not\nbe used as identifiers of user-defined entities.\nThese are listed here.\n\nIn particular note that\n\n- `array`, `array2`, `array3`, etc. are reserved words, denoting array types of given rank.\nHowever,  `array1` and `array0` are ordinary identifiers.\n- `array?`, `array2?`, `array3?`, etc. are reserved words, \ndenoting possibly-null array types of given rank,\nbut not `array1?` or `array0?`.\n- `bv0`, `bv1`, `bv2`, etc. are reserved words that denote the types of\nbitvectors of given length.\nThe sequence of digits after 'array' or 'bv' may not have leading zeros: \nfor example, `bv02` is an ordinary identifier.", "start_char_idx": 2, "end_char_idx": 703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cdccb608-2955-49a6-bdff-cd0e7fcff974": {"__data__": {"id_": "cdccb608-2955-49a6-bdff-cd0e7fcff974", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "541e4837-5357-452b-b342-d56954888ce5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b03b26eeeab794d22dab1d8146570d80530674489cbb61860230b0f702422b3", "class_name": "RelatedNodeInfo"}}, "text": "2.6.2. Identifiers {sec-identifiers}\n\nIn general, an `ident` token (an identifier) is a sequence of ``idchar`` characters where\nthe first character is a ``nondigitIdChar``. However tokens that fit this pattern\nare not identifiers if they look like a character literal\nor a reserved word (including array or bit-vector type tokens).\nAlso, `ident` tokens that begin with an `_` are not permitted as user identifiers.", "start_char_idx": 2, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e56fa5e0-d43b-4e56-984b-b6a26f390c85": {"__data__": {"id_": "e56fa5e0-d43b-4e56-984b-b6a26f390c85", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ead6acd3-91ec-4624-ac77-6e6daa170a56", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ade5b2006e2f19207c819ce0cffb0d3aaf40efdeacce8d92dd4f3c893e837e0", "class_name": "RelatedNodeInfo"}}, "text": "2.6.3. Digits {sec-digits}\n\nA `digits` token is a sequence of decimal digits (`digit`), possibly interspersed with \nunderscores for readability (but not beginning or ending with an underscore).\nExample: `1_234_567`.\n\nA `hexdigits` token denotes a hexadecimal constant, and is a sequence of hexadecimal digits (`hexdigit`)\nprefaced by `0x` and\npossibly interspersed with underscores for readability (but not beginning or ending with an underscore).\nExample: `0xffff_ffff`.\n\nA `decimaldigits` token is a decimal fraction constant, possibly interspersed with underscores for readability (but not beginning or ending with an underscore).\nIt has digits both before and after a single period (`.`) character. There is no syntax for floating point numbers with exponents.\nExample: `123_456.789_123`.", "start_char_idx": 2, "end_char_idx": 794, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a0f89e2-f1a4-4617-b74f-7de69b3bc16f": {"__data__": {"id_": "7a0f89e2-f1a4-4617-b74f-7de69b3bc16f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c3bccfe-838c-4981-aa82-093cec4a85ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c511211f3338b89c7062d22415f20e2f0732c63cc313ecebd581fb2f9d81384e", "class_name": "RelatedNodeInfo"}}, "text": "2.6.4. Escaped Character {sec-escaped-characters}\n\nThe `escapedChar` token is a multi-character sequence that denotes a non-printable or non-ASCII character.\nSuch tokens begin with a backslash characcter (`\\`) and denote\n a single- or double-quote character, backslash,\nnull, new line, carriage return, tab, or a\nUnicode character with given hexadecimal representation.\nWhich Unicode escape form is allowed depends on the value of the `--unicode-char` option.\n\nIf `--unicode-char:false` is stipulated,\n`\\uXXXX` escapes can be used to specify any UTF-16 code unit.\n\nIf `--unicode-char:true` is stipulated,\n`\\U{X..X}` escapes can be used to specify any Unicode scalar value.\nThere must be at least one hex digit in between the braces, and at most six.\nSurrogate code points are not allowed.\nThe hex digits may be interspersed with underscores for readability \n(but not beginning or ending with an underscore), as in `\\U{1_F680}`.\nThe braces are part of the required character sequence.\n\nNote that although Unicode\nletters are not allowed in Dafny identifiers, Dafny does support [Unicode\nin its character, string, and verbatim strings constants and in its comments](#sec-unicode).", "start_char_idx": 2, "end_char_idx": 1180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b107b91f-61ff-408c-923b-d022f8453add": {"__data__": {"id_": "b107b91f-61ff-408c-923b-d022f8453add", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0411c5d4-8135-4a74-91fc-add627462b64", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "563a2b53634e1708df76ff70344eb4e62019aeb5055f7cc5ecb3fda6648a20ae", "class_name": "RelatedNodeInfo"}}, "text": "2.6.5. Character Constant Token {sec-character-constant-token}\n\nThe `charToken` token denotes a character constant.\nIt is either a `charChar` or an `escapedChar` enclosed in single quotes.", "start_char_idx": 2, "end_char_idx": 190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e1c2c45-562d-4370-a1fe-3d7b6c06f78c": {"__data__": {"id_": "2e1c2c45-562d-4370-a1fe-3d7b6c06f78c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9fd4cf7-5ffd-4313-add7-9db07872be44", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3327c1bd086210ee50fcc2c265efcf39835f3d0495d5a264d0c9d69acd88de5d", "class_name": "RelatedNodeInfo"}}, "text": "2.6.6. String Constant Token {sec-string-constant-token}\n\nA `stringToken` denotes a string constant.\nIt consists of a sequence of `stringChar` and `escapedChar` characters enclosed in \ndouble quotes.\n\nA `verbatimStringToken` token also denotes a string constant.\nIt is a sequence of any `verbatimStringChar` characters (which includes newline characters),\nenclosed between `@\"` and `\"`, except that two\nsuccessive double quotes represent one quote character inside\nthe string. This is the mechanism for escaping a double quote character,\nwhich is the only character needing escaping in a verbatim string.\nWithin a verbatim string constant, a backslash character represents itself \nand is not the first character of an `escapedChar`.", "start_char_idx": 2, "end_char_idx": 734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20493730-58ca-492c-b501-7417972806f7": {"__data__": {"id_": "20493730-58ca-492c-b501-7417972806f7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "02a97f61-ce98-431e-b945-b7024145ec29", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "795bd33e31f1116185218b9c5778f643e83548690ba7858031d8dd506eeb6e11", "class_name": "RelatedNodeInfo"}}, "text": "2.6.7. Ellipsis {sec-ellipsis}\n\nThe `ellipsisToken` is the character sequence `...` and is typically used to designate something missing that will\nlater be inserted through refinement or is already present in a parent declaration.", "start_char_idx": 2, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fb853dc-a86a-4276-b0d1-783db6b5ad2d": {"__data__": {"id_": "8fb853dc-a86a-4276-b0d1-783db6b5ad2d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa9f73fc-f451-4e9f-a4c3-2288961e3c77", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aaeaa099678a8c5e664780deddcd853027aa6cb1bd21895570461d194dc3d106", "class_name": "RelatedNodeInfo"}}, "text": "2.7. Low Level Grammar Productions {sec-grammar}", "start_char_idx": 2, "end_char_idx": 50, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c3bc257-afed-47f1-a2f9-75c2116d5d3a": {"__data__": {"id_": "6c3bc257-afed-47f1-a2f9-75c2116d5d3a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "686d111a-bf98-4dda-897d-55e237a9c447", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d568127f73c1e9fdbc39625f07a4f28425e4f5019e37743cd0500f670f10cbd4", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1. Identifier Variations {sec-identifier-variations}", "start_char_idx": 2, "end_char_idx": 58, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad1e49eb-0583-47be-99b9-947620d1e78a": {"__data__": {"id_": "ad1e49eb-0583-47be-99b9-947620d1e78a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "651a22fe-1d4d-475f-9916-30cd096f2e06", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "80054782a6abd27bab99c8e30eca569a5f91bb016b4743299cc857c81e2970fc", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1.1. Identifier\n\nA basic ordinary identifier is just an `ident` token.\n\nIt may be followed by a sequence of suffixes to denote compound entities.\nEach suffix is a dot (`.`) and another token, which may be\n\n- another `ident` token\n- a `digits` token\n- the `requires` reserved word\n- the `reads` reserved word\n\nNote that\n\n* Digits can be used to name fields of classes and destructors of\n  datatypes. For example, the built-in tuple datatypes have destructors\n  named 0, 1, 2, etc. Note that as a field or destructor name, a digit sequence\n  is treated as a string, not a number: internal\n  underscores matter, so `10` is different from `1_0` and from `010`.\n* `m.requires` is used to denote the precondition for method `m`.\n* `m.reads` is used to denote the things that method `m` may read.", "start_char_idx": 2, "end_char_idx": 795, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b02e738-37d8-4369-b216-f8eab6fb2764": {"__data__": {"id_": "5b02e738-37d8-4369-b216-f8eab6fb2764", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66a9be3d-8a91-4235-b821-1293ac193000", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7cac9c4e24430e399653e5df607594c4753d3305c58ae75f8de9937c5d341163", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1.2. No-underscore-identifier\n\nA `NoUSIdent` is an identifier except that identifiers with a **leading**\nunderscore are not allowed. The names of user-defined entities are\nrequired to be ``NoUSIdent``s or, in some contexts, a ``digits``.\n We introduce more mnemonic names\nfor these below (e.g. ``ClassName``).\n\nA no-underscore-identifier is required for the following:\n\n- module name\n- class or trait name\n- datatype name\n- newtype name\n- synonym (and subset) type name\n- iterator name\n- type variable name\n- attribute name\n\nA variation, a no-underscore-identifier or a `digits`, is allowed for\n\n- datatype member name\n- method or function or constructor name\n- label name\n- export id\n- suffix that is a typename or constructor \n\nAll _user-declared_ names do not start with underscores, but there are\ninternally generated names that a user program might _use_ that begin\nwith an underscore or are just an underscore.", "start_char_idx": 2, "end_char_idx": 922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f30cf5a3-95cb-4965-b5c9-d85cd852ba97": {"__data__": {"id_": "f30cf5a3-95cb-4965-b5c9-d85cd852ba97", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecdc3608-1b65-4a35-b565-723687ff658c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "69464f9e0e1783e40ac5b01611249ff02e9bc74113222e30646093efdffe64e5", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1.3. Wild identifier {sec-wild-identifier}\n\nA wild identifier is a no-underscore-identifier except that the singleton\n`_` is allowed. The `_` is replaced conceptually by a unique\nidentifier distinct from all other identifiers in the program.\nA `_` is used when an identifier is needed, but its content is discarded.\nSuch identifiers are not used in expressions.\n\nWild identifiers may be used in these contexts:\n\n- formal parameters of a lambda expression\n- the local formal parameter of a quantifier\n- the local formal parameter of a subset type or newtype declaration\n- a variable declaration\n- a case pattern formal parameter\n- binding guard parameter\n- for loop parameter\n- LHS of update statements", "start_char_idx": 2, "end_char_idx": 707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "551d9933-3033-4847-b415-d7fcce2f2843": {"__data__": {"id_": "551d9933-3033-4847-b415-d7fcce2f2843", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a83975e5-1dd8-47f4-90d9-a243e337b0f6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "42adca3d7230beab6a69a21081eea77fa5ae2262250ae6a36d2e936112f0a1ea", "class_name": "RelatedNodeInfo"}}, "text": "2.7.2. Qualified Names\n\nA qualified name starts with the name of a top-level entity and then is followed by\nzero or more ``DotSuffix``s which denote a component. Examples:\n\n* `Module.MyType1`\n* `MyTuple.1`\n* `MyMethod.requires`\n* `A.B.C.D`\n\nThe identifiers and dots are separate tokens and so may optionally be\nseparated by whitespace.", "start_char_idx": 2, "end_char_idx": 337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8e72d4d-ce4e-410e-94ab-4f711a11a8f3": {"__data__": {"id_": "c8e72d4d-ce4e-410e-94ab-4f711a11a8f3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34e9c9a8-9a5c-4109-b0a6-e7ec9b7b5afb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7f66447d90f6ac9b4051f346d208829d567788cdfa70d740da1e9500a989e133", "class_name": "RelatedNodeInfo"}}, "text": "2.7.3. Identifier-Type Combinations\n\nIdentifiers are typically declared in combination with a type, as in\n\n```dafny\nvar i: int\n```\n\nHowever, Dafny infers types in many circumstances, and in those, the type can be omitted. The type is required\nfor field declarations and formal parameters of methods, functions and constructors (because there is no initializer).\nIt may be omitted (if the type can be inferred) for local variable declarations, pattern matching variables, \nquantifiers, \n\nSimilarly, there are circumstances in which the identifier name is not needed, because it is not used.\nThis is allowed in defining algebraic datatypes.\n\nIn some other situations a wild identifier can be used, as described above.", "start_char_idx": 2, "end_char_idx": 717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f9d1caa-864a-4f2e-b011-805f71e55753": {"__data__": {"id_": "7f9d1caa-864a-4f2e-b011-805f71e55753", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3cd68da-3891-4c66-bf3b-5dd03a2a9c8f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "afbedfdc9d9b66b25ad6164bc3549c1434cab22c5491191a0e4e13654bdf0a6a", "class_name": "RelatedNodeInfo"}}, "text": "2.7.4. Quantifier Domains (grammar) {sec-quantifier-domains}\n\nSeveral Dafny constructs bind one or more variables to a range of possible values.\nFor example, the quantifier `forall x: nat | x <= 5 :: x * x <= 25` has the meaning\n\"for all integers x between 0 and 5 inclusive, the square of x is at most 25\".\nSimilarly, the set comprehension `set x: nat | x <= 5 :: f(x)` can be read as\n\"the set containing the result of applying f to x, for each integer x from 0 to 5 inclusive\".\nThe common syntax that specifies the bound variables and what values they take on\nis known as the *quantifier domain*; in the previous examples this is `x: nat | x <= 5`, \nwhich binds the variable `x` to the values `0`, `1`, `2`, `3`, `4`, and `5`.\n\nHere are some more examples.\n\n- `x: byte` (where a value of type `byte` is an int-based number `x` in the range `0 <= x < 256`)\n- `x: nat | x <= 5`\n- `x <- integerSet`\n- `x: nat <- integerSet`\n- `x: nat <- integerSet | x % 2 == 0`\n- `x: nat, y: nat | x < 2 && y < 2`\n- `x: nat | x < 2, y: nat | y < x`\n- `i | 0 <= i < |s|, y <- s[i] | i < y`\n\nA quantifier domain declares one or more *quantified variables*, separated by commas.\nEach variable declaration can be nothing more than a variable name, but it \nmay also include any of three optional elements:\n\n1. The optional syntax `: T` declares the type of the quantified variable.\n   If not provided, it will be inferred from context.\n\n2. The optional syntax `<- C` attaches a collection expression `C` as a *quantified variable domain*.\n   Here a collection is any value of a type that supports the `in` operator, namely sets, multisets, maps, and sequences.\n   The domain restricts the bindings to the elements of the collection: `x <- C` implies `x in C`.\n   The example above can also be expressed as `var c := [0, 1, 2, 3, 4, 5]; forall x <- c :: x * x <= 25`.\n\n3. The optional syntax `| E` attaches a boolean expression `E` as a *quantified variable range*,\n   which restricts the bindings to values that satisfy this expression.\n   In the example above `x <= 5` is the range attached to the `x` variable declaration.\n\nNote that a variable's domain expression may reference any variable declared before it,\nand a variable's range expression may reference the attached variable (and usually does) and any variable declared before it.\nFor example, in the quantifier domain `i | 0 <= i < |s|, y <- si] | i < y`, the expression `s[i]` is always [well-formed\nbecause the range attached to `i` ensures `i` is a valid index in the sequence `s`.\n\nAllowing per-variable ranges is not fully backwards compatible, and so it is not yet allowed by default;\nthe `--quantifier-syntax:4` option needs to be provided to enable this feature (See Section 13.9.5).", "start_char_idx": 2, "end_char_idx": 2731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dba5050d-d958-40af-9d63-970ca5a223bf": {"__data__": {"id_": "dba5050d-d958-40af-9d63-970ca5a223bf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be040875-9d9f-4169-9077-423b34140132", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fb4447a6db2c3cc6f125f1cde1a8540ccfb7f85a5d9939b21c23549c0135f3a4", "class_name": "RelatedNodeInfo"}}, "text": "2.7.5. Numeric Literals (grammar) {sec-numeric-literals}\n\nInteger and bitvector literals may be expressed in either decimal or hexadecimal (`digits` or `hexdigits`).\n\nReal number literals are written as decimal fractions (`decimaldigits`).", "start_char_idx": 2, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb8530b9-6458-4bd4-ad2e-659304259191": {"__data__": {"id_": "fb8530b9-6458-4bd4-ad2e-659304259191", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "718c6eb5-d6d0-46b1-94a8-d723151b6fb4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2ecff92655cf59a573d76955c82c8808a16f8496dc2eac39dc9b8a86b4bb59a5", "class_name": "RelatedNodeInfo"}}, "text": "17. Dafny Grammar {sec-grammar-details}\n\nThe Dafny grammar has a traditional structure: a scanner tokenizes the textual input into a sequence of tokens; the parser consumes the tokens\nto produce an AST. The AST is then passed on for name and type resolution and further processing.\n\nDafny uses the Coco/R lexer and parser generator for its lexer and parser\n()[@Linz:Coco].\nSee the [Coco/R Reference\nmanual](http://www.ssw.uni-linz.ac.at/Research/Projects/Coco/Doc/UserManual.pdf)\nfor details.\nThe Dafny input file to Coco/R is the `Dafny.atg` file in the source tree.\n\nThe grammar is an _attributed extended BNF_ grammar.\nThe _attributed_ adjective indicates that the BNF productions are\nparameterized by boolean parameters that control variations of the \nproduction rules, such as whether a particular alternative is permitted or\nnot. Using such attributes allows combining non-terminals with quite\nsimilar production rules, making a simpler, more compact and more\nreadable grammer.\n\nThe grammar rules presented here replicate those in the source\ncode, but omit semantic actions, error recovery markers, and\nconflict resolution syntax. Some uses of the attribute\nparameters are described informally.\n\nThe names of character sets and tokens start with a lower case\nletter; the names of grammar non-terminals start with\nan upper-case letter.", "start_char_idx": 2, "end_char_idx": 1342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da06f907-fa23-4ab9-ba23-e83653acafc2": {"__data__": {"id_": "da06f907-fa23-4ab9-ba23-e83653acafc2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de91e5e8-4f83-4911-a85e-cf2e176b7684", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5c0d969f241cbba284bb201120b400728466a5c68697671c637931f5a7263a19", "class_name": "RelatedNodeInfo"}}, "text": "17.1. Dafny Syntax\n\nThis section gives the definitions of Dafny tokens.", "start_char_idx": 2, "end_char_idx": 73, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0edbee9-1b76-4726-b7bb-713f1be7028e": {"__data__": {"id_": "b0edbee9-1b76-4726-b7bb-713f1be7028e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58e00094-d7e7-418d-9c6b-7ec6a10f2445", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "01bd8baa228c47bfa849552d1585fc0042d39dc89ead0b5cf6c150fdb4148fce", "class_name": "RelatedNodeInfo"}}, "text": "17.1.1. Classes of characters\n\nThese definitions define some names as representing subsets of the set of characters. Here,\n\n* double quotes enclose the set of characters constituting the class, \n* single quotes enclose a single character (perhaps an escaped representation using `\\`), \n* the binary `+` indicates set union, \n* binary `-` indicates set difference, and \n* `ANY` indicates the set of all (unicode) characters.\n\n````grammar\nletter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\ndigit = \"0123456789\"\nposDigit = \"123456789\"\nposDigitFrom2 = \"23456789\"\n\nhexdigit = \"0123456789ABCDEFabcdef\"\n\nspecial = \"'_?\"\n\ncr        = '\\r'\n\nlf        = '\\n'\n\ntab       = '\\t'\n\nspace     = ' '\n\nnondigitIdChar = letter + special\n\nidchar = nondigitIdChar + digit\n\nnonidchar = ANY - idchar\n\ncharChar = ANY - '\\'' - '\\\\' - cr - lf\n\nstringChar = ANY - '\"' - '\\\\' - cr - lf\n\nverbatimStringChar = ANY - '\"'\n````\n\nA `nonidchar` is any character except those that can be used in an identifier.\nHere the scanner generator will interpret `ANY` as any unicode character.\nHowever, `nonidchar` is used only to mark the end of the `!in` token;\nin this context any character other than whitespace or printable ASCII\nwill trigger a subsequent scanning or parsing error.", "start_char_idx": 2, "end_char_idx": 1259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "792d59fb-2bec-4738-b125-7d10f326304a": {"__data__": {"id_": "792d59fb-2bec-4738-b125-7d10f326304a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73764402-186d-43fa-aadf-b0e05623570a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "12c3b0c4e5cd102df17e2d97ad3f08ea2995afd99baf43f43af0af794226425d", "class_name": "RelatedNodeInfo"}}, "text": "17.1.2. Definitions of tokens {sec-g-tokens}\n\nThese definitions use \n\n* double-quotes to indicate a verbatim string (with no escaping of characters)\n* `'\"'` to indicate a literal double-quote character\n* vertical bar to indicate alternatives\n* square brackets to indicate an optional part\n* curly braces to indicate 0-or-more repetitions\n* parentheses to indicate grouping\n* a `-` sign to indicate set difference: any character sequence matched by the left operand except character sequences matched by the right operand\n* a sequence of any of the above to indicate concatenation without whitespace\n\n````grammar\nreservedword =\n    \"abstract\" | \"allocated\" | \"as\" | \"assert\" | \"assume\" |\n    \"bool\" | \"break\" | \"by\" |\n    \"calc\" | \"case\" | \"char\" | \"class\" | \"codatatype\" |\n    \"const\" | \"constructor\" | \"continue\" |\n    \"datatype\" | \"decreases\" |\n    \"else\" | \"ensures\" | \"exists\" | \"expect\" | \"export\" | \"extends\" |\n    \"false\" | \"for\" | \"forall\" | \"fresh\" | \"function\" | \"ghost\" |\n    \"if\" | \"imap\" | \"import\" | \"in\" | \"include\" |\n    \"int\" | \"invariant\" | \"is\" | \"iset\" | \"iterator\" |\n    \"label\" | \"lemma\" | \"map\" | \"match\" | \"method\" |\n    \"modifies\" | \"modify\" | \"module\" | \"multiset\" |\n    \"nameonly\" | \"nat\" | \"new\" | \"newtype\" | \"null\" |\n    \"object\" | \"object?\" | \"old\" | \"opaque\" | \"opened\" | \"ORDINAL\"\n    \"predicate\" | \"print\" | \"provides\" |\n    \"reads\" | \"real\" | \"refines\" | \"requires\" | \"return\" |\n    \"returns\" | \"reveal\" | \"reveals\" |\n    \"seq\" | \"set\" | \"static\" | \"string\" |\n    \"then\" | \"this\" | \"trait\" | \"true\" | \"twostate\" | \"type\" |\n    \"unchanged\" | \"var\" | \"while\" | \"witness\" |\n    \"yield\" | \"yields\" |\n    arrayToken | bvToken\n\narrayToken = \"array\" [ posDigitFrom2 | posDigit digit { digit }][\"?\"]\n\nbvToken = \"bv\" ( 0 | posDigit { digit } )\n\nident = nondigitIdChar { idchar } - charToken - reservedword\n\ndigits = digit {[\"_\"] digit}\n\nhexdigits = \"0x\" hexdigit {[\"_\"] hexdigit}\n\ndecimaldigits = digit {[\"_\"] digit} '.' digit {[\"_\"] digit}\n\nescapedChar =\n    ( \"\\'\" | \"\\\"\" | \"\\\\\" | \"\\0\" | \"\\n\" | \"\\r\" | \"\\t\"\n      | \"\\u\" hexdigit hexdigit hexdigit hexdigit\n      | \"\\U{\" hexdigit { hexdigit } \"}\"\n    )\n\ncharToken = \"'\" ( charChar | escapedChar ) \"'\"\n\nstringToken =\n    '\"' { stringChar | escapedChar }  '\"'\n  | \"@\" '\"' { verbatimStringChar | '\"' '\"' } '\"'\n\nellipsis = \"...\"\n````\n\nThere are a few words that have a special meaning in certain contexts, but are not \nreserved words and can be used as identifiers outside of those contexts:\n\n* `least` and `greatest` are recognized as adjectives to the keyword `predicate` (cf. Section 12.4).\n* `older` is a modifier for parameters of non-extreme predicates (cf. Section 6.4.6).\n\nThe `\\uXXXX` form of an `escapedChar` is only used when the option `--unicode-char=false` is set (which is the default for Dafny 3.x);\nthe `\\U{XXXXXX}` form of an `escapedChar` is only used when the option `--unicode-char=true` is set (which is the default for Dafny 4.x).", "start_char_idx": 2, "end_char_idx": 2928, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "676dcbb5-83cf-4d44-8f56-c6e77ac4055d": {"__data__": {"id_": "676dcbb5-83cf-4d44-8f56-c6e77ac4055d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "636faf08-d3e6-41d7-b35a-ac8c239d1dc0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "90c89edc45b72928cdcabda0aec54115b70b64442c019e7999b5c9ae6017353b", "class_name": "RelatedNodeInfo"}}, "text": "17.2. Dafny Grammar productions\n\nThe grammar productions are presented in the following Extended BNF syntax:\n\n* identifiers starting with a lower case letter denote\nterminal symbols (tokens) as defined in the previous subsection\n* identifiers starting with an upper case letter denote nonterminal\nsymbols\n* strings (a sequence of characters enclosed by double quote characters)\ndenote the sequence of enclosed characters\n* `=` separates the sides of a production, e.g. `A = a b c`\n* `|` separates alternatives, e.g. `a b | c | d e` means `a b` or `c` or `d e`\n* `(` `)` groups alternatives, e.g. `(a | b) c` means `a c` or `b c`\n* `[ ]` option, e.g. `[a] b` means `a b` or `b`\n* `{ }` iteration (0 or more times), e.g. `{a} b` means `b` or `a b` or `a a b` or ...\n* We allow `|` inside `[ ]` and `{ }`. So `[a | b]` is short for `[(a | b)]`\n  and `{a | b}` is short for `{(a | b)}`.\n* `//` in a line introduces a comment that extends to the end-of-the line, but does not terminate the production\n* The first production defines the name of the grammar, in this case `Dafny`.\n\nIn addition to the Coco rules, for the sake of readability we have adopted\nthese additional conventions.\n\n* We allow `-` to be used. `a - b` means it matches if it matches `a` but not `b`.\n* We omit the `.` that marks the end of a CoCo/R production.\n* we omit deprecated features.\n\nTo aid in explaining the grammar we have added some additional productions\nthat are not present in the original grammar. We name these with a trailing\nunderscore. Inlining these where they are referenced will reconstruct the original grammar.\n\n<!-- A note on formatting the sections below: LaTex renders the 'discussion' link in line with the heading for level-4 and higher headings.\n     I've not found a sensible way around it (and it is not worth much trouble). -->", "start_char_idx": 2, "end_char_idx": 1827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa1e4ea2-4865-4e1c-9ab6-b34783374670": {"__data__": {"id_": "aa1e4ea2-4865-4e1c-9ab6-b34783374670", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3d5e355-98be-4cca-a544-1275626e531b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6a3c2f1ef8801a8c5b2e93a64ea914ec2d327e6a68814babcd98d194c2ff37b6", "class_name": "RelatedNodeInfo"}}, "text": "17.2.1. Programs {g-program}\n(discussion) \n\n````grammar\nDafny = { IncludeDirective_ } { TopDecl(isTopLevel:true, isAbstract: false) } EOF\n````", "start_char_idx": 2, "end_char_idx": 144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d686008-c5bf-49b0-867e-68fd3e8d89bc": {"__data__": {"id_": "1d686008-c5bf-49b0-867e-68fd3e8d89bc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ce4f0eb-060c-44b5-8e90-e299550b092a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d816642367062fb76a621195d46549a8bd0cba7831346d4b09895a3f6340f275", "class_name": "RelatedNodeInfo"}}, "text": "17.2.1.1. Include directives {g-include-directive}\n(discussion)\n\n````grammar\nIncludeDirective_ = \"include\" stringToken\n````", "start_char_idx": 2, "end_char_idx": 125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f107559-d582-4435-9968-2f87cefba642": {"__data__": {"id_": "0f107559-d582-4435-9968-2f87cefba642", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b67ee8f0-895f-49ed-8159-06d21746ae3c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "703adcd0f5a173629aeaa5dc5b7849bcd2370d76d01bd3ff97d0060152a02328", "class_name": "RelatedNodeInfo"}}, "text": "17.2.1.2. Top-level declarations {g-top-level-declaration}\n(discussion)\n\n````grammar\nTopDecl(isTopLevel, isAbstract) =\n  { DeclModifier }\n  ( SubModuleDecl(isTopLevel)\n  | ClassDecl\n  | DatatypeDecl\n  | NewtypeDecl\n  | SynonymTypeDecl  // includes abstract types\n  | IteratorDecl\n  | TraitDecl\n  | ClassMemberDecl(allowConstructors: false, isValueType: true, moduleLevelDecl: true)\n  )\n````", "start_char_idx": 2, "end_char_idx": 392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "857bee35-732f-4a1a-82f5-0671a44ab827": {"__data__": {"id_": "857bee35-732f-4a1a-82f5-0671a44ab827", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "291fcd1e-fd98-47d5-b39e-bb2842ec6b52", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "171d66cc9db6922fc0c5458f220319d423b298c47be5e6beccb63e4f160ce763", "class_name": "RelatedNodeInfo"}}, "text": "17.2.1.3. Declaration modifiers {g-declaration-modifier}\n(discussion) \n\n````grammar\nDeclModifier = ( \"abstract\" | \"ghost\" | \"static\" | \"opaque\" )\n````", "start_char_idx": 2, "end_char_idx": 152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f05c03e-b0f0-42b6-881d-dc2cfb4c6709": {"__data__": {"id_": "7f05c03e-b0f0-42b6-881d-dc2cfb4c6709", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f39add1-544f-41ad-81f6-187769f93c42", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c53f76c3b1cc8daa53d9d35d3e91ae5fc200e39de764802df8dbacc9352d3be5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.2. Modules {g-module}\n\n````grammar\nSubModuleDecl(isTopLevel) = ( ModuleDefinition | ModuleImport | ModuleExport )\n````\n\nModule export declarations are not permitted if `isTopLevel` is true.", "start_char_idx": 2, "end_char_idx": 196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36d3fcc0-ecec-45ac-8f11-b0fec832203b": {"__data__": {"id_": "36d3fcc0-ecec-45ac-8f11-b0fec832203b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0db9145d-ddba-4277-a050-16ce9a9dea0a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f4f9d706da31ba67f30054de9b9d29dd9826922462d6b5c6c5eacd1b44031643", "class_name": "RelatedNodeInfo"}}, "text": "17.2.2.1. Module Definitions {g-module-definition}\n(discussion) \n\n````grammar\nModuleDefinition(isTopLevel) = \n  \"module\" { Attribute } ModuleQualifiedName\n  [ \"refines\" ModuleQualifiedName ]\n  \"{\" { TopDecl(isTopLevel:false, isAbstract) } \"}\"\n````\n\nThe `isAbstract` argument is true if the preceding `DeclModifiers` include \"abstract\".", "start_char_idx": 2, "end_char_idx": 337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e2babcd-59ab-4393-bc93-e5455c3fda8a": {"__data__": {"id_": "3e2babcd-59ab-4393-bc93-e5455c3fda8a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a080503-e4e1-41d0-a982-6129efc87ce9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f27f8d3d2d856e67c7d12e276dff2c51d6120a530e60dd499074c2d2c519f677", "class_name": "RelatedNodeInfo"}}, "text": "17.2.2.2. Module Imports {g-module-import}\n(discussion) \n\n````grammar\nModuleImport =\n  \"import\"\n  [ \"opened\" ]\n  ( QualifiedModuleExport\n  | ModuleName \"=\" QualifiedModuleExport\n  | ModuleName \":\" QualifiedModuleExport\n  )\n\nQualifiedModuleExport =\n    ModuleQualifiedName [ \"`\" ModuleExportSuffix ]\n\nModuleExportSuffix =\n  ( ExportId\n  | \"{\" ExportId { \",\" ExportId } \"}\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 382, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f959895-7ca8-4ef8-969e-1123a8c349e9": {"__data__": {"id_": "1f959895-7ca8-4ef8-969e-1123a8c349e9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2708041a-9eb3-4160-88bd-0d6b2808320c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3af022128d83d79251b3372b6b54270a0c024f1954dcc4e38f0a86ba5207640b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.2.3. Module Export Definitions {g-module-export}\n(discussion) \n\n````grammar\nModuleExport =\n  \"export\"\n  [ ExportId ]\n  [ \"...\" ]\n  {\n    \"extends\"  ExportId { \",\" ExportId }\n  | \"provides\" ( ExportSignature { \",\" ExportSignature } | \"*\" )\n  | \"reveals\"  ( ExportSignature { \",\" ExportSignature } | \"*\" )\n  }\n\nExportSignature = TypeNameOrCtorSuffix [ \".\" TypeNameOrCtorSuffix ]\n````", "start_char_idx": 2, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "035710de-5fdf-43f5-ade1-81f8bb6da98c": {"__data__": {"id_": "035710de-5fdf-43f5-ade1-81f8bb6da98c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f3a5f12-000e-4ddd-8665-cd410d8d718e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "59579b0ba702651de8d5f2b65e67ad3578ab0721e6201c35bcc00d4c76ab6195", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3. Types {g-type}\n(discussion) \n\n````grammar\nType = DomainType_ | ArrowType_\n\nDomainType_ =\n  ( BoolType_ | CharType_ | IntType_ | RealType_\n  | OrdinalType_ | BitVectorType_ | ObjectType_\n  | FiniteSetType_ | InfiniteSetType_\n  | MultisetType_\n  | FiniteMapType_ | InfiniteMapType_\n  | SequenceType_\n  | NatType_\n  | StringType_\n  | ArrayType_\n  | TupleType\n  | NamedType\n  )\n\nNamedType = NameSegmentForTypeName { \".\" NameSegmentForTypeName }\n\nNameSegmentForTypeName = Ident [ GenericInstantiation ]\n````", "start_char_idx": 2, "end_char_idx": 512, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b35b414-033b-4d09-8770-a739c5c36296": {"__data__": {"id_": "4b35b414-033b-4d09-8770-a739c5c36296", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7fc9b845-f060-465d-a4c1-ab5175aa41b1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2608828681852746a8649c760811d33dd3a9bdad0b67039ee00f98fb5d42a937", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.1. Basic types {g-basic-type}\n(discussion) \n\n````grammar\nBoolType_ = \"bool\"\nIntType_ = \"int\"\nRealType_ = \"real\"\nBitVectorType_ = bvToken\nOrdinalType_ = \"ORDINAL\"\nCharType_ = \"char\"\n````", "start_char_idx": 2, "end_char_idx": 194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73c23698-4711-4347-a84c-9e37b2fab051": {"__data__": {"id_": "73c23698-4711-4347-a84c-9e37b2fab051", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64f2101d-0b36-4de1-b0dc-a9c341642aa1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97053dbbc070b6d33366f7d94a23d0f6c12eb55869ee49507288e7d7b12d983d", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.2. Generic instantiation {g-generic-instantiation}\n(discussion) \n\n````grammar\nGenericInstantiation = \"\"\n````", "start_char_idx": 2, "end_char_idx": 117, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bb70d77-6c87-47cc-a2ac-60046cde270e": {"__data__": {"id_": "6bb70d77-6c87-47cc-a2ac-60046cde270e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cf615d3-89eb-4bf9-9939-f96a11d41896", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e3900ea8d8cbf5fc8ea5b778a023b89cf46cc5255ab36fde1a2cfba0e4598d69", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.3. Type parameter {g-type-parameter}\n(discussion) \n\n````grammar\nGenericParameters(allowVariance) =\n  \"<\" [ Variance ] TypeVariableName { TypeParameterCharacteristics }\n  { \",\" [ Variance ] TypeVariableName { TypeParameterCharacteristics } }\n  \">\"\n\n// The optional Variance indicator is permitted only if allowVariance is true\nVariance = ( \"*\" | \"+\" | \"!\" | \"-\" )\n\nTypeParameterCharacteristics = \"(\" TPCharOption { \",\" TPCharOption } \")\"\n\nTPCharOption = ( \"==\" | \"0\" | \"00\" | \"!\" \"new\" )\n````", "start_char_idx": 2, "end_char_idx": 500, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53ae47b5-8849-4fd7-9006-448e99887de4": {"__data__": {"id_": "53ae47b5-8849-4fd7-9006-448e99887de4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1ad728e-7271-4465-92a2-03e1ccd62ead", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bd52b5a10d1832598e75857a4d39dc8292bbb0f084c3f74034dbd9cd79001061", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.4. Collection types {g-collection-type}\n(discussion) \n\n````grammar\nFiniteSetType_ = \"set\" [ GenericInstantiation ]\n\nInfiniteSetType_ = \"iset\" [ GenericInstantiation ]\n\nMultisetType_ = \"multiset\" [ GenericInstantiation ]\n\nSequenceType_ = \"seq\" [ GenericInstantiation ]\n\nStringType_ = \"string\"\n\nFiniteMapType_ = \"map\" [ GenericInstantiation ]\n\nInfiniteMapType_ = \"imap\" [ GenericInstantiation ]\n````", "start_char_idx": 2, "end_char_idx": 406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ea7fa60-8f4f-4bd3-af7c-850fdb9fced1": {"__data__": {"id_": "1ea7fa60-8f4f-4bd3-af7c-850fdb9fced1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "521ac351-b524-4f59-9450-2a714b1d5b02", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5a09e629970652fc380bbbae31619987a01d3e8a439bf7d7dd27103174335161", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.5. Type definitions {g-type-definition}\n(discussion) \n\n````grammar\nSynonymTypeDecl =\n  SynonymTypeDecl_ | OpaqueTypeDecl_ | SubsetTypeDecl_\n\nSynonymTypeName = NoUSIdent\n\nSynonymTypeDecl_ =\n  \"type\" { Attribute } SynonymTypeName\n   { TypeParameterCharacteristics }\n   [ GenericParameters ]\n   \"=\" Type\n\nOpaqueTypeDecl_ =\n  \"type\" { Attribute } SynonymTypeName\n   { TypeParameterCharacteristics }\n   [ GenericParameters ]\n   [ TypeMembers ]\n\nTypeMembers =\n  \"{\"\n  {\n    { DeclModifier }\n    ClassMemberDecl(allowConstructors: false,\n                    isValueType: true,\n                    moduleLevelDecl: false,\n                    isWithinAbstractModule: module.IsAbstract)\n  }\n  \"}\"\n\nSubsetTypeDecl_ =\n  \"type\"\n  { Attribute }\n  SynonymTypeName [ GenericParameters ]\n  \"=\"\n  LocalIdentTypeOptional\n  \"|\"\n  Expression(allowLemma: false, allowLambda: true)\n  [ \"ghost\" \"witness\" Expression(allowLemma: false, allowLambda: true)\n  | \"witness\" Expression((allowLemma: false, allowLambda: true)\n  | \"witness\" \"*\"\n  ]\n\nNatType_ = \"nat\"\n\nNewtypeDecl = \"newtype\" { Attribute } NewtypeName \"=\"\n  [ ellipsis ]\n  ( LocalIdentTypeOptional\n    \"|\"\n    Expression(allowLemma: false, allowLambda: true)\n    [ \"ghost\" \"witness\" Expression(allowLemma: false, allowLambda: true)\n    | \"witness\" Expression((allowLemma: false, allowLambda: true)\n    | \"witness\" \"*\"\n    ]\n  | Type\n  )\n  [ TypeMembers ]\n````", "start_char_idx": 2, "end_char_idx": 1401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cba112c-0f5f-4436-a08f-d0e8c8048e74": {"__data__": {"id_": "7cba112c-0f5f-4436-a08f-d0e8c8048e74", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f962f35c-33c5-49f0-979d-e6e00965c28e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9c151421da2706c792cbc7a14e8884123d5db635d4a167d78d731b9382ded530", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.6. Class type {g-class-type}\n(discussion) \n\n````grammar\nClassDecl = \"class\" { Attribute } ClassName [ GenericParameters ]\n  [\"extends\" Type {\",\" Type} | ellipsis ]\n  \"{\" { { DeclModifier }\n        ClassMemberDecl(modifiers,\n                        allowConstructors: true,\n                        isValueType: false,\n                        moduleLevelDecl: false) \n      }\n  \"}\"\n\nClassMemberDecl(modifiers, allowConstructors, isValueType, moduleLevelDecl) =\n  ( FieldDecl(isValueType) // allowed iff moduleLevelDecl is false\n  | ConstantFieldDecl(moduleLevelDecl)\n  | FunctionDecl(isWithinAbstractModule)\n  | MethodDecl(modifiers, allowConstructors)\n  )\n````", "start_char_idx": 2, "end_char_idx": 668, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65e97718-9a90-4ffc-8770-519c4226aeac": {"__data__": {"id_": "65e97718-9a90-4ffc-8770-519c4226aeac", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ce46d90-f5a2-4640-9ac2-46c03616039c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "50daa842c4cc2039388407e454b008b181d1a8b1df034fb3a0c8245b91a1ce74", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.7. Trait types {g-trait-type}\n(discussion) \n\n````grammar\nTraitDecl =\n  \"trait\" { Attribute } ClassName [ GenericParameters ]\n  [ \"extends\" Type { \",\" Type } | ellipsis ]\n  \"{\"\n   { { DeclModifier } ClassMemberDecl(allowConstructors: true,\n                                      isValueType: false,\n                                      moduleLevelDecl: false,\n                                      isWithinAbstractModule: false) }\n  \"}\"\n````", "start_char_idx": 2, "end_char_idx": 449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4bf2c37-b1c1-48aa-a224-99776bcd9442": {"__data__": {"id_": "e4bf2c37-b1c1-48aa-a224-99776bcd9442", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3130ac0f-89af-4306-91ac-bed58c420250", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "531c2f5ffc1294073a8d7f75c4df36b220e35ea215939c54e6cdf83a54824897", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.8. Object type {g-object-type}\n(discussion) \n\n````grammar\nObjectType_ = \"object\" | \"object?\"\n````", "start_char_idx": 2, "end_char_idx": 106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5216373e-b1df-4417-8875-134762fe8019": {"__data__": {"id_": "5216373e-b1df-4417-8875-134762fe8019", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "023500db-ef14-466a-a6b8-476367563b00", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8fda2900aadf6aa5862a4c1823e3f0c9dd9a695cc517938ac0d768320a2f54ed", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.9. Array types {g-array-type}\n(discussion) \n\n````grammar\nArrayType_ = arrayToken [ GenericInstantiation ]\n````", "start_char_idx": 2, "end_char_idx": 119, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ac139ea-1575-459c-b104-f282c2055365": {"__data__": {"id_": "7ac139ea-1575-459c-b104-f282c2055365", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a539382d-acea-4e72-9cc2-ae1bc8337b42", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f2d906e44c838c2e7131b2d89145141b0067ad2dcd161c4b06d04d8816dd3b73", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.10. Iterator types {g-iterator-type}\n(discussion) \n\n````grammar\nIteratorDecl = \"iterator\" { Attribute } IteratorName\n  ( [ GenericParameters ]\n    Formals(allowGhostKeyword: true, allowNewKeyword: false, \n                                     allowOlderKeyword: false)\n    [ \"yields\" Formals(allowGhostKeyword: true, allowNewKeyword: false, \n                                                allowOlderKeyword: false) ]\n  | ellipsis\n  )\n  IteratorSpec\n  [ BlockStmt ]\n````", "start_char_idx": 2, "end_char_idx": 478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "884b414e-a13b-474f-9ee3-377031a55f6a": {"__data__": {"id_": "884b414e-a13b-474f-9ee3-377031a55f6a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aea58eab-523c-4aba-b280-602298a726ba", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5491ff8a17ddd1c50c752f60ce3a27597266f0b038939cd4d445e67aa570a5cf", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.11. Arrow types {g-arrow-type}\n(discussion) \n\n````grammar\nArrowType_ = ( DomainType_ \"~>\" Type\n             | DomainType_ \"-->\" Type\n             | DomainType_ \"->\" Type\n             )\n````", "start_char_idx": 2, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2dda6dc-11d4-4640-94ee-d1416a4f865a": {"__data__": {"id_": "b2dda6dc-11d4-4640-94ee-d1416a4f865a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9083bf1-8975-4a21-be7d-d8ba4a8ba0d5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5cae118e147cb1231536d0b6b59a8adb352da5682faee2c3994dea427b5e9c73", "class_name": "RelatedNodeInfo"}}, "text": "17.2.3.12. Algebraic datatypes {g-datatype}\n(discussion) \n\n````grammar\nDatatypeDecl =\n  ( \"datatype\" | \"codatatype\" )\n  { Attribute }\n  DatatypeName [ GenericParameters ]\n  \"=\" \n  [ ellipsis ]\n  [ \"|\" ] DatatypeMemberDecl\n  { \"|\" DatatypeMemberDecl }\n  [ TypeMembers ]\n\nDatatypeMemberDecl =\n  { Attribute } DatatypeMemberName [ FormalsOptionalIds ]\n````", "start_char_idx": 2, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4eb8f14a-0176-4b12-9e7a-b187fd2fbaaf": {"__data__": {"id_": "4eb8f14a-0176-4b12-9e7a-b187fd2fbaaf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98dc80ec-0169-412a-a6fa-b1a0a466c267", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2812ce5e583e7c4cdebdce2c1ea0eedaa46b1c45bb59e231d424bf2ca2ecba4b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.4. Type member declarations {g-member-declaration}\n(discussion)", "start_char_idx": 2, "end_char_idx": 70, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "804b6413-4870-4682-a932-be6c5aea4141": {"__data__": {"id_": "804b6413-4870-4682-a932-be6c5aea4141", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "693dd6f7-1e3b-4a02-a5a2-dc05f20c62b2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "759f7937da9baf8edfec3ed7c7c21be5bbc2e0575b8a7ff65ecb06fb00064777", "class_name": "RelatedNodeInfo"}}, "text": "17.2.4.1. Fields {g-field-declaration}\n(discussion) \n\n````grammar\nFieldDecl(isValueType) =\n  \"var\" { Attribute } FIdentType { \",\" FIdentType }\n````\n\nA `FieldDecl` is not permitted if `isValueType` is true.", "start_char_idx": 2, "end_char_idx": 207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47215e5e-6cb6-4951-8592-6fd579f4e128": {"__data__": {"id_": "47215e5e-6cb6-4951-8592-6fd579f4e128", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6a6f03e-3ba9-40cc-9b58-79f98d406c91", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cdea235bba395b50173ff82cd5f211ef5b7736f9602273e9c8281f6b59bcb50c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.4.2. Constant fields {g-const-declaration}\n(discussion) \n\n````grammar\nConstantFieldDecl(moduleLevelDecl) =\n  \"const\" { Attribute } CIdentType [ ellipsis ]\n   [ \":=\" Expression(allowLemma: false, allowLambda:true) ]\n````\n\nIf `moduleLevelDecl` is true, then the `static` modifier is not permitted\n(the constant field is static implicitly).", "start_char_idx": 2, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "060862d2-9946-4a98-9632-1de2c27fbfd7": {"__data__": {"id_": "060862d2-9946-4a98-9632-1de2c27fbfd7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5db56686-432d-4245-af00-e524151a26d1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f04792e40f3eed187e7ee265370966355eddb9fb116839d1c811a6a298e78336", "class_name": "RelatedNodeInfo"}}, "text": "17.2.4.3. Method declarations {g-method-declaration}\n(discussion) \n\n````grammar\nMethodDecl(isGhost, allowConstructors, isWithinAbstractModule) =\n  MethodKeyword_ { Attribute } [ MethodFunctionName ]\n  ( MethodSignature_(isGhost, isExtreme: true iff this is a least\n                                   or greatest lemma declaration)\n  | ellipsis\n  )\n  MethodSpec(isConstructor: true iff this is a constructor declaration)\n  [ BlockStmt ]\n\nMethodKeyword_ = ( \"method\"\n                 | \"constructor\"\n                 | \"lemma\"\n                 | \"twostate\" \"lemma\"\n                 | \"least\" \"lemma\"\n                 | \"greatest\" \"lemma\"\n                 )\n\n\nMethodSignature_(isGhost, isExtreme) =\n  [ GenericParameters ]\n  [ KType ]    // permitted only if isExtreme == true\n  Formals(allowGhostKeyword: !isGhost, allowNewKeyword: isTwostateLemma, \n          allowOlderKeyword: false, allowDefault: true)\n  [ \"returns\" Formals(allowGhostKeyword: !isGhost, allowNewKeyword: false, \n                      allowOlderKeyword: false, allowDefault: false) ]\n\nKType = \"[\" ( \"nat\" | \"ORDINAL\" ) \"]\"\n\nFormals(allowGhostKeyword, allowNewKeyword, allowOlderKeyword, allowDefault) =\n  \"(\" [ { Attribute } GIdentType(allowGhostKeyword, allowNewKeyword, allowOlderKeyword,\n                   allowNameOnlyKeyword: true, allowDefault)\n        { \",\" { Attribute } GIdentType(allowGhostKeyword, allowNewKeyword, allowOlderKeyword,\n                         allowNameOnlyKeyword: true, allowDefault) }\n      ]\n  \")\"\n````\n\nIf `isWithinAbstractModule` is false, then the method must have\na body for the program that contains the declaration to be compiled.\n\nThe `KType` may be specified only for least and greatest lemmas.", "start_char_idx": 2, "end_char_idx": 1702, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3071b9af-5e65-436b-bc1a-d539317252fc": {"__data__": {"id_": "3071b9af-5e65-436b-bc1a-d539317252fc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a60ee864-c77b-4220-9a32-bd2d52fa712e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2e2797659cb04b40d88affe10e02fab072c7492b43af95984ba016637179b952", "class_name": "RelatedNodeInfo"}}, "text": "17.2.4.4. Function declarations {g-function-declaration}\n(discussion) \n\n````grammar\nFunctionDecl(isWithinAbstractModule) =\n  ( [ \"twostate\" ] \"function\" [ \"method\" ] { Attribute }\n    MethodFunctionName\n    FunctionSignatureOrEllipsis_(allowGhostKeyword:\n                                           (\"method\" present),\n                                 allowNewKeyword:\n                                           \"twostate\" present)\n  | \"predicate\" [ \"method\" ] { Attribute }\n    MethodFunctionName\n    PredicateSignatureOrEllipsis_(allowGhostKeyword:\n                                           (\"method\" present),\n                                  allowNewKeyword:\n                                           \"twostate\" present,\n                                  allowOlderKeyword: true)\n  | ( \"least\" | \"greatest\" ) \"predicate\" { Attribute }\n    MethodFunctionName\n    PredicateSignatureOrEllipsis_(allowGhostKeyword: false,\n                         allowNewKeyword: \"twostate\" present,\n                         allowOlderKeyword: false))\n  )\n  FunctionSpec\n  [ FunctionBody ]\n\nFunctionSignatureOrEllipsis_(allowGhostKeyword) =\n  FunctionSignature_(allowGhostKeyword) | ellipsis\n\nFunctionSignature_(allowGhostKeyword, allowNewKeyword) =\n  [ GenericParameters ]\n  Formals(allowGhostKeyword, allowNewKeyword, allowOlderKeyword: true, \n          allowDefault: true)\n  \":\"\n  ( Type\n  | \"(\" GIdentType(allowGhostKeyword: false,\n                   allowNewKeyword: false,\n                   allowOlderKeyword: false,\n                   allowNameOnlyKeyword: false,\n                   allowDefault: false)\n    \")\"\n  )\n\nPredicateSignatureOrEllipsis_(allowGhostKeyword, allowNewKeyword, \n                              allowOlderKeyword) =\n    PredicateSignature_(allowGhostKeyword, allowNewKeyword, allowOlderKeyword) \n  | ellipsis\n\nPredicateSignature_(allowGhostKeyword, allowNewKeyword, allowOlderKeyword) =\n  [ GenericParameters ]\n  [ KType ]\n  Formals(allowGhostKeyword, allowNewKeyword, allowOlderKeyword, \n          allowDefault: true)\n  [\n    \":\"\n    ( Type\n    | \"(\" Ident \":\" \"bool\" \")\"\n    )\n  ]\n\nFunctionBody = \"{\" Expression(allowLemma: true, allowLambda: true)\n               \"}\" [ \"by\" \"method\" BlockStmt ]\n````", "start_char_idx": 2, "end_char_idx": 2217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c227c138-70e3-4cbe-9e2f-91b5f31d8ba9": {"__data__": {"id_": "c227c138-70e3-4cbe-9e2f-91b5f31d8ba9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14b8634e-c4b9-428a-951f-03b7df2edff9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "94fc392a17e24dff34396f585cad441a4f0b1ab1638215fa8610d6029f0f3519", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5. Specifications", "start_char_idx": 2, "end_char_idx": 24, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5730cf0-81a3-4f68-b766-2f9bb641b2c5": {"__data__": {"id_": "e5730cf0-81a3-4f68-b766-2f9bb641b2c5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "613787cb-16e8-4492-986d-ee91a32a099e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "58eda8a26f63963b3d18186890cb6dd6090e17d5786ca6bdac5033e922d1355b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.1. Method specifications {g-method-specification}\n(discussion) \n\n````grammar\nMethodSpec =\n  { ModifiesClause(allowLambda: false)\n  | RequiresClause(allowLabel: true)\n  | EnsuresClause(allowLambda: false)\n  | DecreasesClause(allowWildcard: true, allowLambda: false)\n  }\n````", "start_char_idx": 2, "end_char_idx": 282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8283f652-ac8c-4136-8baf-f06d5ab13acc": {"__data__": {"id_": "8283f652-ac8c-4136-8baf-f06d5ab13acc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1eb0918d-ebcc-4c64-b1f0-e4f818ad667c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0fa4c52bf0835897c7540b9bee41c6096aacaec8c4db7a8e0302348f7810a7a4", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.2. Function specifications {g-function-specification}\n(discussion) \n\n````grammar\nFunctionSpec =\n  { RequiresClause(allowLabel: true)\n  | ReadsClause(allowLemma: false, allowLambda: false, allowWild: true)\n  | EnsuresClause(allowLambda: false)\n  | DecreasesClause(allowWildcard: false, allowLambda: false)\n  }\n````", "start_char_idx": 2, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c683bc65-525e-4fd2-96d7-ee3485f08b24": {"__data__": {"id_": "c683bc65-525e-4fd2-96d7-ee3485f08b24", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c60da459-ebd6-487c-849c-f3e0b08b4fb6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3773462835d6945c1d5f6b55084388e62d2ef4805dfab30d8a4d3bcf390d16ec", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.3. Lambda function specifications {g-lambda-specification}\n(discussion) \n\n````grammar\nLambdaSpec =\n  { ReadsClause(allowLemma: true, allowLambda: false, allowWild: true)\n  | \"requires\" Expression(allowLemma: false, allowLambda: false)\n  }\n````", "start_char_idx": 2, "end_char_idx": 252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd70d044-c960-423e-a416-1c75bd28bcd6": {"__data__": {"id_": "fd70d044-c960-423e-a416-1c75bd28bcd6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9dd26f3e-0aed-42d1-ae4f-90fcd8873800", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "61b6d264365f96133ca95b96234e39a513b7312e97b4fab4b41c9429c21424c5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.4. Iterator specifications {g-iterator-specification}\n(discussion) \n\n````grammar\nIteratorSpec =\n  { ReadsClause(allowLemma: false, allowLambda: false,\n                                  allowWild: false)\n  | ModifiesClause(allowLambda: false)\n  | [ \"yield\" ] RequiresClause(allowLabel: !isYield)\n  | [ \"yield\" ] EnsuresClause(allowLambda: false)\n  | DecreasesClause(allowWildcard: false, allowLambda: false)\n  }\n````", "start_char_idx": 2, "end_char_idx": 424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28d2d143-1adc-4528-9d70-e70a269ed93a": {"__data__": {"id_": "28d2d143-1adc-4528-9d70-e70a269ed93a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86564521-ea26-4762-9cf4-56c7c72c0e95", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f1cf99ed5ea2f7110b55a3edb0801c179405b17a05621c1e1dde51fd7c8f752c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.5. Loop specifications {g-loop-specification}\n(discussion) \n\n````grammar\nLoopSpec =\n  { InvariantClause_\n  | DecreasesClause(allowWildcard: true, allowLambda: true)\n  | ModifiesClause(allowLambda: true)\n  }\n````", "start_char_idx": 2, "end_char_idx": 220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdc783f1-0425-4300-a882-80410c9de63f": {"__data__": {"id_": "fdc783f1-0425-4300-a882-80410c9de63f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3cc266d5-bf3b-47c1-a043-0bb74a9e25f5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b375bd28074d40fe64bddba82aef2a6024d580753755870fe725a10685744496", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.6. Requires clauses {g-requires-clause}\n(discussion) \n\n````grammar\nRequiresClause(allowLabel) =\n  \"requires\" { Attribute }\n  [ LabelName \":\" ]  // Label allowed only if allowLabel is true\n  Expression(allowLemma: false, allowLambda: false)\n````", "start_char_idx": 2, "end_char_idx": 253, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d913248a-516f-4d30-8ca1-9efc0db09504": {"__data__": {"id_": "d913248a-516f-4d30-8ca1-9efc0db09504", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90989037-77de-4f1d-a2ea-33b45600a0ae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6eceb7fab48e51077bbf5e8dbf92cd7cda0e5d9124ba4ad3529506fb0f5c69d1", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.7. Ensures clauses {g-ensures-clause}\n(discussion) \n\n````grammar\nEnsuresClause(allowLambda) =\n  \"ensures\" { Attribute } Expression(allowLemma: false, allowLambda)\n````", "start_char_idx": 2, "end_char_idx": 176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "105fd0e1-9302-49fd-a520-5a9e267731ad": {"__data__": {"id_": "105fd0e1-9302-49fd-a520-5a9e267731ad", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a31347a-aa77-42e6-9d6f-68dfca0e7216", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cab77825e686685000e2709b421e2b5ffd2bf1e0831e1ef3a124134c195ef448", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.8. Decreases clauses {g-decreases-clause}\n(discussion) \n\n````grammar\nDecreasesClause(allowWildcard, allowLambda) =\n  \"decreases\" { Attribute } DecreasesList(allowWildcard, allowLambda)\n\nDecreasesList(allowWildcard, allowLambda) =\n  PossiblyWildExpression(allowLambda, allowWildcard)\n  { \",\" PossiblyWildExpression(allowLambda, allowWildcard) }\n\nPossiblyWildExpression(allowLambda, allowWild) =\n  ( \"*\"  // if allowWild is false, using '*' provokes an error\n  | Expression(allowLemma: false, allowLambda)\n  )\n````", "start_char_idx": 2, "end_char_idx": 521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5996e18e-8a84-493e-91bb-fe2ed24982fc": {"__data__": {"id_": "5996e18e-8a84-493e-91bb-fe2ed24982fc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ffc4d113-0921-479f-b05d-623f6cf6adab", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "915e957ccc249d75ed7cb9aade353dd407e70181eaf519101b467eebaee78e0c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.9. Modifies clauses {g-modifies-clause}\n(discussion) \n\n````grammar\nModifiesClause(allowLambda) =\n  \"modifies\" { Attribute }\n  FrameExpression(allowLemma: false, allowLambda)\n  { \",\" FrameExpression(allowLemma: false, allowLambda) }\n````", "start_char_idx": 2, "end_char_idx": 245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0afb4425-da94-4bac-a876-4c7729daabdf": {"__data__": {"id_": "0afb4425-da94-4bac-a876-4c7729daabdf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4757dc4f-6189-4258-b72b-b403d486d39c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1f1e5872d9873482c6504e75614f21113f96b41c18055778c39ff2fde01d85ba", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.10. Invariant clauses {g-invariant-clause}\n(discussion) \n\n````grammar\nInvariantClause_ =\n  \"invariant\" { Attribute }\n  Expression(allowLemma: false, allowLambda: true)\n````", "start_char_idx": 2, "end_char_idx": 181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5f1cb7d-3104-4ee0-9a08-893d962e0a6f": {"__data__": {"id_": "a5f1cb7d-3104-4ee0-9a08-893d962e0a6f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c24e696-1082-4fb5-b348-12d5ca865e21", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7cb99c2f364c896c4e23cf60a7ae70bb207e0ffee80d36ef804c3a79ec531864", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.11. Reads clauses {g-reads-clause}\n(discussion) \n\n````grammar\nReadsClause(allowLemma, allowLambda, allowWild) =\n  \"reads\" { Attribute }\n  PossiblyWildFrameExpression(allowLemma, allowLambda, allowWild)\n  { \",\" PossiblyWildFrameExpression(allowLemma, allowLambda, allowWild) }\n````", "start_char_idx": 2, "end_char_idx": 289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0840f194-939b-4f19-aad4-c42769ce3964": {"__data__": {"id_": "0840f194-939b-4f19-aad4-c42769ce3964", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "621058f2-be46-4bb3-bce0-114608a05c44", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d898143249b8fd02524034ce6ef8b7256966581784f094bd14793d10f5695fa9", "class_name": "RelatedNodeInfo"}}, "text": "17.2.5.12. Frame expressions {g-frame-expression}\n(discussion) \n\n````grammar\nFrameExpression(allowLemma, allowLambda) =\n  ( Expression(allowLemma, allowLambda) [ FrameField ]\n  | FrameField\n  )\n\nFrameField = \"`\" IdentOrDigits\n\nPossiblyWildFrameExpression(allowLemma, allowLambda, allowWild) =\n  ( \"*\"  // error if !allowWild and '*'\n  | FrameExpression(allowLemma, allowLambda)\n  )\n````", "start_char_idx": 2, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b19620f-e779-41d6-a620-436e072cf497": {"__data__": {"id_": "2b19620f-e779-41d6-a620-436e072cf497", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c74d071-0279-43b7-a015-94e5b1b104bf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e02aa7a950cc2b0a174ad1e6a522b9fce7aff3f2fe8c39f045d1a17a60a09c9e", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6. Statements {g-statement}", "start_char_idx": 2, "end_char_idx": 34, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b704c8a-742c-421e-b6ae-bb9016ef749f": {"__data__": {"id_": "7b704c8a-742c-421e-b6ae-bb9016ef749f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0261211-8f5c-4f82-b784-8fb0f6889381", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "403f54595edc6133d65f1089b1221721128e3900b8a92b2dd1bf7091cabb1d41", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.1. Labeled statement {g-labeled-statement}\n\n(discussion) \n\n````grammar\nStmt = { \"label\" LabelName \":\" } NonLabeledStmt\n````", "start_char_idx": 2, "end_char_idx": 132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "827383ec-3abe-4dbc-af2d-abadfcd859ae": {"__data__": {"id_": "827383ec-3abe-4dbc-af2d-abadfcd859ae", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c8639df-2dba-4578-9954-de31da21a6af", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "35efc02e8629a7359a5551ec56a83c011a91a6bfc49c383d882eb47670c3aed5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.2. Non-Labeled statement {g-nonlabeled-statement}\n\n(discussion) \n\n````grammar\nNonLabeledStmt =\n  ( AssertStmt | AssumeStmt | BlockStmt | BreakStmt\n  | CalcStmt | ExpectStmt | ForallStmt | IfStmt\n  | MatchStmt | ModifyStmt\n  | PrintStmt | ReturnStmt | RevealStmt\n  | UpdateStmt | UpdateFailureStmt\n  | VarDeclStatement | WhileStmt | ForLoopStmt | YieldStmt\n  )\n````", "start_char_idx": 2, "end_char_idx": 373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41c678c9-b5f7-43c3-8647-f789c66860c2": {"__data__": {"id_": "41c678c9-b5f7-43c3-8647-f789c66860c2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0273b99-61e7-463f-871c-899c47fca76b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "de10ec9a5822d9093263021dfadb2a9625dfd568d79262a3c748f8bac54fba6d", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.3. Break and continue statements {g-break-continue-statement}\n\n(discussion) \n\n````grammar\nBreakStmt =\n  ( \"break\" LabelName \";\"\n  | \"continue\" LabelName \";\"\n  | { \"break\" } \"break\" \";\"\n  | { \"break\" } \"continue\" \";\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4f9c84b-57e2-4689-954d-5ec6db7e6599": {"__data__": {"id_": "b4f9c84b-57e2-4689-954d-5ec6db7e6599", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df0caca0-6c16-45ae-8cea-3f52583999e1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6bb1b15fa8bdf5500c2232f74f96586dcf3536c5c3a83caf066f661704d0598b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.4. Block statement {g-block-statement}\n\n(discussion) \n\n````grammar\nBlockStmt = \"{\" { Stmt } \"}\"\n````", "start_char_idx": 2, "end_char_idx": 109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0069d77-366e-4f0e-afe3-008e0a4fe5af": {"__data__": {"id_": "e0069d77-366e-4f0e-afe3-008e0a4fe5af", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5e35ed8-43b0-4ce4-8de1-946c47fb7281", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3101fd577b3815e7dd29dc9b1fef741cd14bbe2669c037f7816eaf8f5edc3c8d", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.5. Return statement {g-return-statement}\n\n(discussion) \n\n````grammar\nReturnStmt = \"return\" [ Rhs { \",\" Rhs } ] \";\"\n````", "start_char_idx": 2, "end_char_idx": 128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fff9d58c-633d-4081-b392-2ad67dd9248c": {"__data__": {"id_": "fff9d58c-633d-4081-b392-2ad67dd9248c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96034cfb-69c9-489b-b3e2-51f48d3eb3dc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3d6e000c256f512aa8cfac9bf8026c6085730c84331cead50f62d470979a958c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.6. Yield statement {g-yield-statement}\n\n(discussion) \n\n````grammar\nYieldStmt = \"yield\" [ Rhs { \",\" Rhs } ] \";\"\n````", "start_char_idx": 2, "end_char_idx": 124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52e15e0a-3b79-47e0-bcdb-5ab65a43600d": {"__data__": {"id_": "52e15e0a-3b79-47e0-bcdb-5ab65a43600d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e92eba38-8975-41fd-b3c6-889e6b586c84", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5b144657ebeb83b2751459df3599318c7c38c4d32b576b346658cc0f7263f514", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.7. Update and call statement {g-update-and-call-statement}\n\n(discussion) \n\n````grammar\nUpdateStmt =\n  Lhs\n  ( {Attribute} \";\"\n  |\n    { \",\" Lhs }\n    ( \":=\" Rhs { \",\" Rhs }\n    | \":|\" [ \"assume\" ]\n               Expression(allowLemma: false, allowLambda: true)\n    )\n    \";\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21444a7b-09f3-43f8-b0b4-04eebad79ea2": {"__data__": {"id_": "21444a7b-09f3-43f8-b0b4-04eebad79ea2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f50d9b62-deae-4bc8-b2c0-1b4e1a4a35a9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e3a0c69a223333f7d4942f944adb398d004e036e324628e813f493bd88f355ad", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.8. Update with failure statement {g-update-with-failure-statement}\n\n(discussion) \n\n````grammar\nUpdateFailureStmt  =\n  [ Lhs { \",\" Lhs } ]\n  \":-\"\n  [ \"expect\"  | \"assert\" | \"assume\" ]\n  Expression(allowLemma: false, allowLambda: false)\n  { \",\" Rhs }\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ede46f07-db67-4310-bb7b-531c5bec16e4": {"__data__": {"id_": "ede46f07-db67-4310-bb7b-531c5bec16e4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e8a0ca1-c537-4caf-b4b5-5c9307d1fd7d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "19bbf7f2a346e4e9e2b7ab2e379ecba2a0e4d25d5d1b0d0095b027f3c231eb3e", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.9. Variable declaration statement {g-variable-declaration-statement}\n\n(discussion) \n\n````grammar\nVarDeclStatement =\n  [ \"ghost\" ] \"var\" { Attribute }\n  (\n    LocalIdentTypeOptional\n    { \",\" { Attribute } LocalIdentTypeOptional }\n    [ \":=\"\n      Rhs { \",\" Rhs }\n    | \":-\"\n      [ \"expect\" | \"assert\" | \"assume\" ]\n      Expression(allowLemma: false, allowLambda: false)\n      { \",\" Rhs }\n    | { Attribute }\n      \":|\"\n      [ \"assume\" ] Expression(allowLemma: false, allowLambda: true)\n    ]\n  |\n    CasePatternLocal\n    ( \":=\" | { Attribute } \":|\" )\n    Expression(allowLemma: false, allowLambda: true)\n  )\n  \";\"\n\nCasePatternLocal = \n  ( [ Ident ] \"(\" CasePatternLocal { \",\" CasePatternLocal } \")\"\n  | LocalIdentTypeOptional\n  )\n````", "start_char_idx": 2, "end_char_idx": 745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d52d19d1-a6d2-4813-a60e-c4d1482cdf05": {"__data__": {"id_": "d52d19d1-a6d2-4813-a60e-c4d1482cdf05", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25f490e7-3ffd-48f7-912f-6a02e8ceb32f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7ba48d39765e6787e78c84a2324c9cc634dcc13475904e7b43a277c1992e14c1", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.10. Guards {g-guard}\n\n(discussion) \n\n````grammar\nGuard = ( \"*\"\n        | \"(\" \"*\" \")\"\n        | Expression(allowLemma: true, allowLambda: true)\n        )\n````", "start_char_idx": 2, "end_char_idx": 166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "522a37d3-cf5f-47e8-a724-b5351da58e91": {"__data__": {"id_": "522a37d3-cf5f-47e8-a724-b5351da58e91", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "707810f9-fe0a-4578-bd8a-4f9b68f1e230", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e4a472424e24dd08a8c436ac926c3d007d13015b79dd21af15eddf753aa09097", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.11. Binding guards {g-binding-guard}\n\n(discussion)\n\n````grammar\nBindingGuard(allowLambda) =\n  IdentTypeOptional { \",\" IdentTypeOptional }\n  { Attribute }\n  \":|\"\n  Expression(allowLemma: true, allowLambda)\n````", "start_char_idx": 2, "end_char_idx": 218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10381681-ddab-482f-b140-01b2c4a30de9": {"__data__": {"id_": "10381681-ddab-482f-b140-01b2c4a30de9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b0daa27-708f-4f33-99ee-852cf49c7ed0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cf5706c63b99e21350c5b5be8bb650fdedead14a2708afd2a7579f616331f2a5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.12. If statement {g-if-statement}\n\n(discussion) \n\n````grammar\nIfStmt = \"if\"\n  ( AlternativeBlock(allowBindingGuards: true)\n  |\n    ( BindingGuard(allowLambda: true)\n    | Guard\n    )\n    BlockStmt [ \"else\" ( IfStmt | BlockStmt ) ]\n  )\n\nAlternativeBlock(allowBindingGuards) =\n  ( { AlternativeBlockCase(allowBindingGuards) }\n  | \"{\" { AlternativeBlockCase(allowBindingGuards) } \"}\"\n  )\n\nAlternativeBlockCase(allowBindingGuards) =\n  { \"case\"\n    (\n    BindingGuard(allowLambda: false) //permitted iff allowBindingGuards == true\n    | Expression(allowLemma: true, allowLambda: false)\n    ) \"=>\" { Stmt }\n  }\n````", "start_char_idx": 2, "end_char_idx": 618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "120349da-915d-43fb-811d-e70ef87548b8": {"__data__": {"id_": "120349da-915d-43fb-811d-e70ef87548b8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9134f48b-fc0b-4826-9600-de403da253e0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "663700305ca5f2e679510b4a20829dc6ee71c00ba2adcf998eb3f463848e3a21", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.13. While Statement {g-while-statement}\n\n(discussion) \n\n````grammar\nWhileStmt =\n  \"while\"\n  ( LoopSpec\n    AlternativeBlock(allowBindingGuards: false)\n  | Guard\n    LoopSpec\n    ( BlockStmt\n    |           // no body\n    )\n  )\n````", "start_char_idx": 2, "end_char_idx": 240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88e6453a-fafe-4c4c-a0a5-728c301a2516": {"__data__": {"id_": "88e6453a-fafe-4c4c-a0a5-728c301a2516", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9517c03a-a61f-40cd-b663-b0a7ed67c5ea", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1cce4c31fe52767ec7bb76bba3fac4bd3da614d829d6569fddc4c23165ae6459", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.14. For statement {g-for-statement}\n\n(discussion)\n\n````grammar\nForLoopStmt =\n  \"for\" IdentTypeOptional \":=\"\n  Expression(allowLemma: false, allowLambda: false)\n  ( \"to\" | \"downto\" )\n  ( \"*\" | Expression(allowLemma: false, allowLambda: false)\n  )\n  LoopSpec\n  ( BlockStmt\n  |           // no body\n  )\n````", "start_char_idx": 2, "end_char_idx": 313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e8caf50-42ff-47fa-81a9-4f2970a9a5f2": {"__data__": {"id_": "9e8caf50-42ff-47fa-81a9-4f2970a9a5f2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbf4c494-fa7d-4dc0-be7f-25394858225a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "afdf399c8af144fd20858f3f07e265325c3b6af12d5acf4b922cf50d36b262dc", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.15. Match statement {g-match-statement}\n\n(discussion) \n\n````grammar\nMatchStmt =\n  \"match\"\n  Expression(allowLemma: true, allowLambda: true)\n  ( \"{\" { CaseStmt } \"}\"\n  | { CaseStmt }\n  )\n\nCaseStmt = \"case\" ExtendedPattern \"=>\" { Stmt }\n````", "start_char_idx": 2, "end_char_idx": 248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e45cdbbf-b35b-4bf0-b956-986c8c4398bd": {"__data__": {"id_": "e45cdbbf-b35b-4bf0-b956-986c8c4398bd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "459916ec-8e16-493f-8add-c32fa42a40fd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8d5ec8551c9a82487a214a11adb4a4f9af28cd54fa731d8b72d93b13e33d42d0", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.16. Assert statement {g-assert-statement}\n\n(discussion) \n\n````grammar\nAssertStmt =\n  \"assert\"\n  { Attribute }\n  [ LabelName \":\" ]\n  Expression(allowLemma: false, allowLambda: true)\n  ( \";\"\n  | \"by\" BlockStmt\n  )\n````", "start_char_idx": 2, "end_char_idx": 225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5775ecc-1c39-4a56-b1ef-0aa121528b4e": {"__data__": {"id_": "a5775ecc-1c39-4a56-b1ef-0aa121528b4e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05426c1c-9213-449a-bcba-f0496a24473e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8577d57e51cb634d154728f48a46664de0ece70b43a4152f00b0158e92ff43fc", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.17. Assume statement {g-assume-statement}\n\n(discussion) \n\n````grammar\nAssumeStmt =\n  \"assume\"\n  { Attribute }\n  Expression(allowLemma: false, allowLambda: true)\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f5eb9d8-b2a6-4fd6-84ad-2581563e03f5": {"__data__": {"id_": "3f5eb9d8-b2a6-4fd6-84ad-2581563e03f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea7500ed-3f08-473c-b1a4-e4a12b55da4a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "099e3edc3e9fd2a51bcded2dd8616be24e041451c8ca0cb1a796588d78cc57b9", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.18. Expect statement {g-expect-statement}\n\n(discussion) \n\n````grammar\nExpectStmt =\n  \"expect\"\n  { Attribute }\n  Expression(allowLemma: false, allowLambda: true)\n  [ \",\" Expression(allowLemma: false, allowLambda: true) ]\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28e16cf1-fd89-4af2-ac2f-1bd0c4336b09": {"__data__": {"id_": "28e16cf1-fd89-4af2-ac2f-1bd0c4336b09", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a593efdb-4874-471e-ad4c-9394441b81b7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "950e60e52f43a0cb0c38fb4755075c67a735d2c647f9fbdd864bdd87a48ec0c0", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.19. Print statement {g-print-statement}\n\n(discussion) \n\n````grammar\nPrintStmt =\n  \"print\"\n  Expression(allowLemma: false, allowLambda: true)\n  { \",\" Expression(allowLemma: false, allowLambda: true) }\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 219, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a12b1ad-33c5-4843-8e4a-bb749b888fe3": {"__data__": {"id_": "1a12b1ad-33c5-4843-8e4a-bb749b888fe3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4194bcc-4f07-42e2-8ff7-f5c251b81b54", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "128ff91119f521d2b844c0a93aec2618d9272ed9724e9d4dfd2161eb5c8dd37f", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.20. Reveal statement {g-reveal-statement}\n\n(discussion) \n\n````grammar\nRevealStmt =\n  \"reveal\"\n  Expression(allowLemma: false, allowLambda: true)\n  { \",\" Expression(allowLemma: false, allowLambda: true) }\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e51d06ba-62db-4c5c-a5b3-e4d5f2a02302": {"__data__": {"id_": "e51d06ba-62db-4c5c-a5b3-e4d5f2a02302", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75771b74-4cfa-4e77-b827-8a412f669b26", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f50904151cafc23c89147e60b7423c6907c37992e0833bff31a7d6a2f9be0c7e", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.21. Forall statement {g-forall-statement}\n\n(discussion) \n\n````grammar\nForallStmt =\n  \"forall\"\n  ( \"(\" [ QuantifierDomain ] \")\"\n  | [ QuantifierDomain ]\n  )\n  { EnsuresClause(allowLambda: true) }\n  [ BlockStmt ]\n````", "start_char_idx": 2, "end_char_idx": 224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19e5fbcc-d6f8-4508-9335-b32ac58c6ef9": {"__data__": {"id_": "19e5fbcc-d6f8-4508-9335-b32ac58c6ef9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a43e7e5b-9a59-42b8-9c8a-517a8c69364c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9ec1deba8e97fc236c9723d98a1c2c7668429d789918e93b7067eb0aef1ce8e5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.22. Modify statement {g-modify-statement}\n\n(discussion) \n\n````grammar\nModifyStmt =\n  \"modify\"\n  { Attribute }\n  FrameExpression(allowLemma: false, allowLambda: true)\n  { \",\" FrameExpression(allowLemma: false, allowLambda: true) }\n  \";\"\n````", "start_char_idx": 2, "end_char_idx": 249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b065dcc6-9b77-411a-aefa-e3ab5f7bd4f6": {"__data__": {"id_": "b065dcc6-9b77-411a-aefa-e3ab5f7bd4f6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e720c60-ecde-432f-9a1d-c32c62b1fc98", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f4f9319f7b8091a8b908347f60a4a915d85a262c19db887d624dba5ab2b6320f", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.23. Calc statement {g-calc-statement}\n\n(discussion) \n\n````grammar\nCalcStmt = \"calc\" { Attribute } [ CalcOp ] \"{\" CalcBody_ \"}\"\n\nCalcBody_ = { CalcLine_ [ CalcOp ] Hints_ }\n\nCalcLine_ = Expression(allowLemma: false, allowLambda: true) \";\"\n\nHints_ = { ( BlockStmt | CalcStmt ) }\n\nCalcOp =\n  ( \"==\" [ \"#\" \"[\"\n           Expression(allowLemma: true, allowLambda: true) \"]\" ]\n  | \"\"\n  | \"!=\" | \"=\"\n  | \"\" | \"==>\" | \"<==\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "482ad15f-b6a4-4278-9a9c-6e68e01db534": {"__data__": {"id_": "482ad15f-b6a4-4278-9a9c-6e68e01db534", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63c70470-ad67-4e62-bac9-c784ce88be80", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8910510ae70b9e8558b46226927312b05df945bfc964cdf8944ce4c58c7f8e94", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7. Expressions", "start_char_idx": 2, "end_char_idx": 21, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc43fc71-6c5f-4260-bb1f-0f119de07eb3": {"__data__": {"id_": "fc43fc71-6c5f-4260-bb1f-0f119de07eb3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37765f71-e65a-430d-9842-e924d48485b2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3cafd9864c92b5734ea14baba402d0041c0ec445a69de7337ffa8114b0fc7b22", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.1. Top-level expression {g-top-level-expression}\n\n(discussion) \n\n````grammar\nExpression(allowLemma, allowLambda, allowBitwiseOps = true) =\n  EquivExpression(allowLemma, allowLambda, allowBitwiseOps)\n  [ \";\" Expression(allowLemma, allowLambda, allowBitwiseOps) ]\n````\n\nThe \"allowLemma\" argument says whether or not the expression\nto be parsed is allowed to have the form `S;E` where `S` is a call to a lemma.\n\"allowLemma\" should be passed in as \"false\" whenever the expression to\nbe parsed sits in a context that itself is terminated by a semi-colon.\n\nThe \"allowLambda\" says whether or not the expression to be parsed is\nallowed to be a lambda expression.  More precisely, an identifier or\nparenthesized, comma-delimited list of identifiers is allowed to\ncontinue as a lambda expression (that is, continue with a `reads`, `requires`,\nor `=>`) only if \"allowLambda\" is true.  This affects function/method/iterator\nspecifications, if/while statements with guarded alternatives, and expressions\nin the specification of a lambda expression itself.", "start_char_idx": 2, "end_char_idx": 1051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c298f08-a298-4859-8528-759ec8e168fb": {"__data__": {"id_": "0c298f08-a298-4859-8528-759ec8e168fb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07dba3bd-a3bd-4e13-b0b1-36a7145256ba", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8bb87427bee314ebe51110e2b47ce3e55697f716839843a0e15f55794baa9367", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.2. Equivalence expression {g-equivalence-expression}\n\n(discussion) \n\n````grammar\nEquivExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  ImpliesExpliesExpression(allowLemma, allowLambda, allowBitwiseOps)\n  { \"\" ImpliesExpliesExpression(allowLemma, allowLambda, allowBitwiseOps) }\n````", "start_char_idx": 2, "end_char_idx": 299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97d601a6-9ab8-4e17-a00e-6cc18e7090e5": {"__data__": {"id_": "97d601a6-9ab8-4e17-a00e-6cc18e7090e5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f93b3f8a-0147-4e2c-b91a-f62226397bb6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4824463da5e48c68b429b598cb836a0c015bd84ee97e454c09d4a0983057f636", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.3. Implies expression {g-implies-expression}\n\n(discussion) \n\n````grammar\nImpliesExpliesExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  LogicalExpression(allowLemma, allowLambda)\n  [ (  \"==>\" ImpliesExpression(allowLemma, allowLambda, allowBitwiseOps)\n    | \"<==\" LogicalExpression(allowLemma, allowLambda, allowBitwiseOps)\n            { \"<==\" LogicalExpression(allowLemma, allowLambda, allowBitwiseOps) }\n    )\n  ]\n\nImpliesExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  LogicalExpression(allowLemma, allowLambda, allowBitwiseOps)\n  [  \"==>\" ImpliesExpression(allowLemma, allowLambda, allowBitwiseOps) ]\n````", "start_char_idx": 2, "end_char_idx": 635, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "760ed996-8273-48c9-9c91-19bf987845d1": {"__data__": {"id_": "760ed996-8273-48c9-9c91-19bf987845d1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7986274a-a483-47eb-844a-322e7a938544", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "779bdf0b93f568e39ecbd388e36761f203b96a63822aa2a835cd5af130fd4ca1", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.4. Logical expression {g-logical-expression}\n\n(discussion) \n\n````grammar\nLogicalExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  [ \"&&\" | \"||\" ]\n  RelationalExpression(allowLemma, allowLambda, allowBitwiseOps)\n  { ( \"&&\" | \"||\" )\n    RelationalExpression(allowLemma, allowLambda, allowBitwiseOps)\n  }\n````", "start_char_idx": 2, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "daed0648-fc45-445a-9f11-840d9170cdd7": {"__data__": {"id_": "daed0648-fc45-445a-9f11-840d9170cdd7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3dbb3135-e9c7-4145-9411-330347c6b215", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "863a909ae9d222747f5acc868be934207b6472678e39a354adf8e7b90fe5c3dc", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.5. Relational expression {g-relational-expression}\n\n(discussion) \n\n````grammar\nRelationalExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  ShiftTerm(allowLemma, allowLambda, allowBitwiseOps)\n  { RelOp ShiftTerm(allowLemma, allowLambda, allowBitwiseOps) }\n\nRelOp =\n  ( \"==\"\n    [ \"#\" \"[\" Expression(allowLemma: true, allowLambda: true) \"]\" ]\n  | \"!=\"\n    [ \"#\" \"[\" Expression(allowLemma: true, allowLambda: true) \"]\" ]\n  | \"\" | \"=\"\n  | \"in\"\n  | \"!in\"\n  | \"!!\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3616d2a-c08a-4c2f-8b6c-d3d06aee4ba3": {"__data__": {"id_": "c3616d2a-c08a-4c2f-8b6c-d3d06aee4ba3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91f1e463-5dd0-45c8-8e0c-5762ebbf3a9c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e95ba9984975889acd64a5277c88734f363cb5a0f25c833d820ff89a14611a7b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.6. Bit-shift expression {g-bit-shift-expression}\n\n(discussion) \n\n````grammar\nShiftTerm(allowLemma, allowLambda, allowBitwiseOps) =\n  Term(allowLemma, allowLambda, allowBitwiseOps)\n  { ShiftOp Term(allowLemma, allowLambda, allowBitwiseOps) }\n\nShiftOp = ( \">\" )\n````", "start_char_idx": 2, "end_char_idx": 273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "801e2a51-15c9-4842-b05c-69e3d5534956": {"__data__": {"id_": "801e2a51-15c9-4842-b05c-69e3d5534956", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eff7f83a-6f39-4ad5-917a-ba65e5cf4925", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ac8e365485cdecd0971379957d2845184c297f41ebd7c578cec7b3c2a26844ac", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.7. Term (addition operations) {g-term}\n\n(discussion) \n\n````grammar\nTerm(allowLemma, allowLambda, allowBitwiseOps) =\n  Factor(allowLemma, allowLambda, allowBitwiseOps)\n  { AddOp Factor(allowLemma, allowLambda, allowBitwiseOps) }\n\nAddOp = ( \"+\" | \"-\" )\n````", "start_char_idx": 2, "end_char_idx": 264, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "439e9206-ca60-46b9-aa73-58f6c967264b": {"__data__": {"id_": "439e9206-ca60-46b9-aa73-58f6c967264b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d81968cc-d5a7-4af1-97a1-9941c7ece4fe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "84162b6d69ea8a70ff1f89bae84d5bf991f0d09c19b166ffccafadc54e8e183a", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.8. Factor (multiplication operations) {g-factor}\n\n(discussion) \n\n````grammar\nFactor(allowLemma, allowLambda, allowBitwiseOps) =\n  BitvectorFactor(allowLemma, allowLambda, allowBitwiseOps)\n  { MulOp BitvectorFactor(allowLemma, allowLambda, allowBitwiseOps) }\n\nMulOp = ( \"*\" | \"/\" | \"%\" )\n````", "start_char_idx": 2, "end_char_idx": 300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70079955-197f-445d-b139-d58b41644809": {"__data__": {"id_": "70079955-197f-445d-b139-d58b41644809", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fff4f973-e6b8-480d-a33a-c1a360f133d8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bdc01f3efac37e0e3aa21427dbc3706c04d872db1e8c86bcb4e111db1693c0bd", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.9. Bit-vector expression {g-bit-vector-expression}\n(discussion) \n\n````grammar\nBitvectorFactor(allowLemma, allowLambda, allowBitwiseOps) =\n  AsExpression(allowLemma, allowLambda, allowBitwiseOps)\n  { BVOp AsExpression(allowLemma, allowLambda, allowBitwiseOps) }\n\nBVOp = ( \"|\" | \"&\" | \"^\" )\n````\n\nIf `allowBitwiseOps` is false, it is an error to have a bitvector operation.", "start_char_idx": 2, "end_char_idx": 380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d4c42f3-d4ca-44cd-9954-fef783903b13": {"__data__": {"id_": "6d4c42f3-d4ca-44cd-9954-fef783903b13", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ca865e5-6109-4adf-ad37-d32f202c65f2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c016125ac6f7da588d1b95715ee6e801f3e710f6c026eb40777daac072d636e9", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.10. As/Is expression {g-as-is-expression}\n(discussion) \n\n````grammar\nAsExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  UnaryExpression(allowLemma, allowLambda, allowBitwiseOps)\n  { ( \"as\" | \"is\" ) Type }\n````", "start_char_idx": 2, "end_char_idx": 226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9476ab07-7d7c-4dce-ad50-2fdf108f41a9": {"__data__": {"id_": "9476ab07-7d7c-4dce-ad50-2fdf108f41a9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4381ac05-27d5-4b61-8527-a9bd7b07234f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "880345eec2f09122f69a1d99cd30c50059e3cb73f2178e41fb65cddc9e4b507a", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.11. Unary expression {g-unary-expression}\n(discussion) \n\n````grammar\nUnaryExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  ( \"-\" UnaryExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | \"!\" UnaryExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | PrimaryExpression(allowLemma, allowLambda, allowBitwiseOps)\n  )\n````", "start_char_idx": 2, "end_char_idx": 342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff4582c8-2dc9-4fc0-84ff-8a8f85d9af83": {"__data__": {"id_": "ff4582c8-2dc9-4fc0-84ff-8a8f85d9af83", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aeb97024-3caf-489c-9b90-7fe7dc54f810", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c5f3f1eaf56ba00fc29232630a3fd87f8ed1e307378cf31f7ddb65e33fc2277b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.12. Primary expression {g-primary-expression}\n(discussion) \n\n````grammar\nPrimaryExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  ( NameSegment { Suffix }\n  | LambdaExpression(allowLemma, allowBitwiseOps)\n  | MapDisplayExpr { Suffix }\n  | SeqDisplayExpr { Suffix }\n  | SetDisplayExpr { Suffix }\n  | EndlessExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | ConstAtomExpression { Suffix }\n  )\n````", "start_char_idx": 2, "end_char_idx": 418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05a0f753-4dc4-4b41-81bf-5d814ee8c8d5": {"__data__": {"id_": "05a0f753-4dc4-4b41-81bf-5d814ee8c8d5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac048110-9779-48f4-b0f1-1bb88a10c61b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "688c3f945a422a786113427402a3a6088dcbb9d46e2f2fb1a2348628041be3c9", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.13. Lambda expression {g-lambda-expression}\n(discussion) \n\n````grammar\nLambdaExpression(allowLemma, allowBitwiseOps) =\n  ( WildIdent\n  | \"(\" [ IdentTypeOptional { \",\" IdentTypeOptional } ] \")\"\n  )\n  LambdaSpec\n  \"=>\"\n  Expression(allowLemma, allowLambda: true, allowBitwiseOps)\n````", "start_char_idx": 2, "end_char_idx": 291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d7bd3e8-e569-4260-bc43-ecfd020802d2": {"__data__": {"id_": "1d7bd3e8-e569-4260-bc43-ecfd020802d2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ec01144-eea6-4846-a318-3efbe483ef99", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "44748caf7b4ebe8aa51e8f0ec400340a18322c78b10ac67856d2272f0c43651f", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.14. Left-hand-side expression {g-lhs-expression}\n(discussion) {\n\n````grammar\nLhs =\n  ( NameSegment { Suffix }\n  | ConstAtomExpression Suffix { Suffix }\n  )\n````", "start_char_idx": 2, "end_char_idx": 169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f0e444a-fc82-4ad3-b252-1547d9232040": {"__data__": {"id_": "1f0e444a-fc82-4ad3-b252-1547d9232040", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "683c3206-8d49-40f6-92f4-4b5267e60c8b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18bb5466ff9ddb2b647873a2c69c3a344a80888efdba9e0e98eefc1f3c139a48", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.15. Right-hand-side expression {g-rhs-expression}\n(discussion) \n\n````grammar\nRhs =\n    ArrayAllocation\n  | ObjectAllocation_\n  | Expression(allowLemma: false, allowLambda: true, allowBitwiseOps: true)\n  | HavocRhs_\n  )\n  { Attribute }\n````", "start_char_idx": 2, "end_char_idx": 248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f907e87c-94f3-4811-be65-7dd714141ac0": {"__data__": {"id_": "f907e87c-94f3-4811-be65-7dd714141ac0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63be4225-0c8a-48bd-8e48-f30f8c89f4e6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fda57012871ade0e98230c247e37d3c576ba951097b047056e89fe96f30c90fc", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.16. Array allocation right-hand-side expression {g-array-allocation-expression}\n(discussion) \n\n````grammar\nArrayAllocation_ =\n  \"new\" [ Type ] \"[\" [ Expressions ] \"]\"\n  [ \"(\" Expression(allowLemma: true, allowLambda: true) \")\"\n  | \"[\" [ Expressions ] \"]\"\n  ]\n````", "start_char_idx": 2, "end_char_idx": 272, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e40c661-2ba9-4b03-ba98-79fab42c8427": {"__data__": {"id_": "1e40c661-2ba9-4b03-ba98-79fab42c8427", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1784342e-3b78-4993-9e12-6565f2806989", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a1edf7b0beb5491a1d55f605e25b944558881eb211040c759b6f1fd963946ff4", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.17. Object allocation right-hand-side expression {g-object-allocation-expression}\n(discussion) \n\n````grammar\nObjectAllocation_ = \"new\" Type [ \".\" TypeNameOrCtorSuffix ]\n                               [ \"(\" [ Bindings ] \")\" ]\n````", "start_char_idx": 2, "end_char_idx": 238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46ce6570-1a2f-4f2b-8522-62abf5225eca": {"__data__": {"id_": "46ce6570-1a2f-4f2b-8522-62abf5225eca", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "502f064f-5acb-481f-b20f-5954bd73b714", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "91deab52d905f74aeff50646ffebaad2f3f9feab8457cadd4e8198228e99ebd1", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.18. Havoc right-hand-side expression {g-havoc-expression}\n(discussion) \n\n````grammar\nHavocRhs_ = \"*\"\n````", "start_char_idx": 2, "end_char_idx": 114, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9193a45-c6f0-4955-bdeb-dd15587f637c": {"__data__": {"id_": "e9193a45-c6f0-4955-bdeb-dd15587f637c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b047521-9adc-4d11-b592-9567640d380c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8fd700e466e28d34eceba6b62162a8bfa6265b98fc0b61a30be842dd9c5bb64c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.19. Atomic expressions {g-atomic-expression}\n(discussion) \n\n````grammar\nConstAtomExpression =\n  ( LiteralExpression\n  | ThisExpression_\n  | FreshExpression_\n  | AllocatedExpression_\n  | UnchangedExpression_\n  | OldExpression_\n  | CardinalityExpression_\n  | ParensExpression\n  )\n````", "start_char_idx": 2, "end_char_idx": 291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92fc6f47-8355-4c05-aa77-3541809e7f5d": {"__data__": {"id_": "92fc6f47-8355-4c05-aa77-3541809e7f5d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12ea49a7-804b-406f-a287-0e96e4bc3251", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4233fbe5c8d3c955b66630a7684e4b4ba489253d71fdcb5d6f9e5fcccba6e0c5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.20. Literal expressions {g-literal-expression}\n(discussion) \n\n````grammar\nLiteralExpression =\n ( \"false\" | \"true\" | \"null\" | Nat | Dec |\n   charToken | stringToken )\n\nNat = ( digits | hexdigits )\n\nDec = decimaldigits\n````", "start_char_idx": 2, "end_char_idx": 230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1549901-f0b9-47e5-880b-bea09c8ac843": {"__data__": {"id_": "e1549901-f0b9-47e5-880b-bea09c8ac843", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fedf925-a835-43d9-9811-118c32b9d47c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e88acbed78228f5369ac9d0cc8c4da78a4c382c2e0c9aeeccd3375f24c943a8d", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.21. This expression {g-this-expression}\n(discussion) \n\n````grammar\nThisExpression_ = \"this\"\n````", "start_char_idx": 2, "end_char_idx": 105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cf6a383-1d30-4e99-99ef-c7bb6d20b907": {"__data__": {"id_": "9cf6a383-1d30-4e99-99ef-c7bb6d20b907", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1aedb79-ff03-4377-94ac-f5a75f22e11b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5fa15a735ede1357fa7b3f0209552978bb4bd52a120dac7bebbf8ef2818c1c83", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.22. Old and Old@ Expressions {g-old-expression}\n(discussion) \n\n````grammar\nOldExpression_ =\n  \"old\" [ \"@\" LabelName ]\n  \"(\" Expression(allowLemma: true, allowLambda: true) \")\"\n````", "start_char_idx": 2, "end_char_idx": 189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1652f4ad-ca2d-41c2-931a-158f708f8c28": {"__data__": {"id_": "1652f4ad-ca2d-41c2-931a-158f708f8c28", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4dbde6f-33e8-4751-83ef-35cbca159460", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "870c84bb12696f2ccf9a74eaf1176030ae70dcddee547d84ef8634626c6a3d30", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.23. Fresh Expressions {g-fresh-expression}\n(discussion) \n\n````grammar\nFreshExpression_ =\n  \"fresh\" [ \"@\" LabelName ]\n  \"(\" Expression(allowLemma: true, allowLambda: true) \")\"\n````", "start_char_idx": 2, "end_char_idx": 188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "639e942b-5867-48ec-ad32-c2bb0cf8a395": {"__data__": {"id_": "639e942b-5867-48ec-ad32-c2bb0cf8a395", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df08c2e5-7857-42a8-a404-91c6d4bc9e96", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6d6f87f312e0bd44d19fa5bbf4d43707bbd826792a35d8350731506b7bea13ad", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.24. Allocated Expressions {g-allocated-expression}\n(discussion) \n\n````grammar\nAllocatedExpression_ =\n  \"allocated\" \"(\" Expression(allowLemma: true, allowLambda: true) \")\"\n````", "start_char_idx": 2, "end_char_idx": 184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02c6cde1-1158-4a75-92dd-1cd196d5a03a": {"__data__": {"id_": "02c6cde1-1158-4a75-92dd-1cd196d5a03a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "761f35eb-fd69-4200-bf3f-dfed6280ac9c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4e1d8fb89b2bb286b308134bb62f7746b1de0e102bae24e3263a6ec306b4ffd4", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.25. Unchanged Expressions {g-unchanged-expression}\n(discussion) \n\n````grammar\nUnchangedExpression_ =\n  \"unchanged\" [ \"@\" LabelName ]\n  \"(\" FrameExpression(allowLemma: true, allowLambda: true)\n      { \",\" FrameExpression(allowLemma: true, allowLambda: true) }\n  \")\"\n````", "start_char_idx": 2, "end_char_idx": 278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e71f520-dd4e-46de-8773-c70a9e25e2a4": {"__data__": {"id_": "4e71f520-dd4e-46de-8773-c70a9e25e2a4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c2ab6ef-9441-4ff4-a03b-c67448183f68", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7631baaa93497f4b7e1d62e6224353dde77d0c07f5c835f96fa479d608213c3b", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.26. Cardinality Expressions {g-cardinality-expression}\n(discussion) \n\n````grammar\nCardinalityExpression_ =\n  \"|\" Expression(allowLemma: true, allowLambda: true) \"|\"\n````", "start_char_idx": 2, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5a22995-a9d8-4638-867f-541df567c78c": {"__data__": {"id_": "a5a22995-a9d8-4638-867f-541df567c78c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2602c9e8-7b7b-4a36-b407-261b90eef6ee", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "89eefd5952bcd85fbe4c4435a30f93a1be35aec0fb2f1835dda2466f36ff57ff", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.27. Parenthesized Expression {g-parenthesized-expression}\n(discussion) \n\n````grammar\nParensExpression =\n  \"(\" [ TupleArgs ] \")\"\n\nTupleArgs =\n  [ \"ghost\" ]\n  ActualBinding(isGhost) // argument is true iff the ghost modifier is present\n  { \",\"\n    [ \"ghost\" ]\n    ActualBinding(isGhost) // argument is true iff the ghost modifier is present\n  }\n````", "start_char_idx": 2, "end_char_idx": 356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b12c474c-09b7-4593-8278-b785b38aef7a": {"__data__": {"id_": "b12c474c-09b7-4593-8278-b785b38aef7a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfa18db2-a65c-462a-8f92-9592c40285a2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6c9fa4ada96487204d4c46ee5588e27b85c185bc0dfa4a2b68b76dab6ab3e381", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.28. Sequence Display Expression {g-sequence-display-expression}\n(discussion) \n\n````grammar\nSeqDisplayExpr =\n  ( \"[\" [ Expressions ] \"]\"\n  | \"seq\" [ GenericInstantiation ]\n    \"(\" Expression(allowLemma: true, allowLambda: true)\n    \",\" Expression(allowLemma: true, allowLambda: true)\n    \")\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9644f6d4-3e7c-4d55-8647-48e907ae1809": {"__data__": {"id_": "9644f6d4-3e7c-4d55-8647-48e907ae1809", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a16affb-0c9b-49e6-873d-8d664430d9d3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d527417297a522a52a5634f9032dbfaabad953c0ca77d0e291471d9af18abc89", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.29. Set Display Expression {g-set-display-expression}\n(discussion) \n\n````grammar\nSetDisplayExpr =\n  ( [ \"iset\" | \"multiset\" ] \"{\" [ Expressions ] \"}\"\n  | \"multiset\" \"(\" Expression(allowLemma: true,\n                              allowLambda: true) \")\"\n  )\n````", "start_char_idx": 2, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f239caf5-44ce-405f-917d-95f88424bd7f": {"__data__": {"id_": "f239caf5-44ce-405f-917d-95f88424bd7f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae08d318-6d61-43a6-ba05-8d82c599358b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97357a8217752b0079700583407e9f208077b84f7d8fdd6e7b57c138bceac736", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.30. Map Display Expression {g-map-display-expression}\n(discussion) \n\n````grammar\nMapDisplayExpr =\n  (\"map\" | \"imap\" ) \"[\" [ MapLiteralExpressions ] \"]\"\n\nMapLiteralExpressions =\n  Expression(allowLemma: true, allowLambda: true)\n  \":=\" \n  Expression(allowLemma: true, allowLambda: true)\n  { \",\" \n    Expression(allowLemma: true, allowLambda: true)\n    \":=\" \n    Expression(allowLemma: true, allowLambda: true)\n  }\n````", "start_char_idx": 2, "end_char_idx": 425, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05cec0fe-d77a-4e5a-8608-8c03d6167b8e": {"__data__": {"id_": "05cec0fe-d77a-4e5a-8608-8c03d6167b8e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd4f6bfe-6533-4c61-80b5-fca5b5d16eda", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f60794a4852a7c0ed7bdf5430483bc6e100192e17e613a010e1d1f1e6f16bacf", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.31. Endless Expression {g-endless-expression}\n(discussion) \n\n````grammar\nEndlessExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  ( IfExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | MatchExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | QuantifierExpression(allowLemma, allowLambda)\n  | SetComprehensionExpr(allowLemma, allowLambda, allowBitwiseOps)\n  | StmtInExpr\n    Expression(allowLemma, allowLambda, allowBitwiseOps)\n  | LetExpression(allowLemma, allowLambda, allowBitwiseOps)\n  | MapComprehensionExpr(allowLemma, allowLambda, allowBitwiseOps)\n  )\n````", "start_char_idx": 2, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7549068f-3397-43bb-9a60-885601337d30": {"__data__": {"id_": "7549068f-3397-43bb-9a60-885601337d30", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7b9ebfa-9e45-4d83-be50-664a36c8c74a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "feb62877555c6bf273b3dbf728852740e3393732f0f20ae3b93b6061e3b4cba5", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.32. If expression {g-if-expression}\n(discussion) \n\n````grammar\nIfExpression(allowLemma, allowLambda, allowBitwiseOps) =\n    \"if\" ( BindingGuard(allowLambda: true)\n         | Expression(allowLemma: true, allowLambda: true, allowBitwiseOps: true)\n         )\n    \"then\" Expression(allowLemma: true, allowLambda: true, allowBitwiseOps: true)\n    \"else\" Expression(allowLemma, allowLambda, allowBitwiseOps)\n````", "start_char_idx": 2, "end_char_idx": 415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49873ac0-b474-4da5-a2fd-621573d2faa0": {"__data__": {"id_": "49873ac0-b474-4da5-a2fd-621573d2faa0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90693931-27bf-408b-acde-016fc906d9e0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "55b2da8dcb9062088388dcb77a4f1723ba6f940258a900fd9251fc41e923e80a", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.33. Match Expression {g-match-expression}\n(discussion) \n\n````grammar\nMatchExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  \"match\"\n  Expression(allowLemma, allowLambda, allowBitwiseOps)\n  ( \"{\" { CaseExpression(allowLemma: true, allowLambda, allowBitwiseOps: true) } \"}\"\n  | { CaseExpression(allowLemma, allowLambda, allowBitwiseOps) }\n  )\n\nCaseExpression(allowLemma, allowLambda, allowBitwiseOps) =\n  \"case\" { Attribute } ExtendedPattern \"=>\" Expression(allowLemma, allowLambda, allowBitwiseOps)\n````", "start_char_idx": 2, "end_char_idx": 518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de0e759a-dab6-4183-bdf8-1fbf9a440558": {"__data__": {"id_": "de0e759a-dab6-4183-bdf8-1fbf9a440558", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a50407b8-124a-41b5-a2a3-e2e26e364258", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "752c71256af0917fd2b4e8688d469bf29489dac6836bf210233ee90fec16febc", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.34. Case and Extended Patterns {g-pattern}\n(discussion) \n\n````grammar\nCasePattern =\n  ( IdentTypeOptional\n  | [Ident] \"(\" [ CasePattern { \",\" CasePattern } ] \")\"\n  )\n\nSingleExtendedPattern =\n  ( PossiblyNegatedLiteralExpression\n  | IdentTypeOptional\n  | [ Ident ] \"(\" [ SingleExtendedPattern { \",\" SingleExtendedPattern } ] \")\"\n  )\n\nExtendedPattern =\n  ( [ \"|\" ] SingleExtendedPattern { \"|\" SingleExtendedPattern } )\n\nPossiblyNegatedLiteralExpression =\n  ( \"-\" ( Nat | Dec )\n  | LiteralExpression\n  )\n````", "start_char_idx": 2, "end_char_idx": 514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db7aa39a-4fe6-4816-bf5c-331bc9348598": {"__data__": {"id_": "db7aa39a-4fe6-4816-bf5c-331bc9348598", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f9dd4f14-f835-4a4f-8720-17ec5c49a975", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c5943e3a7d01dd16fd99d39b101c4dda398554c9bf9e190a2521bf27a3c9cdbe", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.35. Quantifier expression {g-quantifier-expression}\n(discussion) \n\n````grammar\nQuantifierExpression(allowLemma, allowLambda) =\n  ( \"forall\" | \"exists\" ) QuantifierDomain \"::\"\n  Expression(allowLemma, allowLambda)\n````", "start_char_idx": 2, "end_char_idx": 226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e067198f-8e8d-498f-b36e-ba4e98d68374": {"__data__": {"id_": "e067198f-8e8d-498f-b36e-ba4e98d68374", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4ee4134-6fd4-4a2f-8656-d43665f23be9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8bcedda11739a6848df73685750b3fd426572190ea44e8eadf5afd11fdab57fe", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.36. Set Comprehension Expressions {g-set-comprehension-expression}\n(discussion) \n\n````grammar\nSetComprehensionExpr(allowLemma, allowLambda) =\n  [ \"set\" | \"iset\" ]\n  QuantifierDomain(allowLemma, allowLambda)\n  [ \"::\" Expression(allowLemma, allowLambda) ]\n````", "start_char_idx": 2, "end_char_idx": 267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c597155b-cad1-4aaf-a2c1-91692494e818": {"__data__": {"id_": "c597155b-cad1-4aaf-a2c1-91692494e818", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10f30a00-0558-4dd8-a74e-56b25db2e91a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "58d8707203d49ebd6e39b7cf1ef7434bf157aa4fe5d1274584b4441e5c95eb5e", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.37. Map Comprehension Expression {g-map-comprehension-expression}\n(discussion) \n\n````grammar\nMapComprehensionExpr(allowLemma, allowLambda) =\n  ( \"map\" | \"imap\" )\n  QuantifierDomain(allowLemma, allowLambda)\n  \"::\"\n  Expression(allowLemma, allowLambda)\n  [ \":=\" Expression(allowLemma, allowLambda) ]\n````", "start_char_idx": 2, "end_char_idx": 311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b140160-5252-4b38-944b-298b43071ea3": {"__data__": {"id_": "5b140160-5252-4b38-944b-298b43071ea3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54786482-8277-462e-bedd-0e550b0695bf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "55d8bf056ea3a1401fa2c6e52a43bbf26570c61f9f9444a3ae9bcb794d8ee1d1", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.38. Statements in an Expression {g-statement-in-expression}\n(discussion) \n\n````grammar\nStmtInExpr = ( AssertStmt | AssumeStmt | ExpectStmt\n             | RevealStmt | CalcStmt\n             )\n````", "start_char_idx": 2, "end_char_idx": 204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee6c3e5c-237b-4bb3-a725-a871a8273425": {"__data__": {"id_": "ee6c3e5c-237b-4bb3-a725-a871a8273425", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d43aa82a-b123-430e-8c4c-e39d5a2e2b84", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e60ed4cfd6191927298e3e70262c221492e16adfdfa071de4c1bc5d7f8963774", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.39. Let and Let or Fail Expression {g-let-expression}\n(discussion) \n\n````grammar\nLetExpression(allowLemma, allowLambda) =\n  (\n    [ \"ghost\" ] \"var\" CasePattern { \",\" CasePattern }\n    ( \":=\" | \":-\" | { Attribute } \":|\" )\n    Expression(allowLemma: false, allowLambda: true)\n    { \",\" Expression(allowLemma: false, allowLambda: true) }\n  |\n    \":-\"\n    Expression(allowLemma: false, allowLambda: true)\n  )\n  \";\"\n  Expression(allowLemma, allowLambda)\n````", "start_char_idx": 2, "end_char_idx": 462, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14ee3633-6185-4b7d-b5ed-66a300b016fc": {"__data__": {"id_": "14ee3633-6185-4b7d-b5ed-66a300b016fc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "249e3de3-b608-4819-93c9-718f7149b173", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "024fe068ae230365c8bc56150a912bd32b158c9a462efea39ef400ca3e94718a", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.40. Name Segment {g-name-segment}\n(discussion) \n\n````grammar\nNameSegment = Ident [ GenericInstantiation | HashCall ]\n````", "start_char_idx": 2, "end_char_idx": 130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f789f95b-d270-436d-b288-cac873c41c92": {"__data__": {"id_": "f789f95b-d270-436d-b288-cac873c41c92", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6970e9fd-dc06-46a9-bbca-eecd3d3f0556", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "544045c614777deaebed1336037a227568c23f03baaaf73aaa325408bc1e5f0a", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.41. Hash Call {g-hash-call}\n(discussion) \n\n````grammar\nHashCall = \"#\" [ GenericInstantiation ]\n  \"[\" Expression(allowLemma: true, allowLambda: true) \"]\"\n  \"(\" [ Bindings ] \")\"\n````", "start_char_idx": 2, "end_char_idx": 189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36f2eb3e-4247-4449-87d7-2cb0529568b0": {"__data__": {"id_": "36f2eb3e-4247-4449-87d7-2cb0529568b0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2be0509c-c98b-41cd-a4e4-3552f4ae5b75", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c8fe76f23b56da47940c08277bd4072aa81a3505037f8686dbe8bb48c491b8fd", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.42. Suffix {g-suffix}\n(discussion) \n\n````grammar\nSuffix =\n  ( AugmentedDotSuffix_\n  | DatatypeUpdateSuffix_\n  | SubsequenceSuffix_\n  | SlicesByLengthSuffix_\n  | SequenceUpdateSuffix_\n  | SelectionSuffix_\n  | ArgumentListSuffix_\n  )\n````", "start_char_idx": 2, "end_char_idx": 245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6f5dd9c-9ef6-4a05-a2f7-2e99063a150a": {"__data__": {"id_": "f6f5dd9c-9ef6-4a05-a2f7-2e99063a150a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "beb71586-d3f5-4872-a95e-d47a94826ce0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "82ef9170675cb5346c06d4a9e150681e6a05ad01276ec7312cd8f8de73dbc570", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.43. Augmented Dot Suffix {g-augmented-dot-suffix}\n(discussion) \n\n````grammar\nAugmentedDotSuffix_ = \".\" DotSuffix\n                      [ GenericInstantiation | HashCall ]\n````", "start_char_idx": 2, "end_char_idx": 184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "918c93d8-ca0e-4437-bb23-80b9c16b832d": {"__data__": {"id_": "918c93d8-ca0e-4437-bb23-80b9c16b832d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8aa6236-e3dc-402c-96c7-9bee84e8faf6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2e6c148b52f92ada80760c8819b4854d771e865c865fe71139f8777991d1a912", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.44. Datatype Update Suffix {g-datatype-update-suffix}\n(discussion) \n\n````grammar\nDatatypeUpdateSuffix_ =\n  \".\" \"(\" MemberBindingUpdate { \",\" MemberBindingUpdate } \")\"\n\nMemberBindingUpdate =\n  ( ident | digits )\n  \":=\" Expression(allowLemma: true, allowLambda: true)\n````", "start_char_idx": 2, "end_char_idx": 279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f481c097-bed8-456d-a72a-bb323cb2e66f": {"__data__": {"id_": "f481c097-bed8-456d-a72a-bb323cb2e66f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "909482b4-7760-4941-a0c9-417aa6b2386c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae654cfeddcc5e8f20656ddf3862cdbe2c028dcd89081a5132f2aca18b74905c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.45. Subsequence Suffix {g-subsequence-suffix}\n(discussion) \n\n````grammar\nSubsequenceSuffix_ =\n  \"[\" [ Expression(allowLemma: true, allowLambda: true) ]\n      \"..\" [ Expression(allowLemma: true, allowLambda: true) ]\n  \"]\"\n````", "start_char_idx": 2, "end_char_idx": 234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44f0c580-5658-49bf-b283-e94cf5d2d927": {"__data__": {"id_": "44f0c580-5658-49bf-b283-e94cf5d2d927", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d8a67cf-bb4b-4cf5-8201-55b7e613a66c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "daee5332997663a05b60cba087c2f42c2b920e95ed6c74babe87427afe1e615c", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.46. Subsequence Slices Suffix {g-subsequence-slices-suffix}\n(discussion) \n\n````grammar\nSlicesByLengthSuffix_ =\n  \"[\" Expression(allowLemma: true, allowLambda: true) \":\"\n      [\n        Expression(allowLemma: true, allowLambda: true)\n        { \":\" Expression(allowLemma: true, allowLambda: true) }\n        [ \":\" ]\n      ]\n  \"]\"\n````", "start_char_idx": 2, "end_char_idx": 340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35906dbe-e2ce-47b1-8b12-5bd3c40cc254": {"__data__": {"id_": "35906dbe-e2ce-47b1-8b12-5bd3c40cc254", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb343877-c7e1-4231-a2b1-5457190f19ce", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9dc0f70c62221d43a2a5eb1b45c8c747eed6a651ee870ad8c52602d482474367", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.47. Sequence Update Suffix {g-sequence-update-suffix}\n(discussion) \n\n````grammar\nSequenceUpdateSuffix_ =\n  \"[\" Expression(allowLemma: true, allowLambda: true)\n      \":=\" Expression(allowLemma: true, allowLambda: true)\n  \"]\"\n````", "start_char_idx": 2, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57fa34ae-4400-4bdd-b757-b70d90f676d6": {"__data__": {"id_": "57fa34ae-4400-4bdd-b757-b70d90f676d6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "467d2026-97d0-429e-8661-dd98390761c7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cfa9508e9dbd8e327c418e56ea3dd2dcf34d2b69fd833c54f305518124fa5cba", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.48. Selection Suffix {g-selection-suffix}\n(discussion) \n\n````grammar\nSelectionSuffix_ =\n  \"[\" Expression(allowLemma: true, allowLambda: true)\n      { \",\" Expression(allowLemma: true, allowLambda: true) }\n  \"]\"\n````", "start_char_idx": 2, "end_char_idx": 223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0446273-b897-4331-a4f0-112fab4e32bd": {"__data__": {"id_": "d0446273-b897-4331-a4f0-112fab4e32bd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9a6f9e8-11b4-419e-8415-3045e51001db", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "310f62f550c27eafa3e4518254c7d58be9f3f304e325593c97865112b7039956", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.49. Argument List Suffix {g-argument-list-suffix}\n(discussion) \n\n````grammar\nArgumentListSuffix_ = \"(\" [ Expressions ] \")\"\n````", "start_char_idx": 2, "end_char_idx": 136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4bb22c9-4712-4885-85b9-9b7f5b135164": {"__data__": {"id_": "e4bb22c9-4712-4885-85b9-9b7f5b135164", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a6d39f1-2f19-405e-9e70-d1d4849e1a09", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c3dbdeaf06a99e328b38a3c5985752a1b3278520846760d112b3ba873f9eae38", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.50. Expression Lists {g-expression-list}\n(discussion) \n\n````grammar\nExpressions =\n  Expression(allowLemma: true, allowLambda: true)\n  { \",\" Expression(allowLemma: true, allowLambda: true) }\n````", "start_char_idx": 2, "end_char_idx": 203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e3a53d0-9504-4244-bac1-ca37c77d4ac5": {"__data__": {"id_": "8e3a53d0-9504-4244-bac1-ca37c77d4ac5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3ac09d6-a1a3-4379-b483-8e103c3b659e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "672104203db07d889af3c5d93023d4963213ab5b29cca240f83f6b8e639a6002", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.51. Parameter Bindings {g-parameter-bindings}\n(discussion) \n\n````grammar\nActualBindings =\n  ActualBinding\n  { \",\" ActualBinding }\n\nActualBinding(isGhost = false) =\n  [ NoUSIdentOrDigits \":=\" ]\n  Expression(allowLemma: true, allowLambda: true)\n````", "start_char_idx": 2, "end_char_idx": 256, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbc498ce-1a32-4664-beff-a4c36ea0de6b": {"__data__": {"id_": "fbc498ce-1a32-4664-beff-a4c36ea0de6b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a222b4c1-3f1a-45c2-9240-624940686f42", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4a2f84422d6e9d148da4581c9a807ea061eb77fa92df7474a6e5820070c0fa89", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.52. Quantifier domains {g-quantifier-domain}\n\n````grammar\nQuantifierDomain(allowLemma, allowLambda) =\n  QuantifierVarDecl(allowLemma, allowLambda) \n  { \",\" QuantifierVarDecl(allowLemma, allowLambda) }\n\nQuantifierVarDecl(allowLemma, allowLambda) =\n  IdentTypeOptional\n  [ \"<-\" Expression(allowLemma, allowLambda) ]\n  { Attribute }\n  [ | Expression(allowLemma, allowLambda) ]\n````", "start_char_idx": 2, "end_char_idx": 387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c502ba11-05f1-40e7-ac5c-9074c501d749": {"__data__": {"id_": "c502ba11-05f1-40e7-ac5c-9074c501d749", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d510a20b-091f-4c19-9c4f-ae05d90fa93d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "40d4f206e23102970b5d3664828330d4d025ba604b3f22cec614c0935a2f06ee", "class_name": "RelatedNodeInfo"}}, "text": "17.2.7.53. Basic name and type combinations\n\n````grammar\nIdent = ident\n\nDotSuffix = ( ident | digits | \"requires\" | \"reads\" )\n\nNoUSIdent = ident - \"_\" { idchar }\n\nWildIdent = NoUSIdent | \"_\"\n\nIdentOrDigits = Ident | digits\nNoUSIdentOrDigits = NoUSIdent | digits\nModuleName = NoUSIdent\nClassName = NoUSIdent    // also traits\nDatatypeName = NoUSIdent\nDatatypeMemberName = NoUSIdentOrDigits\nNewtypeName = NoUSIdent\nSynonymTypeName = NoUSIdent\nIteratorName = NoUSIdent\nTypeVariableName = NoUSIdent\nMethodFunctionName = NoUSIdentOrDigits\nLabelName = NoUSIdentOrDigits\nAttributeName = NoUSIdent\nExportId = NoUSIdentOrDigits\nTypeNameOrCtorSuffix = NoUSIdentOrDigits\n\nModuleQualifiedName = ModuleName { \".\" ModuleName }\n\nIdentType = WildIdent \":\" Type\n\nFIdentType = NoUSIdentOrDigits \":\" Type\n\nCIdentType = NoUSIdentOrDigits [ \":\" Type ]\n\nGIdentType(allowGhostKeyword, allowNewKeyword, allowOlderKeyword, allowNameOnlyKeyword, allowDefault) =\n  { \"ghost\" | \"new\" | \"nameonly\" | \"older\" } IdentType\n  [ \":=\" Expression(allowLemma: true, allowLambda: true) ]\n\nLocalIdentTypeOptional = WildIdent [ \":\" Type ]\n\nIdentTypeOptional = WildIdent [ \":\" Type ]\n\nTypeIdentOptional =\n  { Attribute }\n  { \"ghost\" | \"nameonly\" } [ NoUSIdentOrDigits \":\" ] Type\n  [ \":=\" Expression(allowLemma: true, allowLambda: true) ]\n\nFormalsOptionalIds = \"(\" [ TypeIdentOptional\n                           { \",\" TypeIdentOptional } ] \")\"\n\n````", "start_char_idx": 2, "end_char_idx": 1409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "895aaffe-eec2-44e7-91bd-3f96f46ea68e": {"__data__": {"id_": "895aaffe-eec2-44e7-91bd-3f96f46ea68e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01b8eed5-fa78-4335-a4ba-13f6b1e7d4b5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "019dc2e018a55223b23cf055632023fd240dafe1696580dc0317abd9ddd1d76e", "class_name": "RelatedNodeInfo"}}, "text": "2. Lexical and Low Level Grammar {sec-lexical-grammar}\n\nAs with most languages, Dafny syntax is defined in two levels. First the stream\nof input characters is broken up into _tokens_. Then these tokens are parsed\nusing the Dafny grammar.\n\nThe Dafny grammar is designed as an _attributed grammar_, which is a\nconventional BNF-style set of productions, but in which the productions can\nhave arguments. The arguments control some alternatives within\nthe productions, such as whether an alternative is allowed or not in a specific context.\nThese arguments allow for a more compact and understandable grammar.", "start_char_idx": 2, "end_char_idx": 606, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a98fa8e-64a8-4f75-8d5f-812a5a6c5377": {"__data__": {"id_": "1a98fa8e-64a8-4f75-8d5f-812a5a6c5377", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4857040-0bcc-4a9a-8f01-dc9f1687e6f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "db57b7727c9a7c880375adce6f64893bfa91c154ac82dcaa7e8b2f038b4ea2cd", "class_name": "RelatedNodeInfo"}}, "text": "2.1. Dafny Input {sec-unicode}\n\nDafny source code files are readable text encoded in UTF-8.\nAll program text other than the contents of comments, character, string and verbatim string literals\nconsists of printable and white-space ASCII characters,\nthat is, ASCII characters in the range `!` to `~`, plus space, tab,\ncarriage return and newline (ASCII 9, 10, 13, 32) characters.", "start_char_idx": 2, "end_char_idx": 380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cec31e03-3eb1-498a-8f3b-713e10e54615": {"__data__": {"id_": "cec31e03-3eb1-498a-8f3b-713e10e54615", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8e0904e-1831-4123-8333-022f456905ee", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5c2d398907313df08b7dd2618f91d85273f9b57efc41a69e5bdeb80a15154482", "class_name": "RelatedNodeInfo"}}, "text": "2.2. Tokens and whitespace {sec-token-types}\nThe characters used in a Dafny program fall into four groups:\n\n* White space characters: space, tab, carriage return and newline\n* alphanumerics: letters, digits, underscore (`_`), apostrophe (`'`), and question mark (`?`)\n* punctuation: ``(){}[],.`;``\n* operator characters (the other printable characters)\n\nExcept for string and character literals, each Dafny token consists of a\nsequence of consecutive characters from just one of these\ngroups, excluding white-space. White-space is ignored except that it\nseparates tokens and except in the bodies of character and string literals.", "start_char_idx": 2, "end_char_idx": 631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47972514-b892-436c-975e-8011146a3c85": {"__data__": {"id_": "47972514-b892-436c-975e-8011146a3c85", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f58b35e6-306c-4a58-b2fb-29c66de6ae1d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "89296b5982f1116ca80384c3781f3d4a8d5b49beae31092fef9a62e2f8b6a5dd", "class_name": "RelatedNodeInfo"}}, "text": "2.3. Character Classes {sec-character-classes}\n\nThis section defines character classes used later in the token definitions.\nIn this section\n\n* a backslash is used to start an escape sequence (so for example\n`'\\n'` denotes the single linefeed character)\n* double quotes\nenclose the set of characters constituting a character class\n* enclosing single\nquotes are used when there is just one character in the class\n(perhaps expressed with a `\\` escape character)\n* `+` indicates\nthe union of two character classes\n* `-` is the set-difference between the\ntwo classes\n* `ANY` designates all unicode characters.\n\n name              | description\n-------------------|---------------------------\nletter             | ASCII upper or lower case letter; no unicode characters\ndigit              | base-ten digit (\"0123456789\")\nposDigit           | digits, excluding 0 (\"123456789\")\nposDigitFrom2      | digits excluding 0 and 1 (\"23456789\")\nhexdigit           | a normal hex digit (\"0123456789abcdefABCDEF\")\nspecial            | `?_\"\ncr                 | carriage return character (ASCII 10)\nlf                 | line feed character (ASCII 13)\ntab                | tab character (ASCII 9)\nspace              | space character (ASCII 32)\n                   |\nnondigitIdChar     | characters allowed in an identifier, except digits (letter + special)\nidchar             | characters allowed in an identifier (nondigitIdChar + digits)\nnonidchar          | characters not in identifiers (ANY - idchar)\ncharChar           | characters allowed in a character constant (ANY - '\\'' - '\\\\' - cr - lf)\nstringChar         | characters allowed in a string constant (ANY - '\"' - '\\\\' - cr - lf)\nverbatimStringChar | characters allowed in a verbatim string constant (ANY - '\"')", "start_char_idx": 2, "end_char_idx": 1753, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77aab5f6-f157-49cb-b11b-f95cfdef0f38": {"__data__": {"id_": "77aab5f6-f157-49cb-b11b-f95cfdef0f38", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcb54fc1-dd75-4d9f-90a5-7c03e3bcded8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "85b8eb968223a61b59b641a993d58497f2359c0c6eecddf4d2f41a42e5f2a62b", "class_name": "RelatedNodeInfo"}}, "text": "2.4. Comments {sec-comments}\nComments are in two forms.\n\n* They may go from `/*` to `*/` .\n* They may go from `//` to the end of the line.\n\nA comment is identified as a token during the tokenization of\ninput text and is then discarded for the purpose of interpreting the\nDafny program. (It is retained to enable auto-formatting\nand provide accurate source locations for error messages.)\nThus comments are token separators: `a/*x*/b` becomes two tokens\n`a` and `b`.", "start_char_idx": 2, "end_char_idx": 466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4079d7d-5fad-4a35-9a66-edc6858a537a": {"__data__": {"id_": "e4079d7d-5fad-4a35-9a66-edc6858a537a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca3e5671-4a23-484c-a2c0-3f2bc0f626d4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c84f08d17dbb7602e64615c21164705205d98809a19d0ad6065ee2887e263b76", "class_name": "RelatedNodeInfo"}}, "text": "2.5. Documentation comments {sec-documentation-comments}\n\nLike many other languages, Dafny permits _documentation comments_ in a program file.\nSuch comments contain natural language descriptions of program elements and may be used\nby IDEs and documentation generation tools to present information to users.\n\nIn Dafny programs.\n* Documentation comments (a) either begin with `/**` or (b) begin with `//` or /*` in specific locations\n* Doc-comments may be associated with any declaration, including type definitions, export declarations, and datatype constructors.\n* They may be placed before or after the declaration.\n   * If before, it must be a `/**` comment and may not have any blank or white-space lines between the comment\n     and the declaration.\n   * If after, any comments are placed after the signature (with no intervening lines), but before any\n     specifications or left-brace that starts a body, and may be `//` or `/**` or `/*` comments.\n   * If doc-comments are in both places, only the comments after the declaration are used.\n* Doc-comments after the declaration are preferred.\n* If the first of a series of single-line or multi-line comments is interpreted as a doc-string, then any subsequent comments\n  are appended to it, so long as there are no intervening lines, whether blank, all white-space or containing program text.\n* The extraction of the doc-string from a multiline comment follow these rules\n  * On the first line, an optional `*` right after `/*` and an optional space are removed, if present\n  * On other lines, the indentation space (with possibly one star in it) is removed, as if the content was supposed to align with A if the comment started with `/** A` for example.\n* The documentation string is interpreted as plain text, but it is possible to provide a user-written\n  plugin that provides other interpretations. VSCode as used by Dafny interprets any markdown\n  syntax in the doc-string.", "start_char_idx": 2, "end_char_idx": 1934, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67fbc09a-53bd-4163-b503-56c33aa7b7ec": {"__data__": {"id_": "67fbc09a-53bd-4163-b503-56c33aa7b7ec", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f513de5-2654-4d52-8a7c-39a23923a19a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7046e860c1db2e95f1e4b3b9cfdbff392a46a9c41694d3a4e3cbcf95edd83257", "class_name": "RelatedNodeInfo"}}, "text": "2.6. Tokens (grammar) {sec-tokens}\n\nThe Dafny tokens are defined in this section.", "start_char_idx": 2, "end_char_idx": 83, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b315b4cd-bc01-468b-990a-7bc9771898fa": {"__data__": {"id_": "b315b4cd-bc01-468b-990a-7bc9771898fa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "edb5fde7-459d-46b5-a39f-ceadd56f1246", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c7a76fcf9500e6d98634b56fb403553bf078c48c5a82d342547b233b3a22b89d", "class_name": "RelatedNodeInfo"}}, "text": "2.6.1. Reserved Words {sec-reserved-words}\n\nDafny has a set of reserved words that may not\nbe used as identifiers of user-defined entities.\nThese are listed here.\n\nIn particular note that\n\n- `array`, `array2`, `array3`, etc. are reserved words, denoting array types of given rank.\nHowever,  `array1` and `array0` are ordinary identifiers.\n- `array?`, `array2?`, `array3?`, etc. are reserved words,\ndenoting possibly-null array types of given rank,\nbut not `array1?` or `array0?`.\n- `bv0`, `bv1`, `bv2`, etc. are reserved words that denote the types of\nbitvectors of given length.\nThe sequence of digits after 'array' or 'bv' may not have leading zeros:\nfor example, `bv02` is an ordinary identifier.", "start_char_idx": 2, "end_char_idx": 701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87d80c3b-2e7f-48ac-9b27-afd87817264d": {"__data__": {"id_": "87d80c3b-2e7f-48ac-9b27-afd87817264d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78a5065e-0d89-4bf3-968f-746f57640a7c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c663064c70faf19bf47b0f49ff68e3ea1aedf904cd818489e05a993415927f2", "class_name": "RelatedNodeInfo"}}, "text": "2.6.2. Identifiers {sec-identifiers}\n\nIn general, an `ident` token (an identifier) is a sequence of ``idchar`` characters where\nthe first character is a ``nondigitIdChar``. However tokens that fit this pattern\nare not identifiers if they look like a character literal\nor a reserved word (including array or bit-vector type tokens).\nAlso, `ident` tokens that begin with an `_` are not permitted as user identifiers.", "start_char_idx": 2, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8679d476-ad74-4c09-b35e-e97ea5c98613": {"__data__": {"id_": "8679d476-ad74-4c09-b35e-e97ea5c98613", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a83d48d8-8203-43f8-8844-5713a4aa3076", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8a5f85712bef20e72250e72ef70c766a3776c2166d9e77200b91eee6b8d346a6", "class_name": "RelatedNodeInfo"}}, "text": "2.6.3. Digits {sec-digits}\n\nA `digits` token is a sequence of decimal digits (`digit`), possibly interspersed with\nunderscores for readability (but not beginning or ending with an underscore).\nExample: `1_234_567`.\n\nA `hexdigits` token denotes a hexadecimal constant, and is a sequence of hexadecimal digits (`hexdigit`)\nprefaced by `0x` and\npossibly interspersed with underscores for readability (but not beginning or ending with an underscore).\nExample: `0xffff_ffff`.\n\nA `decimaldigits` token is a decimal fraction constant, possibly interspersed with underscores for readability (but not beginning or ending with an underscore).\nIt has digits both before and after a single period (`.`) character. There is no syntax for floating point numbers with exponents.\nExample: `123_456.789_123`.", "start_char_idx": 2, "end_char_idx": 793, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2a48f64-c083-4758-8b1d-949c539660b1": {"__data__": {"id_": "a2a48f64-c083-4758-8b1d-949c539660b1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36e420f6-e1a8-4b03-9108-0da7c8ebb8c5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c92c7c6be28a16566a37ba9a2b1907baa741d0f2b80dcb32012084347c01c902", "class_name": "RelatedNodeInfo"}}, "text": "2.6.4. Escaped Character {sec-escaped-characters}\n\nThe `escapedChar` token is a multi-character sequence that denotes a non-printable or non-ASCII character.\nSuch tokens begin with a backslash characcter (`\\`) and denote\n a single- or double-quote character, backslash,\nnull, new line, carriage return, tab, or a\nUnicode character with given hexadecimal representation.\nWhich Unicode escape form is allowed depends on the value of the `--unicode-char` option.\n\nIf `--unicode-char:false` is stipulated,\n`\\uXXXX` escapes can be used to specify any UTF-16 code unit.\n\nIf `--unicode-char:true` is stipulated,\n`\\U{X..X}` escapes can be used to specify any Unicode scalar value.\nThere must be at least one hex digit in between the braces, and at most six.\nSurrogate code points are not allowed.\nThe hex digits may be interspersed with underscores for readability\n(but not beginning or ending with an underscore), as in `\\U{1_F680}`.\nThe braces are part of the required character sequence.", "start_char_idx": 2, "end_char_idx": 984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14360d32-2b94-4287-8992-82c6db12d26d": {"__data__": {"id_": "14360d32-2b94-4287-8992-82c6db12d26d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d8418b5-53c5-4fb4-a315-f31c1129a02a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fd768a81676e0263f455dc37eba0b6b8080a63b980b2ac2497b9cc494cc73b43", "class_name": "RelatedNodeInfo"}}, "text": "2.6.5. Character Constant Token {sec-character-constant-token}\n\nThe `charToken` token denotes a character constant.\nIt is either a `charChar` or an `escapedChar` enclosed in single quotes.", "start_char_idx": 2, "end_char_idx": 190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f6bd013-63c6-41ba-a5fa-ee00050eb2db": {"__data__": {"id_": "2f6bd013-63c6-41ba-a5fa-ee00050eb2db", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a65a9e3-7cc7-430a-a6ee-89cf2c35db9d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "57e47fe12acc95ace80435472b67fc2e0602e955a87ec67fe3514d6f7b92504c", "class_name": "RelatedNodeInfo"}}, "text": "2.6.6. String Constant Token {sec-string-constant-token}\n\nA `stringToken` denotes a string constant.\nIt consists of a sequence of `stringChar` and `escapedChar` characters enclosed in\ndouble quotes.\n\nA `verbatimStringToken` token also denotes a string constant.\nIt is a sequence of any `verbatimStringChar` characters (which includes newline characters),\nenclosed between `@\"` and `\"`, except that two\nsuccessive double quotes represent one quote character inside\nthe string. This is the mechanism for escaping a double quote character,\nwhich is the only character needing escaping in a verbatim string.\nWithin a verbatim string constant, a backslash character represents itself\nand is not the first character of an `escapedChar`.\n\nThe `ellipsisToken` is the character sequence `...` and is typically used to designate something missing that will\nlater be inserted through refinement or is already present in a parent declaration.", "start_char_idx": 2, "end_char_idx": 932, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3343df37-cd08-4a2d-80b2-5ea02fda3ae0": {"__data__": {"id_": "3343df37-cd08-4a2d-80b2-5ea02fda3ae0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e9ddb47-686c-464e-ab57-22bb128a97a4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2769b24b7da8c448bdb47ff7487a713c5073710172f905c0f6280babdedefe28", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1. Identifier Variations {sec-identifier-variations}", "start_char_idx": 2, "end_char_idx": 58, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c7e6048-421f-4499-afc5-839337b71a2c": {"__data__": {"id_": "9c7e6048-421f-4499-afc5-839337b71a2c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9436a67b-6bcb-44e7-b1e3-d14ecacde2c0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "76ab4fcebbeeed5702eed0b77878fc6437fbccecf2b1c7867798545ee4632e24", "class_name": "RelatedNodeInfo"}}, "text": "2.7.1.1. Identifier\n\nA basic ordinary identifier is just an `ident` token.\n\nIt may be followed by a sequence of suffixes to denote compound entities.\nEach suffix is a dot (`.`) and another token, which may be\n\n- another `ident` token\n- a `digits` token\n- the `requires` reserved word\n- the `reads` reserved word", "start_char_idx": 2, "end_char_idx": 313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8fce4a5-d918-4534-9415-96b640d27c25": {"__data__": {"id_": "f8fce4a5-d918-4534-9415-96b640d27c25", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7502e25d-c461-4e7c-843b-9b7043f0c9e7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1cd25b2cf535d1db222eb31adb7fbad214047b2737edb3e6ef42b9510fc0150a", "class_name": "RelatedNodeInfo"}}, "text": "2.7.2. Qualified Names\n\nA qualified name starts with the name of a top-level entity and then is followed by\nzero or more ``DotSuffix``s which denote a component. Examples:\n\n* `Module.MyType1`\n* `MyTuple.1`\n* `MyMethod.requires`\n* `A.B.C.D`\n\nThe identifiers and dots are separate tokens and so may optionally be\nseparated by whitespace.", "start_char_idx": 2, "end_char_idx": 337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "577904a8-a28a-4aa0-85a9-45a60eeb3bd8": {"__data__": {"id_": "577904a8-a28a-4aa0-85a9-45a60eeb3bd8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f151794-d22d-4bf4-b3bc-d35b119c7c22", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8e79fee15b9b686baff53aa765b8c1b366318d4162c54b41b615afc933293e0a", "class_name": "RelatedNodeInfo"}}, "text": "2.7.3. Identifier-Type Combinations\n\nIdentifiers are typically declared in combination with a type, as in\n\n```dafny\nvar i: int\n```\n\nHowever, Dafny infers types in many circumstances, and in those, the type can be omitted. The type is required\nfor field declarations and formal parameters of methods, functions and constructors (because there is no initializer).\nIt may be omitted (if the type can be inferred) for local variable declarations, pattern matching variables,\nquantifiers,\n\nSimilarly, there are circumstances in which the identifier name is not needed, because it is not used.\nThis is allowed in defining algebraic datatypes.\n\nIn some other situations a wild identifier can be used, as described above.", "start_char_idx": 2, "end_char_idx": 715, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e050821-aedc-4ec5-8b7f-4369cd0099f3": {"__data__": {"id_": "9e050821-aedc-4ec5-8b7f-4369cd0099f3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87d763f5-e35f-4d67-bb52-b3d7cfffc681", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "49f2041d366daaf61c6f08b59f5ee70fc381a11cc42f0c3d3afafa83a1f4470a", "class_name": "RelatedNodeInfo"}}, "text": "2.7.4. Quantifier Domains (grammar) {sec-quantifier-domains}\n\nSeveral Dafny constructs bind one or more variables to a range of possible values.\nFor example, the quantifier `forall x: nat | x <= 5 :: x * x <= 25` has the meaning\n\"for all integers x between 0 and 5 inclusive, the square of x is at most 25\".\nSimilarly, the set comprehension `set x: nat | x <= 5 :: f(x)` can be read as\n\"the set containing the result of applying f to x, for each integer x from 0 to 5 inclusive\".\nThe common syntax that specifies the bound variables and what values they take on\nis known as the *quantifier domain*; in the previous examples this is `x: nat | x <= 5`,\nwhich binds the variable `x` to the values `0`, `1`, `2`, `3`, `4`, and `5`.\n\nHere are some more examples.\n\n- `x: byte` (where a value of type `byte` is an int-based number `x` in the range `0 <= x < 256`)\n- `x: nat | x <= 5`\n- `x <- integerSet`\n- `x: nat <- integerSet`\n- `x: nat <- integerSet | x % 2 == 0`\n- `x: nat, y: nat | x < 2 && y < 2`\n- `x: nat | x < 2, y: nat | y < x`\n- `i | 0 <= i < |s|, y <- s[i] | i < y`\n\nA quantifier domain declares one or more *quantified variables*, separated by commas.\nEach variable declaration can be nothing more than a variable name, but it\nmay also include any of three optional elements:\n\n1. The optional syntax `: T` declares the type of the quantified variable.\n   If not provided, it will be inferred from context.\n\n2. The optional syntax `<- C` attaches a collection expression `C` as a *quantified variable domain*.\n   Here a collection is any value of a type that supports the `in` operator, namely sets, multisets, maps, and sequences.\n   The domain restricts the bindings to the elements of the collection: `x <- C` implies `x in C`.\n   The example above can also be expressed as `var c := [0, 1, 2, 3, 4, 5]; forall x <- c :: x * x <= 25`.\n\n3. The optional syntax `| E` attaches a boolean expression `E` as a *quantified variable range*,\n   which restricts the bindings to values that satisfy this expression.\n   In the example above `x <= 5` is the range attached to the `x` variable declaration.\n\nNote that a variable's domain expression may reference any variable declared before it,\nand a variable's range expression may reference the attached variable (and usually does) and any variable declared before it.\nFor example, in the quantifier domain `i | 0 <= i < |s|, y <- si] | i < y`, the expression `s[i]` is always [well-formed\nbecause the range attached to `i` ensures `i` is a valid index in the sequence `s`.\n\nAllowing per-variable ranges is not fully backwards compatible, and so it is not yet allowed by default;\nthe `--quantifier-syntax:4` option needs to be provided to enable this feature (See Section 13.9.5).", "start_char_idx": 2, "end_char_idx": 2729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77028a73-5be5-4da8-af79-fb846a01552c": {"__data__": {"id_": "77028a73-5be5-4da8-af79-fb846a01552c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "770139c4-9b19-4b38-8799-f31ebe57170f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e1796ca1fb1a093bd1bc4dc12a8325adb23e442c16d105a661a66dbb19d58bcd", "class_name": "RelatedNodeInfo"}}, "text": "2.7.5. Numeric Literals (grammar) {sec-numeric-literals}\n\nInteger and bitvector literals may be expressed in either decimal or hexadecimal (`digits` or `hexdigits`).\n\nReal number literals are written as decimal fractions (`decimaldigits`).", "start_char_idx": 2, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c9b2593-6dc3-4dd1-ae37-647301f7a99f": {"__data__": {"id_": "0c9b2593-6dc3-4dd1-ae37-647301f7a99f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Guards_description.md", "file_name": "Guards_description.md", "file_type": "text/markdown", "file_size": 518, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25504e9a-629a-4d1e-8db4-1e5180241138", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Guards_description.md", "file_name": "Guards_description.md", "file_type": "text/markdown", "file_size": 518, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c01ffb56c518adc74d9c7207742a1fab01372c5d779d61a6deaf0f9120eeaec", "class_name": "RelatedNodeInfo"}}, "text": "8.8. Guards (grammar) {sec-guard}\n\nExamples (in `if` statements):\n\n```dafny\nmethod m(i: int) {\n  if (*) { print i; }\n  if i > 0 { print i; }\n}\n```\n\nGuards are used in `if` and `while` statements as boolean expressions. Guards\ntake two forms.\n\nThe first and most common form is just a boolean expression.\n\nThe second form is either `*` or `(*)`. These have the same meaning. An\nunspecified boolean value is returned. The value returned\nmay be different each time it is executed.", "start_char_idx": 2, "end_char_idx": 479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19268660-b434-4e02-a47e-83d21b01940c": {"__data__": {"id_": "19268660-b434-4e02-a47e-83d21b01940c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Hash_call_description.md", "file_name": "Hash_call_description.md", "file_type": "text/markdown", "file_size": 1320, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3170ee48-78c4-4b3c-8d55-5ee0fe5a1525", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Hash_call_description.md", "file_name": "Hash_call_description.md", "file_type": "text/markdown", "file_size": 1320, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e47a605590e5ef16b39d07b69e1fffde65d901ef6660e04f1cd63c645964ce63", "class_name": "RelatedNodeInfo"}}, "text": "9.33. Hash call (grammar) {sec-hash-call}\n\nA _hash call_  is used to call the prefix for a greatest predicate or greatest lemma.\nIn the non-generic case, just insert `\"#[k]\"` before the call argument\nlist where k is the number of recursion levels.\n\nIn the case where the `greatest lemma` is generic, the generic type\nargument is given before. Here is an example:\n\n\n```dafny\ncodatatype Stream = Nil | Cons(head: int, stuff: T,\n                                  tail: Stream)\n\nfunction append(M: Stream, N: Stream): Stream\n{\n  match M\n  case Nil => N\n  case Cons(t, s, M') => Cons(t, s, append(M', N))\n}\n\nfunction zeros(s : T): Stream\n{\n  Cons(0, s, zeros(s))\n}\n\nfunction ones(s: T): Stream\n{\n  Cons(1, s, ones(s))\n}\n\ngreatest predicate atmost(a: Stream, b: Stream)\n{\n  match a\n  case Nil => true\n  case Cons(h,s,t) => b.Cons? && h <= b.head && atmost(t, b.tail)\n}\n\ngreatest lemma {:induction false} Theorem0(s: T)\n  ensures atmost(zeros(s), ones(s))\n{\n  // the following shows two equivalent ways to state the\n  // coinductive hypothesis\n  if (*) {\n    Theorem0#_k-1;\n  } else {\n    Theorem0(s);\n  }\n}\n```\n\nwhere the ``HashCall`` is `\"Theorem0#_k-1;\"`.\nSee Section 5.14.3.5 and Section 5.14.3.6.3.", "start_char_idx": 2, "end_char_idx": 1198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45d97175-330d-47fa-8f09-a61fe03b101c": {"__data__": {"id_": "45d97175-330d-47fa-8f09-a61fe03b101c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Havoc_Right-Hand-Side_description.md", "file_name": "Havoc_Right-Hand-Side_description.md", "file_type": "text/markdown", "file_size": 387, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5defe224-4d4b-403b-bbf0-0bbdfe70e59d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Havoc_Right-Hand-Side_description.md", "file_name": "Havoc_Right-Hand-Side_description.md", "file_type": "text/markdown", "file_size": 387, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "74026e4f72cb0e83b3f0055714f64776c0b91be01c6293398a2d35122362f045", "class_name": "RelatedNodeInfo"}}, "text": "9.18. Havoc Right-Hand-Side (grammar) {sec-havoc-expression}\n\nExamples:\n\n```dafny\n*\n```\nA havoc right-hand-side is just a `*` character.\nIt produces an arbitrary value of its associated\ntype. The \"assign-such-that\"\noperator (`:|`) can be used to obtain a more constrained arbitrary value. \nSee Section 8.5.", "start_char_idx": 2, "end_char_idx": 308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "720a2b2d-420f-416a-a79c-7835f7e3e8b2": {"__data__": {"id_": "720a2b2d-420f-416a-a79c-7835f7e3e8b2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/If_Statement_description.md", "file_name": "If_Statement_description.md", "file_type": "text/markdown", "file_size": 2574, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4ca6d33-eaf3-4a15-aa7c-0399cd4812ae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/If_Statement_description.md", "file_name": "If_Statement_description.md", "file_type": "text/markdown", "file_size": 2574, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6409ecd0c765e797a931869139967a8adf47cf811869f1a9242a80d459d6dca7", "class_name": "RelatedNodeInfo"}}, "text": "8.10. If Statement (grammar) {sec-if-statement}\n\nExamples:\n\n```dafny\nmethod m(i: int) {\n  var x: int;\n  if i > 0 {\n    x := i;\n  } else {\n    x := -i;\n  }\n  if * {\n    x := i;\n  } else {\n    x := -i;\n  }\n  if i: nat, j: nat :| i+j<10 {\n    assert i < 10;\n  }\n  if i == 0 {\n    x := 0;\n  } else if i > 0 {\n    x := 1;\n  } else {\n    x := -1;\n  }\n  if \n    case i == 0 => x := 0;\n    case i > 0 => x := 1;\n    case i  x := -1;\n}\n```\n\nThe simplest form of an `if` statement uses a guard that is a boolean\nexpression. For example,\n\n\n```dafny\n  if x < 0 {\n    x := -x;\n  }\n```\n\nUnlike `match` statements, `if` statements do not have to be exhaustive:\nomitting the `else` block is the same as including an empty `else`\nblock.  To ensure that an `if` statement is exhaustive, use the\n`if-case` statement documented below.\n\nIf the guard is an asterisk then a non-deterministic choice is made:\n\n\n```dafny\n  if * {\n    print \"True\";\n  } else {\n    print \"False\";\n  }\n```\n\nThe then alternative of the if-statement must be a block statement;\nthe else alternative may be either a block statement or another if statement.\nThe condition of the if statement need not (but may) be enclosed in parentheses.\n\nAn if statement with a binding guard is non-deterministic;\nit will not be compiled if `--enforce-determinism` is enabled\n(even if it can be proved that there is a unique value).\nAn if statement with `*` for a guard is non-deterministic and ghost.\n\nThe `if-case` statement using the `AlternativeBlock` form is similar to the\n`if ... fi` construct used in the book \"A Discipline of Programming\" by\nEdsger W. Dijkstra. It is used for a multi-branch `if`.\n\nFor example:\n\n```dafny\nmethod m(x: int, y: int) returns (max: int) \n{\n  if {\n    case x  max := y;\n    case y  max := x;\n  }\n}\n```\n\nIn this form, the expressions following the `case` keyword are called\n_guards_. The statement is evaluated by evaluating the guards in an\nundetermined order until one is found that is `true` and the statements\nto the right of `=>` for that guard are executed. The statement requires\nat least one of the guards to evaluate to `true` (that is, `if-case`\nstatements must be exhaustive: the guards must cover all cases).\n\nIn the if-with-cases, a sequence of statements may follow the `=>`; it\nmay but need not be a block statement (a brace-enclosed sequence of statements).\n\nThe form that used `...` (a refinement feature) as the guard is deprecated.", "start_char_idx": 2, "end_char_idx": 2423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6799c6cb-f9ba-4db7-80dc-7b376b9ac761": {"__data__": {"id_": "6799c6cb-f9ba-4db7-80dc-7b376b9ac761", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Implies_or_Explies_Expressions_description.md", "file_name": "Implies_or_Explies_Expressions_description.md", "file_type": "text/markdown", "file_size": 298, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20e0fe61-6840-4f79-9b48-8793a4ebc659", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Implies_or_Explies_Expressions_description.md", "file_name": "Implies_or_Explies_Expressions_description.md", "file_type": "text/markdown", "file_size": 298, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0afa3bbea344867a0d19dcdc4ec83556a738f1bbc005c557299c9c53bf7779cb", "class_name": "RelatedNodeInfo"}}, "text": "9.3. Implies or Explies Expressions (grammar) {sec-implies-expression}\n\nExamples:\n\n```dafny\nA ==> B\nA ==> B ==> C ==> D\nB <== A\n```\n\nSee Section 5.2.1.3 for an explanation\nof the `==>` and `<==` operators.", "start_char_idx": 2, "end_char_idx": 207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19f5c92f-c643-4479-ab5e-d7a228093eb3": {"__data__": {"id_": "19f5c92f-c643-4479-ab5e-d7a228093eb3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Importing_Modules_description.md", "file_name": "Importing_Modules_description.md", "file_type": "text/markdown", "file_size": 3373, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7348063-eada-42cb-9bf8-0b82facd8fd8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Importing_Modules_description.md", "file_name": "Importing_Modules_description.md", "file_type": "text/markdown", "file_size": 3373, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9c25ccbea034516b897df24fd17163631584ab84321fd3013e1547e0919926af", "class_name": "RelatedNodeInfo"}}, "text": "4.3. Importing Modules (grammar) {sec-importing-modules}\n\nExamples:\n\n```dafny\nimport A\nimport opened B\nimport A = B\nimport A : B\nimport A.B\nimport A`E\nimport X = A.B`{E,F}\n```\n\nSometimes you want to refer to\nthings from an existing module, such as a library. In this case, you\ncan _import_ one module into another. This is done via the `import`\nkeyword, which has two forms with different meanings.\nThe simplest form is the concrete import, which has\nthe form `import A = B`. This declaration creates a reference to the\nmodule `B` (which must already exist), and binds it to the new local name\n`A`. This form can also be used to create a reference to a nested\nmodule, as in `import A = B.C`. The other form, using a `:`, is\ndescribed in Section 4.6.\n\nAs modules in the same scope must have different names, this ability\nto bind a module to a new name allows disambiguating separately developed\nexternal modules that have the same name.\nNote that the new name is only bound in the scope containing\nthe import declaration; it does not create a global alias. For\nexample, if `Helpers` was defined outside of `Mod`, then we could import\nit:\n\n\n```dafny\nmodule Helpers {\n  function addOne(n: nat): nat {\n    n + 1\n  }\n}\nmodule Mod {\n  import A = Helpers\n  method m() {\n    assert A.addOne(5) == 6;\n  }\n}\n```\n\nNote that inside `m()`, we have to use `A` instead of `Helpers`, as we bound\nit to a different name. The name `Helpers` is not available inside `m()` (or anywhere else inside `Mod`),\nas only names that have been bound inside `Mod` are available. In order\nto use the members from another module, that other module either has to be declared\nthere with `module` or imported with `import`. (As described below, the\nresolution of the `ModuleQualifiedName` that follows the `=` in the `import`\nstatement or the `refines` in a module declaration uses slightly\ndifferent rules.)\n\nWe don't have to give `Helpers` a new name, though, if we don't want\nto. We can write `import Helpers = Helpers` to import the module under\nits own name; Dafny\neven provides the shorthand `import Helpers` for this behavior. You\ncan't bind two modules with the same name at the same time, so\nsometimes you have to use the = version to ensure the names do not\nclash. When importing nested modules, `import B.C` means `import C = B.C`;\nthe implicit name is always the last name segment of the module designation.\n\nThe first identifier in the dot-separated sequence of identifers that constitute\nthe qualified name of the module being imported is resolved as (in order)\n- a submodule of the importing module, \n- or a sibling module of the importing module, \n- or a sibling module of some containing module, traversing outward. \nThere is no way to refer to a containing module, only\nsibling modules (and their submodules).\n\nImport statements may occur at the top-level of a program\n(that is, in the implicit top-level module of the program) as well.\nThere they serve as a way to give a new name, perhaps a\nshorthand name, to a module. For example,\n\n\n```dafny\nmodule MyModule { } // declare MyModule\nimport MyModule  // error: cannot add a module named MyModule\n                 // because there already is one\nimport M = MyModule // OK. M and MyModule are equivalent\n```", "start_char_idx": 2, "end_char_idx": 3242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0393d0ea-18f1-4794-a8ae-d4ad5a01a61e": {"__data__": {"id_": "0393d0ea-18f1-4794-a8ae-d4ad5a01a61e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Include_Directives_description.md", "file_name": "Include_Directives_description.md", "file_type": "text/markdown", "file_size": 1442, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7829f7ae-576a-4a23-ae94-daf843bd6dde", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Include_Directives_description.md", "file_name": "Include_Directives_description.md", "file_type": "text/markdown", "file_size": 1442, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "070a8e64f8de2546e456fb522a017920b5b1950a7c0cfee0315e2bd04dfd33ec", "class_name": "RelatedNodeInfo"}}, "text": "3.1. Include Directives (grammar) {sec-include-directive}\n\nExamples:\n\n```dafny\ninclude \"MyProgram.dfy\"\ninclude @\"/home/me/MyFile.dfy\"\n```\n\nInclude directives have the form ``\"include\" stringToken`` where\nthe string token is either a normal string token or a\nverbatim string token. The ``stringToken`` is interpreted as the name of\na file that will be included in the Dafny source. These included\nfiles also obey the ``Dafny`` grammar. Dafny parses and processes the\ntransitive closure of the original source files and all the included files,\nbut will not invoke the verifier on the included files unless they have been listed\nexplicitly on the command line or the `--verify-included-files` option is\nspecified.\n\nThe file name may be a path using the customary `/`, `.`, and `..` punctuation.\nThe interpretation of the name (e.g., case-sensitivity) will depend on the\nunderlying operating system. A path not beginning with `/` is looked up in\nthe underlying file system relative to the \n_location of the file in which the include directive is stated_. \nPaths beginning with a device\ndesignator (e.g., `C:`) are only permitted on Windows systems.\nBetter style advocates using relative paths in include directives so that\ngroups of files may be moved as a whole to a new location.\n\nPaths of files on the command-line or named in `--library` options are \nrelative the the current working directory.", "start_char_idx": 2, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c76dc23b-f608-442f-abf7-b7970d80d24f": {"__data__": {"id_": "c76dc23b-f608-442f-abf7-b7970d80d24f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "497bda4f-db22-4d42-a1fb-cff2b5c2dd66", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9c7ae7cfdab5ec238c31bb7f9f79b1c69d3de55b4cba2dc1b93ffd2fd23592d5", "class_name": "RelatedNodeInfo"}}, "text": "1. Introduction {sec-introduction}\n\nDafny [@Leino:Dafny:LPAR16] is a programming language with built-in specification constructs,\nso that verifying a program's correctness with respect to those specifications\nis a natural part of writing software.\nThe Dafny static program verifier can be used to verify the functional\ncorrectness of programs.\nThis document is a reference manual for the programming language and a user guide\nfor the `dafny` tool that performs verification and compilation to an\nexecutable form.\n\nThe Dafny programming language is designed to support the static\nverification of programs. It is imperative, sequential, supports generic\nclasses, inheritance and abstraction, methods and functions, dynamic allocation, inductive and\ncoinductive datatypes, and specification constructs. The\nspecifications include pre- and postconditions, frame specifications\n(read and write sets), and termination metrics. To further support\nspecifications, the language also offers updatable ghost variables,\nrecursive functions, and types like sets and sequences. Specifications\nand ghost constructs are used only during verification; the compiler\nomits them from the executable code.\n\nThe `dafny` verifier is run as part of the compiler. As such, a programmer\ninteracts with it in much the same way as with the static type\nchecker\u2014when the tool produces errors, the programmer responds by\nchanging the program\u2019s type declarations, specifications, and statements.\n\n(This document typically uses \"Dafny\" to refer to the programming language\nand `dafny` to refer to the software tool that verifies and compiles programs\nin the Dafny language.)\n\nThe easiest way to try out the Dafny language is to download the supporting tools and documentation and\nrun `dafny` on your machine as you follow along with the Dafny tutorial.\nThe `dafny` tool can be run from the command line (on Linux, MacOS, Windows or other platforms) or from IDEs\nsuch as emacs and VSCode, which can provide syntax highlighting and code manipulation capabilities.\n\nThe verifier is powered\nby Boogie\n[@Boogie:Architecture;@Leino:Boogie2-RefMan;@LeinoRuemmer:Boogie2]\nand Z3 [@deMouraBjorner:Z3:overview].\n\nFrom verified programs, the `dafny` compiler can produce code for a number\nof different backends:\nthe .NET platform via intermediate C\\# files, Java, Javascript, Go, and C++.\nEach language provides a basic Foreign Function Interface (through uses of `:extern`)\nand a supporting runtime library.\n\nThis reference manual for the Dafny verification system is\nbased on the following references:\n[@Leino:Dafny:LPAR16],\n[@MSR:dafny:main],\n[@LEINO:Dafny:Calc],\n[@LEINO:Dafny:Coinduction],\nCo-induction Simply.\n\nThe main part of the reference manual is in top down order except for an\ninitial section that deals with the lowest level constructs.\n\nThe details of using (and contributing to) the dafny tool are described in the User Guide (Section 13).", "start_char_idx": 2, "end_char_idx": 2913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4846c59-c077-4eb6-9f3b-94da373a9586": {"__data__": {"id_": "e4846c59-c077-4eb6-9f3b-94da373a9586", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7327233-13bf-4d77-bb62-62d817d4cffe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aef86712c0584790ed33236517f86cb77f7250f4c46b2bf8a649fe4bef28e0c6", "class_name": "RelatedNodeInfo"}}, "text": "1.1. Dafny 4.0\n\nThe most recent major version of the Dafny language is Dafny 4.0, released in February 2023.\nIt has some backwards incompatibilities with Dafny 3, as decribed in the migration guide.\n\nThe user documentation has been expanded with more examples, a FAQ, and an error explanation catalog.\nThere is even a new book, Program Proofs by Dafny designer Rustan Leino.\n\nThe IDE now has a framework for showing error explanation information and corresponding quick fixes are\nbeing added, with refactoring operations on the horizon.\n\nMore details of 4.0 functionality are described in the release notes.", "start_char_idx": 2, "end_char_idx": 609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ba1496b-f4c7-4584-b14a-0a0c943e04d2": {"__data__": {"id_": "9ba1496b-f4c7-4584-b14a-0a0c943e04d2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf7c92d3-9b25-4365-9097-37cd29d6d30e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "04df661826cc81e885ff402647b074d817a734f87493120fa12950be9a4ba4e2", "class_name": "RelatedNodeInfo"}}, "text": "1.2. Dafny Example {sec-example}\nTo give a flavor of Dafny, here is the solution to a competition problem.\n\n\n```dafny\n// VSComp 2010, problem 3, find a 0 in a linked list and return\n// how many nodes were skipped until the first 0 (or end-of-list)\n// was found.\n// Rustan Leino, 18 August 2010.\n//\n// The difficulty in this problem lies in specifying what the\n// return value 'r' denotes and in proving that the program\n// terminates.  Both of these are addressed by declaring a ghost\n// field 'List' in each linked-list node, abstractly representing\n// the linked-list elements from the node to the end of the linked\n// list.  The specification can now talk about that sequence of\n// elements and can use 'r' as an index into the sequence, and\n// termination can be proved from the fact that all sequences in\n// Dafny are finite.\n//\n// We only want to deal with linked lists whose 'List' field is\n// properly filled in (which can only happen in an acyclic list,\n// for example).  To that end, the standard idiom in Dafny is to\n// declare a predicate 'Valid()' that is true of an object when\n// the data structure representing that object's abstract value\n// is properly formed.  The definition of 'Valid()' is what one\n// intuitively would think of as the ''object invariant'', and\n// it is mentioned explicitly in method pre- and postconditions.\n//\n// As part of this standard idiom, one also declares a ghost\n// variable 'Repr' that is maintained as the set of objects that\n// make up the representation of the aggregate object--in this\n// case, the Node itself and all its successors.\nmodule {:options \"--function-syntax:4\"} M {\nclass Node {\n  ghost var List: seq\n  ghost var Repr: set\n  var head: int\n  var next: Node? // Node? means a Node value or null\n\n  ghost predicate Valid()\n    reads this, Repr\n  {\n    this in Repr &&\n    1 <= |List| && List[0] == head &&\n    (next == null ==> |List| == 1) &&\n    (next != null ==>\n      next in Repr && next.Repr <= Repr && this !in next.Repr &&\n      next.Valid() && next.List == List[1..])\n  }\n\n  static method Cons(x: int, tail: Node?) returns (n: Node)\n    requires tail == null || tail.Valid()\n    ensures n.Valid()\n    ensures if tail == null then n.List == [x]\n                            else n.List == [x] + tail.List\n  {\n    n := new Node;\n    n.head, n.next := x, tail;\n    if (tail == null) {\n      n.List := [x];\n      n.Repr := {n};\n    } else {\n      n.List := [x] + tail.List;\n      n.Repr := {n} + tail.Repr;\n    }\n  }\n}\n\nmethod Search(ll: Node?) returns (r: int)\n  requires ll == null || ll.Valid()\n  ensures ll == null ==> r == 0\n  ensures ll != null ==>\n            0 <= r && r <= |ll.List| &&\n            (r \n              ll.List[r] == 0 && 0 !in ll.List[..r]) &&\n            (r == |ll.List| ==> 0 !in ll.List)\n{\n  if (ll == null) {\n    r := 0;\n  } else {\n    var jj,i := ll,0;\n    while (jj != null && jj.head != 0)\n      invariant jj != null ==>\n            jj.Valid() &&\n            i + |jj.List| == |ll.List| &&\n            ll.List[i..] == jj.List\n      invariant jj == null ==> i == |ll.List|\n      invariant 0 !in ll.List[..i]\n      decreases |ll.List| - i\n    {\n      jj := jj.next;\n      i := i + 1;\n    }\n    r := i;\n  }\n}\n\nmethod Main()\n{\n  var list: Node? := null;\n  list := list.Cons(0, list);\n  list := list.Cons(5, list);\n  list := list.Cons(0, list);\n  list := list.Cons(8, list);\n  var r := Search(list);\n  print \"Search returns \", r, \"\\n\";\n  assert r == 1;\n}\n}\n```", "start_char_idx": 2, "end_char_idx": 3454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "265c8ec4-826a-481a-9b8e-a4bc3466bd7d": {"__data__": {"id_": "265c8ec4-826a-481a-9b8e-a4bc3466bd7d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18e2c6d9-1e22-4c4d-85ff-c5a86a4de7d4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5b3c770fbb1b4c663c36b58c3f8140336975a2b32256b8e1b8922acbd1582048", "class_name": "RelatedNodeInfo"}}, "text": "1. Introduction {sec-introduction}\n\nDafny [@Leino:Dafny:LPAR16] is a programming language with built-in specification constructs,\nso that verifying a program's correctness with respect to those specifications\nis a natural part of writing software.\nThe Dafny static program verifier can be used to verify the functional\ncorrectness of programs.\nThis document is a reference manual for the programming language and a user guide\nfor the `dafny` tool that performs verification and compilation to an\nexecutable form.\n\nThe Dafny programming language is designed to support the static\nverification of programs. It is imperative, sequential, supports generic\nclasses, inheritance and abstraction, methods and functions, dynamic allocation, inductive and\ncoinductive datatypes, and specification constructs. The\nspecifications include pre- and postconditions, frame specifications\n(read and write sets), and termination metrics. To further support\nspecifications, the language also offers updatable ghost variables,\nrecursive functions, and types like sets and sequences. Specifications\nand ghost constructs are used only during verification; the compiler\nomits them from the executable code.\n\nThe `dafny` verifier is run as part of the compiler. As such, a programmer\ninteracts with it in much the same way as with the static type\nchecker\u2014when the tool produces errors, the programmer responds by\nchanging the program\u2019s type declarations, specifications, and statements.\n\n(This document typically uses \"Dafny\" to refer to the programming language\nand `dafny` to refer to the software tool that verifies and compiles programs\nin the Dafny language.)\n\nThe easiest way to try out the Dafny language is to download the supporting tools and documentation and\nrun `dafny` on your machine as you follow along with the Dafny tutorial.\nThe `dafny` tool can be run from the command line (on Linux, MacOS, Windows or other platforms) or from IDEs\nsuch as emacs and VSCode, which can provide syntax highlighting and code manipulation capabilities.\n\nThe verifier is powered\nby Boogie\n[@Boogie:Architecture;@Leino:Boogie2-RefMan;@LeinoRuemmer:Boogie2]\nand Z3 [@deMouraBjorner:Z3:overview].\n\nFrom verified programs, the `dafny` compiler can produce code for a number\nof different backends:\nthe .NET platform via intermediate C\\# files, Java, Javascript, Go, and C++.\nEach language provides a basic Foreign Function Interface (through uses of `:extern`)\nand a supporting runtime library.\n\nThis reference manual for the Dafny verification system is\nbased on the following references:\n[@Leino:Dafny:LPAR16],\n[@MSR:dafny:main],\n[@LEINO:Dafny:Calc],\n[@LEINO:Dafny:Coinduction],\nCo-induction Simply.\n\nThe main part of the reference manual is in top down order except for an\ninitial section that deals with the lowest level constructs.\n\nThe details of using (and contributing to) the dafny tool are described in the User Guide (Section 13).", "start_char_idx": 2, "end_char_idx": 2913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfa74cca-b31f-423d-877f-c193a8c0f2bd": {"__data__": {"id_": "cfa74cca-b31f-423d-877f-c193a8c0f2bd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "883cbeb4-ba10-4389-aaf6-052611314cce", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "878ff91efcbee987ba4fa8851dbaf41c25f595876965be2dff12bc989e3f169b", "class_name": "RelatedNodeInfo"}}, "text": "1.1. Dafny 4.0\n\nThe most recent major version of the Dafny language is Dafny 4.0, released in February 2023.\nIt has some backwards incompatibilities with Dafny 3, as decribed in the migration guide.\n\nThe user documentation has been expanded with more examples, a FAQ, and an error explanation catalog.\nThere is even a new book, Program Proofs by Dafny designer Rustan Leino.\n\nThe IDE now has a framework for showing error explanation information and corresponding quick fixes are\nbeing added, with refactoring operations on the horizon.\n\nMore details of 4.0 functionality are described in the release notes.", "start_char_idx": 2, "end_char_idx": 609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab813aaa-e919-40b9-b052-60132289f019": {"__data__": {"id_": "ab813aaa-e919-40b9-b052-60132289f019", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4255ed3a-3b91-4ac5-aab1-9705729f0522", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1f6c9b13b74f45b9c244eed9e26f80fba306d8a96d91def99778bfdd6d63c989", "class_name": "RelatedNodeInfo"}}, "text": "1.2. Dafny Example {sec-example}\nTo give a flavor of Dafny, here is the solution to a competition problem.\n\n\n```dafny\n// VSComp 2010, problem 3, find a 0 in a linked list and return\n// how many nodes were skipped until the first 0 (or end-of-list)\n// was found.\n\nmodule {:options \"--function-syntax:4\"} M {\nclass Node {\n  ghost var List: seq\n  ghost var Repr: set\n  var head: int\n  var next: Node? // Node? means a Node value or null\n\n  ghost predicate Valid()\n    reads this, Repr\n  {\n    this in Repr &&\n    1 <= |List| && List[0] == head &&\n    (next == null ==> |List| == 1) &&\n    (next != null ==>\n      next in Repr && next.Repr <= Repr && this !in next.Repr &&\n      next.Valid() && next.List == List[1..])\n  }\n\n  static method Cons(x: int, tail: Node?) returns (n: Node)\n    requires tail == null || tail.Valid()\n    ensures n.Valid()\n    ensures if tail == null then n.List == [x]\n                            else n.List == [x] + tail.List\n  {\n    n := new Node;\n    n.head, n.next := x, tail;\n    if (tail == null) {\n      n.List := [x];\n      n.Repr := {n};\n    } else {\n      n.List := [x] + tail.List;\n      n.Repr := {n} + tail.Repr;\n    }\n  }\n\n  method Search(ll: Node?) returns (r: int)\n    requires ll == null || ll.Valid()\n    ensures ll == null ==> r == 0\n    ensures ll != null ==>\n              0 <= r && r <= |ll.List| &&\n              (r \n                ll.List[r] == 0 && 0 !in ll.List[..r]) &&\n              (r == |ll.List| ==> 0 !in ll.List)\n  {\n    if (ll == null) {\n      r := 0;\n    } else {\n      var jj,i := ll,0;\n      while (jj != null && jj.head != 0)\n        invariant jj != null ==>\n              jj.Valid() &&\n              i + |jj.List| == |ll.List| &&\n              ll.List[i..] == jj.List\n        invariant jj == null ==> i == |ll.List|\n        invariant 0 !in ll.List[..i]\n        decreases |ll.List| - i\n      {\n        jj := jj.next;\n        i := i + 1;\n      }\n      r := i;\n    }\n  }\n\n  method Main()\n  {\n    var list: Node? := null;\n    list := list.Cons(0, list);\n    list := list.Cons(5, list);\n    list := list.Cons(0, list);\n    list := list.Cons(8, list);\n    var r := Search(list);\n    print \"Search returns \", r, \"\\n\";\n    assert r == 1;\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 2204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5ab81e0-8371-4678-afaa-cfb57f359cf5": {"__data__": {"id_": "b5ab81e0-8371-4678-afaa-cfb57f359cf5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_Specification_description.md", "file_name": "Iterator_Specification_description.md", "file_type": "text/markdown", "file_size": 1347, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b3ee4ad-a177-4595-89d9-75996220854c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_Specification_description.md", "file_name": "Iterator_Specification_description.md", "file_type": "text/markdown", "file_size": 1347, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3cc3525a2f69539854a18c4e7c34e1b9f8ac0ff1dce7f6a8432bd5524fe360a5", "class_name": "RelatedNodeInfo"}}, "text": "7.5. Iterator Specification (grammar) {sec-iterator-specification}\n\nAn iterator specification may contains `reads`, `modifies`, \n`decreases`, `requires`, `yield requires, `ensures`\nand `yield ensures` clauses.\n\nAn iterator specification applies both to the iterator's constructor\nmethod and to its `MoveNext` method.\n- The `reads` and `modifies`\nclauses apply to both of them (but `reads` clauses have a different meaning on iterators than on functions or methods).\n- The `requires` and `ensures` clauses apply to the constructor.\n- The `yield requires` and `yield ensures` clauses apply to the `MoveNext` method.\n\nExamples of iterators, including iterator specifications, are given in\nSection 5.11. Briefly\n- a requires clause gives a precondition for creating an iterator\n- an ensures clause gives a postcondition when the iterator exits (after all iterations are complete)\n- a decreases clause is used to show that the iterator will eventually terminate\n- a yield requires clause is a precondition for calling `MoveNext`\n- a yield ensures clause is a postcondition for calling `MoveNext`\n- a reads clause gives a set of memory locations that will be unchanged after a `yield` statement\n- a modifies clause gives a set of memory locations the iterator may write to", "start_char_idx": 2, "end_char_idx": 1268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b8a5650-6482-4a97-8dbe-2cdb3f053542": {"__data__": {"id_": "8b8a5650-6482-4a97-8dbe-2cdb3f053542", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1f6f584-53b2-4380-bbd3-d5862a489ff7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c2c299c6d0958ffbab21bb570e6f2b823122a17a327c067f12279a3b9e61d4a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bf29f39-ffd8-4f3f-b4bf-89e0918bcf1a", "node_type": "1", "metadata": {}, "hash": "9f14ff2b1700090ad1cb266093083faa12dfee3b226a1f2a785a08f26b32c7dd", "class_name": "RelatedNodeInfo"}}, "text": "5.11. Iterator types (grammar) {sec-iterator-types}\n\nSee Section 7.5 for a description of iterator specifications.\n\nAn _iterator_ provides a programming abstraction for writing code that\niteratively returns elements.  These CLU-style iterators are\n_co-routines_ in the sense that they keep track of their own program\ncounter and control can be transferred into and out of the iterator\nbody.\n\nAn iterator is declared as follows:\n\n```dafny\niterator Iter(_in-params_) yields (_yield-params_)\n  _specification_\n{\n  _body_\n}\n```\nwhere `T` is a list of type parameters (as usual, if there are no type\nparameters, \"``\" is omitted). This declaration gives rise to a\nreference type with the same name, `Iter`. In the signature,\nin-parameters and yield-parameters are the iterator's analog of a\nmethod's in-parameters and out-parameters. The difference is that the\nout-parameters of a method are returned to a caller just once, whereas\nthe yield-parameters of an iterator are returned each time the iterator\nbody performs a `yield`. The body consists of statements, like in a\nmethod body, but with the availability also of `yield` statements.\n\nFrom the perspective of an iterator client, the `iterator` declaration\ncan be understood as generating a class `Iter` with various\nmembers, a simplified version of which is described next.\n\nThe `Iter` class contains an anonymous constructor whose parameters\nare the iterator's in-parameters:\n\n```dafny\npredicate Valid()\nconstructor (_in-params_)\n  modifies this\n  ensures Valid()\n```\nAn iterator is created using `new` and this anonymous constructor.\nFor example, an iterator willing to return ten consecutive integers\nfrom `start` can be declared as follows:\n\n```dafny\niterator Gen(start: int) yields (x: int)\n  yield ensures |xs| <= 10 && x == start + |xs| - 1\n{\n  var i := 0;\n  while i < 10 invariant |xs| == i {\n    x := start + i;\n    yield;\n    i := i + 1;\n  }\n}\n```\nAn instance of this iterator is created using\n\n```dafny\niter := new Gen(30);\n```\nIt is used like this:\n\n```dafny\nmethod Main() {\n  var i := new Gen(30);\n  while true\n    invariant i.Valid() && fresh(i._new)\n    decreases 10 - |i.xs|\n  {\n    var m := i.MoveNext();\n    if (!m) {break; }\n    print i.x;\n  }\n}\n```\n\nThe predicate `Valid()` says when the iterator is in a state where one\ncan attempt to compute more elements.  It is a postcondition of the\nconstructor and occurs in the specification of the `MoveNext` member:\n\n```dafny\nmethod MoveNext() returns (more: bool)\n  requires Valid()\n  modifies this\n  ensures more ==> Valid()\n```\nNote that the iterator remains valid as long as `MoveNext` returns\n`true`.  Once `MoveNext` returns `false`, the `MoveNext` method can no\nlonger be called.  Note, the client is under no obligation to keep\ncalling `MoveNext` until it returns `false`, and the body of the\niterator is allowed to keep returning elements forever.\n\nThe in-parameters of the iterator are stored in immutable fields of\nthe iterator class.  To illustrate in terms of the example above, the\niterator class `Gen` contains the following field:\n\n```dafny\nconst start: int\n```\nThe yield-parameters also result in members of the iterator class:\n\n```dafny\nvar x: int\n```\nThese fields are set by the `MoveNext` method.  If `MoveNext` returns\n`true`, the latest yield values are available in these fields and the\nclient can read them from there.\n\nTo aid in writing specifications, the iterator class also contains\nghost members that keep the history of values returned by\n`MoveNext`.  The names of these ghost fields follow the names of the\nyield-parameters with an \"`s`\" appended to the name (to suggest\nplural).  Name checking rules make sure these names do not give rise\nto ambiguities.  The iterator class for `Gen` above thus contains:\n\n```dafny\nghost var xs: seq\n```\nThese history fields are changed automatically by `MoveNext`, but are\nnot assignable by user code.\n\nFinally, the iterator class contains some special fields for use in\nspecifications.", "start_char_idx": 2, "end_char_idx": 3967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bf29f39-ffd8-4f3f-b4bf-89e0918bcf1a": {"__data__": {"id_": "8bf29f39-ffd8-4f3f-b4bf-89e0918bcf1a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1f6f584-53b2-4380-bbd3-d5862a489ff7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c2c299c6d0958ffbab21bb570e6f2b823122a17a327c067f12279a3b9e61d4a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b8a5650-6482-4a97-8dbe-2cdb3f053542", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "27938a72b24475b95e93a55ef2acc8427bee6c9eaef5a0810f018d905c1d7d46", "class_name": "RelatedNodeInfo"}}, "text": "If `MoveNext` returns\n`true`, the latest yield values are available in these fields and the\nclient can read them from there.\n\nTo aid in writing specifications, the iterator class also contains\nghost members that keep the history of values returned by\n`MoveNext`.  The names of these ghost fields follow the names of the\nyield-parameters with an \"`s`\" appended to the name (to suggest\nplural).  Name checking rules make sure these names do not give rise\nto ambiguities.  The iterator class for `Gen` above thus contains:\n\n```dafny\nghost var xs: seq\n```\nThese history fields are changed automatically by `MoveNext`, but are\nnot assignable by user code.\n\nFinally, the iterator class contains some special fields for use in\nspecifications.  In particular, the iterator specification is\nrecorded in the following immutable fields:\n\n```dafny\nghost var _reads: set\nghost var _modifies: set\nghost var _decreases0: T0\nghost var _decreases1: T1\n// ...\n```\nwhere there is a `_decreases(`_i_`): T(`_i_`)` field for each\ncomponent of the iterator's `decreases`\nclause.[^fn-iterator-field-names]\nIn addition, there is a field:\n\n```dafny\nghost var _new: set;\n```\nto which any objects allocated on behalf of the iterator body are\nadded.  The iterator body is allowed to remove elements from the\n`_new` set, but cannot by assignment to `_new` add any elements.\n\n[^fn-iterator-field-names]:  It would make sense to rename the special\n    fields `_reads` and `_modifies` to have the same names as the\n    corresponding keywords, `reads` and `modifies`, as is done for\n    function values.  Also, the various `_decreases\\(_i_\\)` fields can be\n    combined into one field named `decreases` whose type is a\n    _n_-tuple. These changes may be incorporated into a future version\n    of Dafny.\n\nNote, in the precondition of the iterator, which is to hold upon\nconstruction of the iterator, the in-parameters are indeed\nin-parameters, not fields of `this`.\n\n`reads` clauses on iterators have a different meaning than they do on functions and methods.\nIterators may read any memory they like, but because arbitrary code may be executed\nwhenever they `yield` control, they need to declare what memory locations must not be modified\nby other code in order to maintain correctness.\nThe contents of an iterator's `reads` clauses become part of the `reads` clause\nof the implicitly created `Valid()` predicate.\nThis means if client code modifies any of this state,\nit will not be able to establish the precondition for the iterator's `MoveNext()` method,\nand hence the iterator body will never resume if this state is modified.\n\nIt is regrettably tricky to use iterators. The language really\nought to have a `foreach` statement to make this easier.\nHere is an example showing a definition and use of an iterator.\n\n\n```dafny\niterator Iter(s: set) yields (x: T)\n  yield ensures x in s && x !in xs[..|xs|-1]\n  ensures s == set z | z in xs\n{\n  var r := s;\n  while (r != {})\n    invariant r !! set z | z in xs\n    invariant s == r + set z | z in xs\n  {\n    var y :| y in r;\n    assert y !in xs;\n    r, x := r - {y}, y;\n    assert y !in xs;\n    yield;\n    assert y == xs[|xs|-1]; // a lemma to help prove loop invariant\n  }\n}\n\nmethod UseIterToCopy(s: set) returns (t: set)\n  ensures s == t\n{\n  t := {};\n  var m := new Iter(s);\n  while (true)\n    invariant m.Valid() && fresh(m._new)\n    invariant t == set z | z in m.xs\n    decreases s - t\n  {\n    var more := m.MoveNext();\n    if (!more) { break; }\n    t := t + {m.x};\n  }\n}\n```\n\nThe design of iterators is under discussion and may change.", "start_char_idx": 3232, "end_char_idx": 6785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "918579a3-0469-47df-8414-2735b9018d56": {"__data__": {"id_": "918579a3-0469-47df-8414-2735b9018d56", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statement_description.md", "file_name": "Labeled_Statement_description.md", "file_type": "text/markdown", "file_size": 1555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00470ed4-2479-4160-9d4f-22d58921d2de", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statement_description.md", "file_name": "Labeled_Statement_description.md", "file_type": "text/markdown", "file_size": 1555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f88966ccb536a57ab598fdc66fa346d78cdb6f5f42be8edc85f35b2caf034e96", "class_name": "RelatedNodeInfo"}}, "text": "8.1. Labeled Statement (grammar) {sec-labeled-statement}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nmethod m(a: A) {\n  label x:\n  while true {\n     if (*) { break x; }\n  }\n  a.f := 0;\n  label y:\n  a.f := 1;\n  assert old@y(a.f) == 1;\n}\n```\n\nA labeled statement is just\n- the keyword `label`\n- followed by an identifier, which is the label,\n- followed by a colon\n- and a statement.\n\nThe label may be\nreferenced in a `break` or `continue` statement within the labeled statement\n(see Section 8.14). That is, the break or continue that\nmentions the label must be _enclosed_ in the labeled statement.\n\nThe label may also be used in an `old` expression (Section 9.22). In this case, the label\nmust have been encountered during the control flow en route to the `old`\nexpression. We say in this case that the (program point of the) label _dominates_\nthe (program point of the) use of the label.\nSimilarly, labels are used to indicate previous states in calls of two-state predicates,\nfresh expressions, unchanged expressions,\nand allocated expressions.\n\nA statement can be given several labels. It makes no difference which of these\nlabels is used to reference the statement---they are synonyms of each other.\nThe labels must be distinct from each other, and are not allowed to be the\nsame as any previous enclosing or dominating label.", "start_char_idx": 2, "end_char_idx": 1330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad2e41b9-bdc2-4441-a525-3a6b9a5fb9b1": {"__data__": {"id_": "ad2e41b9-bdc2-4441-a525-3a6b9a5fb9b1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_description.md", "file_name": "Labeled_Statements_description.md", "file_type": "text/markdown", "file_size": 1554, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f023f8d-9b08-401d-a130-e554a8688b08", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_description.md", "file_name": "Labeled_Statements_description.md", "file_type": "text/markdown", "file_size": 1554, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "87f17cf05d94ef6c1c319416e36db3820572ad28e7db29770be8e329c8369435", "class_name": "RelatedNodeInfo"}}, "text": "8.1. Labeled Statement (grammar) {sec-labeled-statement}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nmethod m(a: A) {\n  label x:\n  while true {\n     if (*) { break x; }\n  }\n  a.f := 0;\n  label y:\n  a.f := 1;\n  assert old@y(a.f) == 1;\n}\n```\n\nA labeled statement is just\n- the keyword `label`\n- followed by an identifier, which is the label,\n- followed by a colon\n- and a statement.\n\nThe label may be\nreferenced in a `break` or `continue` statement within the labeled statement\n(see Section 8.14). That is, the break or continue that\nmentions the label must be _enclosed_ in the labeled statement.\n\nThe label may also be used in an `old` expression (Section 9.22). In this case, the label\nmust have been encountered during the control flow en route to the `old`\nexpression. We say in this case that the (program point of the) label _dominates_\nthe (program point of the) use of the label.\nSimilarly, labels are used to indicate previous states in calls of two-state predicates,\nfresh expressions, unchanged expressions,\nand allocated expressions.\n\nA statement can be given several labels. It makes no difference which of these\nlabels is used to reference the statement---they are synonyms of each other.\nThe labels must be distinct from each other, and are not allowed to be the\nsame as any previous enclosing or dominating label.", "start_char_idx": 2, "end_char_idx": 1330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "870cb4f7-3b84-4863-9cd3-f5b8f1248729": {"__data__": {"id_": "870cb4f7-3b84-4863-9cd3-f5b8f1248729", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_grammar.md", "file_name": "Labeled_Statements_grammar.md", "file_type": "text/markdown", "file_size": 162, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab380515-b79a-4c67-ae3a-c32226596af4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_grammar.md", "file_name": "Labeled_Statements_grammar.md", "file_type": "text/markdown", "file_size": 162, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6726cac4392c34941b4f6e14e20dfaedfec99817ea54ff4b534860cabf8efd5e", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.1. Labeled statement {g-labeled-statement}\n\n(discussion)\n\n````grammar\nStmt = { \"label\" LabelName \":\" } NonLabeledStmt\n````", "start_char_idx": 2, "end_char_idx": 131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53966341-c8b0-4df0-8a3f-6f4ce75366d8": {"__data__": {"id_": "53966341-c8b0-4df0-8a3f-6f4ce75366d8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_Specification_description.md", "file_name": "Lambda_Specification_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb5af5b0-cc7d-43eb-a6b0-70462283ee2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_Specification_description.md", "file_name": "Lambda_Specification_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5c3fb8166e46eb3512f14550986630e395d6b80bc36c1816362696618ccef81e", "class_name": "RelatedNodeInfo"}}, "text": "7.4. Lambda Specification (grammar) {sec-lambda-specification}\n\nA lambda specification provides a specification for a lambda function expression;\nit consists of zero or more `reads` or `requires` clauses.\nAny `requires` clauses may not have labels or attributes.\nLambda specifications do not have `ensures` clauses because the body\nis never opaque.\nLambda specifications do not have `decreases`\nclauses because lambda expressions do not have names and thus cannot be recursive. A\nlambda specification does not have `modifies` clauses because lambdas\nare not allowed to modify any memory.", "start_char_idx": 2, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac2a0bbe-9512-4c49-88d1-f7d2b425c55c": {"__data__": {"id_": "ac2a0bbe-9512-4c49-88d1-f7d2b425c55c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_expressions_description.md", "file_name": "Lambda_expressions_description.md", "file_type": "text/markdown", "file_size": 2367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9af6c91b-85cf-4ac4-8652-c24daf2ae42b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_expressions_description.md", "file_name": "Lambda_expressions_description.md", "file_type": "text/markdown", "file_size": 2367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aa4f725ed58ecb9b4ae10c96bb01bfa899339e4c281480855421b50ef14c8646", "class_name": "RelatedNodeInfo"}}, "text": "9.13. Lambda expressions (grammar) {sec-lambda-expression}\n\nExamples:\n\n```dafny\nx => -x\n_ => true\n(x,y) => x*y\n(x:int, b:bool) => if b then x else -x\nx requires x > 0 => x-1\n```\n\nSee Section 7.4 for a description of specifications for lambda expressions.\n\nIn addition to named functions, Dafny supports expressions that define\nfunctions.  These are called _lambda (expression)s_ (some languages\nknow them as _anonymous functions_).  A lambda expression has the\nform:\n\n```dafny\n( _params_ ) _specification_ => _body_\n```\nwhere _params_ is a comma-delimited list of parameter\ndeclarations, each of which has the form `x` or `x: T`.  The type `T`\nof a parameter can be omitted when it can be inferred.  If the\nidentifier `x` is not needed, it can be replaced by `_`.  If\n_params_ consists of a single parameter `x` (or `_`) without an\nexplicit type, then the parentheses can be dropped; for example, the\nfunction that returns the successor of a given integer can be written\nas the following lambda expression:\n\n```dafny\nx => x + 1\n```\n\nThe _specification_ is a list of clauses `requires E` or\n`reads W`, where `E` is a boolean expression and `W` is a frame\nexpression.\n\n_body_ is an expression that defines the function's return\nvalue.  The body must be well-formed for all possible values of the\nparameters that satisfy the precondition (just like the bodies of\nnamed functions and methods).  In some cases, this means it is\nnecessary to write explicit `requires` and `reads` clauses.  For\nexample, the lambda expression\n\n```dafny\nx requires x != 0 => 100 / x\n```\nwould not be well-formed if the `requires` clause were omitted,\nbecause of the possibility of division-by-zero.\n\nIn settings where functions cannot be partial and there are no\nrestrictions on reading the heap, the _eta expansion_ of a function\n`F: T -> U` (that is, the wrapping of `F` inside a lambda expression\nin such a way that the lambda expression is equivalent to `F`) would\nbe written `x => F(x)`.  In Dafny, eta expansion must also account for\nthe precondition and reads set of the function, so the eta expansion\nof `F` looks like:\n\n```dafny\nx requires F.requires(x) reads F.reads(x) => F(x)\n```", "start_char_idx": 2, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d745394-6de2-47cf-9f9f-a380b3aa3051": {"__data__": {"id_": "4d745394-6de2-47cf-9f9f-a380b3aa3051", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Left-Hand-Side_Expressions_description.md", "file_name": "Left-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 524, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2a35e2b-91e6-4eb1-bfa5-d0eef76cc258", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Left-Hand-Side_Expressions_description.md", "file_name": "Left-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 524, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4ca55d11c78aba7a65a058c915a98ab9cd8422aa25e1bd1cde37c0419b4544a5", "class_name": "RelatedNodeInfo"}}, "text": "9.14. Left-Hand-Side Expressions (grammar) {sec-lhs-expression}\n\nExamples:\n\n```dafny\nx\na[k]\nLibraryModule.F().x\nold(o.f).x\n```\n\nA left-hand-side expression is only used on the left hand\nside of an Update statement\nor an Update with Failure Statement.\n\nAn LHS can be\n\n- a simple identifier: `k`\n- an expression with a dot suffix: `this.x`, `f(k).y`\n- an expression with an array selection: `a[k]`, `f(a8)[6]`", "start_char_idx": 2, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09284143-a612-4f0a-92f5-3ad0dd4da99f": {"__data__": {"id_": "09284143-a612-4f0a-92f5-3ad0dd4da99f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lemma-call_expressions_description.md", "file_name": "Lemma-call_expressions_description.md", "file_type": "text/markdown", "file_size": 1780, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "265e29f4-aef0-4066-88e2-2a0ff3c6cc1e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lemma-call_expressions_description.md", "file_name": "Lemma-call_expressions_description.md", "file_type": "text/markdown", "file_size": 1780, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f6a8df8c80b47a55da16769c2d18312dc4b7a47cf79da9972d7cca99a515f57b", "class_name": "RelatedNodeInfo"}}, "text": "9.1. Lemma-call expressions (grammar) {sec-top-level-expression}\n\nExamples:\n\n```dafny\nvar a := L(a,b); a*b\n```\n\nThis expression has the form `S; E`.\nThe type of the expression is the type of `E`.\n`S` must be a lemma call (though the grammar appears more lenient).\nThe lemma introduces a fact necessary to establish properties of `E`.\n\nSometimes an expression will fail unless some relevant fact is known.\nIn the following example the `F_Fails` function fails to verify\nbecause the `Fact(n)` divisor may be zero. But preceding\nthe expression by a lemma that ensures that the denominator\nis not zero allows function `F_Succeeds` to succeed.\n\n```dafny\nfunction Fact(n: nat): nat\n{\n  if n == 0 then 1 else n * Fact(n-1)\n}\n\nlemma L(n: nat)\n  ensures 1 <= Fact(n)\n{\n}\n\nfunction F_Fails(n: nat): int\n{\n  50 / Fact(n)  // error: possible division by zero\n}\n\nfunction F_Succeeds(n: nat): int\n{\n  L(n); // note, this is a lemma call in an expression\n  50 / Fact(n)\n}\n```\n\nOne restriction is that a lemma call in this form is permitted only in situations in which the expression itself is not terminated by a semicolon.\n\nA second restriction is that `E` is not always permitted to contain lambda expressions, such \nas in the expressions that are the body of a lambda expression itself, function, method and iterator specifications,\nand if and while statements with guarded alternatives.\n\nA third restriction is that `E` is not always permitted to contain a bit-wise or (`|`) operator, \nbecause it would be ambiguous with the vertical bar used in comprehension expressions.\n\nNote that the effect of the lemma call only extends to the succeeding expression `E` (which may be another `;` expression).", "start_char_idx": 2, "end_char_idx": 1688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c19e0d3e-1765-41aa-a33c-2ff75e22aa12": {"__data__": {"id_": "c19e0d3e-1765-41aa-a33c-2ff75e22aa12", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Logical_Expressions_description.md", "file_name": "Logical_Expressions_description.md", "file_type": "text/markdown", "file_size": 948, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27457845-9148-4aa6-8a7d-de2a914a6907", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Logical_Expressions_description.md", "file_name": "Logical_Expressions_description.md", "file_type": "text/markdown", "file_size": 948, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3cc754ec984526c24a68e92ba965c669f901a5e929602fa85d3732d290b1d81d", "class_name": "RelatedNodeInfo"}}, "text": "9.4. Logical Expressions (grammar) {sec-logical-expression}\n\nExamples:\n\n```dafny\nA && B\nA || B\n&& A && B && C\n```\n\nNote that the Dafny grammar allows a conjunction or disjunction to be\n_prefixed_ with `&&` or `||` respectively. This form simply allows a\nparallel structure to be written:\n\n```dafny\nmethod m(x: object?, y:object?, z: object?) {\n  var b: bool :=\n    && x != null\n    && y != null\n    && z != null\n    ;\n}\n```\nThis is purely a syntactic convenience allowing easy edits such as reordering\nlines or commenting out lines without having to check that the infix\noperators are always where they should be.\n\nNote also that `&&` and `||` cannot be mixed without using parentheses:\n`A && B || C` is not permitted. Write `(A && B) || C` or `A && (B || C)` instead.\n\nSee Section 5.2.1.2 for an explanation\nof the `&&` and `||` operators.", "start_char_idx": 2, "end_char_idx": 842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbdf73b1-2850-4ab4-a30d-989d56403d79": {"__data__": {"id_": "cbdf73b1-2850-4ab4-a30d-989d56403d79", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Loop_Specification_description.md", "file_name": "Loop_Specification_description.md", "file_type": "text/markdown", "file_size": 434, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39ca3303-e72c-4b91-a55a-54f671f29355", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Loop_Specification_description.md", "file_name": "Loop_Specification_description.md", "file_type": "text/markdown", "file_size": 434, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9228a25a8033e3fc3fbc7a029d74648d98e7b3983dfd4e3a90fb43601434dedb", "class_name": "RelatedNodeInfo"}}, "text": "7.6. Loop Specification (grammar) {sec-loop-specification}\n\nA loop specification provides the information Dafny needs to\nprove properties of a loop. It contains `invariant`,\n`decreases`, and `modifies` clauses.\n\nThe `invariant` clause\nis effectively a precondition and it along with the\nnegation of the loop test condition provides the postcondition.\nThe `decreases` clause is used to prove termination.", "start_char_idx": 2, "end_char_idx": 405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73b0f832-6958-4424-b53b-ef516139c453": {"__data__": {"id_": "73b0f832-6958-4424-b53b-ef516139c453", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Map_Display_Expression_description.md", "file_name": "Map_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 491, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ffb8d1d3-c0f1-4d3a-b4e0-5a3a0551d8a1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Map_Display_Expression_description.md", "file_name": "Map_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 491, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e2cfcf9e7bdc96ba8aa654c4e4ebcb082391385071c48f37e633f71fb4d932e2", "class_name": "RelatedNodeInfo"}}, "text": "9.30. Map Display Expression (grammar) {sec-map-display-expression}\n\nExamples:\n\n```dafny\nmap[]\nmap[1 := \"a\", 2 := \"b\"]\nimap[1 := \"a\", 2 := \"b\"]\n```\n\nA map display expression builds a finite or potentially infinite\nmap from explicit mappings. For example:\n\n\n```dafny\nconst m := map[1 := \"a\", 2 := \"b\"]\nghost const im := imap[1 := \"a\", 2 := \"b\"]\n```\n\nSee Section 5.5.4 for more details on maps and imaps.", "start_char_idx": 2, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "749f4fc5-dbc7-479d-b95c-e07e12b09fd9": {"__data__": {"id_": "749f4fc5-dbc7-479d-b95c-e07e12b09fd9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Match_Statement_description.md", "file_name": "Match_Statement_description.md", "file_type": "text/markdown", "file_size": 1981, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b65bc8e-cfa0-45e1-96f8-c3af22a9e663", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Match_Statement_description.md", "file_name": "Match_Statement_description.md", "file_type": "text/markdown", "file_size": 1981, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e4f86d5eceec5534e1179a2f0c1c54f4f304e35bf8c8ecd4857cf262b32c4241", "class_name": "RelatedNodeInfo"}}, "text": "8.11. Match Statement (grammar) {sec-match-statement}\n\nExamples:\n\n```dafny\n\nmatch list {\n  case Nil => {}\n  case Cons(head,tail) => print head;\n}\nmatch x\ncase 1 =>\n  print x;\ncase 2 =>\n  var y := x*x;\n  print y;\ncase _ =>\n  print \"Other\";\n  // Any statement after is captured in this case.\n```\n\nThe `match` statement is used to do case analysis on a value of an expression.\nThe expression may be a value of a basic type (e.g. `int`), a newtype, or\nan inductive or coinductive datatype (which includes the built-in tuple types). \nThe expression after the `match` keyword is called the _selector_. \nThe selector is evaluated and then matched against\neach clause in order until a matching clause is found.\n\nThe process of matching the selector expression against the case patterns is\nthe same as for match expressions and is described in\nSection 9.31.2.\n\nThe selector need not be enclosed in parentheses; the sequence of cases may but need not be enclosed in braces.\nThe cases need not be disjoint.\nThe cases must be exhaustive, but you can use a wild variable (`_`) or a simple identifier to indicate \"match anything\".\nPlease refer to the section about case patterns to learn more about shadowing, constants, etc.\n\nThe code below shows an example of a match statement.\n\n\n```dafny\ndatatype Tree = Empty | Node(left: Tree, data: int, right: Tree)\n\n// Return the sum of the data in a tree.\nmethod Sum(x: Tree) returns (r: int)\n{\n  match x {\n    case Empty => r := 0;\n    case Node(t1, d, t2) =>\n      var v1 := Sum(t1);\n      var v2 := Sum(t2);\n      r := v1 + d + v2;\n  }\n}\n```\n\nNote that the `Sum` method is recursive yet has no `decreases` annotation.\nIn this case it is not needed because Dafny is able to deduce that\n`t1` and `t2` are _smaller_ (structurally) than `x`. If `Tree` had been\ncoinductive this would not have been possible since `x` might have been\ninfinite.", "start_char_idx": 2, "end_char_idx": 1872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f51f9fbf-ba21-4182-84e7-2d9637b120e8": {"__data__": {"id_": "f51f9fbf-ba21-4182-84e7-2d9637b120e8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Declarations_description.md", "file_name": "Method_Declarations_description.md", "file_type": "text/markdown", "file_size": 3279, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95567794-3c83-4bf8-a3d6-446e145df9f2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Declarations_description.md", "file_name": "Method_Declarations_description.md", "file_type": "text/markdown", "file_size": 3279, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8144838f8e2de53e6ed70470aeb913340bd0e410795a7bff24506548462bc130", "class_name": "RelatedNodeInfo"}}, "text": "6.3. Method Declarations (grammar) {sec-method-declaration}\n\nExamples:\n\n```dafny\nmethod m(i: int) requires i > 0 {}\nmethod p() returns (r: int) { r := 0; }\nmethod q() returns (r: int, s: int, t: nat) ensures r < s < t { r := 0; s := 1; t := 2; }\nghost method g() {}\nclass A {\n  method f() {}\n  constructor Init() {}\n  static method g(t: T) {}\n}\nlemma L(p: bool) ensures p || !p {}\ntwostate lemma TL(p: bool) ensures p || !p {}\nleast lemma LLnat ensures p || !p {}\ngreatest lemma GL(p: bool) ensures p || !p {}\nabstract module M { method m(i: int) }\nmodule N refines M { method m ... {} }\n```\n\nMethod declarations include a variety of related types of methods:\n- method\n- constructor\n- lemma\n- twostate lemma\n- least lemma\n- greatest lemma\n\nA method signature specifies the method generic parameters,\ninput parameters and return parameters.\nThe formal parameters are not allowed to have `ghost` specified\nif `ghost` was already specified for the method.\nWithin the body of a method, formal (input) parameters are immutable, that is, \nthey may not be assigned to, though their array elements or fields may be\nassigned, if otherwise permitted.\nThe out-parameters are mutable and must be assigned in the body of the method.\n\nAn ``ellipsis`` is used when a method or function is being redeclared\nin a module that refines another module. (cf. Section 10)\nIn that case the signature is\ncopied from the module that is being refined. This works because\nDafny does not support method or function overloading, so the\nname of the class method uniquely identifies it without the\nsignature.\n\nSee Section 7.2 for a description of the method specification.\n\nHere is an example of a method declaration.\n\n\n```dafny\nmethod {:att1}{:att2} M(a: A, b: B, c: C)\n                                        returns (x: X, y: Y, z: Z)\n  requires Pre\n  modifies Frame\n  ensures Post\n  decreases Rank\n{\n  Body\n}\n```\n\nwhere `:att1` and `:att2` are attributes of the method,\n`T1` and `T2` are type parameters of the method (if generic),\n`a, b, c` are the method\u2019s in-parameters, `x, y, z` are the\nmethod\u2019s out-parameters, `Pre` is a boolean expression denoting the\nmethod\u2019s precondition, `Frame` denotes a set of objects whose fields may\nbe updated by the method, `Post` is a boolean expression denoting the\nmethod\u2019s postcondition, `Rank` is the method\u2019s variant function, and\n`Body` is a list of statements that implements the method. `Frame` can be a list\nof expressions, each of which is a set of objects or a single object, the\nlatter standing for the singleton set consisting of that one object. The\nmethod\u2019s frame is the union of these sets, plus the set of objects\nallocated by the method body. For example, if `c` and `d` are parameters\nof a class type `C`, then\n\n\n```dafny\nmodifies {c, d}\nmodifies {c} + {d}\nmodifies c, {d}\nmodifies c, d\n```\n\nall mean the same thing.\n\nIf the method is an _extreme lemma_ ( a `least` or `greatest` lemma), then the \nmethod signature may also state the type of the _k_ parameter as either `nat` or `ORDINAL`.\nThese are described\nin Section 12.5.3 and subsequent sections.", "start_char_idx": 2, "end_char_idx": 3081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62a5052d-5100-4b8b-9597-122aea426f75": {"__data__": {"id_": "62a5052d-5100-4b8b-9597-122aea426f75", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Specification_description.md", "file_name": "Method_Specification_description.md", "file_type": "text/markdown", "file_size": 732, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "520099b7-0346-4424-86b2-ba11eb655e2c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Specification_description.md", "file_name": "Method_Specification_description.md", "file_type": "text/markdown", "file_size": 732, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4ae3b765cbc00aa09f7c1fe9abafe2289d9747973b6b9bef6e588fd5ffb0b5d8", "class_name": "RelatedNodeInfo"}}, "text": "7.2. Method Specification (grammar) {sec-method-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  method M(i: int) returns (r: int)\n    requires i >= 0\n    modifies next\n    decreases i\n    ensures r >= 0\n  { \n    ... \n  }\n}\n```\n\nA method specification consists of zero or more `reads`, `modifies`, `requires`,\n`ensures` or `decreases` clauses, in any order.\nA method does not need `reads` clauses in most cases,\nbecause methods are allowed to read any memory by default,\nbut `reads` clauses are supported for use cases such as verifying safe concurrent execution.\nSee the `{:concurrent}` attribute for more details.", "start_char_idx": 2, "end_char_idx": 649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa7d2579-8d62-4e36-b202-0a4cc6c33327": {"__data__": {"id_": "fa7d2579-8d62-4e36-b202-0a4cc6c33327", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modify_Statement_description.md", "file_name": "Modify_Statement_description.md", "file_type": "text/markdown", "file_size": 1241, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0d1be23-e675-4e4e-a35c-cbd38539a1a8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modify_Statement_description.md", "file_name": "Modify_Statement_description.md", "file_type": "text/markdown", "file_size": 1241, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8791cb4ac50a5435a0656fde2ef172f777afcbbcecf29c81c078da16a7355bb2", "class_name": "RelatedNodeInfo"}}, "text": "8.22. Modify Statement (grammar) {sec-modify-statement}\n\nThe effect of the `modify` statement\nis to say that some undetermined\nmodifications have been made to any or all of the memory\nlocations specified by the given frame expressions.\nIn the following example, a value is assigned to field `x`\nfollowed by a `modify` statement that may modify any field\nin the object. After that we can no longer prove that the field\n`x` still has the value we assigned to it. The now unknown values\nstill are values of their type (e.g. of the subset type or newtype).\n\n\n```dafny\nclass MyClass {\n  var x: int\n  method N()\n    modifies this\n  {\n    x := 18;\n    modify this;\n    assert x == 18;  // error: cannot conclude this here\n  }\n}\n```\n\nUsing `...` as the argument of the statement is deprecated.\n\nThe form of the `modify` statement which includes a block\nstatement is also deprecated.\n\nThe havoc assignment also sets a variable or field\nto some arbitrary (but type-consistent) value. The difference is that\nthe havoc assignment acts on one LHS variable or memory location;\nthe modify statement acts on all the fields of an object.", "start_char_idx": 2, "end_char_idx": 1122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5b9ddde-7fd8-4bd9-aa98-529dc093fe56": {"__data__": {"id_": "f5b9ddde-7fd8-4bd9-aa98-529dc093fe56", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f267882-73da-447c-9cf9-f24d3b6ac410", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d0b14977a7d057a6a3e1762076a11289a7873d36752ee01908d67e45e87348d7", "class_name": "RelatedNodeInfo"}}, "text": "4. Modules (grammar) {sec-modules}\n\nExamples:\n\n```dafny\nmodule N  { }\nimport A\nexport A reveals f\n```\n\nStructuring a program by breaking it into parts is an important part of\ncreating large programs. In Dafny, this is accomplished via _modules_.\nModules provide a way to group together related types, classes, methods,\nfunctions, and other modules, as well as to control the scope of\ndeclarations. Modules may import each other for code reuse, and it is\npossible to abstract over modules to separate an implementation from an\ninterface.\n\nModule declarations are of three types:\n- a module definition\n- a module import\n- a module export definition\n\nModule definitions and imports each declare a submodule\nof its enclosing module, which may be the\nimplicit, undeclared, top-level module.", "start_char_idx": 2, "end_char_idx": 787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e52657a-bfd4-4dd3-963b-9e7bb174a3a1": {"__data__": {"id_": "2e52657a-bfd4-4dd3-963b-9e7bb174a3a1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e8f6cb5-da8b-4d0a-a77d-5edc6633f14d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "138990737d6da850c57db9dac26e446cc84c6c347e5a0242e1b8245080e82514", "class_name": "RelatedNodeInfo"}}, "text": "4.1. Declaring New Modules (grammar) {sec-module-definition}\n\nExamples:\n\n```dafny\nmodule P { const i: int }\nabstract module A.Q { method m() {} }\nmodule M { module N { } }\n```\n\nA _module definition_\n- has an optional modifier (only `abstract` is allowed)\n- followed by the keyword \"module\"\n- followed by a name (a sequence of dot-separated identifiers)\n- followed by a body enclosed in curly braces\n\nA module body consists of any declarations that are allowed at the top\nlevel: classes, datatypes, types, methods, functions, etc.\n\n\n```dafny\nmodule Mod {\n  class C {\n    var f: int\n    method m()\n  }\n  datatype Option = A(int) | B(int)\n  type T\n  method m()\n  function f(): int\n}\n```\n\nYou can also put a module inside another, in a nested fashion:\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    class C {\n      method doIt()\n      var f: int\n    }\n  }\n}\n```\n\nThen you can refer to the members of the `Helpers` module within the\n`Mod` module by prefixing them with \"Helpers.\". For example:\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    class C {\n      constructor () { f := 0; }\n      method doIt()\n      var f: int\n    }\n  }\n  method m() {\n    var x := new Helpers.C();\n    x.doIt();\n    x.f := 4;\n  }\n}\n```\n\nMethods and functions defined at the module level are available like\nclasses, with just the module name prefixing them. They are also\navailable in the methods and functions of the classes in the same\nmodule.\n\n\n```dafny\nmodule Mod {\n  module Helpers {\n    function addOne(n: nat): nat {\n      n + 1\n    }\n  }\n  method m() {\n    var x := 5;\n    x := Helpers.addOne(x); // x is now 6\n  }\n}\n```\n\nNote that everything declared at the top-level\n(in all the files constituting the program) is implicitly part\nof a single implicit unnamed global module.", "start_char_idx": 2, "end_char_idx": 1757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a32c13e3-86e2-4b93-8c2b-c20b9adaec29": {"__data__": {"id_": "a32c13e3-86e2-4b93-8c2b-c20b9adaec29", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e1e2bea-e3ea-4496-aeb2-937508829047", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0a092bf58abccf5098cdc622c971ea112fb572f5e67db86bbaddf895edb20f16", "class_name": "RelatedNodeInfo"}}, "text": "4.2. Declaring nested modules standalone\n\nAs described in the previous section, module declarations can be nested.\nIt is also permitted to declare a nested module _outside_ of its\n\"containing\" module. So instead of\n\n```dafny\nmodule A {\n  module B {\n  }\n}\n```\none can write\n\n```dafny\nmodule A {\n}\nmodule A.B {\n}\n```\nThe second module is completely separate; for example, it can be in\na different file.\nThis feature provides flexibility in writing and maintenance;\nfor example, it can reduce the size of module `A` by extracting module `A.B`\ninto a separate body of text.\n\nHowever, it can also lead to confusion, and program authors need to take care.\nIt may not be apparent to a reader of module `A` that module `A.B` exists;\nthe existence of `A.B` might cause names to be resolved differently and\nthe semantics of the program might be (silently) different if `A.B` is\npresent or absent.", "start_char_idx": 2, "end_char_idx": 888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e82238ff-a049-4c9c-9548-bd2465d5bd40": {"__data__": {"id_": "e82238ff-a049-4c9c-9548-bd2465d5bd40", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50a80175-4afa-4583-929d-ef1f8943558f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5a7910d736e270cb5ca634079b93c02c86fee3be67be27fd81a59f9473984feb", "class_name": "RelatedNodeInfo"}}, "text": "4.3. Importing Modules (grammar) {sec-importing-modules}\n\nExamples:\n\n```dafny\nimport A\nimport opened B\nimport A = B\nimport A : B\nimport A.B\nimport A`E\nimport X = A.B`{E,F}\n```\n\nSometimes you want to refer to\nthings from an existing module, such as a library. In this case, you\ncan _import_ one module into another. This is done via the `import`\nkeyword, which has two forms with different meanings.\nThe simplest form is the concrete import, which has\nthe form `import A = B`. This declaration creates a reference to the\nmodule `B` (which must already exist), and binds it to the new local name\n`A`. This form can also be used to create a reference to a nested\nmodule, as in `import A = B.C`. The other form, using a `:`, is\ndescribed in Section 4.6.\n\nAs modules in the same scope must have different names, this ability\nto bind a module to a new name allows disambiguating separately developed\nexternal modules that have the same name.\nNote that the new name is only bound in the scope containing\nthe import declaration; it does not create a global alias. For\nexample, if `Helpers` was defined outside of `Mod`, then we could import\nit:\n\n\n```dafny\nmodule Helpers {\n  function addOne(n: nat): nat {\n    n + 1\n  }\n}\nmodule Mod {\n  import A = Helpers\n  method m() {\n    assert A.addOne(5) == 6;\n  }\n}\n```\n\nNote that inside `m()`, we have to use `A` instead of `Helpers`, as we bound\nit to a different name. The name `Helpers` is not available inside `m()` (or anywhere else inside `Mod`),\nas only names that have been bound inside `Mod` are available. In order\nto use the members from another module, that other module either has to be declared\nthere with `module` or imported with `import`. (As described below, the\nresolution of the `ModuleQualifiedName` that follows the `=` in the `import`\nstatement or the `refines` in a module declaration uses slightly\ndifferent rules.)\n\nWe don't have to give `Helpers` a new name, though, if we don't want\nto. We can write `import Helpers = Helpers` to import the module under\nits own name; Dafny\neven provides the shorthand `import Helpers` for this behavior. You\ncan't bind two modules with the same name at the same time, so\nsometimes you have to use the = version to ensure the names do not\nclash. When importing nested modules, `import B.C` means `import C = B.C`;\nthe implicit name is always the last name segment of the module designation.\n\nThe first identifier in the dot-separated sequence of identifers that constitute\nthe qualified name of the module being imported is resolved as (in order)\n- a submodule of the importing module, \n- or a sibling module of the importing module, \n- or a sibling module of some containing module, traversing outward. \nThere is no way to refer to a containing module, only\nsibling modules (and their submodules).\n\nImport statements may occur at the top-level of a program\n(that is, in the implicit top-level module of the program) as well.\nThere they serve as a way to give a new name, perhaps a\nshorthand name, to a module. For example,\n\n\n```dafny\nmodule MyModule { } // declare MyModule\nimport MyModule  // error: cannot add a module named MyModule\n                 // because there already is one\nimport M = MyModule // OK. M and MyModule are equivalent\n```", "start_char_idx": 2, "end_char_idx": 3242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8655350-170b-4ec7-b053-2e3df65d869d": {"__data__": {"id_": "e8655350-170b-4ec7-b053-2e3df65d869d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a747bf18-c521-48b2-94d8-c2cc5480fbd1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9b7978249a6b08ff4ed7b6f127c4ed52f752ae0d69b3b788ba84d8f2c88de594", "class_name": "RelatedNodeInfo"}}, "text": "4.4. Opening Modules {sec-opening-modules}\n\nSometimes, prefixing the members of the module you imported with its\nname is tedious and ugly, even if you select a short name when\nimporting it. In this case, you can import the module as `opened`,\nwhich causes all of its members to be available without adding the\nmodule name. The `opened` keyword, if present, must immediately follow `import`.\nFor example, we could write the previous example as:\n\n\n```dafny\nmodule Helpers {\n  function addOne(n: nat): nat {\n    n + 1\n  }\n}\nmodule Mod {\n  import opened Helpers\n  method m() {\n    assert addOne(5) == 6;\n  }\n}\n```\n\nWhen opening modules, the newly bound members have lower priority\nthan local definitions. This means if you define\na local function called `addOne`, the function from `Helpers` will no\nlonger be available under that name. When modules are opened, the\noriginal name binding is still present however, so you can always use\nthe name that was bound to get to anything that is hidden.\n\n\n```dafny\nmodule Helpers {\n  function addOne(n: nat): nat {\n    n + 1\n  }\n}\nmodule Mod {\n  import opened H = Helpers\n  function addOne(n: nat): nat {\n    n - 1\n  }\n  method m() {\n    assert addOne(5) == 6; // this is now false,\n                           // as this is the function just defined\n    assert H.addOne(5) == 6; // this is still true\n  }\n}\n```\n\nIf you open two modules that both declare members with the same name,\nthen neither member can be referred to without a module prefix, as it\nwould be ambiguous which one was meant. Just opening the two modules\nis not an error, however, as long as you don't attempt to use members\nwith common names. However, if the ambiguous references actually\nrefer to the same declaration, then they are permitted.\nThe `opened` keyword may be used with any kind of\n`import` declaration, including the module abstraction form.\n\nAn `import opened` may occur at the top-level as well. For example,\n\n```dafny\nmodule MyModule {  } // declares MyModule\nimport opened MyModule // does not declare a new module, but does\n                       // make all names in MyModule available in\n                       // the current scope, without needing\n                       // qualification\nimport opened M = MyModule // names in MyModule are available in\n                       // the current scope without qualification\n                       // or qualified with either M (because of this\n                       // import) or MyModule (because of the original\n                       // module definition)\n```\n\nThe Dafny style guidelines suggest using opened imports sparingly.\nThey are best used when the names being imported have obvious\nand unambiguous meanings and when using qualified names would be\nverbose enough to impede understanding.\n\nThere is a special case in which the behavior described above is altered.\nIf a module `M` declares a type `M` and `M` is `import opened` without renaming inside \nanother module `X`, then the rules above would have, within `X`,\n`M` mean the module and `M.M` mean the type. This is verbose. So in this \nsomewhat common case, the type `M` is effectively made a local declaration within `X`\nso that it has precedence over the module name. Now `M` refers to the type.\nIf one needs to refer to the module, it will have to be renamed as part of\nthe `import opened` statement.\t\n\nThis special-case behavior does give rise to a source of ambiguity. Consider\nthe example\n\n```dafny\nmodule Option {\n  const a := 1\n  datatype Option = A|B { static const a := 2 }\n}\n\nmodule X {\n  import opened Option\n  method M() { print Option.a; }\n}\n```\n`Option.a` now means the `a` in the datatype instead of the `a` in the module.\nTo avoid confusion in such cases, it is an ambiguity error if a name\nthat is declared in both the datatype and the module is used\nwhen there is an `import open` of\nthe module (without renaming).", "start_char_idx": 2, "end_char_idx": 3871, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "285c44a4-4c27-401f-b352-711645cb9898": {"__data__": {"id_": "285c44a4-4c27-401f-b352-711645cb9898", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36ed79b5-54ce-42cf-8041-e209a0fd0c14", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97e53d026f8d2ab0bd43acfbe552ca1184448fd4dad22cd11ab1221429effebe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d816dc0f-9004-4282-a265-b4b62e8183e6", "node_type": "1", "metadata": {}, "hash": "99699782bdd338d935239ef67d4772c272ba9152fb530b85bcc6b2b07b53b6d9", "class_name": "RelatedNodeInfo"}}, "text": "4.5. Export Sets and Access Control (grammar) {sec-export-sets}\n\nExamples:\n\n```dafny\nexport E extends F reveals f,g provides g,h\nexport E reveals *\nexport reveals f,g provides g,h\nexport E\nexport E ... reveals f\n```\n\nIn some programming languages, keywords such as `public`, `private`, and `protected`\nare used to control access to (that is, visibility of) declared program entities.\nIn Dafny, modules and export sets provide that capability.\nModules combine declarations into logically related groups.\nExport sets then permit selectively exposing subsets of a module's declarations;\nanother module can import the export set appropriate to its needs.\nA user can define as many export sets as are needed to provide different\nkinds of access to the module's declarations.\nEach export set designates a list of names, which must be\nnames that are declared in the module (or in a refinement parent).\n\nBy default (in the absence of any export set declarations)\nall the names declared in a module are available outside the\nmodule using the `import` mechanism.\nAn _export set_ enables a module to disallow the\nuse of some declarations outside the module.\n\nAn export set has an optional name used to disambiguate\nin case of multiple export sets;\nIf specified, such names are used in `import` statements\nto designate which export set of a module is being imported.\nIf a module `M` has export sets `E1` and `E2`,\nwe can write ``import A = M`E1`` to create a module alias\n`A` that contains only the names in `E1`.\nOr we can write ``import A = M`{E1,E2}`` to import the union\nof names in `E1` and `E2` as module alias `A`.\nAs before, ``import M`E1`` is an abbreviation of ``import M = M`E1``.\n\nIf no export set is given in an import\nstatement, the default export set of the module is used.\n\n There are various\ndefaults that apply differently in different cases.\nThe following description is with respect to an example module `M`:\n\n_`M` has no export sets declared_. Then another module may simply `import Z = M`\nto obtain access to all of M's declarations.\n\n_`M` has one or more named export sets (e.g., `E`, `F`)_. Then another module can\nwrite ``import Z = M`E`` or ``import Z = M`{E,F}`` to obtain access to the\nnames that are listed in export set `E` or to the union of those in export sets\n`E` and `F`, respectively. If no export set has the same name as the module,\nthen an export set designator must be used: in that case you cannot write\nsimply ``import Z = M``.\n\n_`M` has an unnamed export set, along with other export sets (e.g., named `E`)_. The unnamed\nexport set is the default export set and implicitly has the same name as\nthe module. Because there is a default export set, another module may write\neither ``import Z = M`` or ``import Z = M`M`` to import the names in that\ndefault export set. You can also still use the other export sets with the\nexplicit designator: ``import Z = M`E``\n\n_`M` declares an export set with the same name as the module_. This is equivalent\nto declaring an export set without a name. ``import M`` and ``import M`M``\nperform the same function in either case; the export set with or without\nthe name of the module is the default export set for the module.\n\nNote that names of module aliases (declared by import statements) are\njust like other names in a module; they can be included or omitted from\nexport sets.\nNames brought into a module by _refinement_ are treated the same as\nlocally declared names and can be listed in export set declarations.\nHowever, names brought into a module by `import opened` (either into a module\nor a refinement parent of a module) may\nnot be further exported.", "start_char_idx": 2, "end_char_idx": 3622, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d816dc0f-9004-4282-a265-b4b62e8183e6": {"__data__": {"id_": "d816dc0f-9004-4282-a265-b4b62e8183e6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36ed79b5-54ce-42cf-8041-e209a0fd0c14", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97e53d026f8d2ab0bd43acfbe552ca1184448fd4dad22cd11ab1221429effebe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "285c44a4-4c27-401f-b352-711645cb9898", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4d621ab72b4bacb1be6c87a054b27b2dda40f644b173c273bae154407e4773a0", "class_name": "RelatedNodeInfo"}}, "text": "You can also still use the other export sets with the\nexplicit designator: ``import Z = M`E``\n\n_`M` declares an export set with the same name as the module_. This is equivalent\nto declaring an export set without a name. ``import M`` and ``import M`M``\nperform the same function in either case; the export set with or without\nthe name of the module is the default export set for the module.\n\nNote that names of module aliases (declared by import statements) are\njust like other names in a module; they can be included or omitted from\nexport sets.\nNames brought into a module by _refinement_ are treated the same as\nlocally declared names and can be listed in export set declarations.\nHowever, names brought into a module by `import opened` (either into a module\nor a refinement parent of a module) may\nnot be further exported. For example,\n\n```dafny\nmodule A {\n  const a := 10\n  const z := 10\n}\nmodule B {\n  import opened Z = A // includes a, declares Z\n  const b := Z.a // OK\n}\nmodule C {\n  import opened B // includes b, Z, but not a\n  method m() {\n    //assert b == a; // error: a is not known\n    //assert b == B.a; // error: B.a is not valid\n    //assert b == A.a; // error: A is not known\n    assert b == Z.a; // OK: module Z is known and includes a\n  }\n}\n```\n\nHowever, in the above example,\n\n* if `A` has one export set `export Y reveals a`\nthen the import in module `B` is invalid because `A` has no default\nexport set;\n* if `A` has one export set `export Y reveals a` and `B` has ``import Z = A`Y``\nthen `B`'s import is OK. So is the use of `Z.a` in the assert because `B`\ndeclares `Z` and `C` brings in `Z` through the `import opened` and\n`Z` contains `a` by virtue of its declaration. (The alias `Z` is not able to\nhave export sets; all of its names are visible.)\n* if `A` has one export set `export provides z` then `A` does have a\ndefault export set, so the import in `B` is OK, but neither the use of `a`\nin `B` nor as `Z.a` in C would be valid, because `a` is not in `Z`.\n\nThe default export set is important in the resolution of qualified\nnames, as described in Section 4.8.\n\nThere are a few unusual cases to be noted:\n- an export set can be completely empty, as in `export Nothing`\n- an eponymous export set can be completely empty, as in `export`, which by default has the same name as the enclosing module; this is a way to make the module completely private\n- an export set declaration followed by an extreme predicate declaration looks like this:\n`export least predicate P() { true }`\nIn this case, the `least` (or `greatest`) is the identifier naming the export set.\nConsequently, `export least predicate Pnat { true }` is illegal because `[nat]` cannot be part of a non-extreme predicate.\nSo, it is not possible to declare an eponymous, empty export set by omitting the export id immediately prior to a declaration of an extreme predicate,\nbecause the `least` or `greatest` token is parsed as the export set identifier. The workaround for this situation is to \neither put the name of the module in explicitly as the export ID (not leaving it to the default) or reorder the declarations.\n- To avoid confusion, the code\n\n```dafny\nmodule M {\n  export\n  least predicate P() { true }\n}\n```\nprovokes a warning telling the user that the `least` goes with the `export`.", "start_char_idx": 2797, "end_char_idx": 6080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c49c319f-5e9d-4b89-9fa7-781ae28b8092": {"__data__": {"id_": "c49c319f-5e9d-4b89-9fa7-781ae28b8092", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4363a02-6bcc-409d-9b07-e5f049b36521", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c244ef0389b76e2940b335b0e31cf30de0f7b18c4caa9d4b863df634aa11b059", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "510685ff-9b69-4bfb-8882-8e2c95d735cc", "node_type": "1", "metadata": {}, "hash": "07c298417d4d605c5a342f45567c9239299142a85aeaadc469822ae7ce58369e", "class_name": "RelatedNodeInfo"}}, "text": "4.5.1. Provided and revealed names {sec-provided-and-revealed-names}\n\nNames can be exported from modules in two ways, designated by `provides`\nand `reveals` in the export set declaration.\n\nWhen a name is exported as _provided_, then inside a module that has\nimported the name only the name is known, not the details of the\nname's declaration.\n\nFor example, in the following code the constant `a` is exported as provided.\n\n```dafny\nmodule A {\n  export provides a\n  const a := 10\n  const b := 20\n}\n\nmodule B {\n  import A\n  method m() {\n    assert A.a == 10; // a is known, but not its value\n    // assert A.b == 20; // b is not known through A`A\n  }\n}\n```\nSince `a` is imported into module `B` through the default export set ``A`A``,\nit can be referenced in the assert statement. The constant `b` is not\nexported, so it is not available. But the assert about `a` is not provable\nbecause the value of `a` is not known in module `B`.\n\nIn contrast, if `a` is exported as _revealed_, as shown in the next example,\nits value is known and the assertion can be proved.\n\n```dafny\nmodule A {\n  export reveals a\n  const a := 10\n  const b := 20\n}\n\nmodule B {\n  import A\n  method m() {\n    assert A.a == 10; // a and its value are known\n    // assert A.b == 20; // b is not known through A`A\n  }\n}\n```\n\nThe following table shows which parts of a declaration are exported by an\nexport set that `provides` or `reveals` the declaration.", "start_char_idx": 2, "end_char_idx": 1421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "510685ff-9b69-4bfb-8882-8e2c95d735cc": {"__data__": {"id_": "510685ff-9b69-4bfb-8882-8e2c95d735cc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4363a02-6bcc-409d-9b07-e5f049b36521", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c244ef0389b76e2940b335b0e31cf30de0f7b18c4caa9d4b863df634aa11b059", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c49c319f-5e9d-4b89-9fa7-781ae28b8092", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f626dd0f44419d857a46f51e67bc48907f1578b83460d905d790ed0acc1a6046", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "143d74e3-e710-44e0-b363-b0847c9767e0", "node_type": "1", "metadata": {}, "hash": "d8f181dfa610dbaab3a030c1d1e304aeabdd3977c3256d5562dfe68cd6d82335", "class_name": "RelatedNodeInfo"}}, "text": "The constant `b` is not\nexported, so it is not available. But the assert about `a` is not provable\nbecause the value of `a` is not known in module `B`.\n\nIn contrast, if `a` is exported as _revealed_, as shown in the next example,\nits value is known and the assertion can be proved.\n\n```dafny\nmodule A {\n  export reveals a\n  const a := 10\n  const b := 20\n}\n\nmodule B {\n  import A\n  method m() {\n    assert A.a == 10; // a and its value are known\n    // assert A.b == 20; // b is not known through A`A\n  }\n}\n```\n\nThe following table shows which parts of a declaration are exported by an\nexport set that `provides` or `reveals` the declaration.\n\n```text\n declaration         | what is exported    | what is exported\n                     | with provides       | with reveals\n---------------------|---------------------|---------------------\n const x: X := E     | const x: X          | const x: X := E\n---------------------|---------------------|---------------------\n var x: X            | var x: X            | not allowed\n---------------------|---------------------|---------------------\n function F(x: X): Y | function F(x: X): Y | function F(x: X): Y\n   specification...  |   specification...  |   specification...\n {                   |                     | {\n   Body              |                     |   Body\n }                   |                     | }\n---------------------|---------------------|---------------------\n method M(x: X)      | method M(x: X)      | not allowed\n   returns (y: Y)    |   returns (y: Y)    |\n   specification...  |   specification...  |\n {                   |                     |\n   Body;             |                     |\n }                   |                     |\n---------------------|---------------------|---------------------\n type Opaque         | type Opaque         | type Opaque\n {                   |                     |\n   // members...     |                     |\n }                   |                     |\n---------------------|---------------------|---------------------\n type Synonym = T    | type Synonym        | type Synonym = T\n---------------------|---------------------|---------------------\n type S = x: X       | type S              | type S = x: X\n   | P witness E     |                     |   | P witness E\n---------------------|---------------------|---------------------\n newtype N = x: X    | type N              | newtype N = x: X\n   | P witness E     |                     |   | P witness E\n {                   |                     |\n   // members...     |                     |\n }                   |                     |\n```\n```text\n---------------------|---------------------|---------------------\n datatype D =        | type D              | datatype D =\n     Ctor0(x0: X0)   |                     |    Ctor0(x0: X0)\n   | Ctor1(x1: X1)   |                     |  | Ctor1(x1: X1)\n   | ...             |                     |  | ...\n {                   |                     |\n   // members...     |                     |\n }                   |                     |\n---------------------|---------------------|---------------------\n class Cl            | type Cl             | class Cl\n   extends T0, ...   |                     |   extends T0, ...\n {                   |                     | {\n   constructor ()    |                     |   constructor ()\n     spec...         |                     |     spec...\n   {                 |                     |\n     Body;           |                     |\n   }                 |                     |\n   // members...     |                     |\n }                   |                     | }\n---------------------|---------------------|---------------------\n trait Tr            | type Tr             | trait Tr\n   extends T0, ...   |                     |   extends T0, ...\n {                   |                     |\n   // members...     |                     |\n }                   |                     |\n---------------------|---------------------|---------------------\n iterator Iter(x: X) | type Iter           | iterator Iter(x: X)\n   yields (y: Y)     |                     |   yields (y: Y)\n   specification...  |                     |   specification...\n {                   |                     |\n   Body;             |                     |\n }                   |                     |\n---------------------|---------------------|---------------------\n module SubModule    | module SubModule    | not allowed\n   ...               |   ...               |\n {                   | {                   |\n   export SubModule  |   export SubModule  |\n     ...             |     ...             |\n   export A ...      |                     |\n   // decls...       |   // decls...       |\n }                   | }                   |\n---------------------|---------------------|---------------------\n import L = MS       | import L = MS       | not allowed\n---------------------|---------------------|---------------------\n```\n\nVariations of functions (e.g., `predicate`, `twostate function`) are\nhandled like `function` above, and variations of methods (e.g.,\n`lemma` and `twostate lemma`) are treated like `method` above.", "start_char_idx": 780, "end_char_idx": 5945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "143d74e3-e710-44e0-b363-b0847c9767e0": {"__data__": {"id_": "143d74e3-e710-44e0-b363-b0847c9767e0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4363a02-6bcc-409d-9b07-e5f049b36521", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c244ef0389b76e2940b335b0e31cf30de0f7b18c4caa9d4b863df634aa11b059", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "510685ff-9b69-4bfb-8882-8e2c95d735cc", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae3d50bf9fccecfdfc2f07925fdcfeb449b0a17703c62cafe2e1dffc4eb6b8b6", "class_name": "RelatedNodeInfo"}}, "text": "Since\nthe whole signature is exported, a function or method is exported to\nbe of the same kind, even through `provides`. For example, an exported\n`twostate lemma` is exported as a `twostate lemma` (and thus is known\nby importers to have two implicit heap parameters), and an exported\n`least predicate P` is exported as a `least predicate P` (and thus\nimporters can use both `P` and its prefix predicate `P#`).\n\nIf `C` is a `class`, `trait`, or `iterator`, then `provides C` exports\nthe non-null reference type `C` as an abstract type. This does not reveal\nthat `C` is a reference type, nor does it export the nullable type `C?`.\n\nIn most cases, exporting a `class`, `trait`, `datatype`, `codatatype`, or\nabstract type does not automatically export its members. Instead, any member\nto be exported must be listed explicitly. For example, consider the type\ndeclaration\n\n\n```dafny\ntrait Tr {\n  function F(x: int): int { 10 }\n  function G(x: int): int { 12 }\n  function H(x: int): int { 14 }\n}\n```\n\nAn export set that contains only `reveals Tr` has the effect of exporting\n\n\n```dafny\ntrait Tr {\n}\n```\n\nand an export set that contains only `provides Tr, Tr.F reveals Tr.H` has\nthe effect of exporting\n\n\n```dafny\ntype Tr {\n  function F(x: int): int\n  function H(x: int): int { 14 }\n}\n```\n\nThere is no syntax (for example, `Tr.*`) to export all members of a type.\n\nSome members are exported automatically when the type is revealed.\nSpecifically:\n- Revealing a `datatype` or `codatatype` automatically exports the type's\n  discriminators and destructors.\n- Revealing an `iterator` automatically exports the iterator's members.\n- Revealing a class automatically exports the class's anonymous constructor, if any.\n\nFor a `class`, a `constructor` member can be exported only if the class is revealed.\nFor a `class` or `trait`, a `var` member can be exported only if the class or trait is revealed\n(but a `const` member can be exported even if the enclosing class or trait is only provided).\n\nWhen exporting a sub-module, only the sub-module's eponymous export set is exported.\nThere is no way for a parent module to export any other export set of a sub-module, unless\nit is done via an `import` declaration of the parent module.\n\nThe effect of declaring an import as `opened` is confined to the importing module. That\nis, the ability of use such imported names as unqualified is not passed on to further\nimports, as the following example illustrates:\n\n\n```dafny\nmodule Library {\n  const xyz := 16\n}\n\nmodule M {\n  export\n    provides Lib\n    provides xyz // error: 'xyz' is not declared locally\n\n  import opened Lib = Library\n\n  const k0 := Lib.xyz\n  const k1 := xyz\n}\n\nmodule Client {\n  import opened M\n\n  const a0 := M.Lib.xyz\n  const a1 := Lib.xyz\n  const a2 := M.xyz // error: M does not have a declaration 'xyz'\n  const a3 := xyz // error: unresolved identifier 'xyz'\n}\n```\n\nAs highlighted in this example, module `M` can use `xyz` as if it were a local\nname (see declaration `k1`), but the unqualified name `xyz` is not made available\nto importers of `M` (see declarations `a2` and `a3`), nor is it possible for\n`M` to export the name `xyz`.\n\nA few other notes:\n\n* A `provides` list can mention `*`, which means that all local names\n  (except export set names) in the module are exported as `provides`.\n* A `reveals` list can mention `*`, which means that all local names\n  (except export set names) in the module are exported as `reveals`, if\n  the declaration is allowed to appear in a `reveals` clause, or as\n  `provides`, if the declaration is not allowed to appear in a `reveals`\n  clause.\n* If no export sets are declared, then the implicit\n  export set is `export reveals *`.\n* A refinement module acquires all the export sets from its refinement parent.\n* Names acquired by a module from its refinement parent are also subject to\n  export lists. (These are local names just like those declared directly.)", "start_char_idx": 5946, "end_char_idx": 9851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1ac0cee-f408-4ed6-93d6-4d8d3f121cc4": {"__data__": {"id_": "c1ac0cee-f408-4ed6-93d6-4d8d3f121cc4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa44f559-94f0-4e8d-89d6-08ac97cbcf5c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aa24cebac2ea3b7a8430ab2ead9502fdece816c0176ad15a736c9677535027d4", "class_name": "RelatedNodeInfo"}}, "text": "4.5.2. Extends list {sec-extends-list}\nAn export set declaration may include an _extends_ list, which is a list of\none or more export set names from the same module containing the declaration\n(including export set names obtained from a refinement parent).\nThe effect is to include in the declaration the union of all the names in\nthe export sets in the extends list, along with any other names explicitly\nincluded in the declaration. So for example in\n\n```dafny\nmodule M {\n  const a := 10\n  const b := 10\n  const c := 10\n  export A reveals a\n  export B reveals b\n  export C extends A, B\n    reveals c\n}\n```\nexport set `C` will contain the names `a`, `b`, and `c`.", "start_char_idx": 2, "end_char_idx": 665, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7b4adf5-50a1-4166-ad87-c63fd469fde9": {"__data__": {"id_": "f7b4adf5-50a1-4166-ad87-c63fd469fde9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6564a331-5e8e-4dc6-b25d-1a5f9b359ef4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4ee5d70009200f3525ac2c6d628f6396859614cf84c84b6742907041db86f9bb", "class_name": "RelatedNodeInfo"}}, "text": "4.6. Module Abstraction {sec-module-abstraction}\n\nSometimes, using a specific implementation is unnecessary; instead,\nall that is needed is a module that implements some interface.  In\nthat case, you can use an _abstract_ module import. In Dafny, this is\nwritten `import A : B`.  This means bind the name `A` as before, but\ninstead of getting the exact module `B`, you get any module which\n_adheres_ to `B`.  Typically, the module `B` may have abstract type\ndefinitions, classes with bodiless methods, or otherwise be unsuitable\nto use directly.  Because of the way refinement is defined, any\nrefinement of `B` can be used safely. For example, suppose we start with\nthese declarations:\n\n\n```dafny\nabstract module Interface {\n  function addSome(n: nat): nat\n    ensures addSome(n) > n\n}\nabstract module Mod {\n  import A : Interface\n  method m() {\n    assert 6 <= A.addSome(5);\n  }\n}\n```\n\nWe can be more precise if we know that `addSome` actually adds\nexactly one. The following module has this behavior. Further, the\npostcondition is stronger, so this is actually a refinement of the\nInterface module.\n\n\n```dafny\nmodule Implementation {\n  function addSome(n: nat): nat\n    ensures addSome(n) == n + 1\n  {\n    n + 1\n  }\n}\n```\n\nWe can then substitute `Implementation` for `A` in a new module, by\ndeclaring a refinement of `Mod` which defines  `A` to be `Implementation`.\n\n\n```dafny\nabstract module Interface {\n  function addSome(n: nat): nat\n    ensures addSome(n) > n\n}\nabstract module Mod {\n  import A : Interface\n  method m() {\n    assert 6 <= A.addSome(5);\n  }\n}\nmodule Implementation {\n  function addSome(n: nat): nat\n    ensures addSome(n) == n + 1\n  {\n    n + 1\n  }\n}\nmodule Mod2 refines Mod {\n  import A = Implementation\n  ...\n}\n```\n\nWhen you refine an abstract import into a concrete one\nDafny checks that the concrete module is a\nrefinement of the abstract one. This means that the methods must have\ncompatible signatures, all the classes and datatypes with their\nconstructors and fields in the abstract one must be present in the\nconcrete one, the specifications must be compatible, etc.\n\nA module that includes an abstract import must be declared `abstract`.", "start_char_idx": 2, "end_char_idx": 2169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dad8e2ff-4da4-4728-b4b6-18b449e08dad": {"__data__": {"id_": "dad8e2ff-4da4-4728-b4b6-18b449e08dad", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "947d2039-01fd-47ba-88e9-f252582d0327", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5df118ab4d556ba67baaa545d2ade50aaa2c42e17d59a2dbcf16d0f44c049e13", "class_name": "RelatedNodeInfo"}}, "text": "4.7. Module Ordering and Dependencies {sec-module-ordering}\n\nDafny isn't particular about the textual order in which modules are\ndeclared, but\nthey must follow some rules to be well formed. In particular,\nthere must be a way to order the modules in a program such that each\nonly refers to things defined **before** it in the ordering. That\ndoesn't mean the modules have to be given textually in that order in\nthe source text. Dafny will\nfigure out that order for you, assuming you haven't made any circular\nreferences. For example, this is pretty clearly meaningless:\n\n\n```dafny\nimport A = B\nimport B = A // error: circular\n```\n\nYou can have import statements at the toplevel and you can import\nmodules defined at the same level:\n\n\n```dafny\nimport A = B\nmethod m() {\n  A.whatever();\n}\nmodule B { method whatever() {} }\n```\n\nIn this case, everything is well defined because we can put `B` first,\nfollowed by the `A` import, and then finally `m()`. If there is no\npermitted ordering, then Dafny will give an error, complaining about a cyclic\ndependency.\n\nNote that when rearranging modules and imports, they have to be kept\nin the same containing module, which disallows some pathological\nmodule structures. Also, the imports and submodules are always\nconsidered to be before their containing module, even at the toplevel. This means that the\nfollowing is not well formed:\n\n\n```dafny\nmethod doIt() { }\nmodule M {\n  method m() {\n    doIt(); // error: M precedes doIt\n  }\n}\n```\n\nbecause the module `M` must come before any other kind of members, such\nas methods. To define global functions like this, you can put them in\na module (called `Globals`, say) and open it into any module that needs\nits functionality. Finally, if you import via a path, such as `import A\n= B.C`, then this creates a dependency of `A` on `B`, and `B` itself\ndepends on its own nested module `B.C`.", "start_char_idx": 2, "end_char_idx": 1871, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae27b73d-ffbe-4174-82c2-90cf1e82231d": {"__data__": {"id_": "ae27b73d-ffbe-4174-82c2-90cf1e82231d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8d93ea8-ad6d-44b7-b6f8-0db1b09a1090", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "94cc69a283615ca74cea69a6eccf40e01a427249df508f8b76cc32506bf89116", "class_name": "RelatedNodeInfo"}}, "text": "4.8. Name Resolution {sec-name-resolution}\n\nWhen Dafny sees something like `A.B.C`, how does it know what each part\nrefers to? The process Dafny uses to determine what identifier\nsequences like this refer to is name resolution. Though the rules may\nseem complex, usually they do what you would expect. Dafny first looks\nup the initial identifier. Depending on what the first identifier\nrefers to, the rest of the identifier is looked up in the appropriate\ncontext.\n\nIn terms of the grammar, sequences like the above are represented as\na ``NameSegment`` followed by 0 or more ``Suffix``es.\nThe form shown above contains three instances of\n``AugmentedDotSuffix_``.\n\nThe resolution is different depending on whether it is in\na module context, an expression context or a type context.", "start_char_idx": 2, "end_char_idx": 782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "574d83d3-b007-499e-9da8-7c129b2f7b9b": {"__data__": {"id_": "574d83d3-b007-499e-9da8-7c129b2f7b9b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8689007b-bdb8-4308-a497-09b5b0dbcf39", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "321a1e6da7c0981f35de6ebdc86641fc5f3f01885b5b1742d035a567dcd0fc41", "class_name": "RelatedNodeInfo"}}, "text": "4.8.1. Modules and name spaces\n\nA module is a collection of declarations, each of which has a name.\nThese names are held in two namespaces.\n\n* The names of export sets\n* The names of all other declarations, including submodules and aliased modules\n\nIn addition names can be classified as _local_ or _imported_.\n\n* Local declarations of a module are the declarations\n that are explicit in the module and the\nlocal declarations of the refinement parent. This includes, for\nexample, the `N` of `import N = ` in the refinement parent, recursively.\n* Imported names of a module are those brought in by `import opened` plus\nthe imported names in the refinement parent.\n\nWithin each namespace, the local names are unique. Thus a module may\nnot reuse a name that a refinement parent has declared (unless it is a\nrefining declaration, which replaces both declarations, as described\nin Section 10).\n\nLocal names take precedence over imported names. If a name is used more than\nonce among imported names (coming from different imports), then it is\nambiguous to _use_ the name without qualification.", "start_char_idx": 2, "end_char_idx": 1089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dded4c6d-a492-4305-aae2-5b07d3152df7": {"__data__": {"id_": "dded4c6d-a492-4305-aae2-5b07d3152df7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c13a74b1-f89b-4e58-98f5-7f26f33cad47", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fb0eb3304efed9fbc2d09ccb593888781e6f556b76aa14644d9cf94e2e81fdb7", "class_name": "RelatedNodeInfo"}}, "text": "4.8.2. Module Id Context Name Resolution\n\nA qualified name may be used to refer to a module in an import statement or a refines clause of a module declaration.\nSuch a qualified name is resolved as follows, with respect to its syntactic\nlocation within a module `Z`:\n\n1. The leading identifier of the qualified name is resolved as a local or imported module name of `Z`, if there\nis one with a matching name. The target of a `refines` clause does not\nconsider local names, that is, in `module Z refines A.B.C`, any contents of `Z`\nare not considered in finding `A`.\n\n2. Otherwise, it is resolved as a local or imported module name of the most enclosing module of `Z`,\n   iterating outward to each successive enclosing module until a match is\nfound or the default toplevel module is reached without a match.\nNo consideration of export sets, default or otherwise, is used in this step.\nHowever, if at any stage a matching name is found that is not a module\ndeclaration, the resolution fails. See the examples below.\n\n3a. Once the leading identifier is resolved as say module `M`, the next\n   identifier in the quallified name\n   is resolved as a local or imported module name within `M`.\n   The resolution is restricted to the default export set of `M`.\n\n3b. If the resolved module name is a module alias (from an `import` statement)\n   then the target of the alias is resolved as a new qualified name\n   with respect to its syntactic context (independent of any resolutions or\nmodules so far). Since `Z` depends on `M`, any such alias target will\nalready have been resolved, because modules are resolved in order of\ndependency.\n\n4. Step 3 is iterated for each identifier in the qualified module id,\n   resulting in a module that is the final resolution of the complete\n   qualified id.\n\nOrdinarily a module must be _imported_ in order for its constituent\ndeclarations to be visible inside a given module `M`. However, for the\nresolution of qualified names this is not the case.\n\nThis example shows that the resolution of the refinement parent does not\nuse any local names:\n\n```dafny\nmodule A {\n  const a := 10\n}\n\nmodule B refines A { // the top-level A, not the submodule A\n  module A { const a := 30 }\n  method m() { assert a == 10; } // true\n}\n```\nIn the example, the `A` in `refines A` refers to the global `A`, not the submodule `A`.", "start_char_idx": 2, "end_char_idx": 2337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4f60eea-1c32-4cf8-9459-ebd57ba97b97": {"__data__": {"id_": "e4f60eea-1c32-4cf8-9459-ebd57ba97b97", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dee2be0c-77e9-417a-b806-0b5adbcbbf20", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3671de85d0e4c659b785e4f83f59899b35ce9f500a12595140bd4067ef2fdce4", "class_name": "RelatedNodeInfo"}}, "text": "4.8.3. Expression Context Name Resolution\n\nThe leading identifier is resolved using the first following\nrule that succeeds.\n\n0. Local variables, parameters and bound variables. These are things like\n   `x`, `y`, and `i` in `var x;, ... returns (y: int)`, and\n   `forall i :: ....` The declaration chosen is the match from the\n   innermost matching scope.\n\n1. If in a class, try to match a member of the class. If the member that\n   is found is not static an implicit `this` is inserted. This works for\n   fields, functions, and methods of the current class (if in a static\n   context, then only static methods and functions are allowed). You can\n   refer to fields of the current class either as `this.f` or `f`,\n   assuming of course that `f` is not hidden by one of the above. You\n   can always prefix `this` if needed, which cannot be hidden. (Note that a\n   field whose name is a string of digits must always have some prefix.)\n\n2. If there is no ``Suffix``, then look for a datatype constructor, if\n   unambiguous. Any datatypes that don't need qualification (so the\n   datatype name itself doesn't need a prefix) and also have a uniquely\n   named constructor can be referred to just by name.  So if\n   `datatype List = Cons(List) | Nil` is the only datatype that declares\n   `Cons` and `Nil` constructors, then you can write `Cons(Cons(Nil))`.\n   If the constructor name is not unique, then you need to prefix it with\n   the name of the datatype (for example `List.Cons(List.Nil)))`. This is\n   done per constructor, not per datatype.\n\n3. Look for a member of the enclosing module.\n\n4. Module-level (static) functions and methods\n\nIn each module, names from opened modules are also potential matches, but\nonly after names declared in the module.\nIf an ambiguous name is found or a name of the wrong kind (e.g. a module\ninstead of an expression identifier), an error is generated, rather than continuing\ndown the list.\n\nAfter the first identifier, the rules are basically the\nsame, except in the new context. For example, if the first identifier is\na module, then the next identifier looks into that module. Opened modules\nonly apply within the module it is opened into. When looking up into\nanother module, only things explicitly declared in that module are\nconsidered.\n\nTo resolve expression `E.id`:\n\nFirst resolve expression E and any type arguments.\n\n* If `E` resolved to a module `M`:\n  0. If `E.id` is not followed by any further suffixes, look for\n     unambiguous datatype constructor.\n  1. Member of module M: a sub-module (including submodules of imports),\n     class, datatype, etc.\n  2. Static function or method.\n* If `E` denotes a type:\n  3. Look up id as a member of that type\n* If `E` denotes an expression:\n  4. Let T be the type of E. Look up id in T.", "start_char_idx": 2, "end_char_idx": 2776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2659053e-3f72-4b65-a00f-652c23d2f890": {"__data__": {"id_": "2659053e-3f72-4b65-a00f-652c23d2f890", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca643c37-9040-4b29-95df-2a4bfa423659", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "383fe3b74fd27b70fb0ccd3e299281afb2b1a3054f6a3969adc64d47f5d211f6", "class_name": "RelatedNodeInfo"}}, "text": "4.8.4. Type Context Name Resolution\n\nIn a type context the priority of identifier resolution is:\n\n1. Type parameters.\n\n2. Member of enclosing module (type name or the name of a module).\n\nTo resolve expression `E.id`:\n\n* If `E` resolved to a module `M`:\n  0. Member of module M: a sub-module (including submodules of imports),\n     class, datatype, etc.\n* If `E` denotes a type:\n  1. Then the validity and meaning of `id` depends on the type and\n     must be a user-declared or pre-defined member of the type.", "start_char_idx": 2, "end_char_idx": 510, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ec1b1c1-ae60-4885-81db-e88e02276441": {"__data__": {"id_": "5ec1b1c1-ae60-4885-81db-e88e02276441", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1654393-06bb-435c-99e4-569fb1fdf402", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0f8c8d9904573906154ba0faec567ad3fc89a8d181320577d698bd20d27eb017", "class_name": "RelatedNodeInfo"}}, "text": "4. Modules {sec-modules}\n\nStructuring a program by breaking it into parts is an important part of creating large programs. In Dafny, this is accomplished via _modules_. Modules provide a way to group together related types, classes, methods, functions, and other modules, as well as to control the scope of declarations. Modules may import each other for code reuse, and it is possible to abstract over modules to separate an implementation from an interface.\n\nModule declarations are of three types:\n- a module definition\n- a module import\n- a module export definition", "start_char_idx": 2, "end_char_idx": 571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd088e33-75be-49c9-b967-3e78a8c64ee6": {"__data__": {"id_": "fd088e33-75be-49c9-b967-3e78a8c64ee6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8be3071a-ee3a-4f44-a460-7171e02a9d10", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c31fe32e9ccfb99762a1f5b0200047bfd23d84306bfe8e051f4ae48e4bd6a97", "class_name": "RelatedNodeInfo"}}, "text": "4.1. Declaring New Modules {sec-module-definition}\n\nA _module definition_:\n- has an optional modifier (only `abstract` is allowed)\n- followed by the keyword \"module\"\n- followed by a name (a sequence of dot-separated identifiers)\n- followed by a body enclosed in curly braces\n\nA module body consists of any declarations that are allowed at the top level: classes, datatypes, types, methods, functions, etc.\n\nYou can also put a module inside another, in a nested fashion. Then you can refer to the members of the `Helpers` module within the `Mod` module by prefixing them with \"Helpers.\".", "start_char_idx": 2, "end_char_idx": 588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7de70f3a-9b70-4ba7-976f-bbfd1f95003e": {"__data__": {"id_": "7de70f3a-9b70-4ba7-976f-bbfd1f95003e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f743256-181c-45f6-ac06-27df13b1fc8d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aed81fb8b513bd82cf5ca3b2dda99be349c8c9b593d71cce219f9cd84e4fc898", "class_name": "RelatedNodeInfo"}}, "text": "4.3. Importing Modules {sec-importing-modules}\n\nSometimes you want to refer to things from an existing module, such as a library. In this case, you can _import_ one module into another. This is done via the `import` keyword, which has two forms with different meanings. The simplest form is the concrete import, which has the form `import A = B`. This declaration creates a reference to the module `B` (which must already exist), and binds it to the new local name `A`. This form can also be used to create a reference to a nested module, as in `import A = B.C`. The other form, using a `:`, is described in Section 4.6.", "start_char_idx": 2, "end_char_idx": 622, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "758c3095-dacd-4361-99f6-7d02332bcadd": {"__data__": {"id_": "758c3095-dacd-4361-99f6-7d02332bcadd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5c93e3c-6d81-4b12-b6d9-a34d8cfd7a39", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "17c0258d6ad2f766ad0190cded28bb75818115bd5961080a3ff2f14f4e835529", "class_name": "RelatedNodeInfo"}}, "text": "4.4. Opening Modules {sec-opening-modules}\n\nSometimes, prefixing the members of the module you imported with its name is tedious and ugly, even if you select a short name when importing it. In this case, you can import the module as `opened`, which causes all of its members to be available without adding the module name. The `opened` keyword, if present, must immediately follow `import`.\n\nWhen opening modules, the newly bound members have lower priority than local definitions. This means if you define a local function called `addOne`, the function from `Helpers` will no longer be available under that name. When modules are opened, the original name binding is still present however, so you can always use the fully qualified name.", "start_char_idx": 2, "end_char_idx": 740, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d8f7d20-55fc-44ee-985f-51750684ff2f": {"__data__": {"id_": "2d8f7d20-55fc-44ee-985f-51750684ff2f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8dbb039c-7547-4cc0-b144-0b30c62f4ce8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c5b6b7ac56f242eb67c7b4a7653feeab7f10133319aef6bec119788d7e28de9a", "class_name": "RelatedNodeInfo"}}, "text": "4.5. Export Sets and Access Control {sec-export-sets}\n\nIn some programming languages, keywords such as `public`, `private`, and `protected` are used to control access to (that is, visibility of) declared program entities. In Dafny, modules and export sets provide that capability. Modules combine declarations into logically related groups. Export sets then permit selectively exposing subsets of a module's declarations; another module can import the export set appropriate to its needs. A user can define as many export sets as are needed to provide different kinds of access to the module's declarations. Each export set designates a list of names, which must be names that are declared in the module (or in a refinement parent).\n\nBy default (in the absence of any export set declarations) all the names declared in a module are available outside the module using the `import` mechanism. An _export set_ enables a module to disallow the use of some declarations outside the module.", "start_char_idx": 2, "end_char_idx": 986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfa5f590-ae3c-414f-bf1d-55814c92db55": {"__data__": {"id_": "dfa5f590-ae3c-414f-bf1d-55814c92db55", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b83d6c8e-b2f0-4e24-a027-0a94fdb10e11", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3305243a70b263a716b39b1cb47c444515036412456ca83cd1de8461dc6f7f6a", "class_name": "RelatedNodeInfo"}}, "text": "4.6. Module Abstraction {sec-module-abstraction}\n\nSometimes, using a specific implementation is unnecessary; instead, all that is needed is a module that implements some interface. In that case, you can use an _abstract_ module import. In Dafny, this is written `import A : B`. This means bind the name `A` as before, but instead of getting the exact module `B`, you get any module which _adheres_ to `B`. Typically, the module `B` may have abstract type definitions, classes with bodiless methods, or otherwise be unsuitable to use directly. Because of the way refinement is defined, any refinement of `B` can be used safely.", "start_char_idx": 2, "end_char_idx": 628, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab2425a1-5500-427f-97e5-5c53cac8b759": {"__data__": {"id_": "ab2425a1-5500-427f-97e5-5c53cac8b759", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5e29dc4-abd2-4d44-b421-caeb71dbb37f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18f07d307f0dfcb1821c6fc204ef10a8f8b2e7576ca5a9c6c388174d256763e6", "class_name": "RelatedNodeInfo"}}, "text": "4.7. Module Ordering and Dependencies {sec-module-ordering}\n\nDafny isn't particular about the textual order in which modules are declared, but they must follow some rules to be well formed. In particular, there must be a way to order the modules in a program such that each only refers to things defined **before** it in the ordering. That doesn't mean the modules have to be given textually in that order in the source text. Dafny will figure out that order for you, assuming you haven't made any circular references.", "start_char_idx": 2, "end_char_idx": 520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75514c44-40c3-4949-aeab-efda6efac53d": {"__data__": {"id_": "75514c44-40c3-4949-aeab-efda6efac53d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f1db1d8-0a19-4d29-a0df-27ff115fd1ed", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2ed3f5308a19a728948f2c04f7ae153ac5b675382ce55a838af99ffc5eb1230b", "class_name": "RelatedNodeInfo"}}, "text": "4.8. Name Resolution {sec-name-resolution}\n\nWhen Dafny sees something like `A.B.C`, how does it know what each part refers to? The process Dafny uses to determine what identifier sequences like this refer to is name resolution. Though the rules may seem complex, usually they do what you would expect. Dafny first looks up the initial identifier. Depending on what the first identifier refers to, the rest of the identifier is looked up in the appropriate context.\n\nIn terms of the grammar, sequences like the above are represented as a `NameSegment` followed by 0 or more `Suffix`es. The form shown above contains three instances of `AugmentedDotSuffix_`.\n\nThe resolution is different depending on whether it is in a module context, an expression context or a type context.", "start_char_idx": 2, "end_char_idx": 776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35a0a413-81b5-4393-b01f-1d67354ce36c": {"__data__": {"id_": "35a0a413-81b5-4393-b01f-1d67354ce36c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "312574f7-a81a-473d-a6c0-4790d02129ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "55314b19e76a9a79aa20fb976f0bfd5a0dbb7b7f5441121fb006f64d56e26542", "class_name": "RelatedNodeInfo"}}, "text": "4.8.1. Modules and Name Spaces {sec-modules-namespaces}\n\nA module is a collection of declarations, each of which has a name. These names are held in two namespaces:\n- The names of export sets\n- The names of all other declarations, including submodules and aliased modules", "start_char_idx": 2, "end_char_idx": 273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "661f9133-f628-4908-9345-49edd2290949": {"__data__": {"id_": "661f9133-f628-4908-9345-49edd2290949", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5da6cda7-bd47-49b0-8b2a-5a2282fb0305", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d9b8ff525eb0d8861e0ed2afd47b3f0c53203ea08ebe034d8e88e1415f8a5d4d", "class_name": "RelatedNodeInfo"}}, "text": "4. Modules Grammar {g-module}", "start_char_idx": 2, "end_char_idx": 31, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c7063ad-bf03-48e5-8915-135b004e09d4": {"__data__": {"id_": "6c7063ad-bf03-48e5-8915-135b004e09d4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea528606-bf5b-479f-8a20-8a5796962786", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "426862778a59acc5a98f12015797b01065bef9184e03863b1ce4517ba3244fbc", "class_name": "RelatedNodeInfo"}}, "text": "4.1. Declaring New Modules Grammar {g-module-definition}\n\n```\nmodule-definition =\n    [ \"abstract\" ] \"module\" identifier [ \".\" identifier ]* \"{\" { top-level-declaration } \"}\"\n```", "start_char_idx": 2, "end_char_idx": 180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd2caf57-0f51-41f9-9797-bc2f6d2cda76": {"__data__": {"id_": "cd2caf57-0f51-41f9-9797-bc2f6d2cda76", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ebc3a8c-7361-44d3-b88b-fec0f51e32ff", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "15549011e9e4479848d8b83e9d5812d3086f15e63d208eb2b9c9c02a4e90ffc2", "class_name": "RelatedNodeInfo"}}, "text": "4.3. Importing Modules Grammar {g-module-import}\n\n```\nmodule-import =\n    \"import\" identifier\n  | \"import\" \"opened\" identifier\n  | \"import\" identifier \"=\" identifier\n  | \"import\" identifier \":\" identifier\n  | \"import\" identifier \".\" identifier\n  | \"import\" identifier \"`\" identifier\n  | \"import\" identifier \"=\" identifier \".\" identifier \"`\" \"{\" identifier { \",\" identifier } \"}\"\n```", "start_char_idx": 2, "end_char_idx": 384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc34ccb8-f9cd-4506-9922-7f111f33ce27": {"__data__": {"id_": "bc34ccb8-f9cd-4506-9922-7f111f33ce27", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72835043-4b28-46bb-9cab-e8435a7c614e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d0ffdfdbda800667054af9a58e54c08f168d7ddb4015d423d56b5eb0a5f811c7", "class_name": "RelatedNodeInfo"}}, "text": "4.4. Opening Modules Grammar {g-opening-modules}\n\n```\nmodule-opening =\n    \"import\" \"opened\" identifier\n```", "start_char_idx": 2, "end_char_idx": 109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad2cfd11-da34-4d64-8755-ed26af4fce2b": {"__data__": {"id_": "ad2cfd11-da34-4d64-8755-ed26af4fce2b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74f612de-c799-46bb-9c81-74b018722d5a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6f1b695a183151ae9155e86091e888ec2aeeaf1e561b4609bb41bc1198906ed3", "class_name": "RelatedNodeInfo"}}, "text": "4.5. Export Sets and Access Control Grammar {g-module-export}\n\n```\nmodule-export =\n    \"export\" identifier [ \"extends\" identifier ] [ \"reveals\" identifier { \",\" identifier } ] [ \"provides\" identifier { \",\" identifier } ]\n  | \"export\" identifier \"reveals\" \"*\"\n  | \"export\" \"reveals\" identifier { \",\" identifier } \"provides\" identifier { \",\" identifier }\n  | \"export\" identifier\n  | \"export\" identifier \"...\" \"reveals\" identifier\n```", "start_char_idx": 2, "end_char_idx": 433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6daa145a-db42-48bc-9aa4-cc712582b7ec": {"__data__": {"id_": "6daa145a-db42-48bc-9aa4-cc712582b7ec", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e851b3a-8bdf-4497-b434-ec5e6d101454", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ee771c4d307222aae150dab8dfb70c5a92e387f5f1eab2a8e3efd01d41d7edb0", "class_name": "RelatedNodeInfo"}}, "text": "4.6. Module Abstraction Grammar {g-module-abstraction}\n\n```\nabstract-module-import =\n    \"import\" identifier \":\" identifier\n```", "start_char_idx": 2, "end_char_idx": 129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad21dca0-8439-4811-9c17-c43f81672542": {"__data__": {"id_": "ad21dca0-8439-4811-9c17-c43f81672542", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfb1e4b2-62ec-4908-add0-4c00a2769436", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "903b1876bb844d93be7aeda59dae4c3e94fe99eca8b6ef675477294e7a7df6d5", "class_name": "RelatedNodeInfo"}}, "text": "4.7. Module Ordering and Dependencies Grammar {g-module-ordering}\n\n```\nmodule-ordering =\n    { module-definition | module-import | module-export | abstract-module-import }\n```", "start_char_idx": 2, "end_char_idx": 177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64bf20fb-d971-47cd-967c-7cbd89c8f28c": {"__data__": {"id_": "64bf20fb-d971-47cd-967c-7cbd89c8f28c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87ce9d0e-1c89-4872-8e31-97944d8e8c51", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bb46a6930d0368295c89ade0798b3e08aa685312a00ac3b4b786ee5b8a224b57", "class_name": "RelatedNodeInfo"}}, "text": "4.8. Name Resolution Grammar {g-name-resolution}\n\n```\nname-resolution =\n    identifier [ \"\" ] \".\" identifier [ \"\" ] \".\" identifier [ \"\" ]\n```", "start_char_idx": 2, "end_char_idx": 143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f388fa19-8ec1-4f5d-b51b-096d7bb25411": {"__data__": {"id_": "f388fa19-8ec1-4f5d-b51b-096d7bb25411", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d31f4d90-57a5-4067-aa51-f92cfeb77c13", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d2cb7a16254dc7dde7593ea29b08a90a75876c9213296871ea4af4a246aae54b", "class_name": "RelatedNodeInfo"}}, "text": "4.8.1. Modules and Name Spaces Grammar {g-modules-namespaces}\n\n```\nmodule-namespaces =\n    \"export\" identifier\n  | identifier\n  | identifier \".\" identifier\n  | identifier \"`\" identifier\n  | identifier \"=\" identifier\n  | identifier \":\" identifier\n```", "start_char_idx": 2, "end_char_idx": 251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1abcd22-3aa7-4c4c-9daa-d1548797e50d": {"__data__": {"id_": "f1abcd22-3aa7-4c4c-9daa-d1548797e50d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Name_Segment_description.md", "file_name": "Name_Segment_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd970d9b-0b8b-4ed9-9dc6-846421897dd3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Name_Segment_description.md", "file_name": "Name_Segment_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aebe30ed4901435b2c0e685c061e678e54a8b3e32ebc937e4164675f87ee2e2a", "class_name": "RelatedNodeInfo"}}, "text": "9.32. Name Segment (grammar) {sec-name-segment}\n\nExamples:\n\n```dafny\nI\nI\nI#[k]\nI#[k]\n```\n\nA _name segment_ names a Dafny entity by giving its declared\nname optionally followed by information to\nmake the name more complete. For the simple case, it is\njust an identifier. Note that a name segment may be followed\nby suffixes, including the common '.' and further name segments.\n\nIf the identifier is for a generic entity, it is followed by\na ``GenericInstantiation`` which provides actual types for\nthe type parameters.\n\nTo reference a prefix predicate (see Section 5.14.3.5) or\nprefix lemma (see Section 5.14.3.6.3), the identifier\nmust be the name of the greatest predicate or greatest lemma and it must be\nfollowed by a _hash call_.", "start_char_idx": 2, "end_char_idx": 735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f93aac5-0490-4f84-bc61-e5c83366a164": {"__data__": {"id_": "8f93aac5-0490-4f84-bc61-e5c83366a164", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "463dfe143f3f883ac7af31a70366aec73c2d082753eeb4e4d11ffa193d811141", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66777422-b2b2-4e37-a228-10a9972b69a4", "node_type": "1", "metadata": {}, "hash": "39018bc0f5cdf89149cb752ca690e3995061eb90fee3e5dc15314488f1282676", "class_name": "RelatedNodeInfo"}}, "text": "5.7. Newtypes (grammar) {sec-newtypes}\n\nExamples:\n\n```dafny\nnewtype I = int\nnewtype D = i: int | 0 <= i < 10\nnewtype uint8 = i | 0 <= i < 256\n```\n\nA newtype is like a type synonym or subset type except that it declares a wholly new type\nname that is distinct from its base type. It also accepts an optional `witness` clause.\n\nA new type can be declared with the _newtype_\ndeclaration, for example:\n\n```dafny\nnewtype N = x: M | Q\n```\nwhere `M` is a type and `Q` is a boolean expression that can\nuse `x` as a free variable.  If `M` is an integer-based numeric type,\nthen so is `N`; if `M` is real-based, then so is `N`.  If the type `M`\ncan be inferred from `Q`, the \"`: M`\" can be omitted.  If `Q` is just\n`true`, then the declaration can be given simply as:\n\n```dafny\nnewtype N = M\n```\nType `M` is known as the _base type_ of `N`. At present, Dafny only supports\n`int` and `real` as base types of newtypes.\n\nA newtype is a type that supports the same operations as its\nbase type.  The newtype is distinct from and incompatible with other\ntypes; in particular, it is not assignable to its base type\nwithout an explicit conversion.  An important difference between the\noperations on a newtype and the operations on its base type is that\nthe newtype operations are defined only if the result satisfies the\npredicate `Q`, and likewise for the literals of the\nnewtype.\n\nFor example, suppose `lo` and `hi` are integer-based numeric bounds that\nsatisfy `0 <= lo <= hi` and consider the following code fragment:\n\n```dafny\nvar mid := (lo + hi) / 2;\n```\nIf `lo` and `hi` have type `int`, then the code fragment is legal; in\nparticular, it never overflows, since `int` has no upper bound.  In\ncontrast, if `lo` and `hi` are variables of a newtype `int32` declared\nas follows:\n\n```dafny\nnewtype int32 = x | -0x8000_0000 <= x < 0x8000_0000\n```\nthen the code fragment is erroneous, since the result of the addition\nmay fail to satisfy the predicate in the definition of `int32`.  The\ncode fragment can be rewritten as\n\n```dafny\nvar mid := lo + (hi - lo) / 2;\n```\nin which case it is legal for both `int` and `int32`.\n\nAn additional point with respect to arithmetic overflow is that for (signed)\n`int32` values `hi` and `lo` constrained only by `lo <= hi`, the difference `hi - lo`\ncan also overflow the bounds of the `int32` type. So you could also write:\n\n```dafny\nvar mid := lo + (hi/2 - lo/2);\n```\n\nSince a newtype is incompatible with its base type and since all\nresults of the newtype's operations are members of the newtype, a\ncompiler for Dafny is free to specialize the run-time representation\nof the newtype.  For example, by scrutinizing the definition of\n`int32` above, a compiler may decide to store `int32` values using\nsigned 32-bit integers in the target hardware.\n\nThe incompatibility of a newtype and its basetype is intentional,\nas newtypes are meant to be used as distinct types from the basetype.\nIf numeric types are desired that mix more readily with the basetype,\nthe subset types described in Section 5.6.3\n may be more appropriate.\n\nNote that the bound variable `x` in `Q` has type `M`, not `N`.\nConsequently, it may not be possible to state `Q` about the `N`\nvalue.  For example, consider the following type of 8-bit 2's\ncomplement integers:\n\n```dafny\nnewtype int8 = x: int | -128 <= x < 128\n```\nand consider a variable `c` of type `int8`.", "start_char_idx": 2, "end_char_idx": 3353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66777422-b2b2-4e37-a228-10a9972b69a4": {"__data__": {"id_": "66777422-b2b2-4e37-a228-10a9972b69a4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "463dfe143f3f883ac7af31a70366aec73c2d082753eeb4e4d11ffa193d811141", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f93aac5-0490-4f84-bc61-e5c83366a164", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a452bf2445e6e1ffa57b480b880e539dc2509698dc7e863ea0a10a750f76b6e7", "class_name": "RelatedNodeInfo"}}, "text": "For example, by scrutinizing the definition of\n`int32` above, a compiler may decide to store `int32` values using\nsigned 32-bit integers in the target hardware.\n\nThe incompatibility of a newtype and its basetype is intentional,\nas newtypes are meant to be used as distinct types from the basetype.\nIf numeric types are desired that mix more readily with the basetype,\nthe subset types described in Section 5.6.3\n may be more appropriate.\n\nNote that the bound variable `x` in `Q` has type `M`, not `N`.\nConsequently, it may not be possible to state `Q` about the `N`\nvalue.  For example, consider the following type of 8-bit 2's\ncomplement integers:\n\n```dafny\nnewtype int8 = x: int | -128 <= x < 128\n```\nand consider a variable `c` of type `int8`.  The expression\n\n```dafny\n-128 <= c < 128\n```\nis not well-defined, because the comparisons require each operand to\nhave type `int8`, which means the literal `128` is checked to be of\ntype `int8`, which it is not.  A proper way to write this expression\nis to use a conversion operation, described in Section 5.7.1, on `c` to\nconvert it to the base type:\n\n```dafny\n-128 <= c as int < 128\n```\n\nIf possible, Dafny compilers will represent values of the newtype using\na native type for the sake of efficiency. This action can\nbe inhibited or a specific native data type selected by\nusing the `{:nativeType}` attribute, as explained in\nSection 11.1.2.\n\nFurthermore, for the compiler to be able to make an appropriate choice of\nrepresentation, the constants in the defining expression as shown above must be\nknown constants at compile-time. They need not be numeric literals; combinations\nof basic operations and symbolic constants are also allowed as described\nin Section 9.39.", "start_char_idx": 2607, "end_char_idx": 4325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75d469e6-0634-4fd8-9d25-4f84df3d85a3": {"__data__": {"id_": "75d469e6-0634-4fd8-9d25-4f84df3d85a3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Object_Allocation_description.md", "file_name": "Object_Allocation_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7381aa2a-b655-4b6f-80da-8ecde380b8b3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Object_Allocation_description.md", "file_name": "Object_Allocation_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "21225e1032b196ca5a5db113221a05d1af1ae2a00d0a23780dd8f70a779c9a20", "class_name": "RelatedNodeInfo"}}, "text": "9.17. Object Allocation (grammar) {sec-object-allocation}\n\nExamples:\n\n```dafny\nnew MyClass\nnew MyClass.Init\nnew MyClass.Init(1,2,3)\n```\n\nThis right-hand-side expression \nallocates a new object of a class type as explained\nin section Class Types.", "start_char_idx": 2, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43a3b64a-d63f-4d15-8774-2fdb7a0b7bb3": {"__data__": {"id_": "43a3b64a-d63f-4d15-8774-2fdb7a0b7bb3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76810a52-3a2a-4570-b405-ff2cc37b916d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ea47a4b2fafa70a96822e36a7fef3866f264b5077eb07aa76d194a6c0ac1825e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0c80cde6-c21e-460c-8085-0dcaebc82184", "node_type": "1", "metadata": {}, "hash": "e50146cdfd0f0e5760b0fc4b3b890a3e8daefe55dae29816e83d1f2aaba55a54", "class_name": "RelatedNodeInfo"}}, "text": "9.22. Old and Old@ Expressions (grammar) {sec-old-expression}\n\nExamples:\n\n```dafny\nold(c)\nold@L(c)\n```\n\nAn _old expression_ is used in postconditions or in the body of a method\nor in the body or specification of any two-state function or two-state lemma;\nan _old_ expression with a label is used only in the body of a method at a point\nwhere the label dominates its use in the expression.\n\n`old(e)` evaluates\nthe argument using the value of the heap on entry to the method;\n`old@ident(e)` evaluates the argument using the value of the heap at the\ngiven statement label.\n\nNote that **old** and **old@** only affect heap dereferences,\nlike `o.f` and `a[i]`.\nIn particular, neither form has any effect on the value returned for local\nvariables or out-parameters (as they are not on the heap).[^Old]\nIf the value of an entire expression at a\nparticular point in the method body is needed later on in the method body,\nthe clearest means is to declare a ghost variable, initializing it to the\nexpression in question.\nIf the argument of `old` is a local variable or out-parameter. Dafny issues a warning.\n\n[^Old]: The semantics of `old` in Dafny differs from similar constructs in other specification languages like ACSL or JML.\n\nThe argument of an `old` expression may not contain nested `old`,\n`fresh`,\nor `unchanged` expressions,\nnor two-state functions or two-state lemmas.\n\nHere are some explanatory examples. All `assert` statements verify to be true.", "start_char_idx": 2, "end_char_idx": 1452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c80cde6-c21e-460c-8085-0dcaebc82184": {"__data__": {"id_": "0c80cde6-c21e-460c-8085-0dcaebc82184", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76810a52-3a2a-4570-b405-ff2cc37b916d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ea47a4b2fafa70a96822e36a7fef3866f264b5077eb07aa76d194a6c0ac1825e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43a3b64a-d63f-4d15-8774-2fdb7a0b7bb3", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8e26e10c7401c49691ac5c76b675175a96d15adf6efd39ca0f275a7329b1ef63", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "994af055-5cb8-43b8-b5c0-a6611a9ba9fc", "node_type": "1", "metadata": {}, "hash": "d7b90a2ffe8c3eb844b9bcca4a54a28ca76d0277fd65e6e963d4b9c581379e84", "class_name": "RelatedNodeInfo"}}, "text": "In particular, neither form has any effect on the value returned for local\nvariables or out-parameters (as they are not on the heap).[^Old]\nIf the value of an entire expression at a\nparticular point in the method body is needed later on in the method body,\nthe clearest means is to declare a ghost variable, initializing it to the\nexpression in question.\nIf the argument of `old` is a local variable or out-parameter. Dafny issues a warning.\n\n[^Old]: The semantics of `old` in Dafny differs from similar constructs in other specification languages like ACSL or JML.\n\nThe argument of an `old` expression may not contain nested `old`,\n`fresh`,\nor `unchanged` expressions,\nnor two-state functions or two-state lemmas.\n\nHere are some explanatory examples. All `assert` statements verify to be true.\n\n```dafny\nclass A {\n\n  var value: int\n\n  method m(i: int)\n    requires i == 6\n    requires value == 42\n    modifies this\n  {\n    var j: int := 17;\n    value := 43;\n    label L:\n    j := 18;\n    value := 44;\n    label M:\n    assert old(i) == 6; // i is local, but can't be changed anyway\n    assert old(j) == 18; // j is local and not affected by old\n    assert old@L(j) == 18; // j is local and not affected by old\n    assert old(value) == 42;\n    assert old@L(value) == 43;\n    assert old@M(value) == 44 && this.value == 44;\n    // value is this.value; 'this' is the same\n    // same reference in current and pre state but the\n    // values stored in the heap as its fields are different;\n    // '.value' evaluates to 42 in the pre-state, 43 at L,\n    // and 44 in the current state\n  }\n}\n```\n\n```dafny\nclass A {\n  var value: int\n  constructor ()\n     ensures value == 10\n  {\n     value := 10;\n  }\n}\n\nclass B {\n   var a: A\n   constructor () { a := new A(); }\n\n   method m()\n     requires a.value == 11\n     modifies this, this.a\n   {\n     label L:\n     a.value := 12;\n     label M:\n     a := new A(); // Line X\n     label N:\n     a.value := 20;\n     label P:\n\n     assert old(a.value) == 11;\n     assert old(a).value == 12; // this.a is from pre-state,\n                                // but .value in current state\n     assert old@L(a.value) == 11;\n     assert old@L(a).value == 12; // same as above\n     assert old@M(a.value) == 12; // .value in M state is 12\n     assert old@M(a).value == 12;\n     assert old@N(a.value) == 10; // this.a in N is the heap\n                                  // reference at Line X\n     assert old@N(a).value == 20; // .value in current state is 20\n     assert old@P(a.value) == 20;\n     assert old@P(a).value == 20;\n  }\n}\n```\n\n```dafny\nclass A {\n  var value: int\n  constructor ()\n     ensures value == 10\n  {\n     value := 10;\n  }\n}\n\nclass B {\n   var a: A\n   constructor () { a := new A(); }\n\n   method m()\n     requires a.value == 11\n     modifies this, this.a\n   {\n     label L:\n     a.value := 12;\n     label M:\n     a := new A(); // Line X\n     label N:\n     a.value := 20;\n     label P:\n\n     assert old(a.value) == 11;\n     assert old(a).value == 12; // this.a is from pre-state,\n                                // but .value in current state\n     assert old@L(a.value) == 11;\n     assert old@L(a).value == 12; // same as above\n     assert old@M(a.value) == 12; // .value in M state is 12\n     assert old@M(a).value == 12;\n     assert old@N(a.value) == 10; // this.a in N is the heap\n                                  // reference at Line X\n     assert old@N(a).value == 20; // .value in current state is 20\n     assert old@P(a.value) == 20;\n     assert old@P(a).value == 20;\n  }\n}\n```\nThe next example demonstrates the interaction between `old` and array elements.", "start_char_idx": 658, "end_char_idx": 4258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "994af055-5cb8-43b8-b5c0-a6611a9ba9fc": {"__data__": {"id_": "994af055-5cb8-43b8-b5c0-a6611a9ba9fc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76810a52-3a2a-4570-b405-ff2cc37b916d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ea47a4b2fafa70a96822e36a7fef3866f264b5077eb07aa76d194a6c0ac1825e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c80cde6-c21e-460c-8085-0dcaebc82184", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d13bfb4c480a047d54bf4d2e242e7cb8afeb2cbe75a41de32d29348728c61708", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nclass A {\n  var z1: array\n  var z2: array\n\n  method mm()\n    requires z1.Length > 10 && z1[0] == 7\n    requires z2.Length > 10 && z2[0] == 17\n    modifies z2\n  {\n    var a: array := z1;\n    assert a[0] == 7;\n    a := z2;\n    assert a[0] == 17;\n    assert old(a[0]) == 17; // a is local with value z2\n    z2[0] := 27;\n    assert old(a[0]) == 17; // a is local, with current value of\n                            // z2; in pre-state z2[0] == 17\n    assert old(a)[0] == 27; // a is local, so old(a) has no effect\n  }\n}\n```", "start_char_idx": 4260, "end_char_idx": 4787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7174ade-f7bb-413e-a5cc-2a79716ad5e1": {"__data__": {"id_": "d7174ade-f7bb-413e-a5cc-2a79716ad5e1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parameter_Bindings_description.md", "file_name": "Parameter_Bindings_description.md", "file_type": "text/markdown", "file_size": 2130, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66c99f47-b3bb-424c-97ab-b13c3d3b2644", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parameter_Bindings_description.md", "file_name": "Parameter_Bindings_description.md", "file_type": "text/markdown", "file_size": 2130, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a34f9e499dc286e483cc004777fbf08c345b1814e0ba948fad83136568c673c1", "class_name": "RelatedNodeInfo"}}, "text": "9.36. Parameter Bindings (grammar) {sec-parameter-bindings}\n\nExamples: \n\n```dafny\na\na, b\na, optimize := b\n```\n\nMethod calls, object-allocation calls (`new`), function calls, and\ndatatype constructors can be called with both positional arguments\nand named arguments.\n\nFormal parameters have three ways to indicate how they are to be passed in:\n- nameonly: the only way to give a specific argument value is to name the parameter\n- positional only: these are nameless parameters (which are allowed only for datatype constructor parameters)\n- either positional or by name: this is the most common parameter\n\nA parameter is either required or optional:\n- required: a caller has to supply an argument\n- optional: the parameter has a default value that is used if a caller omits passing a specific argument\n\nThe syntax for giving a positional-only (i.e., nameless) parameter does not allow a default-value expression, so a positional-only parameter is always required.\n\nAt a call site, positional arguments are not allowed to follow named arguments. Therefore, if `x` is a nameonly parameter, then there is no way to supply the parameters after `x` by position. \nThus, any parameter that follows `x` must either be passed by name or have a default value. \nThat is, if a later (in the formal parameter declaration) parameter does not have a default value, it is effectively nameonly. \n\nPositional arguments must be given before any named arguments.\nPositional arguments are passed to the formals in the corresponding\nposition. Named arguments are passed to the formal of the given\nname. Named arguments can be given out of order from how the corresponding\nformal parameters are declared. A formal declared with the modifier\n`nameonly` is not allowed to be passed positionally.\nThe list of bindings for a call must\nprovide exactly one value for every required parameter and at most one\nvalue for each optional parameter, and must never name\nnon-existent formals. Any optional parameter that is not given a value\ntakes on the default value declared in the callee for that optional parameter.", "start_char_idx": 2, "end_char_idx": 2083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b65369c-77f5-437c-8e10-863cd794406a": {"__data__": {"id_": "5b65369c-77f5-437c-8e10-863cd794406a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parenthesized_Expressions_description.md", "file_name": "Parenthesized_Expressions_description.md", "file_type": "text/markdown", "file_size": 404, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93c57eb4-6619-4463-9f5b-b9d0db78bb25", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parenthesized_Expressions_description.md", "file_name": "Parenthesized_Expressions_description.md", "file_type": "text/markdown", "file_size": 404, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a8745a62725a56ee78bd613bbfbc0484801e9c217e9c5b1440d6c05b2be2ca0c", "class_name": "RelatedNodeInfo"}}, "text": "9.27. Parenthesized Expressions (grammar) {sec-parenthesized-expression}\n\nA parenthesized expression is a list of zero or more expressions\nenclosed in parentheses.\n\nIf there is exactly one expression enclosed then the value is just\nthe value of that expression.\n\nIf there are zero or more than one, the result is a `tuple` value.\nSee Section 5.13.", "start_char_idx": 2, "end_char_idx": 349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63353ec6-d89a-4144-972d-0f2056480626": {"__data__": {"id_": "63353ec6-d89a-4144-972d-0f2056480626", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de29d7b3-4082-44ad-a501-6b0221e75535", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4fb0994f18fd234978c926c01cdfe2b35ec1d35ae75d84fd72c278a9e99c830b", "class_name": "RelatedNodeInfo"}}, "text": "15. Plugins to Dafny {sec-plugins}\n\nDafny has a plugin architecture that permits users to build tools for the Dafny language without having to replicate \nparsing and name/type resolution of Dafny programs. Such a tool might just do some analysis on the Dafny program,\nwithout concern for verifying or compiling the program. Or it might modify the program (actually, modify the program's AST) \nand then continue on with verification and compilation with the core Dafny tool. A user plugin might also be used\nin the Language Server and thereby be available in the VSCode (or other) IDE.\n\n_**This is an experimental aspect of Dafny.**\nThe plugin API directly exposes the Dafny AST, which is constantly evolving.\nHence, always recompile your plugin against the binary of Dafny that will be importing your plugin._\n\nPlugins are libraries linked to a `Dafny.dll` of the same version as the Language Server.\nA plugin typically defines:\n\n* Zero or one class extending `Microsoft.Dafny.Plugins.PluginConfiguration`, which receives plugins arguments in its method `ParseArguments`, and\n  1. Can return a list of `Microsoft.Dafny.Plugins.Rewriter`s when its method `GetRewriters()` is called by Dafny,\n  2. Can return a list of `Microsoft.Dafny.Plugins.Compiler`s when its method `GetCompilers()` is called by Dafny,\n  3. If the configuration extends the subclass `Microsoft.Dafny.LanguageServer.Plugins.PluginConfiguration`:\n      1. Can return a list of `Microsoft.Dafny.LanguageServer.Plugins.DafnyCodeActionProvider`s when its method `GetDafnyCodeActionProviders()` is called by the Dafny Language Server.\n      2. Can return a modified version of `OmniSharp.Extensions.LanguageServer.Server.LanguageServerOptions` when its method `WithPluginHandlers()` is called by the Dafny Language Server.\n\n* Zero or more classes extending `Microsoft.Dafny.Plugins.Rewriter`.\n  If a configuration class is provided, it is responsible for instantiating them and returning them in `GetRewriters()`.\n  If no configuration class is provided, an automatic configuration will load every defined `Rewriter` automatically.\n* Zero or more classes extending `Microsoft.Dafny.Plugins.Compiler`.\n  If a configuration class is provided, it is responsible for instantiating them and returning them in `GetCompilers()`.\n  If no configuration class is provided, an automatic configuration will load every defined `Compiler` automatically.\n* Zero or more classes extending `Microsoft.Dafny.LanguageServer.Plugins.DafnyCodeActionProvider`.\n  Only a configuration class of type `Microsoft.Dafny.LanguageServer.Plugins.PluginConfiguration` can be responsible for instantiating them and returning them in `GetDafnyCodeActionProviders()`.\n\nThe most important methods of the class `Rewriter` that plugins override are\n\n* (experimental) `PreResolve(ModuleDefinition)`: Here you can optionally modify the AST before it is resolved.\n* `PostResolve(ModuleDefinition)`: This method is repeatedly called with every resolved and type-checked module, before verification.\n  Plugins override this method typically to report additional diagnostics.\n* `PostResolve(Program)`: This method is called once after all `PostResolve(ModuleDefinition)` have been called.\n\nPlugins are typically used to report additional diagnostics such as unsupported constructs for specific compilers (through the methods `\u00c8rror(...)` and `Warning(...)` of the field `Reporter` of the class `Rewriter`)\n\nNote that all plugin errors should use the original program's expressions' token and NOT `Token.NoToken`, else no error will be displayed in the IDE.", "start_char_idx": 2, "end_char_idx": 3579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "933de487-2d92-4f4b-b211-dfad45606be3": {"__data__": {"id_": "933de487-2d92-4f4b-b211-dfad45606be3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa26ce77-ec79-4c86-a408-e9da639e9072", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9665aec4357fbff817a5478f3c2f5cd768ca6237214f17c4587a293868853cc7", "class_name": "RelatedNodeInfo"}}, "text": "15.1. Language Server plugin tutorial\n\nIn this section, we will create a plugin that enhances the functionality of the Language Server.\nWe will start by showing the steps needed to create a plugin, followed by an example implementation that demonstrates how to provide more code actions and add custom request handlers.", "start_char_idx": 2, "end_char_idx": 321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bc490c7-da84-48e6-adde-a3a33c8c517a": {"__data__": {"id_": "7bc490c7-da84-48e6-adde-a3a33c8c517a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89e38262-aee1-464e-8fa6-4d99ca3a0c43", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ecd3b8020778ebcd5dc7804b3f88264fe2e4eeca52b4d51f3cbd1ccc9ac879fb", "class_name": "RelatedNodeInfo"}}, "text": "15.1.1. Create plugin project\n\nAssuming the Dafny source code is installed in the folder `dafny/`\nstart by creating an empty folder next to it, e.g. `PluginTutorial/`\n\n```bash\nmkdir PluginTutorial\ncd PluginTutorial\n```\n\nThen, create a dotnet class project\n\n```bash\ndotnet new classlib\n```\n\nIt will create a file `Class1.cs` that you can rename\n\n```bash\nmv Class1.cs MyPlugin.cs\n```\n\nOpen the newly created file `PluginTutorial.csproj`, and add the following after ``:\n\n```xml\n  \n    \n  \n```", "start_char_idx": 2, "end_char_idx": 492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bda1eff3-4065-4064-8990-a55f6b9e5553": {"__data__": {"id_": "bda1eff3-4065-4064-8990-a55f6b9e5553", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "acba8396-316b-4ca2-b6f2-46e93167ada0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c4b5d105035abe36386a55b5d75ab63292fb4d311d3fa8f9da53cff48c5c4cf", "class_name": "RelatedNodeInfo"}}, "text": "15.1.2. Implement plugin", "start_char_idx": 2, "end_char_idx": 26, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "376ec204-a12b-4d1f-aeba-6acfb75b1376": {"__data__": {"id_": "376ec204-a12b-4d1f-aeba-6acfb75b1376", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83fab574-e052-4f72-aefd-143256f2c2df", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d0f97dea04cc014328acec6a6d43f0ac2f12dfa1c1ecd2c2d1b2fd14f197b7c0", "class_name": "RelatedNodeInfo"}}, "text": "15.1.2.1. Code actions plugin\n\nThis code action plugin will add a code action that allows you to place a dummy comment in front of the first method name, only if the selection is on the line of the method.\n\nOpen the file `MyPlugin.cs`, remove everything, and write the imports and a namespace:\n\n```csharp\nusing Microsoft.Dafny;\nusing Microsoft.Dafny.LanguageServer.Plugins;\nusing Microsoft.Boogie;\nusing Microsoft.Dafny.LanguageServer.Language;\nusing System.Linq;\nusing Range = OmniSharp.Extensions.LanguageServer.Protocol.Models.Range;\n\nnamespace MyPlugin;\n```\n\nAfter that, add a `PluginConfiguration` that will expose all the quickfixers of your plugin.\nThis class will be discovered and instantiated automatically by Dafny.\n\n```csharp\npublic class TestConfiguration : PluginConfiguration {\n  public override DafnyCodeActionProvider[] GetDafnyCodeActionProviders() {\n    return new DafnyCodeActionProvider[] { new AddCommentDafnyCodeActionProvider() };\n  }\n}\n```\n\nNote that you could also override the methods `GetRewriters()` and `GetCompilers()` for other purposes, but this is out of scope for this tutorial.\n\nThen, we need to create the quickFixer `AddCommentDafnyCodeActionProvider` itself:\n\n```csharp\npublic class AddCommentDafnyCodeActionProvider : DafnyCodeActionProvider {\n  public override IEnumerable GetDafnyCodeActions(IDafnyCodeActionInput input, Range selection) {\n    return new DafnyCodeAction[] { };\n  }\n}\n```\n\nFor now, this quick fixer returns nothing. `input` is the program state, and `selection` is where the caret is.\nWe replace the return statement with a conditional that tests whether the selection is on the first line:\n\n```csharp\n    var firstTokenRange = input.Program?.GetFirstTopLevelToken()?.GetLspRange();\n    if(firstTokenRange != null && firstTokenRange.Start.Line == selection.Start.Line) {\n      return new DafnyCodeAction[] {\n        // TODO\n      };\n    } else {\n      return new DafnyCodeAction[] { };\n    }\n```\n\nEvery quick fix consists of a title (provided immediately), and zero or more `DafnyCodeActionEdit` (computed lazily).\nA `DafnyCodeActionEdit` has a `Range` to remove and some `string` to insert instead. All `DafnyCodeActionEdit`s\nof the same `DafnyCodeAction` are applied at the same time if selected.\n\nTo create a `DafnyCodeAction`, we can either use the easy-to-use `InstantDafnyCodeAction`, which accepts a title and an array of edits:\n\n```csharp\n  return new DafnyCodeAction[] {\n    new InstantDafnyCodeAction(\"Insert comment\", new DafnyCodeActionEdit[] {\n      new DafnyCodeActionEdit(firstTokenRange.GetStartRange(), \"/*First comment*/\")\n    })\n  };\n```\n\nor we can implement our custom inherited class of `DafnyCodeAction`:\n\n```csharp\npublic class CustomDafnyCodeAction: DafnyCodeAction {\n  public Range whereToInsert;\n  \n  public CustomDafnyCodeAction(Range whereToInsert): base(\"Insert comment\") {\n    this.whereToInsert = whereToInsert;\n  }\n  public override DafnyCodeActionEdit[] GetEdits() {\n    return new DafnyCodeActionEdit[] {\n      new DafnyCodeActionEdit(whereToInsert.GetStartRange(), \"/*A comment*/\")\n    };\n  }\n}\n```\n\nIn that case, we could return:\n\n```csharp\n  return new DafnyCodeAction[] {\n    new CustomDafnyCodeAction(firstTokenRange)\n  };\n```", "start_char_idx": 2, "end_char_idx": 3225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84f3ba6c-bf70-4a39-8f0b-182f8e953456": {"__data__": {"id_": "84f3ba6c-bf70-4a39-8f0b-182f8e953456", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb4d4eee-fe7e-4102-b615-d70ed2fd0521", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c61ec8d21cb3fee07d0fb6fd2cade73e3ff573a3bfbc9f6e76f6c6e2cb5dd7e1", "class_name": "RelatedNodeInfo"}}, "text": "15.1.2.2. Request handler plugin\n\nThis request handler plugin enhances the Language Server to support a request with a `TextDocumentIdentifier` as parameter, which will return a `bool` value denoting whether the provided `DocumentUri` has any `LoopStmt`'s in it.\n\nOpen the file `MyPlugin.cs`, remove everything, and write the imports and a namespace:\n\n```csharp\nusing OmniSharp.Extensions.JsonRpc;\nusing OmniSharp.Extensions.LanguageServer.Server;\nusing OmniSharp.Extensions.LanguageServer.Protocol.Models;\nusing Microsoft.Dafny.LanguageServer.Plugins;\nusing Microsoft.Dafny.LanguageServer.Workspace;\nusing MediatR;\nusing Microsoft.Dafny;\n\nnamespace MyPlugin;\n```\n\nAfter that, add a `PluginConfiguration` that will add all the request handlers of your plugin.\nThis class will be discovered and instantiated automatically by Dafny.\n\n```csharp\npublic class TestConfiguration : PluginConfiguration {\n  public override LanguageServerOptions WithPluginHandlers(LanguageServerOptions options) {\n    return options.WithHandler();\n  }\n}\n```\n\nThen, we need to create the request handler `DummyHandler` itself:\n\n```csharp\n[Parallel]\n[Method(\"dafny/request/dummy\", Direction.ClientToServer)]\npublic record DummyParams : TextDocumentIdentifier, IRequest;\n\npublic class DummyHandler : IJsonRpcRequestHandler {\n  private readonly IProjectDatabase projects;\n  public DummyHandler(IProjectDatabase projects) {\n    this.projects = projects;\n  }\n  public async Task Handle(DummyParams request, CancellationToken cancellationToken) {\n    var state = await projects.GetParsedDocumentNormalizeUri(request);\n    if (state == null) {\n      return false;\n    }\n    return state.Program.Descendants().OfType().Any();\n  }\n}\n```\n\nFor more advanced example implementations of request handlers, look at `dafny/Source/DafnyLanguageServer/Handlers/*`.", "start_char_idx": 2, "end_char_idx": 1822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e17d2ccf-3508-48ce-b0b3-5a34bcba5efa": {"__data__": {"id_": "e17d2ccf-3508-48ce-b0b3-5a34bcba5efa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cdfe63a-7db8-42eb-94e6-80bd6a46f136", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c59b2ab6e25563958bad0465abb428b81946d40d933528b04bf735aa66ae9e94", "class_name": "RelatedNodeInfo"}}, "text": "15.1.3. Building plugin\n\nThat's it! Now, build your library while inside your folder:\n\n```bash\n> dotnet build\n```\n\nThis will create the file `PluginTutorial/bin/Debug/net6.0/PluginTutorial.dll`.\nNow, open VSCode, open Dafny settings, and enter the absolute path to this DLL in the plugins section.\nRestart VSCode, and it should work!", "start_char_idx": 2, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1986e690-9130-4452-ae18-18771a84ea69": {"__data__": {"id_": "1986e690-9130-4452-ae18-18771a84ea69", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Primary_Expressions_description.md", "file_name": "Primary_Expressions_description.md", "file_type": "text/markdown", "file_size": 465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "074c9b26-3547-40c4-9a7a-18976a57bd4b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Primary_Expressions_description.md", "file_name": "Primary_Expressions_description.md", "file_type": "text/markdown", "file_size": 465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b5be2fb2b8aae295f43c70ec8c55c48ef5ad9c84fd9bef93d72b8a6b324f0e8b", "class_name": "RelatedNodeInfo"}}, "text": "9.12. Primary Expressions (grammar) {sec-primary-expression}\n\nExamples:\n\n```dafny\ntrue\n34\nM(i,j)\nb.c.d\n[1,2,3]\n{2,3,4}\nmap[1 => 2, 3 => 4]\n(i:int,j:int)=>i+j\nif b then 4 else 5\n```\n\nAfter descending through all the binary and unary operators we arrive at\nthe primary expressions, which are explained in subsequent sections. \nA number of these can be followed by 0 or more suffixes\nto select a component of the value.", "start_char_idx": 2, "end_char_idx": 418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d66426b7-d822-4fed-950d-bced8a7c6e65": {"__data__": {"id_": "d66426b7-d822-4fed-950d-bced8a7c6e65", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Print_Statement_description.md", "file_name": "Print_Statement_description.md", "file_type": "text/markdown", "file_size": 2689, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60793980-12e4-4079-84ad-c67a89648afe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Print_Statement_description.md", "file_name": "Print_Statement_description.md", "file_type": "text/markdown", "file_size": 2689, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0921e035352999e1096ccd6afb1c896f03d167cf97569ad2037e3293b67ec16f", "class_name": "RelatedNodeInfo"}}, "text": "8.16. Print Statement (grammar) {sec-print-statement}\n\nExamples:\n\n```dafny\nprint 0, x, list, array;\n```\n\nThe `print` statement is used to print the values of a comma-separated\nlist of expressions to the console (standard-out). The generated code uses\ntarget-language-specific idioms to perform this printing.\nThe expressions may of course include strings that are used\nfor captions. There is no implicit new line added, so to add a new\nline you must include `\"\\n\"` as part of one of the expressions.\nDafny automatically creates implementations of methods that convert values to strings\nfor all Dafny data types. For example,\n\n\n```dafny\ndatatype Tree = Empty | Node(left: Tree, data: int, right: Tree)\nmethod Main()\n{\n  var x : Tree := Node(Node(Empty, 1, Empty), 2, Empty);\n  print \"x=\", x, \"\\n\";\n}\n```\n\nproduces this output:\n\n```text\nx=Tree.Node(Tree.Node(Tree.Empty, 1, Tree.Empty), 2, Tree.Empty)\n```\n\nNote that Dafny does not have method overriding and there is no mechanism to\noverride the built-in value->string conversion.  Nor is there a way to\nexplicitly invoke this conversion.\nOne can always write an explicit function to convert a data value to a string\nand then call it explicitly in a `print` statement or elsewhere.\n\nBy default, Dafny does not keep track of print effects, but this can be changed\nusing the `--track-print-effects` command line flag. `print` statements are allowed\nonly in non-ghost contexts and not in expressions, with one exception.\nThe exception is that a function-by-method may contain `print` statements,\nwhose effect may be observed as part of the run-time evaluation of such functions\n(unless `--track-print-effects` is enabled).\n\nThe verifier checks that each expression is well-defined, but otherwise \nignores the `print` statement.\n\n\n\n**Note:** `print` writes to standard output.  To improve compatibility with\nnative code and external libraries, the process of encoding Dafny strings passed\nto `print` into standard-output byte strings is left to the runtime of the\nlanguage that the Dafny code is compiled to (some language runtimes use UTF-8 in\nall cases; others obey the current locale or console encoding).\n\nIn most cases, the standard-output encoding can be set before running the\ncompiled program using language-specific flags or environment variables\n(e.g. `-Dfile.encoding=` for Java).  This is in fact how `dafny run` operates:\nit uses language-specific flags and variables to enforce UTF-8 output regardless\nof the target language (but note that the C++ and Go backends currently have\nlimited support for UTF-16 surrogates).", "start_char_idx": 2, "end_char_idx": 2579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b22bb1ef-b3d8-4131-8a31-e7e764edc533": {"__data__": {"id_": "b22bb1ef-b3d8-4131-8a31-e7e764edc533", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16fde871-72cd-423a-8ff7-8595668c2875", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ba6ac55793748d744ce9aeb8c68e81c39cbfebea81c595ce4e2fa99ff220913e", "class_name": "RelatedNodeInfo"}}, "text": "3. Programs (grammar) {sec-program}\n\nAt the top level, a Dafny program (stored as files with extension `.dfy`)\nis a set of declarations. The declarations introduce (module-level)\nconstants, methods, functions, lemmas, types (classes, traits, inductive and\ncoinductive datatypes, newtypes, type synonyms, abstract types, and\niterators) and modules, where the order of introduction is irrelevant. \nSome types, notably classes, also may contain a set of declarations, introducing fields, methods,\nand functions.\n\nWhen asked to compile a program, Dafny looks for the existence of a\n`Main()` method. If a legal `Main()` method is found, the compiler will emit\nan executable appropriate to the target language; otherwise it will emit\na library or individual files.\nThe conditions for a legal `Main()` method are described in the User Guide\n(Section 3.4).\nIf there is more than one `Main()`, Dafny will emit an error message.\n\nAn invocation of Dafny may specify a number of source files.\nEach Dafny file follows the grammar of the ``Dafny`` non-terminal.\n\nA file consists of \n- a sequence of optional _include_ directives, followed by \n- top level declarations, followed by \n- the end of the file.", "start_char_idx": 2, "end_char_idx": 1192, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f21db892-405a-453f-abf1-82569ba90d36": {"__data__": {"id_": "f21db892-405a-453f-abf1-82569ba90d36", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60de412b-1f15-4dfa-9743-6c7d9b1a8961", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ce11da6b1a1651cb774e2d4bf80f85719a2360f880976d60bc0fb01c4a1df50", "class_name": "RelatedNodeInfo"}}, "text": "3.1. Include Directives (grammar) {sec-include-directive}\n\nExamples:\n\n```dafny\ninclude \"MyProgram.dfy\"\ninclude @\"/home/me/MyFile.dfy\"\n```\n\nInclude directives have the form ``\"include\" stringToken`` where\nthe string token is either a normal string token or a\nverbatim string token. The ``stringToken`` is interpreted as the name of\na file that will be included in the Dafny source. These included\nfiles also obey the ``Dafny`` grammar. Dafny parses and processes the\ntransitive closure of the original source files and all the included files,\nbut will not invoke the verifier on the included files unless they have been listed\nexplicitly on the command line or the `--verify-included-files` option is\nspecified.\n\nThe file name may be a path using the customary `/`, `.`, and `..` punctuation.\nThe interpretation of the name (e.g., case-sensitivity) will depend on the\nunderlying operating system. A path not beginning with `/` is looked up in\nthe underlying file system relative to the \n_location of the file in which the include directive is stated_. \nPaths beginning with a device\ndesignator (e.g., `C:`) are only permitted on Windows systems.\nBetter style advocates using relative paths in include directives so that\ngroups of files may be moved as a whole to a new location.\n\nPaths of files on the command-line or named in `--library` options are \nrelative the the current working directory.", "start_char_idx": 2, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ff76649-bf3f-46d0-adc8-eaaf6689390a": {"__data__": {"id_": "4ff76649-bf3f-46d0-adc8-eaaf6689390a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "212ef033-dcb9-4d36-af74-087d2ae2f785", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "52f3582c0494ca98f2aad5ebef35826ac90965a3a345a4da5a71dae6678577a0", "class_name": "RelatedNodeInfo"}}, "text": "3.2. Top Level Declarations (grammar) {sec-top-level-declaration}\n\nExamples:\n\n```dafny\nabstract module M { }\ntrait R { }\nclass C { }\ndatatype D = A | B\nnewtype pos = i: int | i >= 0\ntype T = i: int | 0 <= i < 100\nmethod m() {}\nfunction f(): int\nconst c: bool\n```\n\nTop-level declarations may appear either at the top level of a Dafny file,\nor within a (sub)module declaration. A top-level declaration is one of\nvarious kinds of declarations described later. Top-level declarations are\nimplicitly members of a default (unnamed) top-level module.\n\nDeclarations within a module or at the top-level all begin with reserved keywords and do not end with semicolons.\n\nThese declarations are one of these kinds:\n- methods and functions, encapsulating computations or actions\n- const declarations, which are names (of a given type) initialized to an unchanging value;\n  declarations of variables and mutable fields are not allowed at the module level\n- type declarations of various kinds (Section 5 and the following sections)\n\nMethods, functions and const declarations are placed in an implicit class declaration\nthat is in the top-level implicit module. These declarations are all implicitly\n`static` (and may not be declared explicitly static).", "start_char_idx": 2, "end_char_idx": 1239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8f1cc4c-ae37-46bc-9f7f-48f4b025ab59": {"__data__": {"id_": "e8f1cc4c-ae37-46bc-9f7f-48f4b025ab59", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b205a097-5797-48f8-a796-0fd6d4cf0295", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "648f985eb684999e1ae011ca65872284a2b04cd7fcddc636dbb44038061b95f0", "class_name": "RelatedNodeInfo"}}, "text": "3.3. Declaration Modifiers (grammar) {sec-declaration-modifier}\n\nExamples:\n\n```dafny\nabstract module M {\n  class C {\n    static method m() {}\n  }\n}\nghost opaque const c : int\n```\n\nTop level declarations may be preceded by zero or more declaration\nmodifiers. Not all of these are allowed in all contexts.\n\nThe `abstract` modifier may only be used for module declarations.\nAn abstract module can leave some entities underspecified.\nAbstract modules are not compiled.\n\nThe `ghost` modifier is used to mark entities as being used for\nspecification only, not for compilation to code.\n\nThe `opaque` modifier may be used on const declarations and functions.\n\nThe `static` modifier is used for class members that\nare associated with the class as a whole rather than with\nan instance of the class. This modifier may not be used with\ndeclarations that are implicitly static, as are members of the \ntop-level, unnamed implicit class.\n\nThe following table shows modifiers that are available\nfor each of the kinds of declaration. In the table\nwe use already-ghost (already-non-ghost) to denote that the item is not\nallowed to have the ghost modifier because it is already\nimplicitly ghost (non-ghost).\n\n\n Declaration              | allowed modifiers\n--------------------------|---------------------------------------\n module                   | abstract\n class                    | -\n trait                    | -\n datatype or codatatype   | -\n field (const)            | ghost opaque\n newtype                  | -\n synonym types            | -\n iterators                | -\n method                   | ghost static\n lemma                    | already-ghost static\n least lemma              | already-ghost static\n greatest lemma           | already-ghost static\n constructor              | ghost\n function                 | ghost static opaque             (Dafny 4)\n function method          | already-non-ghost static opaque (Dafny 3)\n function (non-method)    | already-ghost static opaque     (Dafny 3)\n predicate                | ghost static opaque             (Dafny 4)\n predicate method         | already-non-ghost static opaque (Dafny 3)\n predicate (non-method)   | already-ghost static opaque     (Dafny 3)\n least predicate          | already-ghost static opaque\n greatest predicate       | already-ghost static opaque", "start_char_idx": 2, "end_char_idx": 2317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07fd72a2-40e2-48c5-bc4f-6ffc92acf605": {"__data__": {"id_": "07fd72a2-40e2-48c5-bc4f-6ffc92acf605", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6539970f-6ae2-4bc0-8a76-140f89412b07", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cd4489d0ed86381f8e9497fd36da2cbf4ce45bd8d7f3013b1c76b93f827c5d11", "class_name": "RelatedNodeInfo"}}, "text": "3.4. Executable programs {sec-user-guide-main}\n\nDafny programs have an important emphasis on verification, but the programs \nmay also be executable.\n\nTo be executable, the program must have exactly one `Main` method and that \nmethod must be a legal main entry point.\n\n* The program is searched for a method with the attribute `{:main}`.\nIf exactly one is found, that method is used as the entry point; if more\nthan one method has the `{:main}` attribute, an error message is issued.\n* Otherwise, the program is searched for a method with the name `Main`.\nIf more than one is found an error message is issued.\n\nAny abstract modules are not searched for candidate entry points,\nbut otherwise the entry point may be in any module or type. In addition,\nan entry-point candidate must satisfy the following conditions:\n\n* The method has no type parameters and either has no parameters or one non-ghost parameter of type `seq`.\n* The method has no non-ghost out-parameters.\n* The method is not a ghost method.\n* The method has no requires or modifies clauses, unless it is marked `{:main}`.\n* If the method is an instance (that is, non-static) method and the\n  enclosing type is a class,\n  then that class must not declare any constructor.\n  In this case, the runtime system will\n  allocate an object of the enclosing class and will invoke\n  the entry-point method on it.\n* If the method is an instance (that is, non-static) method and the\n  enclosing type is not a class,\n  then the enclosing type must, when instantiated with auto-initializing\n  type parameters, be an auto-initializing type.\n  In this case, the runtime system will\n  invoke the entry-point method on a value of the enclosing type.\n\nNote, however, that the following are allowed:\n\n* The method is allowed to have `ensures` clauses\n* The method is allowed to have `decreases` clauses, including a\n  `decreases *`. (If `Main()` has a `decreases *`, then its execution may\n  go on forever, but in the absence of a `decreases *` on `Main()`, `dafny`\n  will have verified that the entire execution will eventually\n  terminate.)\n\nIf no legal candidate entry point is identified, `dafny` will still produce executable output files, but\nthey will need to be linked with some other code in the target language that\nprovides a `main` entry point.\n\nIf the `Main` method takes an argument (of type `seq`), the value of that input argument is the sequence\nof command-line arguments, with the first entry of the sequence (at index 0) being a system-determined name for the \nexecutable being run.\n\nThe exit code of the program, when executed, is not yet specified.", "start_char_idx": 2, "end_char_idx": 2613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8f6c8aa-d74f-4ea9-a3d0-5097944fdbf5": {"__data__": {"id_": "a8f6c8aa-d74f-4ea9-a3d0-5097944fdbf5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c67f1fda-b273-46a6-beb6-874bced4e0ce", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f742a8567b55fed38f382197c5b74b0c9cda3f165a8f122600aafc679819cd3f", "class_name": "RelatedNodeInfo"}}, "text": "3. Programs {sec-program}\n\nAt the top level, a Dafny program (stored as files with extension `.dfy`) is a set of declarations. The declarations introduce (module-level) constants, methods, functions, lemmas, types (classes, traits, inductive and coinductive datatypes, newtypes, type synonyms, abstract types, and iterators) and modules, where the order of introduction is irrelevant.\n\nWhen asked to compile a program, Dafny looks for the existence of a `Main()` method. If a legal `Main()` method is found, the compiler will emit an executable appropriate to the target language; otherwise, it will emit a library or individual files. The conditions for a legal `Main()` method are described in the User Guide (Section 3.4). If there is more than one `Main()`, Dafny will emit an error message.\n\nA file consists of:\n- a sequence of optional _include_ directives, followed by\n- top-level declarations, followed by\n- the end of the file.", "start_char_idx": 2, "end_char_idx": 938, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6d505e8-8b1e-43c5-8883-0ac530f0d365": {"__data__": {"id_": "e6d505e8-8b1e-43c5-8883-0ac530f0d365", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc8b8e0f-a43a-44a5-93a8-c02a03954ec7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a1a4b3a36fa8d21835fa2eb75e767e4533061ec069affc11917826f058ef4868", "class_name": "RelatedNodeInfo"}}, "text": "3.1. Include Directives {sec-include-directive}\n\nExamples:\n```dafny\ninclude \"MyProgram.dfy\"\ninclude @\"/home/me/MyFile.dfy\"\n```\n\nInclude directives have the form `\"include\" stringToken` where the string token is either a normal string token or a verbatim string token. The `stringToken` is interpreted as the name of a file that will be included in the Dafny source. These included files also obey the `Dafny` grammar. Dafny parses and processes the transitive closure of the original source files and all the included files, but will not invoke the verifier on the included files unless they have been listed explicitly on the command line or the `--verify-included-files` option is specified.\n\nThe file name may be a path using the customary `/`, `.`, and `..` punctuation. The interpretation of the name (e.g., case-sensitivity) will depend on the underlying operating system. A path not beginning with `/` is looked up in the underlying file system relative to the _location of the file in which the include directive is stated_. Paths beginning with a device designator (e.g., `C:`) are only permitted on Windows systems. Better style advocates using relative paths in include directives so that groups of files may be moved as a whole to a new location.\n\nPaths of files on the command-line or named in `--library` options are relative to the current working directory.", "start_char_idx": 2, "end_char_idx": 1375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7b0c96c-bacb-4301-b8d9-8a54306bb382": {"__data__": {"id_": "f7b0c96c-bacb-4301-b8d9-8a54306bb382", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "894b3fad-8070-4694-beca-f19e62c79417", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "15b54716990e2048d5e367e8e67647310fd80fa61ea5bb27cd2a60b48eafccd4", "class_name": "RelatedNodeInfo"}}, "text": "3.2. Top Level Declarations {sec-top-level-declaration}\n\nExamples:\n```dafny\nabstract module M { }\ntrait R { }\nclass C { }\ndatatype D = A | B\nnewtype pos = i: int | i >= 0\ntype T = i: int | 0 <= i < 100\nmethod m() {}\nfunction f(): int\nconst c: bool\n```\n\nTop-level declarations may appear either at the top level of a Dafny file or within a (sub)module declaration. A top-level declaration is one of various kinds of declarations described later. Top-level declarations are implicitly members of a default (unnamed) top-level module.\n\nDeclarations within a module or at the top-level all begin with reserved keywords and do not end with semicolons.\n\nThese declarations are one of these kinds:\n- methods and functions, encapsulating computations or actions\n- const declarations, which are names (of a given type) initialized to an unchanging value; declarations of variables and mutable fields are not allowed at the module level\n- type declarations of various kinds (Section 5 and the following sections)\n\nMethods, functions, and const declarations are placed in an implicit class declaration that is in the top-level implicit module. These declarations are all implicitly `static` (and may not be declared explicitly static).", "start_char_idx": 2, "end_char_idx": 1226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de8abcc0-4bd3-49c1-b938-c7edcd535fdd": {"__data__": {"id_": "de8abcc0-4bd3-49c1-b938-c7edcd535fdd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83b7bc1b-13f0-4214-9b29-840af1af7e91", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "24dc80b418b1d4de0ad74d4bb807fd529a11a8dad6dacfcc705800783b1ebb08", "class_name": "RelatedNodeInfo"}}, "text": "3.3. Declaration Modifiers {sec-declaration-modifier}\n\nExamples:\n```dafny\nabstract module M {\n  class C {\n    static method m() {}\n  }\n}\nghost opaque const c : int\n```\n\nTop-level declarations may be preceded by zero or more declaration modifiers. Not all of these are allowed in all contexts.\n\nThe `abstract` modifier may only be used for module declarations. An abstract module can leave some entities underspecified. Abstract modules are not compiled.\n\nThe `ghost` modifier is used to mark entities as being used for specification only, not for compilation to code.\n\nThe `opaque` modifier may be used on const declarations and functions.\n\nThe `static` modifier is used for class members that are associated with the class as a whole rather than with an instance of the class. This modifier may not be used with declarations that are implicitly static, as are members of the top-level, unnamed implicit class.", "start_char_idx": 2, "end_char_idx": 912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e489598-c08a-4488-bd47-9ddc3baa9648": {"__data__": {"id_": "7e489598-c08a-4488-bd47-9ddc3baa9648", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a49c0a59-1a01-419b-8a1c-74f43daa0713", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dc79b7050f32c7eadd13346b7442658f90d2b866d8b8bb0dc33bfe56190d8f46", "class_name": "RelatedNodeInfo"}}, "text": "3.4. Executable Programs {sec-user-guide-main}\n\nDafny programs have an important emphasis on verification, but the programs may also be executable.\n\nTo be executable, the program must have exactly one `Main` method and that method must be a legal main entry point.\n\n* The program is searched for a method with the attribute `{:main}`. If exactly one is found, that method is used as the entry point; if more than one method has the `{:main}` attribute, an error message is issued.\n* Otherwise, the program is searched for a method with the name `Main`. If more than one is found, an error message is issued.\n\nAny abstract modules are not searched for candidate entry points, but otherwise, the entry point may be in any module or type. In addition, an entry-point candidate must satisfy the following conditions:\n\n* The method has no type parameters and either has no parameters or one non-ghost parameter of type `seq`.\n* The method has no non-ghost out-parameters.\n* The method is not a ghost method.\n* The method has no requires or modifies clauses, unless it is marked `{:main}`.\n* If the method is an instance (that is, non-static) method and the enclosing type is a class, then that class must not declare any constructor. In this case, the runtime system will allocate an object of the enclosing class and will invoke the entry-point method on it.\n* If the method is an instance (that is, non-static) method and the enclosing type is not a class, then the enclosing type must, when instantiated with auto-initializing type parameters, be an auto-initializing type. In this case, the runtime system will invoke the entry-point method on a value of the enclosing type.\n\nNote, however, that the following are allowed:\n\n* The method is allowed to have `ensures` clauses.\n* The method is allowed to have `decreases` clauses, including a `decreases *`. (If `Main()` has a `decreases *`, then its execution may go on forever, but in the absence of a `decreases *` on `Main()`, `dafny` will have verified that the entire execution will eventually terminate.)\n\nIf no legal candidate entry point is identified, `dafny` will still produce executable output files, but they will need to be linked with some other code in the target language that provides a `main` entry point.\n\nIf the `Main` method takes an argument (of type `seq`), the value of that input argument is the sequence of command-line arguments, with the first entry of the sequence (at index 0) being a system-determined name for the executable being run.\n\nThe exit code of the program, when executed, is not yet specified.", "start_char_idx": 2, "end_char_idx": 2585, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53a59510-e68b-4007-84b5-25337a01066d": {"__data__": {"id_": "53a59510-e68b-4007-84b5-25337a01066d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce94e831-4971-4f31-aa06-37d95477a07c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "98c561d0fea9b644d81ef833ab9a91d1b8b57a50ba9078a35c8f35a44e767826", "class_name": "RelatedNodeInfo"}}, "text": "3. Programs Grammar {g-program}", "start_char_idx": 2, "end_char_idx": 33, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bd94d69-c600-422c-a3b0-a742e984212e": {"__data__": {"id_": "0bd94d69-c600-422c-a3b0-a742e984212e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc3b14fa-4ce1-414c-9469-bf97bf6b5c3a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9ecdd80447e1204c72a81c4ccb00f0b620ad7fa9c8d058bb2de60544e8f2b398", "class_name": "RelatedNodeInfo"}}, "text": "3.1. Include Directives Grammar {g-include-directive}\n\n```\ninclude-directive = \"include\" stringToken\n```", "start_char_idx": 2, "end_char_idx": 106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84f7dd6e-0d1e-4d34-be9b-20d737f80a2b": {"__data__": {"id_": "84f7dd6e-0d1e-4d34-be9b-20d737f80a2b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "570f5145-a459-40b3-8ec4-4d99ed170523", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6761976f4b99a0a676cf236901275cde9babff312818a2f84524f95576a2c834", "class_name": "RelatedNodeInfo"}}, "text": "3.2. Top Level Declarations Grammar {g-top-level-declaration}\n\n```\ntop-level-declaration =\n    module-declaration\n  | class-declaration\n  | trait-declaration\n  | datatype-declaration\n  | newtype-declaration\n  | type-synonym-declaration\n  | method-declaration\n  | function-declaration\n  | const-declaration\n```", "start_char_idx": 2, "end_char_idx": 311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ce41c1d-0133-4cd6-98e1-06e20e752621": {"__data__": {"id_": "3ce41c1d-0133-4cd6-98e1-06e20e752621", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a2fa6b7-79bd-4d94-899b-a821e31a4067", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "88a2d045de6edc0fd495b00c23c56d9940b5ec273a5030554cb4ee07e444664c", "class_name": "RelatedNodeInfo"}}, "text": "3.3. Declaration Modifiers Grammar {g-declaration-modifier}\n\n```\ndeclaration-modifier =\n    \"abstract\"\n  | \"ghost\"\n  | \"opaque\"\n  | \"static\"\n```", "start_char_idx": 2, "end_char_idx": 146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2192e1b-87c5-4be7-885d-01328d2bdbd3": {"__data__": {"id_": "f2192e1b-87c5-4be7-885d-01328d2bdbd3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7cb4ddf-34da-4cd1-9d24-1576976825eb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0f765c2f4d057d2d804a573a3207ae241fe420b910f0dd22798780a8aaf13b52", "class_name": "RelatedNodeInfo"}}, "text": "3.4. Executable Programs Grammar {g-executable-programs}\n\n```\nmain-method =\n    method-declaration\n    [ \"{:main}\" ]\n    [ \"Main\" ]\n    [ no-type-parameters ]\n    [ no-parameters | one-non-ghost-parameter ]\n    [ no-non-ghost-out-parameters ]\n    [ not-ghost-method ]\n    [ no-requires-or-modifies-clauses | marked-main ]\n    [ instance-method-conditions ]\n    [ ensures-clauses ]\n    [ decreases-clauses ]\n```", "start_char_idx": 2, "end_char_idx": 412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46e06310-1280-4ff3-be64-56052a015025": {"__data__": {"id_": "46e06310-1280-4ff3-be64-56052a015025", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b88a79c9-4e3d-4bbf-b921-46a1147621ca", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d4a0e3d1ab455f48c0737af67b00e72fae28d38d232dd6a5e819b2ab1834ed1b", "class_name": "RelatedNodeInfo"}}, "text": "This document describes information needed to maintain the Dafny Reference\nManual, including information about syntax coloring.\n\nNote that the reference manual is written in github markdown,\nwhich is rendered by github servers for web browsing\nand by pandoc to create a Latex-style pdf.", "start_char_idx": 1, "end_char_idx": 287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f895bb8-1848-42bd-ab38-71890c44df16": {"__data__": {"id_": "9f895bb8-1848-42bd-ab38-71890c44df16", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dda32beb-6186-4a50-8428-f3dc415c9e81", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b5088137cd536af81158652f4008321a3a69fee16fddf056868c92378b8b252c", "class_name": "RelatedNodeInfo"}}, "text": "The Dafny Reference Manual sources\n\nThis folder holds the source for the Dafny Reference Manual. This is the second iteration of the DRM -- the first was based on madoko.\nInstead this source is GitHub markdown augmented by MathJax LaTeX math notation.The markdown source is rendered by github pages and can be transformed by\npandoc into pdf, via LaTeX (see the Makefile in this folder).\n\nSome care must be taken to enable both modes of rendering.\n* Inline math is bracketed by $...$.\n* Displayed (centered) math is enclosed in $$...$$ and similarly for centered non-math text.\n* The abstract is duplicated, to permit it to be part of the pdf title page.\n* The title page itself is written in header.tex, in LaTeX.\n\nIn addition, some textual search and replace operations are implemented\n(see the Makefile) to perform section numbering uniformly and to adjust a few\nother aspects that are dissimilar between the pdf and online versions.\n\nGitHub pages are rendered (converted from markdown to html) using Jekyll.\nThe result is a single, long html page.\nThere are a number of configuration files for Jekyll in the `docs` folder and\nsubfolders. In order to render files locally you must\n* have `ruby`, `bundler` and `jekyll` installed on your machine\n* set the working directly (`cd`) to the `docs` folder (Windows or Ruby 3.0 users, see below for some tweaks)\n* run the jekyll server: `bundle exec jekyll server`\n* open a browser on the page http://localhost:4000 or directly to http://localhost:4000/DafnyRef/DafnyRef\n* the server rerenders when files are changed -- but not always quite completely. Sometimes one must kill the server process, delete all the files in the _site folder, and restart the server.\n\nIn order to convert markdown to pdf, you must be able to execute the Makefile, which requires installing pandoc and LaTeX, and being on a Linux-like platform.\n\nThe Makefile does some preprocessing of the markdown files: it removes some\nmarkdown lines that are not interpreted by pandoc and adds some additional\ndirectives, such as page breaks.\n\nTo re-generate `Options.txt`, run `make options` in the `DafnyRef` folder.", "start_char_idx": 2, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd32d459-a0c3-4a1b-8eaf-812710cf0dfa": {"__data__": {"id_": "bd32d459-a0c3-4a1b-8eaf-812710cf0dfa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a1df297-0170-4078-8ca9-b9413f5795a9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "21a6c7d04d9fd89611199c3721d648e972dd1d9aa349691047eb948648131b7b", "class_name": "RelatedNodeInfo"}}, "text": "Windows users or Ruby 3.0 users\n\nYou might want to apply this diff to the file `../GemFile`\n```diff\ngem \"kramdown\", \">= 2.3.1\"\n+gem \"webrick\"\n```\n\nand then run `bundle install`", "start_char_idx": 2, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd1c10e3-b0ea-43a7-b6e1-268e15a46c84": {"__data__": {"id_": "fd1c10e3-b0ea-43a7-b6e1-268e15a46c84", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da175680-0026-4e71-8419-56d8794aec1f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0422d4923de8277f85165fbb1489b3276c2e397079257a895bbd73089e79d084", "class_name": "RelatedNodeInfo"}}, "text": "Syntax Coloring\n\nTools providing syntax coloring for programming language source typically\nrequire a PL-specific regular-expression based definition of the language\nsyntax. Unfortunately there are many such tools.\n\nIn the RM markdown sources, text bracketed by ` ```dafny ` and ` ``` ` will have\nsyntax coloring for dafny applied. Text bracketed by\n` ```grammar ` and ` ``` ` has syntax coloring applied per the grammar\ndefinition file.", "start_char_idx": 2, "end_char_idx": 438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c92a5e4-5302-478d-a263-044180c2dce2": {"__data__": {"id_": "5c92a5e4-5302-478d-a263-044180c2dce2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eaf3cfaa-336a-44a7-a7e3-31ea26f5fef2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97c95cb7e96e6bced7a70adae33840991b7d2cf003181ef383775f9005353b63", "class_name": "RelatedNodeInfo"}}, "text": "On-line RM through github\nGithub uses rouge, via Jekyll. The syntax definition is a ruby-based file\nmaintained in the rouge github repo.\nTo modify the definition, follow\nthese\ndirections after [setting\nup](https://rouge-ruby.github.io/docs/file.DevEnvironment.html) a\ndevelopment environment.\nThe file itself, `dafny.rb` is in Ruby. Details of the Ruby Regular\nExpression language can be found many places online, such as\nhere.\n\nWithin the github repo for rouge, the syntax definition file is\n`rouge/lib/rouge/lexers/dafny.rb`. You also need to maintain a\ntest file, in `rouge/lib/rouge/demos/dafny` and a demonstration and\ndevelopment file in `rouge/spec/visual/samples/dafny`.\nThe development instructions tell how to view this latter file as you\ndebug or extend the definition file.\n\nOnce you create a PR that is merged, github automatically (after a bit of a\ntime lag) uses the file to render code snippets.\n[The rouge maintenance team must accept the PR -- it seems they are not\nvery active.]\n\nThe mapping from tokens to actual colors is specified separately from the\nsyntax definition. The on-line rendering uses the Github default\n(which, at last investigation, was not changeable).\n\nAlthough the RM sources also contain grammar blocks, there is at present no\nrouge definition for these blocks.", "start_char_idx": 2, "end_char_idx": 1303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f629801-e8a4-4da1-888e-584d32af2251": {"__data__": {"id_": "8f629801-e8a4-4da1-888e-584d32af2251", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46d17309-fb24-4414-9036-cd3701e140f6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ccb2d50fbdc9b05e23ed2daf48be6f1fafc71dde9dc7fef68dffb1707cfc89d1", "class_name": "RelatedNodeInfo"}}, "text": "Latex pdf\n\nThe pdf version of the RM is created by `pandoc`, which uses the\nKDE tool. pandoc references (via the command-line\nin the Makefile) local definition files that are in the Dafny github\nrepository, at `dafny/docs/KDESyntaxDefinition/`. Though these definition\nfiles could be submitted to the KDE repo for public use, at present they\nare only local.\n\nOne can test the syntax definition file by running the Makefile to create the\npdf. One of the last pages of the RM is a test page for syntax coloring.\n\nThe coloring style (mapping of tokens to colors) is set in the `dafny.theme` file.\nNote that there is a definition and theme for the grammar blocks in the pdf\nfile as well.", "start_char_idx": 2, "end_char_idx": 685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c672559-7228-43e9-a984-524f82316751": {"__data__": {"id_": "4c672559-7228-43e9-a984-524f82316751", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80774ca2-3b2c-4531-ac74-b9ffe9ac9281", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "970d8941c9c43553bef2ee1b4894329ab7dac9c69318c90a912ad1d2bb1d23d2", "class_name": "RelatedNodeInfo"}}, "text": "LSP\n\nMany IDEs interact with Language Servers (via LSP). Possibly an LSP protocol\nwill be generated in the future.", "start_char_idx": 2, "end_char_idx": 116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef78e1f8-6287-4fe6-b0d3-bf374dcab72e": {"__data__": {"id_": "ef78e1f8-6287-4fe6-b0d3-bf374dcab72e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92c72e6d-1575-424d-a6f7-2ed917db56c4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a54ae0fb759ecad29e75785f7488a2a543d440c01a4493199f2de34e682f10ff", "class_name": "RelatedNodeInfo"}}, "text": "10. Refinement {sec-module-refinement}\n\nRefinement is the process of replacing something somewhat abstract with something somewhat more concrete.\nFor example, in one module one might declare a type name, with no definition,\nsuch as `type T`, and then in a refining module, provide a definition.\nOne could prove general properties about the contents of an (abstract) module,\nand use that abstract module, and then later provide a more concrete implementation without having to redo all of the proofs.\n\nDafny supports _module refinement_, where one module is created from another,\nand in that process the new module may be made more concrete than the previous.\nMore precisely, refinement takes the following form in Dafny. One module\ndeclares some program entities. A second module _refines_ the first by\ndeclaring how to augment or replace (some of) those program entities.\nThe first module is called the _refinement parent_; the second is the\n_refining_ module; the result of combining the two (the original declarations\nand the augmentation directives) is the _assembled_ module or _refinement result_.\n\nSyntactically, the refinement parent is a normal module declaration.\nThe refining module declares which module is its refinement parent with the\n`refines` clause:\n\n```dafny\nmodule P { // refinement parent\n}\nmodule M refines P { // refining module\n}\n```\n\nThe refinement result is created as follows.\n\n0) The refinement result is a module within the same enclosing module as the\nrefining module, has the same name, and in fact replaces the refining module in their shared scope.\n\n1) All the declarations (including import and export declarations) of the parent are copied into the refinement result.\nThese declarations are _not_ re-resolved. That is, the assignment of\ndeclarations and types to syntactic names is not changed. The refinement\nresult may exist in a different enclosing module and with a different set of\nimports than the refinement parent, so that if names were reresolved, the\nresult might be different (and possibly not semantically valid).\nThis is why Dafny does not re-resolve the names in their new context.\n\n2) All the declarations of the refining module that have different names\nthan the declarations in the refinement parent are also copied into the\nrefinement result.\nHowever, because the refining module is just a set of augmentation\ndirectives and may refer to names copied from the refinement parent,\nresolution of names and types of the declarations copied in this step is\nperformed in the context of the full refinement result.\n\n3) Where declarations in the parent and refinement module have the same name,\nthe second refines the first and the combination, a refined declaration, is\nthe result placed in the refinement result module, to the exclusion of the\ndeclarations with the same name from the parent and refinement modules.\n\nThe way the refinement result declarations are assembled depends on the kind of declaration;\nthe rules are described in subsections below.\n\nSo that it is clear that refinement is taking place, refining declarations\nhave some syntactic indicator that they are refining some parent declaration.\nTypically this is the presence of a `...` token.", "start_char_idx": 2, "end_char_idx": 3207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae405b8c-ac0e-405d-b6dd-cc26dcbcb3ea": {"__data__": {"id_": "ae405b8c-ac0e-405d-b6dd-cc26dcbcb3ea", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52fbb5cf-2405-4fdf-8dd6-57c246578c1a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4c88ec3155df0b5cf08ca4d6a18ff27f3cb3d9579dcec7c215c8c5bda245fde3", "class_name": "RelatedNodeInfo"}}, "text": "10.1. Export set declarations\n\nA refining export set declaration begins with the syntax\n````grammar\n\"export\" Ident ellipsis\n````\nbut otherwise contains the same `provides`, `reveals` and `extends` sections,\nwith the ellipsis indicating that it is a refining declaration.\n\nThe result declaration has the same name as the two input declarations and the unions of names from each of the `provides`, `reveals`, and `extends`\nsections, respectively.\n\nAn unnamed export set declaration from the parent is copied into the result\nmodule with the name of the parent module. The result module has a default\nexport set according to the general rules for export sets, after all of\nthe result module's export set declarations have been assembled.", "start_char_idx": 2, "end_char_idx": 735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4d45a52-ddef-4688-87ad-e0a249481aac": {"__data__": {"id_": "e4d45a52-ddef-4688-87ad-e0a249481aac", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74067945-faf5-46aa-b14d-8188fac4b78e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fd0a1358ab8462726d3fed9fd6d9124d8e8ac73f92de55fa16571fc8bff4ea29", "class_name": "RelatedNodeInfo"}}, "text": "10.2. Import declarations\n\nAliasing import declarations are not refined. The result module contains the union\nof the import declarations from the two input modules.\nThere must be no names in common among them.\n\nAbstract import declarations (declared with `:` instead of `=`, Section 4.6) are refined. The refinement parent contains the\nabstract import and the refining module contains a regular aliasing\nimport for the same name. Dafny checks that the refining import _adheres_ to\nthe abstract import.", "start_char_idx": 2, "end_char_idx": 503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72a1b181-421c-4172-8f6b-1c3e2ec19c21": {"__data__": {"id_": "72a1b181-421c-4172-8f6b-1c3e2ec19c21", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "795dc6d3-e1e4-4846-9906-3cd1acbae209", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "90743a53b3a1f0e28ca0c1a53d78d1e098b98d8634e1783f6132da4188d44c7d", "class_name": "RelatedNodeInfo"}}, "text": "10.3. Sub-module declarations\n\nWith respect to refinement, a nested module behaves just like a top-level module. It may be declared abstract and it may be declared to `refine` some refinement parent. If the nested module is not refining anything and not being refined, then it is copied into the refinement result like any other declaration.\n\nHere is some example code:\n\n```dafny\nabstract module P {\n  module A { const i := 5 }\n  abstract module B { type T }\n}\n\nmodule X refines P {\n  module B' refines P.B { type T = int }\n  module C { const k := 6}\n}\n\nmodule M {\n  import X\n  method m() {\n    var z: X.B'.T := X.A.i + X.C.k;\n  }\n}\n```\nThe refinement result of `P` and `X` contains nested modules `A`, `B'`, and `C`. It is this refinement result that is imported into `M`.\nHence the names `X.B'.T`, `X.A.i` and `X.C.k` are all valid.", "start_char_idx": 2, "end_char_idx": 836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad03f177-53cb-409f-b634-0ec1ef471605": {"__data__": {"id_": "ad03f177-53cb-409f-b634-0ec1ef471605", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b7114f4-1b2c-4bda-968b-17e026c4fd3e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7be1eed0763a8b5dcc6b9a415c748df3df76bc0ce8f12452af8ad86d12647ee1", "class_name": "RelatedNodeInfo"}}, "text": "10.4. Const declarations\n\nConst declarations can be refined as in the following example.\n\n\n```dafny\nmodule A {\n  const ToDefine: int\n  const ToDefineWithoutType: int\n  const ToGhost: int := 1\n}\n\nmodule B refines A {\n  const ToDefine: int := 2\n  const ToDefineWithoutType ... := 3\n  ghost const ToGhost: int\n  const NewConst: int\n}\n```\n\nFormally, a child `const` declaration may refine a `const` declaration\nfrom a parent module if\n\n* the parent has no initialization,\n* the child has the same type as the parent, and\n* one or both of the following holds:\n   * the child has an initializing expression\n   * the child is declared `ghost` and the parent is not `ghost`.\n\nA refining module can also introduce new `const` declarations that do\nnot exist in the refinement parent.", "start_char_idx": 2, "end_char_idx": 775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "823c3235-c1e6-4727-b33f-6fa9c6e5f9f4": {"__data__": {"id_": "823c3235-c1e6-4727-b33f-6fa9c6e5f9f4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a270466-e58c-4d09-82fa-a828ace53634", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "79adb66bab91316a1268b27b5f350f3dc8f1432e502958b11d967c1fa6367d4c", "class_name": "RelatedNodeInfo"}}, "text": "10.5. Method declarations\n\nMethod declarations can be refined as in the following example.\n\n\n```dafny\nabstract module A {\n  method ToImplement(x: int) returns (r: int)\n    ensures r > x\n\n  method ToStrengthen(x: int) returns (r: int)\n\n  method ToDeterminize(x: int) returns (r: int)\n    ensures r >= x\n  {\n    var y :| y >= x;\n    return y;\n  }\n\n}\n\nmodule B refines A {\n  method ToImplement(x: int) returns (r: int)\n  {\n    return x + 2;\n  }\n\n  method ToStrengthen ...\n    ensures r == x*2\n  {\n    return x*2;\n  }\n\n  method ToDeterminize(x: int) returns (r: int)\n  {\n    return x;\n  }\n}\n```\n\nFormally, a child `method` definition may refine a parent `method`\ndeclaration or definition by performing one or more of the following\noperations:\n\n* provide a body missing in the parent (as in `ToImplement`),\n* strengthen the postcondition of the parent method by adding one or more\n  `ensures` clauses (as in `ToStrengthen`),\n* provide a more deterministic version of a non-deterministic parent\n  body (as in `ToDeterminize`), or\n\nThe type signature of a child method must be the same as that of the\nparent method it refines. This can be ensured by providing an explicit\ntype signature equivalent to that of the parent (with renaming of\nparameters allowed) or by using an ellipsis (`...`) to indicate copying\nof the parent type signature. The body of a child method must satisfy\nany ensures clauses from its parent in addition to any it adds.\n\nA refined method is allowed only if it does not invalidate any parent\nlemmas that mention it.\n\nA refining module can also introduce new `method` declarations or\ndefinitions that do not exist in the refinement parent.", "start_char_idx": 2, "end_char_idx": 1657, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f3227c9-f252-4ba5-9b4f-2e1842e88794": {"__data__": {"id_": "1f3227c9-f252-4ba5-9b4f-2e1842e88794", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21c637e9-9c73-48ca-b0d0-a7f4e05414bb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "770ac3808171733ac23a2a5bd1dbee3609e692f05af0d127d244a1f12bbefaa7", "class_name": "RelatedNodeInfo"}}, "text": "10.6. Lemma declarations\n\nAs lemmas are (ghost) methods, the description of method refinement from\nthe previous section also applies to lemma refinement.\n\nA valid refinement is one that does not invalidate any proofs. A lemma\nfrom a refinement parent must still be valid for the refinement result\nof any method or lemma it mentions.", "start_char_idx": 2, "end_char_idx": 334, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47c39e47-9b8c-4fd7-8fa9-cf5825d7126d": {"__data__": {"id_": "47c39e47-9b8c-4fd7-8fa9-cf5825d7126d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd835b71-3dee-4e09-94fa-8f98be5a55ca", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e1f1e49cab1ef60522dfbfb3e2f2277bb045618ab00820e03832596e0e394ccd", "class_name": "RelatedNodeInfo"}}, "text": "10.7. Function and predicate declarations\n\nFunction (and equivalently predicate) declarations can be refined as in\nthe following example.\n\n\n```dafny\nabstract module A {\n  function F(x: int): (r: int)\n    ensures r > x\n\n  function G(x: int): (r: int)\n    ensures r > x\n  { x + 1 }\n}\n\nmodule B refines A {\n  function F ...\n  { x + 1 }\n\n  function G ...\n    ensures r == x + 1\n}\n```\n\nFormally, a child `function` (or `predicate`) definition can refine a\nparent `function` (or `predicate`) declaration or definition to\n\n* provide a body missing in the parent,\n* strengthen the postcondition of the parent function by adding one or more\n  `ensures` clauses.\n\nThe relation between the type signature of the parent and child function\nis the same as for methods and lemmas, as described in the previous section.\n\nA refining module can also introduce new `function` declarations or\ndefinitions that do not exist in the refinement parent.", "start_char_idx": 2, "end_char_idx": 930, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5e893e6-6bf8-46cc-98f1-db34321ac02c": {"__data__": {"id_": "a5e893e6-6bf8-46cc-98f1-db34321ac02c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7668865-666e-47e5-8d1b-0460e607aae5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2f42cf3f08ab133d99caa22c6987c11ddf0f8e51d0d4d3b75ec765c6be1bc3e4", "class_name": "RelatedNodeInfo"}}, "text": "10.8. Class, trait and iterator declarations\n\nClass, trait, and iterator declarations are refined as follows: \n- If a class (or trait or iterator, respectively) `C` in a refining parent contains a\nmember that is not matched by a same-named member in the class `C` in the refining module, or vice-versa, then that class is copied as is to the \nrefinement result.\n- When there are members with the same name in the class in the refinement parent and in the refining module, then the combination occurs \naccording to the rules for that category of member.\n\nHere is an example code snippet:\n\n```dafny\nabstract module P {\n  class C {\n    function F(): int\n      ensures F() > 0\n  }\n}\n\nmodule X refines P {\n  class C ... {\n    function F...\n      ensures F() > 0\n    { 1 }\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90db7e0f-7bcd-48f9-84e6-f33f3f58afdb": {"__data__": {"id_": "90db7e0f-7bcd-48f9-84e6-f33f3f58afdb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb7b55df-2c9c-4aaa-b6bc-f87bad477ed9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d62a5ebdc7982d10db775df6dcac4035373f97193868d54b7afd2e5c3eba94f6", "class_name": "RelatedNodeInfo"}}, "text": "10.9. Type declarations\n\nTypes can be refined in two ways:\n\n- Turning an abstract type into a concrete type;\n- Adding members to a datatype or a newtype.\n\nFor example, consider the following abstract module:\n\n\n```dafny\nabstract module Parent {\n  type T\n  type B = bool\n  type S = s: string | |s| > 0 witness \"!\"\n  newtype Pos = n: nat | n > 0 witness 1\n  datatype Bool = True | False\n}\n```\n\nIn this module, type `T` is opaque and hence can be refined with any type,\nincluding class types.  Types `B`, `S`, `Pos`, and `Bool` are concrete and\ncannot be refined further, except (for `Pos` and `Bool`) by giving them\nadditional members or attributes (or refining their existing members, if any).\nHence, the following are valid refinements:\n\n\n```dafny\nmodule ChildWithTrait refines Parent {\n  trait T {}\n}\n\nmodule ChildWithClass refines Parent {\n  class T {}\n}\n\nmodule ChildWithSynonymType refines Parent {\n  type T = bool\n}\n\nmodule ChildWithSubsetType refines Parent {\n  type T = s: seq | s != [] witness [0]\n}\n\nmodule ChildWithDataType refines Parent {\n  datatype T = True | False\n}\n\nabstract module ChildWithExtraMembers refines Parent {\n  newtype Pos ... {\n    method Print() { print this; }\n  }\n\n  datatype Bool ... {\n    function AsDafnyBool() : bool { this.True? }\n  }\n}\n```\n\n(The last example is marked `abstract` because it leaves `T` opaque.)\n\nNote that datatype constructors, codatatype destructors, and newtype definitions\ncannot be refined: it is not possible to add or remove `datatype` constructors,\nnor to change destructors of a `codatatype`, nor to change the base\ntype, constraint, or witness of a `newtype`.\n\nWhen a type takes arguments, its refinement must use the same type arguments\nwith the same type constraints and the same variance.\n \nWhen a type has type constraints, these type constraints must be preserved by\nrefinement.  This means that a type declaration `type T(!new)` cannot be refined\nby a `class T`, for example. Similarly, a `type T(00)` cannot be refined by a\nsubset type with a `witness *` clause.\n\nThe refinement of an abstract type with body-less members can include both a definition\nfor the type along with a body for the member, as in this example:\n\n```dafny\nabstract module P {\n  type T3 {\n    function ToString(): string\n  }\n}\n\nmodule X refines P {\n  newtype T3 = i | 0 <= i < 10 {\n    function ToString... { \"\" }\n  }\n}\n```\n\nNote that type refinements are not required to include the `...` indicator that they are refining a parent type.", "start_char_idx": 2, "end_char_idx": 2481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80a60630-45d7-431c-960f-1cd66f07fcc6": {"__data__": {"id_": "80a60630-45d7-431c-960f-1cd66f07fcc6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a32b0fd-9e60-45aa-82ee-32d4307ff28a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "36ea41608c54a5debd8cae4c8babc4c64f476026a63ef68ff68d450361517c35", "class_name": "RelatedNodeInfo"}}, "text": "10.10. Statements\n\nThe refinement syntax (`...`) in statements is deprecated.", "start_char_idx": 2, "end_char_idx": 79, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "946c6516-4562-4e2f-bce3-019152519132": {"__data__": {"id_": "946c6516-4562-4e2f-bce3-019152519132", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Relational_Expressions_description.md", "file_name": "Relational_Expressions_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfbea66e-0a6b-458b-8150-77dbd9897872", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Relational_Expressions_description.md", "file_name": "Relational_Expressions_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e5bf8ce58b9722f3f2a3e3777558a2752cf94d2b571532c79587cf3e5ad8fd60", "class_name": "RelatedNodeInfo"}}, "text": "9.5. Relational Expressions (grammar) {sec-relational-expression}\n\nExamples:\n\n```dafny\nx == y\nx != y\nx < y\nx >= y\nx in y\nx ! in y\nx !! y\nx ==#[k] y\n```\n\nThe relation expressions compare two or more terms.\nAs explained in the section about basic types, `==`, `!=`, ```, `=`\nare _chaining_.\n\nThe `in` and `!in` operators apply to collection types as explained in\nSection 5.5 and represent membership or non-membership\nrespectively.\n\nThe `!!` represents disjointness for sets and multisets as explained in\nSection 5.5.1 and Section 5.5.2.\n\n`x ==#[k] y` is the prefix equality operator that compares\ncoinductive values for equality to a nesting level of k, as\nexplained in the section about co-equality.", "start_char_idx": 2, "end_char_idx": 701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66edf23a-010c-4246-8be1-a73c54ac2beb": {"__data__": {"id_": "66edf23a-010c-4246-8be1-a73c54ac2beb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_description.md", "file_name": "Return_Statement_description.md", "file_type": "text/markdown", "file_size": 1151, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a301c52b-aad1-4cc6-8298-0ac7472c0fee", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_description.md", "file_name": "Return_Statement_description.md", "file_type": "text/markdown", "file_size": 1151, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7ca70c55eb3a3537985d2743577af1dc3ed4e9f07ff618cbac2cf6fc3687c7bd", "class_name": "RelatedNodeInfo"}}, "text": "8.3. Return Statement (grammar) {sec-return-statement}\n\nExamples:\n\n```dafny\nmethod m(i: int) returns (r: int) {\n  return i+1;\n}\nmethod n(i: int) returns (r: int, q: int) {\n  return i+1, i + 2;\n}\nmethod p() returns (i: int) {\n  i := 1;\n  return;\n}\nmethod q() {\n  return;\n}\n```\n  \nA return statement can only be used in a method. It is used\nto terminate the execution of the method.\n\nTo return a value from a method, the value is assigned to one\nof the named out-parameters sometime before a return statement.\nIn fact, the out-parameters act very much like local variables,\nand can be assigned to more than once. Return statements are\nused when one wants to return before reaching the end of the\nbody block of the method.\n\nReturn statements can be just the `return` keyword (where the current values\nof the out-parameters are used), or they can take a list of expressions to\nreturn. If a list is given, the number of expressions given must be the same\nas the number of named out-parameters. These expressions are\nevaluated, then they are assigned to the out-parameters, and then the\nmethod terminates.", "start_char_idx": 2, "end_char_idx": 1101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "604c9fb4-9a7e-43c0-8a84-0bdf5a41478a": {"__data__": {"id_": "604c9fb4-9a7e-43c0-8a84-0bdf5a41478a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_grammar.md", "file_name": "Return_Statement_grammar.md", "file_type": "text/markdown", "file_size": 101, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cf9275a-9d99-4f72-bd67-a01098ab2b52", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_grammar.md", "file_name": "Return_Statement_grammar.md", "file_type": "text/markdown", "file_size": 101, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c980bf03bada135dc52f4dda7758d54b860f84f1056485c6f6d8927d2ef0d036", "class_name": "RelatedNodeInfo"}}, "text": "8.3. Return Statement {g-return-statement}\n\n(discussion)\n\n````grammar", "start_char_idx": 2, "end_char_idx": 71, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ac789cf-dd1c-4dba-93ec-bb1ea2d31d0f": {"__data__": {"id_": "3ac789cf-dd1c-4dba-93ec-bb1ea2d31d0f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_description.md", "file_name": "Return_Statements_description.md", "file_type": "text/markdown", "file_size": 1148, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd22865c-165e-4d1f-a79c-7d85ebd158ee", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_description.md", "file_name": "Return_Statements_description.md", "file_type": "text/markdown", "file_size": 1148, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9d17abfb67220f4c920a21c185128dd07dc540fe230f4fb45d19917440cb6e1e", "class_name": "RelatedNodeInfo"}}, "text": "8.3. Return Statement (grammar) {sec-return-statement}\n\nExamples:\n\n```dafny\nmethod m(i: int) returns (r: int) {\n  return i+1;\n}\nmethod n(i: int) returns (r: int, q: int) {\n  return i+1, i + 2;\n}\nmethod p() returns (i: int) {\n  i := 1;\n  return;\n}\nmethod q() {\n  return;\n}\n```\n\nA return statement can only be used in a method. It is used\nto terminate the execution of the method.\n\nTo return a value from a method, the value is assigned to one\nof the named out-parameters sometime before a return statement.\nIn fact, the out-parameters act very much like local variables,\nand can be assigned to more than once. Return statements are\nused when one wants to return before reaching the end of the\nbody block of the method.\n\nReturn statements can be just the `return` keyword (where the current values\nof the out-parameters are used), or they can take a list of expressions to\nreturn. If a list is given, the number of expressions given must be the same\nas the number of named out-parameters. These expressions are\nevaluated, then they are assigned to the out-parameters, and then the\nmethod terminates.", "start_char_idx": 2, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc4ff44d-1d1a-4e5d-9e99-f67b5197be85": {"__data__": {"id_": "bc4ff44d-1d1a-4e5d-9e99-f67b5197be85", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_grammar.md", "file_name": "Return_Statements_grammar.md", "file_type": "text/markdown", "file_size": 157, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee0423b8-6beb-444b-b753-0456b2e83b0f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_grammar.md", "file_name": "Return_Statements_grammar.md", "file_type": "text/markdown", "file_size": 157, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e20fe855705f8a608b698decc0ecad12230fc22f632fe0721a51cbc55abfef72", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.5. Return statement {g-return-statement}\n\n(discussion)\n\n````grammar\nReturnStmt = \"return\" [ Rhs { \",\" Rhs } ] \";\"\n````", "start_char_idx": 2, "end_char_idx": 127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0546f67-7d0e-463a-b021-aa94f98bb72f": {"__data__": {"id_": "a0546f67-7d0e-463a-b021-aa94f98bb72f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Reveal_Statement_description.md", "file_name": "Reveal_Statement_description.md", "file_type": "text/markdown", "file_size": 282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0344ac5a-52ac-42d4-8ac6-67e2494065c1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Reveal_Statement_description.md", "file_name": "Reveal_Statement_description.md", "file_type": "text/markdown", "file_size": 282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "37df874da3ea984e336ec3baff5904c73f2401d17fb7704a9ce9a0a4f5ba3652", "class_name": "RelatedNodeInfo"}}, "text": "8.20. Reveal Statement (grammar) {sec-reveal-statement}\n\nExamples:\n\n```dafny\nreveal f(), L;\n```\n\nThe `reveal` statement makes available to the solver information that is otherwise not visible, as described in the following subsections.", "start_char_idx": 2, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ce3e26c-93e2-4ad6-b22b-ee6b746c6d16": {"__data__": {"id_": "6ce3e26c-93e2-4ad6-b22b-ee6b746c6d16", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Right-Hand-Side_Expressions_description.md", "file_name": "Right-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 1118, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f2b844b-9cb3-491e-bc85-ae787f0b0c93", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Right-Hand-Side_Expressions_description.md", "file_name": "Right-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 1118, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6d4345deff21c15b40d22e2fe577a6d61e4df2fd8ed10bd3800f4d90d69dd376", "class_name": "RelatedNodeInfo"}}, "text": "9.15. Right-Hand-Side Expressions (grammar) {sec-rhs-expression}\n\nExamples: \n\n```dafny\nnew int[6]\nnew MyClass\nnew MyClass(x,y,z)\nx+y+z\n*\n```\n\nA Right-Hand-Side expression is an expression-like construct that may have \nside-effects. Consequently such expressions\n can only be used within certain statements\nwithin methods, and not as general expressions or within functions or specifications.\n\nAn RHS is either an array allocation, an object allocation,\na havoc right-hand-side, a method call, or a simple expression, optionally followed\nby one or more attributes.\n\nRight-hand-side expressions (that are not just regular expressions) appear in the following constructs:\n\n- return statements,\n- yield statements,\n- update statements,\n- update-with-failure statements, or\n- variable declaration statements.\n\nThese are the only contexts in which arrays or objects may be\nallocated or in which havoc may be stipulated.", "start_char_idx": 2, "end_char_idx": 915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3201735d-dfc1-4ce6-b1fe-965dd2b84194": {"__data__": {"id_": "3201735d-dfc1-4ce6-b1fe-965dd2b84194", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Sequence_Display_Expression_description.md", "file_name": "Sequence_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68a34de3-0862-434b-bdbc-4c5288a92de3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Sequence_Display_Expression_description.md", "file_name": "Sequence_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae66299d347b6f38cbdf64628611d96a784c996ae75ff52fe6af539657de5600", "class_name": "RelatedNodeInfo"}}, "text": "9.28. Sequence Display Expression (grammar) {sec-seq-comprehension}\n\nExamples:\n\n```dafny\n[1, 2, 3]\n[1]\n[]\nseq(k, n => n+1)\n```\n\nA sequence display expression provides a way to construct\na sequence with given values. For example\n\n\n```dafny\n[1, 2, 3]\n```\nis a sequence with three elements in it.\n\n\n```dafny\nseq(k, n => n+1)\n```\nis a sequence of k elements whose values are obtained by evaluating the\nsecond argument (a function, in this case a lambda expression) on the indices 0 up to k.\n\nSee this section for more information on\nsequences.", "start_char_idx": 2, "end_char_idx": 541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eab516d5-ca98-4169-974b-264fd4acb48d": {"__data__": {"id_": "eab516d5-ca98-4169-974b-264fd4acb48d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Set_Display_Expression_description.md", "file_name": "Set_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 1478, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fbc7182-be77-45b5-9bdf-8e38ea56d4a3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Set_Display_Expression_description.md", "file_name": "Set_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 1478, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "89f8f5cd1c5a0a2d524859b369bdf1e8ce31e1eac708da828cf709b7afebba40", "class_name": "RelatedNodeInfo"}}, "text": "9.29. Set Display Expression (grammar) {sec-set-display-expression}\n\nExamples:\n\n```dafny\n{}\n{1,2,3}\niset{1,2,3,4}\nmultiset{1,2,2,3,3,3}\nmultiset(s)\n```\n\nA set display expression provides a way of constructing a set with given\nelements. If the keyword `iset` is present, then a potentially infinite\nset (with the finite set of given elements) is constructed.\n\nFor example\n\n\n```dafny\n{1, 2, 3}\n```\nis a set with three elements in it.\nSee Section 5.5.1 for more information on\nsets.\n\nA multiset display expression provides a way of constructing\na multiset with given elements and multiplicities. For example\n\n\n```dafny\nmultiset{1, 1, 2, 3}\n```\nis a multiset with three elements in it. The number 1 has a multiplicity of 2,\nand the numbers 2 and 3 each have a multiplicity of 1.\n\nA multiset cast expression converts a set or a sequence\ninto a multiset as shown here:\n\n\n```dafny\nvar s : set := {1, 2, 3};\nvar ms : multiset := multiset(s);\nms := ms + multiset{1};\nvar sq : seq := [1, 1, 2, 3];\nvar ms2 : multiset := multiset(sq);\nassert ms == ms2;\n```\n\nNote that `multiset{1, 1}` is a multiset holding the value `1` with multiplicity 2,\nbut in `multiset({1,1})` the multiplicity is 1, because the expression `{1,1}` is the set `{1}`,\nwhich is then converted to a multiset.\n\nSee Section 5.5.2 for more information on multisets.", "start_char_idx": 2, "end_char_idx": 1322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16744abf-266e-4938-ac99-7f50fd584759": {"__data__": {"id_": "16744abf-266e-4938-ac99-7f50fd584759", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "963b73c8-8738-4927-a4f8-73cb795ed0de", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "22cf9b7de6dd5a9de987a9e961f83f14d7cba93512cc2a058989b1ab8fef9bca", "class_name": "RelatedNodeInfo"}}, "text": "7. Specifications {sec-specifications}\n\nSpecifications describe logical properties of Dafny methods, functions,\nlambdas, iterators and loops. They specify preconditions, postconditions,\ninvariants, what memory locations may be read or modified, and\ntermination information by means of _specification clauses_.\nFor each kind of specification, zero or more specification\nclauses (of the type accepted for that type of specification)\nmay be given, in any order.\n\nWe document specifications at these levels:\n\n- At the lowest level are the various kinds of specification clauses,\n  e.g., a ``RequiresClause``.\n- Next are the specifications for entities that need them,\n  e.g., a ``MethodSpec``, which typically consist of a sequence of\n  specification clauses.\n- At the top level are the entity declarations that include\n  the specifications, e.g., ``MethodDecl``.\n\nThis section documents the first two of these in a bottom-up manner.\nWe first document the clauses and then the specifications\nthat use them.\n\nSpecification clauses typically appear in a sequence. They all begin with a \nkeyword and do not end with semicolons.", "start_char_idx": 2, "end_char_idx": 1122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4564161c-39a4-4027-89ae-f88717b641ae": {"__data__": {"id_": "4564161c-39a4-4027-89ae-f88717b641ae", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82434318-c953-4844-b730-de7d80778f53", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "97b320d37db07ed9bd6324489c2347288ae0492b067a2d015010c2dc57cc9e27", "class_name": "RelatedNodeInfo"}}, "text": "7.1. Specification Clauses {sec-specification-clauses}\n\n\nWithin expressions in specification clauses, you can use\nspecification expressions along with any other expressions you need.", "start_char_idx": 2, "end_char_idx": 184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3548821d-92a2-421b-8338-b7b154fff1c1": {"__data__": {"id_": "3548821d-92a2-421b-8338-b7b154fff1c1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54703c3e-944a-478d-9556-4810241d9312", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "771ca84fdb5a10aab58ae82119533315373a869ecba40d04a2a617dcfd3b8972", "class_name": "RelatedNodeInfo"}}, "text": "7.1.1. Requires Clause (grammar) {sec-requires-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int)\n  requires true\n  requires i > 0\n  requires L: 0 < i < 10\n```\n\nThe `requires` clauses specify preconditions for methods,\nfunctions, lambda expressions and iterators. Dafny checks\nthat the preconditions are met at all call sites. The\ncallee may then assume the preconditions hold on entry.\n\nIf no `requires` clause is specified, then a default implicit\nclause `requires true` is used.\n\nIf more than one `requires` clause is given, then the\nprecondition is the conjunction of all of the expressions\nfrom all of the `requires` clauses, with a collected list\nof all the given Attributes. The order of conjunctions\n(and hence the order of `requires` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for requires clauses are discussed in Section 11.4.\n\nA requires clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 1026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eff0a380-bd8c-46ba-b9de-2ba8fb70efdd": {"__data__": {"id_": "eff0a380-bd8c-46ba-b9de-2ba8fb70efdd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0ea9fab-630b-4a02-86f4-f9ad7087ac8e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1c1395655702b0931b775ddd1e4a6ad9ae9f12d308f64a9e6f862a06c3f5adab", "class_name": "RelatedNodeInfo"}}, "text": "7.1.2. Ensures Clause (grammar) {sec-ensures-clause}\n\nExamples:\n\n```dafny\nmethod {:axiom} m(i: int) returns (r: int)\n  ensures r > 0\n```\n\nAn `ensures` clause specifies the post condition for a\nmethod, function or iterator.\n\nIf no `ensures` clause is specified, then a default implicit\nclause `ensures true` is used.\n\nIf more than one `ensures` clause is given, then the\npostcondition is the conjunction of all of the expressions\nfrom all of the `ensures` clauses, with a\ncollected list of all the given Attributes.\nThe order of conjunctions\n(and hence the order of `ensures` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for ensures clauses are discussed in Section 11.4.\n\nAn ensures clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "005af69f-ef2f-4996-bef7-c2a67176f626": {"__data__": {"id_": "005af69f-ef2f-4996-bef7-c2a67176f626", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "562df8e9-0372-4fe3-8789-4e43a83ede66", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b1d6ebceeac95d18997938ad94fb94baf739cd61082ef4bc62ab2069d602c916", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90000692-28d0-466a-a6f9-7cfa23ade06d", "node_type": "1", "metadata": {}, "hash": "6e3e63f2dce88df1eb4c1273f2c8852b8df7c64d73150883f87dace8c3b69a68", "class_name": "RelatedNodeInfo"}}, "text": "7.1.3. Decreases Clause (grammar) {sec-decreases-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int, j: int) returns (r: int)\n  decreases i, j\nmethod n(i: int) returns (r: int)\n  decreases *\n```\nDecreases clauses are used to prove termination in the\npresence of recursion. If more than one `decreases` clause is given\nit is as if a single `decreases` clause had been given with the\ncollected list of arguments and a collected list of Attributes. That is,\n\n\n```dafny\ndecreases A, B\ndecreases C, D\n```\n\nis equivalent to\n\n\n```dafny\ndecreases A, B, C, D\n```\nNote that changing the order of multiple `decreases` clauses will change\nthe order of the expressions within the equivalent single `decreases`\nclause, and will therefore have different semantics.\n\nLoops and compiled methods (but not functions and not ghost methods,\nincluding lemmas) can be specified to be possibly non-terminating.\nThis is done by declaring the method or loop with `decreases *`, which\ncauses the proof of termination to be skipped. If a `*` is present\nin a `decreases` clause, no other expressions are allowed in the\n`decreases` clause. A method that contains a possibly non-terminating\nloop or a call to a possibly non-terminating method must itself be\ndeclared as possibly non-terminating.\n\nTermination metrics in Dafny, which are declared by `decreases` clauses,\nare lexicographic tuples of expressions. At each recursive (or mutually\nrecursive) call to a function or method, Dafny checks that the effective\n`decreases` clause of the callee is strictly smaller than the effective\n`decreases` clause of the caller.\n\n What does \"strictly smaller\" mean? Dafny provides a built-in\n well-founded order for every type and, in some cases, between types. For\n example, the Boolean `false` is strictly smaller than `true`, the\n integer `78` is strictly smaller than `102`, the set `{2,5}` is strictly\n smaller than (because it is a proper subset of) the set `{2,3,5}`, and for `s` of type `seq` where\n `Color` is some inductive datatype, the color `s[0]` is strictly less than\n `s` (provided `s` is nonempty).\n\nWhat does \"effective decreases clause\" mean? Dafny always appends a\n\"top\" element to the lexicographic tuple given by the user. This top\nelement cannot be syntactically denoted in a Dafny program and it never\noccurs as a run-time value either. Rather, it is a fictitious value,\nwhich here we will denote $\\top$, such that each value that can ever occur\nin a Dafny program is strictly less than $\\top$. Dafny sometimes also\nprepends expressions to the lexicographic tuple given by the user. The\neffective decreases clause is any such prefix, followed by the\nuser-provided decreases clause, followed by $\\top$. We said \"user-provided\ndecreases clause\", but if the user completely omits a `decreases` clause,\nthen Dafny will usually make a guess at one, in which case the effective\ndecreases clause is any prefix followed by the guess followed by $\\top$.\n\nHere is a simple but interesting example: the Fibonacci function.", "start_char_idx": 2, "end_char_idx": 2992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90000692-28d0-466a-a6f9-7cfa23ade06d": {"__data__": {"id_": "90000692-28d0-466a-a6f9-7cfa23ade06d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "562df8e9-0372-4fe3-8789-4e43a83ede66", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b1d6ebceeac95d18997938ad94fb94baf739cd61082ef4bc62ab2069d602c916", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "005af69f-ef2f-4996-bef7-c2a67176f626", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e20818cc6f359704f3eafd22835091f505317304e64ef114ea18976a5e73fb07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e20d452e-8706-490e-9626-3d6b876b1ae5", "node_type": "1", "metadata": {}, "hash": "16856f46a94ae080e3b3008b2bbc405f4d9a61a6c11e7567c739360caff03c9a", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nfunction Fib(n: nat) : nat\n{\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n```\n\nIn this example, Dafny supplies a `decreases n` clause.\n\nLet's take a look at the kind of example where a mysterious-looking\ndecreases clause like \"Rank, 0\" is useful.\n\nConsider two mutually recursive methods, `A` and `B`:\n\n```dafny\nmethod A(x: nat)\n{\n  B(x);\n}\n\nmethod B(x: nat)\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nTo prove termination of `A` and `B`, Dafny needs to have effective\ndecreases clauses for A and B such that:\n\n* the measure for the callee `B(x)` is strictly smaller than the measure\n  for the caller `A(x)`, and\n\n* the measure for the callee `A(x-1)` is strictly smaller than the measure\n  for the caller `B(x)`.\n\nSatisfying the second of these conditions is easy, but what about the\nfirst? Note, for example, that declaring both `A` and `B` with \"decreases x\"\ndoes not work, because that won't prove a strict decrease for the call\nfrom `A(x)` to `B(x)`.\n\nHere's one possibility:\n\n```dafny\nmethod A(x: nat)\n  decreases x, 1\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nFor the call from `A(x)` to `B(x)`, the lexicographic tuple `\"x, 0\"` is\nstrictly smaller than `\"x, 1\"`, and for the call from `B(x)` to `A(x-1)`, the\nlexicographic tuple `\"x-1, 1\"` is strictly smaller than `\"x, 0\"`.\n\n Two things to note: First, the choice of \"0\" and \"1\" as the second\n components of these lexicographic tuples is rather arbitrary. It could\n just as well have been \"false\" and \"true\", respectively, or the sets\n `{2,5}` and `{2,3,5}`. Second, the keyword `decreases` often gives rise to\n an intuitive English reading of the declaration. For example, you might\n say that the recursive calls in the definition of the familiar Fibonacci\n function `Fib(n)` \"decreases n\". But when the lexicographic tuple contains\n constants, the English reading of the declaration becomes mysterious and\n may give rise to questions like \"how can you decrease the constant 0?\".\n The keyword is just that---a keyword. It says \"here comes a list of\n expressions that make up the lexicographic tuple we want to use for the\n termination measure\". What is important is that one effective decreases\n clause is compared against another one, and it certainly makes sense to\n compare something to a constant (and to compare one constant to\n another).\n\n We can simplify things a little bit by remembering that Dafny appends\n $\\top$ to the user-supplied decreases clause. For the A-and-B example,\n this lets us drop the constant from the `decreases` clause of A:\n\n\n```dafny\nmethod A(x: nat)\n   decreases x\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nThe effective decreases clause of `A` is $(x, \\top)$ and the effective\ndecreases clause of `B` is $(x, 0, \\top)$. These tuples still satisfy the two\nconditions $(x, 0, \\top) < (x, \\top)$ and $(x-1, \\top) < (x, 0, \\top)$. And\nas before, the constant \"0\" is arbitrary; anything less than $\\top$ (which\nis any Dafny expression) would work.\n\nLet's take a look at one more example that better illustrates the utility\nof $\\top$.", "start_char_idx": 2995, "end_char_idx": 6091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e20d452e-8706-490e-9626-3d6b876b1ae5": {"__data__": {"id_": "e20d452e-8706-490e-9626-3d6b876b1ae5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "562df8e9-0372-4fe3-8789-4e43a83ede66", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b1d6ebceeac95d18997938ad94fb94baf739cd61082ef4bc62ab2069d602c916", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90000692-28d0-466a-a6f9-7cfa23ade06d", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2638c8771198d85696bfffc927e7f7d56e024806ac6fbf672ee52b98aa1873b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2cd38dc2-1edb-4b7b-ae7a-be8a52a0e001", "node_type": "1", "metadata": {}, "hash": "4e8ec85630204bf7d9ac3d13f53f75658de4cceba8d849c09f74d04f5ac88d52", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nmethod A(x: nat)\n   decreases x\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nThe effective decreases clause of `A` is $(x, \\top)$ and the effective\ndecreases clause of `B` is $(x, 0, \\top)$. These tuples still satisfy the two\nconditions $(x, 0, \\top) < (x, \\top)$ and $(x-1, \\top) < (x, 0, \\top)$. And\nas before, the constant \"0\" is arbitrary; anything less than $\\top$ (which\nis any Dafny expression) would work.\n\nLet's take a look at one more example that better illustrates the utility\nof $\\top$. Consider again two mutually recursive methods, call them `Outer`\nand `Inner`, representing the recursive counterparts of what iteratively\nmight be two nested loops:\n\n```dafny\nmethod Outer(x: nat)\n{\n  // set y to an arbitrary non-negative integer\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nThe body of `Outer` uses an assign-such-that statement to represent some\ncomputation that takes place before `Inner` is called. It sets \"y\" to some\narbitrary non-negative value. In a more concrete example, `Inner` would do\nsome work for each \"y\" and then continue as `Outer` on the next smaller\n\"x\".\n\nUsing a `decreases` clause $(x, y)$ for `Inner` seems natural, but if\nwe don't have any bound on the size of the $y$ computed by `Outer`,\nthere is no expression we can write in the `decreases` clause of `Outer`\nthat is sure to lead to a strictly smaller value for $y$ when `Inner`\nis called. $\\top$ to the rescue. If we arrange for the effective\ndecreases clause of `Outer` to be $(x, \\top)$ and the effective decreases\nclause for `Inner` to be $(x, y, \\top)$, then we can show the strict\ndecreases as required. Since $\\top$ is implicitly appended, the two\ndecreases clauses declared in the program text can be:\n\n```dafny\nmethod Outer(x: nat)\n  decreases x\n{\n  // set y to an arbitrary non-negative integer\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n  decreases x,y\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nMoreover, remember that if a function or method has no user-declared\n`decreases` clause, Dafny will make a guess. The guess is (usually)\nthe list of arguments of the function/method, in the order given. This is\nexactly the decreases clauses needed here. Thus, Dafny successfully\nverifies the program without any explicit `decreases` clauses:\n\n```dafny\nmethod Outer(x: nat)\n{\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nThe ingredients are simple, but the end result may seem like magic. \nFor many users, however, there may be no magic at all \n-- the end result may be so natural that the user never even has to \nbe bothered to think about that there was a need to prove \ntermination in the first place.\n\nDafny also prepends two expressions to the user-specified (or guessed) tuple of expressions\nin the decreases clause. The first expression is the ordering of\nthe module containing the decreases clause in the dependence-ordering of \nmodules. That is, a module that neither imports or defines (as submodules) any other modules \nhas the lowest value in the order and every other module has a value that is higher than\nthat of any module it defines or imports. As a module cannot call a method in a\nmodule that it does not depend on, this is an effective first component to the\noverall decreases tuple.", "start_char_idx": 5548, "end_char_idx": 9063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cd38dc2-1edb-4b7b-ae7a-be8a52a0e001": {"__data__": {"id_": "2cd38dc2-1edb-4b7b-ae7a-be8a52a0e001", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "562df8e9-0372-4fe3-8789-4e43a83ede66", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b1d6ebceeac95d18997938ad94fb94baf739cd61082ef4bc62ab2069d602c916", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e20d452e-8706-490e-9626-3d6b876b1ae5", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4f7b419aa615dd67d82e67e43ea0b727f6bc7ef63ab8302e59b36a7ace8d76f0", "class_name": "RelatedNodeInfo"}}, "text": "For many users, however, there may be no magic at all \n-- the end result may be so natural that the user never even has to \nbe bothered to think about that there was a need to prove \ntermination in the first place.\n\nDafny also prepends two expressions to the user-specified (or guessed) tuple of expressions\nin the decreases clause. The first expression is the ordering of\nthe module containing the decreases clause in the dependence-ordering of \nmodules. That is, a module that neither imports or defines (as submodules) any other modules \nhas the lowest value in the order and every other module has a value that is higher than\nthat of any module it defines or imports. As a module cannot call a method in a\nmodule that it does not depend on, this is an effective first component to the\noverall decreases tuple.\n\nThe second prepended expression represents the position\nof the method in the call graph within a module. Dafny analyzes the call-graph of the \nmodule, grouping all methods into mutually-recursive groups.\nAny method that calls nothing else is at the lowest level (say level 0).\nAbsent recursion, every method has a level value strictly greater than any method it calls.\nMethods that are mutually recursive are at the same level and they are above\nthe level of anything else they call. With this level value prepended to \nthe decreases clause, the decreases tuple automatically decreases on any\ncalls in a non-recursive context.\n\nThough Dafny fixes a well-founded order that it uses when checking\ntermination, Dafny does not normally surface this ordering directly in\nexpressions. However, it is possible to write such ordering constraints\nusing `decreases to` expressions.", "start_char_idx": 8250, "end_char_idx": 9936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1472f464-02ca-4c01-8fd9-36fdd78c4f3f": {"__data__": {"id_": "1472f464-02ca-4c01-8fd9-36fdd78c4f3f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d20b213-0ac6-4724-99de-1cad1a1f8876", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c88c28bb259c5d222027919f49cc7cf8ca89e8a06ae6280fae2dba8ce0f67533", "class_name": "RelatedNodeInfo"}}, "text": "7.1.4. Framing (grammar) {sec-frame-expression}\n\nExamples:\n\n```dafny\n*\no\no`a\n`a\n{ o, p, q }\n{}\n```\n\nFrame expressions are used to denote the set of memory locations\nthat a Dafny program element may read or write. \nThey are used in `reads` and `modifies` clauses.\nA frame expression is a set expression. The form `{}` is the empty set.\nThe type of the frame expression is `set`.\n\nNote that framing only applies to the heap, or memory accessed through\nreferences. Local variables are not stored on the heap, so they cannot be\nmentioned (well, they are not in scope in the declaration) in frame\nannotations. Note also that types like sets, sequences, and multisets are\nvalue types, and are treated like integers or local variables. Arrays and\nobjects are reference types, and they are stored on the heap (though as\nalways there is a subtle distinction between the reference itself and the\nvalue it points to.)\n\n\nThe ``FrameField`` construct is used to specify a field of a\nclass object. The identifier following the back-quote is the\nname of the field being referenced.\nIf the `FrameField` is preceded by an expression the expression\nmust be a reference to an object having that field.\nIf the `FrameField` is not preceded by an expression then\nthe frame expression is referring to that field of the current\nobject (`this`). This form is only used within a method of a class or trait.\n\nA ``FrameField`` can be useful in the following case:\nWhen a method modifies only one field, rather than writing\n\n\n```dafny\nclass A {\n  var i: int\n  var x0: int\n  var x1: int\n  var x2: int\n  var x3: int\n  var x4: int\n  method M()\n    modifies this\n    ensures unchanged(`x0) && unchanged(`x1) && unchanged(`x2) && unchanged(`x3) && unchanged(`x4)\n  { i := i + 1; }\n}\n```\n\none can write the more concise:\n\n\n```dafny\nclass A {\n  var i: int\n  var x0: int\n  var x1: int\n  var x2: int\n  var x3: int\n  var x4: int\n  method M()\n    modifies `i\n  { i := i + 1; }\n}\n```\n\nThere's (unfortunately) no form of it for array\nelements -- but to account for unchanged elements, you can always write\n`forall i | 0 <= i < |a| :: unchanged(a[i])`.\n\nA ``FrameField`` is not taken into consideration for\nlambda expressions.", "start_char_idx": 2, "end_char_idx": 2185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0df6f3d0-ceea-46b4-9931-0d773b98acc6": {"__data__": {"id_": "0df6f3d0-ceea-46b4-9931-0d773b98acc6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58f75cfd-ced0-4bcd-aaec-9adbd21143f4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e459abc8c085fedfa5fbc109553a45a225341176f86e428b007de6e617e2aee5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0b81967-a3a4-4ba4-b2fa-65876f0c0371", "node_type": "1", "metadata": {}, "hash": "e09aa1719160622e2ec081b2eb311d4d646622a8ab9ca9c4b51996d75bfe4fc0", "class_name": "RelatedNodeInfo"}}, "text": "7.1.5. Reads Clause (grammar) {sec-reads-clause}\n\nExamples:\n\n```dafny\nconst o: object\nconst o, oo: object\nfunction f()\n  reads *\nfunction g()\n  reads o, oo\nfunction h()\n  reads { o }\nmethod f()\n  reads *\nmethod g()\n  reads o, oo\nmethod h()\n  reads { o }\n```\n\nFunctions are not allowed to have side effects; they may also be restricted in\nwhat they can read. The _reading frame_ of a function (or predicate) consists of all\nthe heap memory locations that the function is allowed to read. The reason we\nmight limit what a function can read is so that when we write to memory,\nwe can be sure that functions that did not read that part of memory have\nthe same value they did before. For example, we might have two arrays,\none of which we know is sorted. If we did not put a reads annotation on\nthe sorted predicate, then when we modify the unsorted array, we cannot\ndetermine whether the other array stopped being sorted. While we might be\nable to give invariants to preserve it in this case, it gets even more\ncomplex when manipulating data structures. In this case, framing is\nessential to making the verification process feasible.\n\nBy default, methods are not required to list the memory location they read.\nHowever, there are use cases for restricting what methods can read as well.\nIn particular, if you want to verify that imperative code is safe to execute concurrently when compiled,\nyou can specify that a method does not read or write any shared state,\nand therefore cannot encounter race conditions or runtime crashes related to\nunsafe communication between concurrent executions.\nSee the `{:concurrent}` attribute for more details.\n\nIt is not just the body of a function or method that is subject to `reads`\nchecks, but also its precondition and the `reads` clause itself.\n\nA `reads` clause can list a wildcard `*`, which allows the enclosing\nfunction or method to read anything. \nThis is the implicit default for methods with no `reads` clauses,\nallowing methods to read whatever they like.\nThe default for functions, however, is to not allow reading any memory.\nAllowing functions to read arbitrary memory is more problematic:\nin many cases, and in particular in all cases\nwhere the function is defined recursively, this makes it next to\nimpossible to make any use of the function. Nevertheless, as an\nexperimental feature, the language allows it (and it is sound).\nIf a `reads` clause uses `*`, then the `reads` clause is not allowed to\nmention anything else (since anything else would be irrelevant, anyhow).\n\nA `reads` clause specifies the set of memory locations that a function,\nlambda, or method may read. The readable memory locations are all the fields\nof all of the references given in the set specified in the frame expression\nand the single fields given in `FrameField` elements of the frame expression.\nFor example, in\n\n```dafny\nclass C {\n  var x: int\n  var y: int\n\n  predicate f(c: C) \n    reads this, c`x\n  {\n    this.x == c.x\n  }\n}\n```\nthe `reads` clause allows reading `this.x`, `this,y`, and `c.x` (which may be the same\nmemory location as `this.x`).\n}\n\nIf more than one `reads` clause is given\nin a specification the effective read set is the union of the sets\nspecified. If there are no `reads` clauses the effective read set is\nempty. If `*` is given in a `reads` clause it means any memory may be\nread.\n\nIf a `reads` clause refers to a sequence or multiset, that collection\n(call it `c`) is converted to a set by adding an implicit set\ncomprehension of the form `set o: object | o in c` before computing the\nunion of object sets from other `reads` clauses.\n\nAn expression in a `reads` clause is also allowed to be a function call whose value is \na collection of references. Such an expression is converted to a set by taking the\nunion of the function's image over all inputs. For example, if `F` is\na function from `int` to `set`, then `reads F` has the meaning", "start_char_idx": 2, "end_char_idx": 3894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0b81967-a3a4-4ba4-b2fa-65876f0c0371": {"__data__": {"id_": "e0b81967-a3a4-4ba4-b2fa-65876f0c0371", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58f75cfd-ced0-4bcd-aaec-9adbd21143f4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e459abc8c085fedfa5fbc109553a45a225341176f86e428b007de6e617e2aee5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0df6f3d0-ceea-46b4-9931-0d773b98acc6", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "865cee973133b114c38790541d902db7621282cb4663deb906ae469da61309aa", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nset x: int, o: object | o in F(x) :: o\n```\n\nFor each function value `f`, Dafny defines the function `f.reads`,\nwhich takes the same arguments as `f` and returns that set of objects\nthat `f` reads (according to its reads clause) with those arguments.\n`f.reads` has type `T ~> set`, where `T` is the input type(s) of `f`.\n\nThis is particularly useful when wanting to specify the reads set of\nanother function. For example, function `Sum` adds up the values of\n`f(i)` where `i` ranges from `lo` to `hi`:\n\n\n```dafny\nfunction Sum(f: int ~> real, lo: int, hi: int): real\n  requires lo <= hi\n  requires forall i :: f.requires(i)\n  reads f.reads\n  decreases hi - lo\n{\n  if lo == hi then 0.0 else\n    f(lo) + Sum(f, lo + 1, hi)\n}\n```\n\nIts `reads` specification says that `Sum(f, lo, hi)` may read anything\nthat `f` may read on any input.  (The specification\n`reads f.reads` gives an overapproximation of what `Sum` will actually\nread. More precise would be to specify that `Sum` reads only what `f`\nreads on the values from `lo` to `hi`, but the larger set denoted by\n`reads f.reads` is easier to write down and is often good enough.)\n\nWithout such `reads` function, one could also write the more precise\nand more verbose:\n\n```dafny\nfunction Sum(f: int ~> real, lo: int, hi: int): real\n  requires lo <= hi\n  requires forall i :: lo  f.requires(i)\n  reads set i, o | lo <= i < hi && o in f.reads(i) :: o\n  decreases hi - lo\n{\n  if lo == hi then 0.0 else\n    f(lo) + Sum(f, lo + 1, hi)\n}\n```\n\nNote, only `reads` clauses, not `modifies` clauses, are allowed to\ninclude functions as just described.\n\nIterator specifications also allow `reads` clauses,\nwith the same syntax and interpretation of arguments as above,\nbut the meaning is quite different!\nSee Section 5.11 for more details.", "start_char_idx": 3897, "end_char_idx": 5678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f380ffac-a40b-48fa-929c-787134a873ff": {"__data__": {"id_": "f380ffac-a40b-48fa-929c-787134a873ff", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d826d770-7e0c-4939-9227-19e9e86b3cff", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9212c0e09d0f35398b0238a52ed3cdacf1e393ce53fd2fe007495051d483a3cd", "class_name": "RelatedNodeInfo"}}, "text": "7.1.6. Modifies Clause (grammar) {sec-modifies-clause}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nconst o: object?\nconst p: A?\nmethod M()\n  modifies { o, p }\nmethod N()\n  modifies { }\nmethod Q()\n  modifies o, p`f\n```\n\nBy default, methods are allowed to read\nwhatever memory they like, but they are required to list which parts of\nmemory they modify, with a `modifies` annotation. These are almost identical\nto their `reads` cousins, except they say what can be changed, rather than\nwhat the definition depends on. In combination with reads,\nmodification restrictions allow Dafny to prove properties of code that\nwould otherwise be very difficult or impossible. Reads and modifies are\none of the tools that allow Dafny to work on one method at a time,\nbecause they restrict what would otherwise be arbitrary modifications of\nmemory to something that Dafny can reason about.\n\nJust as for a `reads` clause, the memory locations allowed to be modified\nin a method are all the fields of any object reference in the frame expression\nset and any specific field denoted by a `FrameField` in the `modifies` clause.\nFor example, in\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  method M() \n    modifies next\n  { \n    ... \n  }\n}\n```\nmethod `M` is permitted to modify `this.next.next` and `this.next.value`\nbut not `this.next`. To be allowed to modify `this.next`, the modifies clause\nmust include `this`, or some expression that evaluates to `this`, or ``this`next``.\n\nIf an object is newly allocated within the body of a method\nor within the scope of a `modifies` statement or a loop's `modifies` clause,\n then the fields of that object may always be modified.\n\nA `modifies` clause specifies the set of memory locations that a\nmethod, iterator or loop body may modify. If more than one `modifies`\nclause is given in a specification, the effective modifies set is the\nunion of the sets specified. If no `modifies` clause is given the\neffective modifies set is empty. There is no wildcard (`*`) allowed in\na modifies clause. A loop can also have a\n`modifies` clause. If none is given, the loop may modify anything\nthe enclosing context is allowed to modify.\n\nNote that _modifies_ here is used in the sense of _writes_. That is, a field\nthat may not be modified may not be written to, even with the same value it\nalready has or even if the value is restored later. The terminology and\nsemantics varies among specification languages. Some define frame conditions\nin this sense (a) of _writes_ and others in the sense (b) that allows writing\na field with the same value or changing the value so long as the original\nvalue is restored by the end of the scope. For example, JML defines\n`assignable` and `modifies` as synonyms in the sense (a), though KeY\ninterprets JML's `assigns/modifies` in sense (b).\nACSL and ACSL++ use the `assigns` keyword, but with _modify_ (b) semantics.\nAda/SPARK's dataflow contracts encode _write_ (a) semantics.", "start_char_idx": 2, "end_char_idx": 2936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5721b879-b82f-47ad-a48b-3767aed8a865": {"__data__": {"id_": "5721b879-b82f-47ad-a48b-3767aed8a865", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a91a2ff-199a-4b57-af18-dfe1ae368793", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1e53138e0a47951f22cb318996bc67e78cba4c2783a2abd607cb49ccf0d82ca0", "class_name": "RelatedNodeInfo"}}, "text": "7.1.7. Invariant Clause (grammar) {sec-invariant-clause}\n\nExamples:\n\n```dafny\nmethod m()\n{\n  var i := 10;\n  while 0 < i\n    invariant 0 <= i < 10\n}\n```\n\nAn `invariant` clause is used to specify an invariant\nfor a loop. If more than one `invariant` clause is given for\na loop, the effective invariant is the conjunction of\nthe conditions specified, in the order given in the source text.\n\nThe invariant must hold on entry to the loop. And assuming it\nis valid on entry to a particular iteration of the loop, \nDafny must be able to prove that it then\nholds at the end of that iteration of the loop.\n\nAn invariant can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92bc0117-1511-45f2-bae1-823604b07c3c": {"__data__": {"id_": "92bc0117-1511-45f2-bae1-823604b07c3c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "503300e6-cbe5-4a9e-894a-b5cfa4ff8298", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b8d6552d7805823deea23bb17b348f245494f46d4196237b3ee7611d37853f14", "class_name": "RelatedNodeInfo"}}, "text": "7.2. Method Specification (grammar) {sec-method-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  method M(i: int) returns (r: int)\n    requires i >= 0\n    modifies next\n    decreases i\n    ensures r >= 0\n  { \n    ... \n  }\n}\n```\n\nA method specification consists of zero or more `reads`, `modifies`, `requires`,\n`ensures` or `decreases` clauses, in any order.\nA method does not need `reads` clauses in most cases,\nbecause methods are allowed to read any memory by default,\nbut `reads` clauses are supported for use cases such as verifying safe concurrent execution.\nSee the `{:concurrent}` attribute for more details.", "start_char_idx": 2, "end_char_idx": 649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b625f3e-e1cb-4f19-8405-3684f94a228c": {"__data__": {"id_": "5b625f3e-e1cb-4f19-8405-3684f94a228c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "489df165-3080-4f9f-8619-36f23bf98d28", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fe89a6832cf45b2582f6d68e5656f540bff92c6b9c90a8cbeebfcce3f7eb5729", "class_name": "RelatedNodeInfo"}}, "text": "7.3. Function Specification (grammar) {sec-function-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  function M(i: int): (r: int)\n    requires i >= 0\n    reads this\n    decreases i\n    ensures r >= 0\n  { \n    0 \n  }\n}\n```\n\nA function specification is zero or more `reads`, `requires`,\n`ensures` or `decreases` clauses, in any order. A function\nspecification does not have `modifies` clauses because functions are not\nallowed to modify any memory.", "start_char_idx": 2, "end_char_idx": 480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1e8f9fc-55da-4c49-90a6-0bebd4b857bd": {"__data__": {"id_": "d1e8f9fc-55da-4c49-90a6-0bebd4b857bd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54963b58-0daa-45ae-bac7-7f6527de9389", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d28784665bba056a1f0700ddcbb4101844f3633a884dacf8f9da3c5e32101a7b", "class_name": "RelatedNodeInfo"}}, "text": "7.4. Lambda Specification (grammar) {sec-lambda-specification}\n\nA lambda specification provides a specification for a lambda function expression;\nit consists of zero or more `reads` or `requires` clauses.\nAny `requires` clauses may not have labels or attributes.\nLambda specifications do not have `ensures` clauses because the body\nis never opaque.\nLambda specifications do not have `decreases`\nclauses because lambda expressions do not have names and thus cannot be recursive. A\nlambda specification does not have `modifies` clauses because lambdas\nare not allowed to modify any memory.", "start_char_idx": 2, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a66221a1-816e-43a8-98af-81028cbfd0ba": {"__data__": {"id_": "a66221a1-816e-43a8-98af-81028cbfd0ba", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f92843d8-b210-41b4-a5ee-d671f9d5372d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "579c16103661d4a4a5d0d5d9449323f3b9fe95a927438702ce42d28d870edbb2", "class_name": "RelatedNodeInfo"}}, "text": "7.5. Iterator Specification (grammar) {sec-iterator-specification}\n\nAn iterator specification may contains `reads`, `modifies`, \n`decreases`, `requires`, `yield requires, `ensures`\nand `yield ensures` clauses.\n\nAn iterator specification applies both to the iterator's constructor\nmethod and to its `MoveNext` method.\n- The `reads` and `modifies`\nclauses apply to both of them (but `reads` clauses have a different meaning on iterators than on functions or methods).\n- The `requires` and `ensures` clauses apply to the constructor.\n- The `yield requires` and `yield ensures` clauses apply to the `MoveNext` method.\n\nExamples of iterators, including iterator specifications, are given in\nSection 5.11. Briefly\n- a requires clause gives a precondition for creating an iterator\n- an ensures clause gives a postcondition when the iterator exits (after all iterations are complete)\n- a decreases clause is used to show that the iterator will eventually terminate\n- a yield requires clause is a precondition for calling `MoveNext`\n- a yield ensures clause is a postcondition for calling `MoveNext`\n- a reads clause gives a set of memory locations that will be unchanged after a `yield` statement\n- a modifies clause gives a set of memory locations the iterator may write to", "start_char_idx": 2, "end_char_idx": 1268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d409ad5e-9742-4c6c-afde-ba7a3d43c488": {"__data__": {"id_": "d409ad5e-9742-4c6c-afde-ba7a3d43c488", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f281906c-a218-4b40-b363-8fe59d789839", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "43da926d94352d1467f7c20a0913b493fb9bf9c1fa71c4a7143cae60f1ee3652", "class_name": "RelatedNodeInfo"}}, "text": "7.6. Loop Specification (grammar) {sec-loop-specification}\n\nA loop specification provides the information Dafny needs to\nprove properties of a loop. It contains `invariant`,\n`decreases`, and `modifies` clauses.\n\nThe `invariant` clause\nis effectively a precondition and it along with the\nnegation of the loop test condition provides the postcondition.\nThe `decreases` clause is used to prove termination.", "start_char_idx": 2, "end_char_idx": 405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97ed5e12-198a-406e-982e-d513a01027d7": {"__data__": {"id_": "97ed5e12-198a-406e-982e-d513a01027d7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "822e195c-2019-4f68-ba88-8a6bb1381792", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "89cfaa4d92652d6ec2540929615ea2eb3fff0a1bc2b8cbc729bc72e9119ab43d", "class_name": "RelatedNodeInfo"}}, "text": "7.7. Auto-generated boilerplate specifications\n\nAutoContracts is an experimental feature that inserts much of the dynamic-frames boilerplate\ninto a class. The user simply\n- marks the class with `{:autocontracts}` and\n- declares a function (or predicate) called Valid().\n\nAutoContracts then\n\n- Declares, unless there already exist members with these names:\n\n```dafny\n  ghost var Repr: set(object)\n  predicate Valid()\n```\n\n- For function/predicate `Valid()`, inserts\n\n```dafny\n  reads this, Repr\n  ensures Valid() ==> this in Repr\n```\n- Into body of `Valid()`, inserts (at the beginning of the body)\n\n```dafny\n  this in Repr && null !in Repr\n```\n  and also inserts, for every array-valued field `A` declared in the class:\n\n```dafny\n  (A != null ==> A in Repr) &&\n```\n  and for every field `F` of a class type `T` where `T` has a field called `Repr`, also inserts\n\n```dafny\n  (F != null ==> F in Repr && F.Repr SUBSET Repr && this !in Repr && F.Valid())\n```\n  except, if `A` or `F` is declared with `{:autocontracts false}`, then the implication will not\nbe added.\n- For every constructor, inserts\n\n```dafny\n  ensures Valid() && fresh(Repr)\n```\n- At the end of the body of the constructor, adds\n\n```dafny\n   Repr := {this};\n   if (A != null) { Repr := Repr + {A}; }\n   if (F != null) { Repr := Repr + {F} + F.Repr; }\n```\n\nIn all the following cases, no `modifies` clause or `reads` clause is added if the user\nhas given one.\n\n- For every non-static non-ghost method that is not a \"simple query method\",\ninserts\n\n```dafny\n   requires Valid()\n   modifies Repr\n   ensures Valid() && fresh(Repr - old(Repr))\n```\n- At the end of the body of the method, inserts\n\n```dafny\n   if (A != null && !(A in Repr)) { Repr := Repr + {A}; }\n   if (F != null && !(F in Repr && F.Repr SUBSET Repr)) { Repr := Repr + {F} + F.Repr; }\n```\n- For every non-static non-twostate method that is either ghost or is a \"simple query method\",\nadd:\n\n```dafny\n   requires Valid()\n```\n- For every non-static twostate method, inserts\n\n```dafny\n   requires old(Valid())\n```\n- For every non-\"Valid\" non-static function, inserts\n\n```dafny\n   requires Valid()\n   reads Repr\n```", "start_char_idx": 2, "end_char_idx": 2137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0664842-5249-4267-b3a0-31a5d691216b": {"__data__": {"id_": "f0664842-5249-4267-b3a0-31a5d691216b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2abe28d0-4016-4ddf-8a1b-bed807ca2266", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "56d5ce40eea4df9a86c81538126470d5555ca369412487fa4631d9f862851215", "class_name": "RelatedNodeInfo"}}, "text": "7.8. Well-formedness of specifications {sec-well-formedness-specifications}\n\nDafny ensures that the `requires` clauses\nand `ensures` clauses, which are expressions,\nare well-formed independent of the body\nthey belong to.\nExamples of conditions this rules out are null pointer dereferencing,\nout-of-bounds array access, and division by zero.\nHence, when declaring the following method:\n\n\n```dafny\nmethod Test(a: array) returns (j: int)\n  requires a.Length >= 1\n  ensures a.Length % 2 == 0 ==> j >= 10 / a.Length\n{\n  j := 20;\n  var divisor := a.Length;\n  if divisor % 2 == 0 {\n    j := j / divisor;\n  }\n}\n```\n\nDafny will split the verification in two assertion batches\nthat will roughly look like the following lemmas:\n\n\n```dafny\nlemma Test_WellFormed(a: array?)\n{\n  assume a != null;       // From the definition of a\n  assert a != null;       // for the `requires a.Length >= 1`\n  assume a.Length >= 1;   // After well-formedness, we assume the requires\n  assert a != null;       // Again for the `a.Length % 2`\n  if a.Length % 2 == 0 {\n    assert a != null;     // Again for the final `a.Length`\n    assert a.Length != 0; // Because of the 10 / a.Length\n  }\n}\n\nmethod Test_Correctness(a: array?)\n{ // Here we assume the well-formedness of the condition\n  assume a != null;       // for the `requires a.Length >= 1`\n  assume a != null;       // Again for the `a.Length % 2`\n  if a.Length % 2 == 0 {\n    assume a != null;     // Again for the final `a.Length`\n    assume a.Length != 0; // Because of the 10 / a.Length\n  }\n\n  // Now the body is translated\n  var j := 20;\n  assert a != null;          // For `var divisor := a.Length;`\n  var divisor := a.Length;\n  if * {\n    assume divisor % 2 == 0;\n    assert divisor != 0;\n    j := j / divisor;\n  }\n  assume divisor % 2 == 0 ==> divisor != 0;\n  assert a.Length % 2 == 0 ==> j >= 10 / a.Length;\n}\n```\n\nFor this reason the IDE typically reports at least two assertion batches\nwhen hovering a method.", "start_char_idx": 2, "end_char_idx": 1948, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1467602a-6ea8-4cdd-967a-54f78c342d4e": {"__data__": {"id_": "1467602a-6ea8-4cdd-967a-54f78c342d4e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66a79f9e-7577-44d3-85f0-b71dd78a3027", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9b7661c019b0563072690b68b2c6f7c3d20bcee708b5d755dd1ee55df524a58f", "class_name": "RelatedNodeInfo"}}, "text": "7. Specifications {sec-specifications}\n\nSpecifications describe logical properties of Dafny methods, functions,\nlambdas, iterators and loops. They specify preconditions, postconditions,\ninvariants, what memory locations may be read or modified, and\ntermination information by means of _specification clauses_.\nFor each kind of specification, zero or more specification\nclauses (of the type accepted for that type of specification)\nmay be given, in any order.\n\nWe document specifications at these levels:\n\n- At the lowest level are the various kinds of specification clauses,\n  e.g., a ``RequiresClause``.\n- Next are the specifications for entities that need them,\n  e.g., a ``MethodSpec``, which typically consist of a sequence of\n  specification clauses.\n- At the top level are the entity declarations that include\n  the specifications, e.g., ``MethodDecl``.\n\nThis section documents the first two of these in a bottom-up manner.\nWe first document the clauses and then the specifications\nthat use them.\n\nSpecification clauses typically appear in a sequence. They all begin with a\nkeyword and do not end with semicolons.", "start_char_idx": 2, "end_char_idx": 1121, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7566439-59ca-43cb-b6fd-9f1b79017586": {"__data__": {"id_": "b7566439-59ca-43cb-b6fd-9f1b79017586", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e0dda40-5d34-4513-b38d-601c879304be", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "12ec8514d0c58660f6e08ea9bd11a0958cdee23803ea98604d0f2552a9100f38", "class_name": "RelatedNodeInfo"}}, "text": "7.1. Specification Clauses {sec-specification-clauses}\n\nWithin expressions in specification clauses, you can use\nspecification expressions along with any other expressions you need.", "start_char_idx": 2, "end_char_idx": 183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97fd28eb-7580-472f-a1ed-3dc2648d9e81": {"__data__": {"id_": "97fd28eb-7580-472f-a1ed-3dc2648d9e81", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2123081-6665-4ecd-b8be-8076262f1c46", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cc10d6beed87d2e03049a82b1cebfa477ee506e5050ed6f47683e21e0f953d71", "class_name": "RelatedNodeInfo"}}, "text": "7.1.1. Requires Clause {sec-requires-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int)\n  requires true\n  requires i > 0\n  requires L: 0 < i < 10\n```\n\nThe `requires` clauses specify preconditions for methods,\nfunctions, lambda expressions and iterators. Dafny checks\nthat the preconditions are met at all call sites. The\ncallee may then assume the preconditions hold on entry.\n\nIf no `requires` clause is specified, then a default implicit\nclause `requires true` is used.\n\nIf more than one `requires` clause is given, then the\nprecondition is the conjunction of all of the expressions\nfrom all of the `requires` clauses, with a collected list\nof all the given Attributes. The order of conjunctions\n(and hence the order of `requires` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for requires clauses are discussed in Section 11.4.\n\nA requires clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 1016, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "936174e5-72d8-42c1-9589-ce0f2cf9270a": {"__data__": {"id_": "936174e5-72d8-42c1-9589-ce0f2cf9270a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a176e47-3662-4f44-91cb-717ece66265f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "be5c12e97377503941502689bcf3f3818cc9311fea9136cd91a440b5923e8d5a", "class_name": "RelatedNodeInfo"}}, "text": "7.1.2. Ensures Clause {sec-ensures-clause}\n\nExamples:\n\n```dafny\nmethod {:axiom} m(i: int) returns (r: int)\n  ensures r > 0\n```\n\nAn `ensures` clause specifies the post condition for a\nmethod, function or iterator.\n\nIf no `ensures` clause is specified, then a default implicit\nclause `ensures true` is used.\n\nIf more than one `ensures` clause is given, then the\npostcondition is the conjunction of all of the expressions\nfrom all of the `ensures` clauses, with a\ncollected list of all the given Attributes.\nThe order of conjunctions\n(and hence the order of `ensures` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for ensures clauses are discussed in Section 11.4.\n\nAn ensures clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76ce7bbe-3dc7-48b2-b395-0069f6d058a4": {"__data__": {"id_": "76ce7bbe-3dc7-48b2-b395-0069f6d058a4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e9f3e80-9b1b-4704-8d1f-bda5dac0bbfe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9a5ec35d8e0cac929b03fa3c7c259088e74fbb69eca9dfb625caab2fb1fa76c3", "class_name": "RelatedNodeInfo"}}, "text": "7.1.3. Decreases Clause {sec-decreases-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int, j: int) returns (r: int)\n  decreases i, j\nmethod n(i: int) returns (r: int)\n  decreases *\n```\nDecreases clauses are used to prove termination in the\npresence of recursion. If more than one `decreases` clause is given\nit is as if a single `decreases` clause had been given with the\ncollected list of arguments and a collected list of Attributes. That is,\n\n\n```dafny\ndecreases A, B\ndecreases C, D\n```\n\nis equivalent to\n\n\n```dafny\ndecreases A, B, C, D\n```\nNote that changing the order of multiple `decreases` clauses will change\nthe order of the expressions within the equivalent single `decreases`\nclause, and will therefore have different semantics.\n\nLoops and compiled methods (but not functions and not ghost methods,\nincluding lemmas) can be specified to be possibly non-terminating.\nThis is done by declaring the method or loop with `decreases *`, which\ncauses the proof of termination to be skipped. If a `*` is present\nin a `decreases` clause, no other expressions are allowed in the\n`decreases` clause. A method that contains a possibly non-terminating\nloop or a call to a possibly non-terminating method must itself be\ndeclared as possibly non-terminating.\n\nTermination metrics in Dafny, which are declared by `decreases` clauses,\nare lexicographic tuples of expressions. At each recursive (or mutually\nrecursive) call to a function or method, Dafny checks that the effective\n`decreases` clause of the callee is less than the effective `decreases`\nclause of the caller, according to the lexicographic order. The effective\n`decreases` clause of a function or method is the concatenation of the\n`decreases` clauses of the function or method and the `decreases` clauses\nof the enclosing functions or methods, if any.", "start_char_idx": 2, "end_char_idx": 1807, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21569f60-f691-4121-a6b7-dfa8feac79c0": {"__data__": {"id_": "21569f60-f691-4121-a6b7-dfa8feac79c0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2baf0cb0-e551-4d9b-a48c-0bb18bfc6f6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b125a810a593aa5244314c48ef64b08f716b015b8ff69d4620975f1276de718", "class_name": "RelatedNodeInfo"}}, "text": "7.1.4. Framing {sec-frame-expression}\n\nExamples:\n\n```dafny\n*\no\no`a\n`a\n{ o, p, q }\n{}\n```\n\nFrame expressions denote the set of memory locations that\na program element may read or write. They are used in\n`reads` and `modifies` clauses.", "start_char_idx": 2, "end_char_idx": 235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "843843db-8fa1-4a02-b4d6-9f50be987d94": {"__data__": {"id_": "843843db-8fa1-4a02-b4d6-9f50be987d94", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87e324e5-f85a-439e-aef3-61d5bf72cdbb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d64812fe869c6c4cdb8e59f8097342bbdc606b39569925486d6a1c38964f7863", "class_name": "RelatedNodeInfo"}}, "text": "7.1.5. Reads Clause {sec-reads-clause}\n\nExamples:\n\n```dafny\nconst o: object\nconst o, oo: object\nfunction f()\n  reads *\nfunction g()\n  reads o, oo\nfunction h()\n  reads { o }\n```\n\nA `reads` clause specifies the set of memory locations\nthat a function or method may read. If no `reads` clause\nis specified, then a default implicit clause `reads *` is used.", "start_char_idx": 2, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3b400d0-007e-42b1-bd73-5824a8399bc0": {"__data__": {"id_": "e3b400d0-007e-42b1-bd73-5824a8399bc0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d7c9f44-9dee-4d91-aa45-ed7373b52e65", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7db220e803624e43e712e244338b3ef27c4f732e915aeaf9b786071a5255300a", "class_name": "RelatedNodeInfo"}}, "text": "7.1.6. Modifies Clause {sec-modifies-clause}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nconst o: object?\nconst p: A?\nmethod M()\n  modifies { o, p }\n```\n\nA `modifies` clause specifies the set of memory locations\nthat a method may write. If no `modifies` clause is specified,\nthen a default implicit clause `modifies *` is used.", "start_char_idx": 2, "end_char_idx": 329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e3979db-abd7-4720-8470-97c5548fd5d7": {"__data__": {"id_": "9e3979db-abd7-4720-8470-97c5548fd5d7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b9ed1c1-5b18-48e7-8018-f5bcc744b57f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8a59dabb65086adc352d683c0b921c7751817866ad160dc259cbabb4ee624eaa", "class_name": "RelatedNodeInfo"}}, "text": "7.1.7. Invariant Clause {sec-invariant-clause}\n\nExamples:\n\n```dafny\nmethod m()\n{\n  var i := 10;\n  while 0 < i\n    invariant 0 <= i < 10\n```\n\nAn `invariant` clause specifies a condition that must hold\nbefore and after each iteration of a loop. Invariants are\nused to prove the correctness of loops.", "start_char_idx": 2, "end_char_idx": 299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ed9c838-43fc-436e-b2b9-1cf4fd402789": {"__data__": {"id_": "3ed9c838-43fc-436e-b2b9-1cf4fd402789", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b21cd3f1-f09a-482f-9a52-efdfbf790c6c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7a3295d5e9e5c1b3880e64c088e2001252e3b4fe5c177b75d50044cfd7f54d1e", "class_name": "RelatedNodeInfo"}}, "text": "7.2. Method Specification {sec-method-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  method M(i: int) returns (r: int)\n```\n\nA method specification consists of a sequence of specification\nclauses, such as `requires`, `ensures`, `modifies`, and `decreases`.\nThese clauses specify the preconditions, postconditions, frame\nconditions, and termination conditions for the method.", "start_char_idx": 2, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b32edb7-4980-4b1c-9801-bc527e8dfd13": {"__data__": {"id_": "8b32edb7-4980-4b1c-9801-bc527e8dfd13", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5efe1599-b8a4-4f58-9aeb-e2a4076db626", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "759dca13c779d106297d1ad13b7f8c1d8008136bb57a379a3a56e5f1d7a9ce51", "class_name": "RelatedNodeInfo"}}, "text": "7.3. Function Specification {sec-function-specification}\n\nExamples:\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  function M(i: int): (r: int)\n```\n\nA function specification consists of a sequence of specification\nclauses, such as `requires`, `ensures`, `reads`, and `decreases`.\nThese clauses specify the preconditions, postconditions, frame\nconditions, and termination conditions for the function.", "start_char_idx": 2, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99fa414c-c342-46b5-8b86-9a450d7070a9": {"__data__": {"id_": "99fa414c-c342-46b5-8b86-9a450d7070a9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72b22727-70eb-40de-ae44-64a11aeb3cd4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d11ce729ff84716d42526d022648e9e5ccd6a284772822db7e5edb68c1df8a03", "class_name": "RelatedNodeInfo"}}, "text": "7.4. Lambda Specification {sec-lambda-specification}\n\nA lambda specification provides a specification for a lambda function expression;\nit consists of zero or more `reads` or `requires` clauses.", "start_char_idx": 2, "end_char_idx": 196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c3afa9a-2758-434d-8088-5204bf4f23d2": {"__data__": {"id_": "1c3afa9a-2758-434d-8088-5204bf4f23d2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b5f6116-110a-4731-9554-0aeed1636e21", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aa56a13d541141df8afeb6ec920f5d8ed67fba07521b85ec0d62ad2ad734bbca", "class_name": "RelatedNodeInfo"}}, "text": "7.5. Iterator Specification {sec-iterator-specification}\n\nAn iterator specification may contains `reads`, `modifies`,\n`decreases`, `requires`, `yield requires, `ensures`\nand `yield ensures` clauses.\n\nAn iterator specification applies both to the iterator's constructor\nmethod and to its `MoveNext` method.\n- The `reads` and `modifies`\nclauses apply to both of them (but `reads` clauses have a different meaning on iterators than on functions or methods).", "start_char_idx": 2, "end_char_idx": 456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab5546d9-3227-4b2e-aac6-98af29270f37": {"__data__": {"id_": "ab5546d9-3227-4b2e-aac6-98af29270f37", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4837d268-a4ae-4dc5-8ee8-a58db7126c6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7b491b7d689c21e787ef158d2b91b444c42d0103794bf6319b733b2eb5fe3c24", "class_name": "RelatedNodeInfo"}}, "text": "7.6. Loop Specification {sec-loop-specification}\n\nA loop specification provides the information Dafny needs to\nprove properties of a loop. It contains `invariant`,\n`decreases`, and `modifies` clauses.", "start_char_idx": 2, "end_char_idx": 202, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d09681b-a03a-4cbb-96ac-3a6aee72b7e7": {"__data__": {"id_": "3d09681b-a03a-4cbb-96ac-3a6aee72b7e7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96465517-6f21-45a3-b3a1-db856be832af", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8012ae4ec8b47a3edfcdf934d42106b9e32f3df087368a97e67a6b4f4350c867", "class_name": "RelatedNodeInfo"}}, "text": "7.7. Auto-generated boilerplate specifications\n\nAutoContracts is an experimental feature that inserts much of the dynamic-frames boilerplate\ninto a class. The user simply\n- marks the class with `{:autocontracts}` and\n- declares a function (or predicate) called Valid().\n\nAutoContracts then", "start_char_idx": 2, "end_char_idx": 291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5b39582-7e39-43ef-b7c5-ddbef18269b7": {"__data__": {"id_": "b5b39582-7e39-43ef-b7c5-ddbef18269b7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89ff5111-8b61-489d-897c-c0399c0ed95b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b2360d93287a8131830a952697f4ed6d3cbfbb508306e6786a3bd200a41129c2", "class_name": "RelatedNodeInfo"}}, "text": "7.8. Well-formedness of specifications {sec-well-formedness-specifications}\n\nDafny ensures that the `requires` clauses\nand `ensures` clauses, which are expressions,\nare well-formed independent of the body\nthey belong to.\nExamples of conditions this rules out are null pointer dereferencing,\nout-of-bounds array access, and division by zero.\nHence, when declaring the following method:\n\n\n```dafny\nmethod Test(a: array) returns (j: int)\n  requires a.Length >= 1\n  ensures a.Length % 2 == 0 ==> j >= 10 / a.Length\n{\n  j := 20;\n  var divisor := a.Length;\n  if divisor % 2 == 0 {\n    j := j / divisor;\n  }\n}\n```\n\nDafny will split the verification in two assertion batches\nthat will roughly look like the following lemmas:\n\n\n```dafny\nlemma Test_WellFormed(a: array?)\n{\n  assume a != null;       // From the definition of a\n  assert a != null;       // for the `requires a.Length >= 1`\n  assume a.Length >= 1;   // After well-formedness, we assume the requires\n  assert a != null;       // Again for the `a.Length % 2`\n  if a.Length % 2 == 0 {\n    assert a != null;     // Again for the final `a.Length`\n    assert a.Length != 0; // Because of the 10 / a.Length\n  }\n}\n\nmethod Test_Correctness(a: array?)\n{ // Here we assume the well-formedness of the condition\n  assume a != null;       // for the `requires a.Length >= 1`\n  assume a != null;       // Again for the `a.Length % 2`\n  if a.Length % 2 == 0 {\n    assume a != null;     // Again for the final `a.Length`\n    assume a.Length != 0; // Because of the 10 / a.Length\n  }\n\n  // Now the body is translated\n  var j := 20;\n  assert a != null;          // For `var divisor := a.Length;`\n  var divisor := a.Length;\n  if * {\n    assume divisor % 2 == 0;\n    assert divisor != 0;\n    j := j / divisor;\n  }\n  assume divisor % 2 == 0 ==> divisor != 0;\n  assert a.Length % 2 == 0 ==> j >= 10 / a.Length;\n}\n```\n\nFor this reason the IDE typically reports at least two assertion batches\nwhen hovering a method.", "start_char_idx": 2, "end_char_idx": 1948, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0592e598-b858-42b5-85c1-da7fbe793bc6": {"__data__": {"id_": "0592e598-b858-42b5-85c1-da7fbe793bc6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37352313-643f-41e8-9b0d-c5418883c4fc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4bc7d69c7fb27dfba288fc882e4efd7eeb1f120469dc5eb5e15d9c888d9f7a07", "class_name": "RelatedNodeInfo"}}, "text": "7. Specifications Grammar {sec-specifications-grammar}", "start_char_idx": 2, "end_char_idx": 56, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bfedfaf-2489-4181-a2f0-98f18f21e558": {"__data__": {"id_": "1bfedfaf-2489-4181-a2f0-98f18f21e558", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61ea398f-dbea-411a-87c4-5b76ce919621", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "929ac2bd4998138a7e6c795ebc0d280005d1b0de8a6187bc0bc48238613da7bf", "class_name": "RelatedNodeInfo"}}, "text": "7.1. Specification Clauses Grammar", "start_char_idx": 2, "end_char_idx": 36, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "435bff85-3394-421e-bf0c-c6c8a599028a": {"__data__": {"id_": "435bff85-3394-421e-bf0c-c6c8a599028a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8fbad48b-935c-4015-a4b8-8c9bd25a09b8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2122a996d9fc95d0c7c50a6ccad36a2e978965cf92b3a260db314bd0c8b31b34", "class_name": "RelatedNodeInfo"}}, "text": "7.1.1. Requires Clause {g-requires-clause}\n```\nRequiresClause = \"requires\" Expression Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7af6edfd-8eaf-498d-a9e4-d18a0950dce2": {"__data__": {"id_": "7af6edfd-8eaf-498d-a9e4-d18a0950dce2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b472a290-7385-4441-b009-8ff32fdce009", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "76baff534df60083a0227dfa262cc663d112167cd4f4e48619627b63035cdb21", "class_name": "RelatedNodeInfo"}}, "text": "7.1.2. Ensures Clause {g-ensures-clause}\n```\nEnsuresClause = \"ensures\" Expression Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43a60a64-ae57-40c6-a622-ced246943326": {"__data__": {"id_": "43a60a64-ae57-40c6-a622-ced246943326", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4126b8b-6c9d-4219-9afe-1d61e846c1de", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ad9bb41035aa50537551c60e0f7a1d7050a1f673f6c6d20e9b85183dc0bb7e4", "class_name": "RelatedNodeInfo"}}, "text": "7.1.3. Decreases Clause {g-decreases-clause}\n```\nDecreasesClause = \"decreases\" Expression (\",\" Expression)* Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16d09d62-bc28-4abc-bdcc-6b42374f57f4": {"__data__": {"id_": "16d09d62-bc28-4abc-bdcc-6b42374f57f4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1bc3856-9d20-4724-a709-cbef52fc6e73", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cb50ec29fcc65d4487f366a98d491db111ccc945975b2a314e2990a91e3ddcc8", "class_name": "RelatedNodeInfo"}}, "text": "7.1.4. Frame Expression {g-frame-expression}\n```\nFrameExpression =\n  \"*\" |\n  Expression |\n  Expression \"`\" FieldName |\n  \"{\" FrameExpression (\",\" FrameExpression)* \"}\" |\n  \"{}\" ;\n```", "start_char_idx": 2, "end_char_idx": 184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ec521c8-8d83-48fe-84a4-18a149e64e22": {"__data__": {"id_": "1ec521c8-8d83-48fe-84a4-18a149e64e22", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48687e07-bd8a-40c1-860f-8f9bb0bad411", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d24a6ef16cdef708686c02a642a7aa9ae45ec856a4fbaa119968f4301acc0a4e", "class_name": "RelatedNodeInfo"}}, "text": "7.1.5. Reads Clause {g-reads-clause}\n```\nReadsClause = \"reads\" FrameExpression Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 98, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e84bf9af-a1ce-4884-8393-2654282e6e1b": {"__data__": {"id_": "e84bf9af-a1ce-4884-8393-2654282e6e1b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a963af26-242b-4378-8550-c66f2f8ec470", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f3a13ae90331326e5b21c287434911e9c616ba7eb7c403cdcf9b2b6fcb719f05", "class_name": "RelatedNodeInfo"}}, "text": "7.1.6. Modifies Clause {g-modifies-clause}\n```\nModifiesClause = \"modifies\" FrameExpression Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f1a4096-801d-46f7-bfbc-6c490dd90a14": {"__data__": {"id_": "3f1a4096-801d-46f7-bfbc-6c490dd90a14", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f84da628-6a44-4073-ace2-38dae2350a24", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "44d9dd69c0af014c3f494f4f3de903f3f05e1164b06d2360dd95640d8fd99488", "class_name": "RelatedNodeInfo"}}, "text": "7.1.7. Invariant Clause {g-invariant-clause}\n```\nInvariantClause = \"invariant\" Expression Attributes? ;\n```", "start_char_idx": 2, "end_char_idx": 109, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ef6a800-3387-4dc4-84fd-2cc1f99c6410": {"__data__": {"id_": "2ef6a800-3387-4dc4-84fd-2cc1f99c6410", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8a3405e-be8f-4453-8a6a-25eaf395202b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2768e372166a2484d05454e3b35a8216206910d57e30141661bcff627d75663e", "class_name": "RelatedNodeInfo"}}, "text": "7.2. Method Specification Grammar {g-method-specification}\n```\nMethodSpec =\n  ( ReadsClause |\n    ModifiesClause |\n    RequiresClause |\n    EnsuresClause |\n    DecreasesClause )* ;\n```", "start_char_idx": 2, "end_char_idx": 186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1438c65-a5ec-415c-bc6e-5bbbc0a58012": {"__data__": {"id_": "f1438c65-a5ec-415c-bc6e-5bbbc0a58012", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06dd46d8-3c28-47b1-a72e-fc4ec913f24c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4e48b78849905e7b22d703fd5f2200a3dac697464cb019fb5dbc9ca64610deae", "class_name": "RelatedNodeInfo"}}, "text": "7.3. Function Specification Grammar {g-function-specification}\n```\nFunctionSpec =\n  ( ReadsClause |\n    RequiresClause |\n    EnsuresClause |\n    DecreasesClause )* ;\n```", "start_char_idx": 2, "end_char_idx": 171, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "686012be-2063-4270-b340-42b2f02f31f0": {"__data__": {"id_": "686012be-2063-4270-b340-42b2f02f31f0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dae702d5-0346-4c5c-b8b8-7b1b4e2300a5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "720265053921c7df72e771b813dadb48103ba98fef63265b750cc079534a4aa2", "class_name": "RelatedNodeInfo"}}, "text": "7.4. Lambda Specification Grammar {g-lambda-specification}\n```\nLambdaSpec =\n  ( ReadsClause |\n    RequiresClause )* ;\n```", "start_char_idx": 2, "end_char_idx": 123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b868a6e-04ed-4cd1-96e0-c5fbfeab7f08": {"__data__": {"id_": "6b868a6e-04ed-4cd1-96e0-c5fbfeab7f08", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "310705bb-ca2c-4eb7-a451-24da8ab12426", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d9fa568e437b6a1c807e4471a999af538fe2ec947dc1acc8f5c5d8079e1df76a", "class_name": "RelatedNodeInfo"}}, "text": "7.5. Iterator Specification Grammar {g-iterator-specification}\n```\nIteratorSpec =\n  ( ReadsClause |\n    ModifiesClause |\n    RequiresClause |\n    EnsuresClause |\n    DecreasesClause |\n    YieldRequiresClause |\n    YieldEnsuresClause )* ;\n```", "start_char_idx": 2, "end_char_idx": 243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8a4544e-a90a-41f5-be8c-19728bb2dfe0": {"__data__": {"id_": "c8a4544e-a90a-41f5-be8c-19728bb2dfe0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f699c7a8-0ce9-4072-9a95-2645eb316c88", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5e07fc5ae7e8b80e979bd8845fb2d609936c10db05c061474c3453915618bdb7", "class_name": "RelatedNodeInfo"}}, "text": "7.6. Loop Specification Grammar {g-loop-specification}\n```\nLoopSpec =\n  ( InvariantClause |\n    DecreasesClause |\n    ModifiesClause )* ;\n```", "start_char_idx": 2, "end_char_idx": 143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91244c15-b6c3-4ce5-bf0d-5f801b0b7508": {"__data__": {"id_": "91244c15-b6c3-4ce5-bf0d-5f801b0b7508", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99c28277-0306-4d81-8795-ced83614d1e5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4d2c89526827a6c4cd794d525a58d0caf19d266ef6839b673ced88394c05cfcf", "class_name": "RelatedNodeInfo"}}, "text": "8. Statements (grammar) {sec-statements}\n\nMany of Dafny's statements are similar to those in traditional\nprogramming languages, but a number of them are significantly different.\nDafny's various kinds of statements are described in subsequent sections.\n\nStatements have zero or more labels and end with either a semicolon (`;`) or a closing curly brace ('}').", "start_char_idx": 2, "end_char_idx": 360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7404e0c-09fd-45a3-9efc-75c8b7fc6c18": {"__data__": {"id_": "a7404e0c-09fd-45a3-9efc-75c8b7fc6c18", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c52466ff-3012-4504-a61c-821e9aad3493", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ef83a693b9c2fed344eb5393ffe805be52f5831545d069a3de2ef89a7a3b48e0", "class_name": "RelatedNodeInfo"}}, "text": "8.1. Labeled Statement (grammar) {sec-labeled-statement}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nmethod m(a: A) {\n  label x:\n  while true {\n     if (*) { break x; }\n  }\n  a.f := 0;\n  label y:\n  a.f := 1;\n  assert old@y(a.f) == 1;\n}\n```\n\nA labeled statement is just\n- the keyword `label`\n- followed by an identifier, which is the label,\n- followed by a colon\n- and a statement.\n\nThe label may be\nreferenced in a `break` or `continue` statement within the labeled statement\n(see Section 8.14). That is, the break or continue that\nmentions the label must be _enclosed_ in the labeled statement.\n\nThe label may also be used in an `old` expression (Section 9.22). In this case, the label\nmust have been encountered during the control flow en route to the `old`\nexpression. We say in this case that the (program point of the) label _dominates_\nthe (program point of the) use of the label.\nSimilarly, labels are used to indicate previous states in calls of two-state predicates,\nfresh expressions, unchanged expressions,\nand allocated expressions.\n\nA statement can be given several labels. It makes no difference which of these\nlabels is used to reference the statement---they are synonyms of each other.\nThe labels must be distinct from each other, and are not allowed to be the\nsame as any previous enclosing or dominating label.", "start_char_idx": 2, "end_char_idx": 1330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "855525dd-a016-462b-8b1a-b6833392e772": {"__data__": {"id_": "855525dd-a016-462b-8b1a-b6833392e772", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d918a7b-daf6-448c-b89c-8571f605c173", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ba85b3a659eb22fd2931a620a4ee7e6688833baf26e94c639308785e8e6b07be", "class_name": "RelatedNodeInfo"}}, "text": "8.3. Return Statement (grammar) {sec-return-statement}\n\nExamples:\n\n```dafny\nmethod m(i: int) returns (r: int) {\n  return i+1;\n}\nmethod n(i: int) returns (r: int, q: int) {\n  return i+1, i + 2;\n}\nmethod p() returns (i: int) {\n  i := 1;\n  return;\n}\nmethod q() {\n  return;\n}\n```\n  \nA return statement can only be used in a method. It is used\nto terminate the execution of the method.\n\nTo return a value from a method, the value is assigned to one\nof the named out-parameters sometime before a return statement.\nIn fact, the out-parameters act very much like local variables,\nand can be assigned to more than once. Return statements are\nused when one wants to return before reaching the end of the\nbody block of the method.\n\nReturn statements can be just the `return` keyword (where the current values\nof the out-parameters are used), or they can take a list of expressions to\nreturn. If a list is given, the number of expressions given must be the same\nas the number of named out-parameters. These expressions are\nevaluated, then they are assigned to the out-parameters, and then the\nmethod terminates.", "start_char_idx": 2, "end_char_idx": 1101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2a49ec7-2948-4ad9-b06a-65f9b33808cd": {"__data__": {"id_": "e2a49ec7-2948-4ad9-b06a-65f9b33808cd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8cde3af-b640-47a1-8560-0a852f53bad7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "80a083ebc9f93cb5d5d4ee50247999e966e73336556502fc5c82dba08b03fb2d", "class_name": "RelatedNodeInfo"}}, "text": "8.4. Yield Statement (grammar) {sec-yield-statement}\n\nA yield statement may only be used in an iterator.\nSee iterator types for more details\nabout iterators.\n\nThe body of an iterator is a _co-routine_. It is used\nto yield control to its caller, signaling that a new\nset of values for the iterator's yield (out-)parameters (if any)\nare available. Values are assigned to the yield parameters\nat or before a yield statement.\nIn fact, the yield parameters act very much like local variables,\nand can be assigned to more than once. Yield statements are\nused when one wants to return new yield parameter values\nto the caller. Yield statements can be just the\n`yield` keyword (where the current values of the yield parameters\nare used), or they can take a list of expressions to yield.\nIf a list is given, the number of expressions given must be the\nsame as the number of named iterator out-parameters.\nThese expressions are then evaluated, then they are\nassigned to the yield parameters, and then the iterator\nyields.", "start_char_idx": 2, "end_char_idx": 1013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b401357e-0599-498f-9646-ac2867f77daf": {"__data__": {"id_": "b401357e-0599-498f-9646-ac2867f77daf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76fbac15-1297-4e6f-a657-2cef79e2e162", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "32fead977ae3e819180c35bfe5ad4968dd7de4ceeec3a4f57aa461993c7242cd", "class_name": "RelatedNodeInfo"}}, "text": "8.5. Update and Call Statements (grammar) {sec-update-and-call-statement}\n\nExamples:\n\n```dafny\nclass C { var f: int }\nclass D {\n  var i: int\n  constructor(i: int) {\n    this.i := i;\n  }\n}\nmethod q(i: int, j: int) {}\nmethod r() returns (s: int, t: int) { return 2,3; }\nmethod m() {\n  var ss: int, tt: int, c: C?, a: array, d: D?;\n  q(0,1);\n  ss, c.f := r();\n  c := new C;\n  d := new D(2);\n  a := new int[10];\n  ss, tt := 212, 33;\n  ss :| ss > 7;\n  ss := *;\n}\n```\n\nThis statement corresponds to familiar assignment or method call statements,\nwith variations. If more than one\nleft-hand side is used, these must denote different l-values, unless the\ncorresponding right-hand sides also denote the same value.\n\nThe update statement serves several logical purposes.", "start_char_idx": 2, "end_char_idx": 762, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e02b8dff-64b8-45ba-822b-134bd16fc859": {"__data__": {"id_": "e02b8dff-64b8-45ba-822b-134bd16fc859", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db6b1bd0-7e8e-4f96-a6db-24874835b3c5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "137bf7df9ca4ca5a90149a00a0743ca42a0e9155bf8ae09b742b06055ec10751", "class_name": "RelatedNodeInfo"}}, "text": "8.5.1. Method call with no out-parameters\n1) Examples of method calls take this form\n\n```dafny\nm();\nm(1,2,3) {:attr} ;\ne.f().g.m(45);\n```\n\nAs there are no left-hand-side locations to receive values, this form is allowed only for \nmethods that have no out-parameters.", "start_char_idx": 2, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a92ce77-ab0b-4fad-95b0-02804c02166b": {"__data__": {"id_": "9a92ce77-ab0b-4fad-95b0-02804c02166b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db7bedf3-8018-409d-8737-ac87f9cc2f17", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "064294a7efab09f31b92f4f31d5d8b0fd10f0c79f2c013de511cd4430584ddd0", "class_name": "RelatedNodeInfo"}}, "text": "8.5.2. Method call with out-parameters\n\nThis form uses `:=` to denote the assignment of the out-parameters of the method to the \ncorresponding number of LHS values.\n\n```dafny\na, b.e().f := m() {:attr};\n```\n\nIn this case, the right-hand-side must be a method call and the number of\nleft-hand sides must match the number of out-parameters of the\nmethod that is called or there must be just one ``Lhs`` to the left of\nthe `:=`, which then is assigned a tuple of the out-parameters.\nNote that the result of a method call is not allowed to be used as an argument of\nanother method call, as if it were an expression.", "start_char_idx": 2, "end_char_idx": 612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43002f80-6558-4a20-84d4-9386c1f51826": {"__data__": {"id_": "43002f80-6558-4a20-84d4-9386c1f51826", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecfca604-7fbb-479a-88ab-283d7a212728", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5d96bf3548c8c0aed1d05fd8b0b238ab60f250d8c2a71a23c4fed124c9bdf0af", "class_name": "RelatedNodeInfo"}}, "text": "8.5.3. Parallel assignment\n\nA parallel-assignment has one-or-more right-hand-side expressions,\nwhich may be function calls but may not be method calls.\n\n```dafny\n    x, y := y, x;\n```\nThe above example swaps the values of `x` and `y`. If more than one\nleft-hand side is used, these must denote different l-values, unless the\ncorresponding right-hand sides also denote the same value. There must\nbe an equal number of left-hand sides and right-hand sides.\nThe most common case has only one RHS and one LHS.", "start_char_idx": 2, "end_char_idx": 507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b302d055-0f1b-4d00-bfa3-2fcadda52346": {"__data__": {"id_": "b302d055-0f1b-4d00-bfa3-2fcadda52346", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e40a18b-a220-4cf8-9621-81a5eef793fa", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9808509c44f835311e5796a52ee0ea721188645a33065330b5f23e29ab9c89cb", "class_name": "RelatedNodeInfo"}}, "text": "8.5.4. Havoc assignment {sec-havoc-statement}\nThe form with a right-hand-side that is `*` is a _havoc_ assignment.\nIt assigns an arbitrary but type-correct value to the corresponding left-hand-side.\nIt can be mixed with other assignments of computed values.\n\n```dafny\na := *;\na, b, c := 4, *, 5;\n```", "start_char_idx": 2, "end_char_idx": 301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "458063d1-6daa-481e-8423-5d886ddbd807": {"__data__": {"id_": "458063d1-6daa-481e-8423-5d886ddbd807", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0156e4a2-a04a-4dff-89e7-db14bca6eaf7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "48baf03aa5586538724ab7b113fcfbc200673a0e570a6303561abf50b0da546a", "class_name": "RelatedNodeInfo"}}, "text": "8.5.5. Such-that assignment\n\nThis form has one or more left-hand-sides, a `:|` symbol and then a boolean expression on the right.\nThe effect is to assign values to the left-hand-sides that satisfy the \nRHS condition.\n\n\n```dafny\nx, y :| 0 < x+y < 10;\n```\nThis is read as assign values to `x` and `y` such that `0 < x+y < 10` is true.\nThe given boolean expression need not constrain the LHS values uniquely:\nthe choice of satisfying values is non-deterministic. \nThis can be used to make a choice as in the\nfollowing example where we choose an element in a set.\n\n\n```dafny\nmethod Sum(X: set) returns (s: int)\n{\n  s := 0; var Y := X;\n  while Y != {}\n    decreases Y\n  {\n    var y: int;\n    y :| y in Y;\n    s, Y := s + y, Y - {y};\n  }\n}\n```\n\nDafny will report an error if it cannot prove that values\nexist that satisfy the condition. \n\nIn this variation, with an `assume` keyword\n\n```dafny\n    y :| assume y in Y;\n```\nDafny assumes without proof that an appropriate value exists.\n\n\nNote that the syntax\n\n```text\n    Lhs \":\"\n```\n\nis interpreted as a label in which the user forgot the `label` keyword.", "start_char_idx": 2, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afb2eb4e-22d1-4baf-9885-a20780c8f898": {"__data__": {"id_": "afb2eb4e-22d1-4baf-9885-a20780c8f898", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49f16024-b8eb-4bc4-808b-5c22198eec35", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "acab6b05fa62da425df82b7c9492ba402ad874aa613d35dc9ea0c672a865d8b1", "class_name": "RelatedNodeInfo"}}, "text": "8.6. Update with Failure Statement (`:-`) (grammar) {sec-update-with-failure-statement}\n\nSee the subsections below for examples.\n\nA `:-`[^elephant] statement is an alternate form of the `:=` statement that allows for abrupt return if a failure is detected.\nThis is a language feature somewhat analogous to exceptions in other languages.\n\n[^elephant]: The `:-` token is called the elephant symbol or operator.\n\nAn update-with-failure statement uses _failure-compatible_ types.\nA failure-compatible type is a type that has the following (non-static) members (each with no in-parameters and one out-parameter):\n\n * a non-ghost function `IsFailure()` that returns a `bool`\n * an optional non-ghost function `PropagateFailure()` that returns a value assignable to the first out-parameter of the caller\n * an optional function `Extract()`\n(PropagateFailure and Extract were permitted to be methods (but deprecated) prior to Dafny 4. They will be required to be functions in Dafny 4.)\n\nA failure-compatible type with an `Extract` member is called _value-carrying_.\n\nTo use this form of update,\n\n * if the RHS of the update-with-failure statement is a method call, the first out-parameter of the callee must be failure-compatible\n * if instead, the RHS of the update-with-failure statement is one or more expressions, the first of these expressions must be a value with a failure-compatible type\n * the caller must have a first out-parameter whose type matches the output of `PropagateFailure` applied to the first output of the callee, unless an\n`expect`, `assume`, or `assert` keyword is used after `:-` (cf. Section 8.6.7).\n * if the failure-compatible type of the RHS does not have an `Extract` member,\nthen the LHS of the `:-` statement has one less expression than the RHS\n(or than the number of out-parameters from the method call), the value of the first out-parameter or expression being dropped\n(see the discussion and examples in Section 8.6.2)\n * if the failure-compatible type of the RHS does have an `Extract` member,\nthen the LHS of the `:-` statement has the same number of expressions as the RHS\n(or as the number of out-parameters from the method call)\nand the type of the first LHS expression must be assignable from the return type of the `Extract` member\n* the `IsFailure` and `PropagateFailure` methods may not be ghost\n* the LHS expression assigned the output of the `Extract` member is ghost precisely if `Extract` is ghost\n\nThe following subsections show various uses and alternatives.", "start_char_idx": 2, "end_char_idx": 2504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47980806-e92a-4b22-abf6-5e23ecdb474d": {"__data__": {"id_": "47980806-e92a-4b22-abf6-5e23ecdb474d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15bd04b9-73ea-4679-9a86-a22c733dc51a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "21d255fe1ac6d2563a0b2a4d46680bcb9b440f4812d6657a01b0da2559da4dd4", "class_name": "RelatedNodeInfo"}}, "text": "8.6.1. Failure compatible types {sec-failure-compatible-types}\n\nA simple failure-compatible type is the following:\n\n```dafny\ndatatype Status =\n| Success\n| Failure(error: string)\n{\n  predicate IsFailure() { this.Failure?  }\n  function PropagateFailure(): Status\n    requires IsFailure()\n  {\n    Failure(this.error)\n  }\n}\n```\n\nA commonly used alternative that carries some value information is something like this generic type:\n\n```dafny\ndatatype Outcome =\n| Success(value: T)\n| Failure(error: string)\n{\n  predicate IsFailure() {\n    this.Failure?\n  }\n  function PropagateFailure(): Outcome\n    requires IsFailure()\n  {\n    Failure(this.error) // this is Outcome.Failure(...)\n  }\n  function Extract(): T\n    requires !IsFailure()\n  {\n    this.value\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8ce0176-2ab1-4be4-bd91-9849822115f7": {"__data__": {"id_": "d8ce0176-2ab1-4be4-bd91-9849822115f7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ab82ab5-8b78-4fb2-b7b7-338844b19ae9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5a5942bcc01712db68a904866adba457cc7b9d5783451c8509c3203350533248", "class_name": "RelatedNodeInfo"}}, "text": "8.6.2. Simple status return with no other outputs {sec-simple-fc-return}\n\nThe simplest use of this failure-return style of programming is to have a method call that just returns a non-value-carrying `Status` value:\n\n```dafny\nmethod Callee(i: int) returns (r: Status)\n{\n  if i < 0 { return Failure(\"negative\"); }\n  return Success;\n}\n\nmethod Caller(i: int) returns (rr: Status)\n{\n  :- Callee(i);\n  ...\n}\n```\n\nNote that there is no LHS to the `:-` statement.\nIf `Callee` returns `Failure`, then the caller immediately returns,\nnot executing any statements following the call of `Callee`.\nThe value returned by `Caller` (the value of `rr` in the code above) is the result of `PropagateFailure` applied to the value returned by `Callee`, which is often just the same value.\nIf `Callee` does not return `Failure` (that is, returns a value for which `IsFailure()` is `false`)\nthen that return value is forgotten and execution proceeds normally with the statements following the call of `Callee` in the body of `Caller`.\n\nThe desugaring of the `:- Callee(i);` statement is\n\n```dafny\nvar tmp;\ntmp := Callee(i);\nif tmp.IsFailure() {\n  rr := tmp.PropagateFailure();\n  return;\n}\n```\nIn this and subsequent examples of desugaring, the `tmp` variable is a new, unique variable, unused elsewhere in the calling member.", "start_char_idx": 2, "end_char_idx": 1305, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2529cda-e77a-4516-850d-1a53d92e0efd": {"__data__": {"id_": "d2529cda-e77a-4516-850d-1a53d92e0efd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e77509d-0595-4d9c-9390-bc2d9f2d2fda", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9f2cb4eebe6648c586d54f747160fbf1d2aec9eb2118122161d82a885cc52b46", "class_name": "RelatedNodeInfo"}}, "text": "8.6.3. Status return with additional outputs {sec-multiple-output-fc}\n\nThe example in the previous subsection affects the program only through side effects or the status return itself.\nIt may well be convenient to have additional out-parameters, as is allowed for `:=` updates;\nthese out-parameters behave just as for `:=`.\nHere is an example:\n\n\n```dafny\nmethod Callee(i: int) returns (r: Status, v: int, w: int)\n{\n  if i < 0 { return Failure(\"negative\"), 0, 0; }\n  return Success, i+i, i*i;\n}\n\nmethod Caller(i: int) returns (rr: Status, k: int)\n{\n  var j: int;\n  j, k :- Callee(i);\n  k := k + k;\n  ...\n}\n```\n\nHere `Callee` has two outputs in addition to the `Status` output.\nThe LHS of the `:-` statement accordingly has two l-values to receive those outputs.\nThe recipients of those outputs may be any sort of l-values;\nhere they are a local variable and an out-parameter of the caller.\nThose outputs are assigned in the `:-` call regardless of the `Status` value:\n\n   * If `Callee` returns a failure value as its first output, then the other outputs are assigned, \nthe _caller's_ first out-parameter (here `rr`) is assigned the value of `PropagateFailure`, and the caller returns.\n   * If `Callee` returns a non-failure value as its first output, then the other outputs are assigned and the\ncaller continues execution as normal.\n\nThe desugaring of the `j, k :- Callee(i);` statement is\n\n```dafny\nvar tmp;\ntmp, j, k := Callee(i);\nif tmp.IsFailure() {\n  rr := tmp.PropagateFailure();\n  return;\n}\n```", "start_char_idx": 2, "end_char_idx": 1502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0112a5e2-596b-447f-826a-b50e6ffdb7d3": {"__data__": {"id_": "0112a5e2-596b-447f-826a-b50e6ffdb7d3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c2fb702-19d5-4c76-bdcc-04465e78b1aa", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "644c752d67860e498a6f66f9084faaae87c5bc5181a01caf32672c765eab2fa1", "class_name": "RelatedNodeInfo"}}, "text": "8.6.4. Failure-returns with additional data {sec-value-carrying}\n\nThe failure-compatible return value can carry additional data as shown in the `Outcome` example above.\nIn this case there is a (first) LHS l-value to receive this additional data. The type of that first LHS\nvalue is one that is assignable from the result of the `Extract` function, not the actual first out-parameter.\n\n\n```dafny\nmethod Callee(i: int) returns (r: Outcome, v: int)\n{\n  if i < 0 { return Failure(\"negative\"), i+i; }\n  return Success(i), i+i;\n}\n\nmethod Caller(i: int) returns (rr: Outcome, k: int)\n{\n  var j: int;\n  j, k :- Callee(i);\n  k := k + k;\n  ...\n}\n```\n\nSuppose `Caller` is called with an argument of `10`.\nThen `Callee` is called with argument `10`\nand returns `r` and `v` of `Outcome.Success(10)` and `20`.\nHere `r.IsFailure()` is `false`, so control proceeds normally.\nThe `j` is assigned the result of `r.Extract()`, which will be `10`,\nand `k` is assigned `20`.\nControl flow proceeds to the next line, where `k` now gets the value `40`.\n\nSuppose instead that `Caller` is called with an argument of `-1`.\nThen `Callee` is called with the value `-1`\n and returns `r` and `v` with values `Outcome.Failure(\"negative\")` and `-2`.\n`k` is assigned the value of `v` (-2).\nBut `r.IsFailure()` is `true`, so control proceeds directly to return from `Caller`.\nThe first out-parameter of `Caller` (`rr`) gets the value of `r.PropagateFailure()`,\nwhich is `Outcome.Failure(\"negative\")`; `k` already has the value `-2`.\nThe rest of the body of `Caller` is skipped.\nIn this example, the first out-parameter of `Caller` has a failure-compatible type\nso the exceptional return will propagate up the call stack.\nIt will keep propagating up the call stack\nas long as there are callers with this first special output type\nand calls that use `:-`\nand the return value keeps having `IsFailure()` true.\n\nThe desugaring of the `j, k :- Callee(i);` statement in this example is\n\n```dafny\nvar tmp;\ntmp, k := Callee(i);\nif tmp.IsFailure() {\n  rr := tmp.PropagateFailure();\n  return;\n}\nj := tmp.Extract();\n```", "start_char_idx": 2, "end_char_idx": 2075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ee92651-c4e5-4d73-b552-19d72eb749ea": {"__data__": {"id_": "4ee92651-c4e5-4d73-b552-19d72eb749ea", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5504e5f5-707f-42b4-84c6-40f09942f9f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83f85a2ce65199841face0d53916bc0f0d7f9552fa513522624584a674c39791", "class_name": "RelatedNodeInfo"}}, "text": "8.6.5. RHS with expression list {sec-failure-expressions}\n\nInstead of a failure-returning method call on the RHS of the statement,\nthe RHS can instead be a list of expressions.\nAs for a `:=` statement, in this form, the expressions on the left and right sides of `:-` must correspond,\njust omitting a LHS l-value for the first RHS expression if its type is not value-carrying.\nThe semantics is very similar to that in the previous subsection.\n\n * The first RHS expression must have a failure-compatible type.\n * All the assignments of RHS expressions to LHS values except for the first RHS value are made.\n * If the first RHS value (say `r`) responds `true` to `r.IsFailure()`,\nthen `r.PropagateFailure()` is assigned to the first out-parameter of the _caller_\nand the execution of the caller's body is ended.\n * If the first RHS value (say `r`) responds `false` to `r.IsFailure()`, then\n   * if the type of `r` is value-carrying, then `r.Extract()` is assigned to the first LHS value of the `:-` statement;\nif `r` is not value-carrying, then the corresponding LHS l-value is omitted\n   * execution of the caller's body continues with the statement following the `:-` statement.\n\nA RHS with a method call cannot be mixed with a RHS containing multiple expressions.\n\nFor example, the desugaring of\n\n```dafny\nmethod m(r: Status) returns (rr: Status) {\n  var k;\n  k :- r, 7;\n  ...\n}\n```\nis\n\n```dafny\nvar k;\nvar tmp;\ntmp, k := r, 7;\nif tmp.IsFailure() {\n  rr := tmp.PropagateFailure();\n  return;\n}\n```", "start_char_idx": 2, "end_char_idx": 1499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3860b06d-e4ef-43c4-9b62-c96afd496c3f": {"__data__": {"id_": "3860b06d-e4ef-43c4-9b62-c96afd496c3f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a50f42e9-0547-46b9-acb6-c9a57109c585", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a2c40673c975715a95f2be37af1103fd9044c3b5b5b934227dc8cad6fb1c8b97", "class_name": "RelatedNodeInfo"}}, "text": "8.6.6. Failure with initialized declaration. {sec-failure-with-declaration}\n\nThe `:-` syntax can also be used in initialization, as in\n\n```dafny\nvar s, t :- M();\n```\nThis is equivalent to\n\n```dafny\nvar s, t;\ns, t :- M();\n```\nwith the semantics as described above.", "start_char_idx": 2, "end_char_idx": 265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "901ea986-44df-49d9-b70c-f907f213c838": {"__data__": {"id_": "901ea986-44df-49d9-b70c-f907f213c838", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18cf947d-a387-486d-86f0-4f9ebf308eca", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "489d55c8cf78d17be68b9c9a61626594169f24ca9b41e5949948d5989353175a", "class_name": "RelatedNodeInfo"}}, "text": "8.6.7. Keyword alternative {sec-failure-return-keyword}\n\nIn any of the above described uses of `:-`, the `:-` token may be followed immediately by the keyword `expect`, `assert` or `assume`.\n\n* `assert` means that the RHS evaluation is expected to be successful, but that\nthe verifier should prove that this is so; that is, the verifier should prove\n`assert !r.IsFailure()` (where `r` is the status return from the callee)\n(cf. Section 8.17)\n* `assume` means that the RHS evaluation should be assumed to be successful,\nas if the statement `assume !r.IsFailure()` followed the evaluation of the RHS\n(cf. Section 8.18)\n* `expect` means that the RHS evaluation should be assumed to be successful\n(like using `assume` above), but that the compiler should include a\nrun-time check for success. This is equivalent to including\n`expect !r.IsFailure()` after the RHS evaluation; that is, if the status\nreturn is a failure, the program halts.\n(cf. Section 8.19)\n\nIn each of these cases, there is no abrupt return from the caller. Thus\nthere is no evaluation of `PropagateFailure`. Consequently the first\nout-parameter of the caller need not match the return type of\n`PropagateFailure`; indeed, the failure-compatible type returned by the\ncallee need not have a `PropagateFailure` member.\n\nThe equivalent desugaring replaces\n\n```dafny\nif tmp.IsFailure() {\n  rr := tmp.PropagateFailure();\n  return;\n}\n```\nwith\n\n```dafny\nexpect !tmp.IsFailure(), tmp;\n```\nor\n\n```dafny\nassert !tmp.IsFailure();\n```\nor\n\n```dafny\nassume !tmp.IsFailure();\n```\n\nThere is a grammatical nuance that the user should be aware of.\nThe keywords `assert`, `assume`, and `expect` can start an expression.\nFor example, `assert P; E` can be an expression. However, in\n`e :- assert P; E;` the `assert` is parsed as the keyword associated with\n`:-`. To have the `assert` considered part of the expression use parentheses:\n`e :- (assert P; E);`.", "start_char_idx": 2, "end_char_idx": 1900, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d074e3c-968e-4cb7-aa37-6f9c8168ed3c": {"__data__": {"id_": "2d074e3c-968e-4cb7-aa37-6f9c8168ed3c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9051c3ce-96ef-4234-8ed3-d807d227c70c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "44d25d92307a9c926e636e58a4844bb9d5084047d605cf53253377c61a88e9a0", "class_name": "RelatedNodeInfo"}}, "text": "8.6.8. Key points\n\nThere are several points to note.\n\n* The first out-parameter of the callee is special.\n  It has a special type and that type indicates that the value is inspected to see if an abrupt return\n  from the caller is warranted.\n  This type is often a datatype, as shown in the examples above, but it may be any type with the appropriate members.\n* The restriction on the type of caller's first out-parameter is\n  just that it must be possible (perhaps through generic instantiation and type inference, as in these examples) \n  for `PropagateFailure` applied to the failure-compatible output from the callee to produce a value of \n  the caller's first out-parameter type.\n  If the caller's first out-parameter type is failure-compatible (which it need not be),\n  then failures can be propagated up the call chain.\n  If the keyword form (e.g. `assume`) of the statement is used, then no `PropagateFailure` member\n  is needed, because no failure can occur, and there is no restriction on the caller's first out-parameter.\n* In the statement `j, k :- Callee(i);`,\n  when the callee's return value has an `Extract` member,\n  the type of `j` is not the type of the first out-parameter of `Callee`.\n  Rather it is a type assignable from the output type of `Extract` applied to the first out-value of `Callee`.\n* A method like `Callee` with a special first out-parameter type can still be used in the normal way:\n  `r, k := Callee(i)`.\n  Now `r` gets the first output value from `Callee`, of type `Status` or `Outcome` in the examples above.\n  No special semantics or exceptional control paths apply.\n  Subsequent code can do its own testing of the value of `r`\n  and whatever other computations or control flow are desired.\n* The caller and callee can have any (positive) number of output arguments,\n  as long as the callee's first out-parameter has a failure-compatible type\n  and the caller's first out-parameter type matches `PropagateFailure`.\n* If there is more than one LHS, the LHSs must denote different l-values, \n  unless the RHS is a list of expressions and the corresponding RHS values are equal.\n* The LHS l-values are evaluated before the RHS method call,\n  in case the method call has side-effects or return values that modify the l-values prior to assignments being made.\n\nIt is important to note the connection between the failure-compatible types used in the caller and callee,\nif they both use them.\nThey do not have to be the same type, but they must be closely related,\nas it must be possible for the callee's `PropagateFailure` to return a value of the caller's failure-compatible type.\nIn practice this means that one such failure-compatible type should be used for an entire program.\nIf a Dafny program uses a library shared by multiple programs, the library should supply such a type \nand it should be used by all the client programs (and, effectively, all Dafny libraries).\nIt is also the case that it is inconvenient to mix types such as `Outcome` and `Status` above within the same program.\nIf there is a mix of failure-compatible types, then the program will need to use `:=` statements and code for\nexplicit handling of failure values.", "start_char_idx": 2, "end_char_idx": 3173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4250851-2f70-4862-b2b2-7f046a04685b": {"__data__": {"id_": "f4250851-2f70-4862-b2b2-7f046a04685b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d775ed0-11a5-4365-9e89-ae341a2368f7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "27397c72c8cbd3c599c4c29190d2e6ec3db65f5457f70ba7f224cbe23e6d0795", "class_name": "RelatedNodeInfo"}}, "text": "8.6.9. Failure returns and exceptions {sec-failure-return-and-exceptions}\n\nThe `:-` mechanism is like the exceptions used in other programming languages, with some similarities and differences.\n\n * There is essentially just one kind of 'exception' in Dafny,\nthe variations of the failure-compatible data type.\n * Exceptions are passed up the call stack whether or not intervening methods are aware of the possibility of an exception,\nthat is, whether or not the intervening methods have declared that they throw exceptions.\nNot so in Dafny: a failure is passed up the call stack only if each caller has a failure-compatible first out-parameter, is itself called in a `:-` statement, and returns a value that responds true to `IsFailure()`.\n * All methods that contain failure-return callees must explicitly handle those failures\nusing either `:-` statements or using `:=` statements with a LHS to receive the failure value.", "start_char_idx": 2, "end_char_idx": 925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bbc1b477-7d58-4505-8316-73ae24a4276d": {"__data__": {"id_": "bbc1b477-7d58-4505-8316-73ae24a4276d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "249fea6d-1ddb-49b4-9b56-1b9462b44a40", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a04c9b6da24645185ad4eb5209403525822c50ee977602cae5ed2f13e73ed6d2", "class_name": "RelatedNodeInfo"}}, "text": "8.7. Variable Declaration Statement (grammar) {sec-variable-declaration-statement}\n\nExamples:\n\n```dafny\nmethod m() {\n  var x, y: int; // x's type is inferred, not necessarily 'int'\n  var b: bool, k: int;\n  x := 1; // settles x's type\n}\n```\n\nA variable declaration statement is used to declare one or more local variables in\na method or function. The type of each local variable must be given\nunless its type can be inferred, either from a given initial value, or\nfrom other uses of the variable. If initial values are given, the number\nof values must match the number of variables declared.\n\nThe scope of the declared variable extends to the end of the block in which it is\ndeclared. However, be aware that if a simple variable declaration is followed\nby an expression (rather than a subsequent statement) then the `var` begins a\nLet Expression and the scope of the introduced variables is\nonly to the end of the expression. In this case, though, the `var` is in an expression\ncontext, not a statement context.\n\nNote that the type of each variable must be given individually. The following code\n\n\n```dafny\nvar x, y : int;\nvar x, y := 5, 6;\nvar x, y :- m();\nvar x, y :| 0 < x + y < 10;\nvar (x, y) := makePair();\nvar Cons(x, y) = ConsMaker();\n```\ndoes not declare both `x` and `y` to be of type `int`. Rather it will give an\nerror explaining that the type of `x` is underspecified if it cannot be\ninferred from uses of x.\n\nThe variables can be initialized with syntax similar to update statements (cf. Section 8.5).\n\nIf the RHS is a call, then any variable receiving the value of a\nformal ghost out-parameter will automatically be declared as ghost, even\nif the `ghost` keyword is not part of the variable declaration statement.\n\nThe left-hand side can also contain a tuple of patterns that will be\nmatched against the right-hand-side. For example:\n\n\n```dafny\nfunction returnsTuple() : (int, int)\n{\n    (5, 10)\n}\n\nfunction usesTuple() : int\n{\n    var (x, y) := returnsTuple();\n    x + y\n}\n```\n\nThe initialization with failure operator `:-` returns from the enclosing method if the initializer evaluates to a failure value of a failure-compatible type (see Section 8.6).", "start_char_idx": 2, "end_char_idx": 2169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "abfc7f75-32aa-4741-a906-4afe63a1aeba": {"__data__": {"id_": "abfc7f75-32aa-4741-a906-4afe63a1aeba", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3914e61e-a6b9-4f72-b512-0dfb7b8459d3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "56b422d19ad652d73d10eb5cc71507cde49f262092ed92bf76c4d418201d6301", "class_name": "RelatedNodeInfo"}}, "text": "8.8. Guards (grammar) {sec-guard}\n\nExamples (in `if` statements):\n\n```dafny\nmethod m(i: int) {\n  if (*) { print i; }\n  if i > 0 { print i; }\n}\n```\n\nGuards are used in `if` and `while` statements as boolean expressions. Guards\ntake two forms.\n\nThe first and most common form is just a boolean expression.\n\nThe second form is either `*` or `(*)`. These have the same meaning. An\nunspecified boolean value is returned. The value returned\nmay be different each time it is executed.", "start_char_idx": 2, "end_char_idx": 479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11a7789b-7c11-4e8e-9152-f318b5336952": {"__data__": {"id_": "11a7789b-7c11-4e8e-9152-f318b5336952", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87a02f41-004f-45a1-93d9-93ab7acf6718", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2649e5ce9b99b46ff6284deadd1596e637c6f80d19dde8a94f7d7b16fe4905b9", "class_name": "RelatedNodeInfo"}}, "text": "8.9. Binding Guards (grammar) {sec-binding-guards}\n\nExamples (in `if` statements):\n\n```dafny\nmethod m(i: int) {\n  ghost var k: int;\n  if i, j :| 0 < i+j < 10 {\n    k := 0;\n  } else {\n    k := 1;\n  }\n}\n```\n\nAn `if` statement can also take a _binding guard_.\nSuch a guard checks if there exist values for the given variables that satisfy the given expression.\nIf so, it binds some satisfying values to the variables and proceeds\ninto the \"then\" branch; otherwise it proceeds with the \"else\" branch,\nwhere the bound variables are not in scope.\n\nIn other words, the statement\n\n\n```dafny\nif x :| P { S } else { T }\n```\n\nhas the same meaning as\n\n\n```dafny\nif exists x :: P { var x :| P; S } else { T }\n```\n\nThe identifiers bound by the binding guard are ghost variables\nand cannot be assigned to non-ghost variables. They are only\nused in specification contexts.\n\nHere is another example:\n\n\n```dafny\npredicate P(n: int)\n{\n  n % 2 == 0\n}\n\nmethod M1() returns (ghost y: int)\n    requires exists x :: P(x)\n    ensures P(y)\n{\n  if x : int :| P(x) {\n      y := x;\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f083894-9231-4036-afa5-878b4c2d633c": {"__data__": {"id_": "7f083894-9231-4036-afa5-878b4c2d633c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51f18f3d-61e8-4599-8cad-370ea2cb8661", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "168e17a7ecaf6798a271dc22c641dfac4306c81c9575c9fa78f0eac156225699", "class_name": "RelatedNodeInfo"}}, "text": "8.10. If Statement (grammar) {sec-if-statement}\n\nExamples:\n\n```dafny\nmethod m(i: int) {\n  var x: int;\n  if i > 0 {\n    x := i;\n  } else {\n    x := -i;\n  }\n  if * {\n    x := i;\n  } else {\n    x := -i;\n  }\n  if i: nat, j: nat :| i+j<10 {\n    assert i < 10;\n  }\n  if i == 0 {\n    x := 0;\n  } else if i > 0 {\n    x := 1;\n  } else {\n    x := -1;\n  }\n  if \n    case i == 0 => x := 0;\n    case i > 0 => x := 1;\n    case i  x := -1;\n}\n```\n\nThe simplest form of an `if` statement uses a guard that is a boolean\nexpression. For example,\n\n\n```dafny\n  if x < 0 {\n    x := -x;\n  }\n```\n\nUnlike `match` statements, `if` statements do not have to be exhaustive:\nomitting the `else` block is the same as including an empty `else`\nblock.  To ensure that an `if` statement is exhaustive, use the\n`if-case` statement documented below.\n\nIf the guard is an asterisk then a non-deterministic choice is made:\n\n\n```dafny\n  if * {\n    print \"True\";\n  } else {\n    print \"False\";\n  }\n```\n\nThe then alternative of the if-statement must be a block statement;\nthe else alternative may be either a block statement or another if statement.\nThe condition of the if statement need not (but may) be enclosed in parentheses.\n\nAn if statement with a binding guard is non-deterministic;\nit will not be compiled if `--enforce-determinism` is enabled\n(even if it can be proved that there is a unique value).\nAn if statement with `*` for a guard is non-deterministic and ghost.\n\nThe `if-case` statement using the `AlternativeBlock` form is similar to the\n`if ... fi` construct used in the book \"A Discipline of Programming\" by\nEdsger W. Dijkstra. It is used for a multi-branch `if`.\n\nFor example:\n\n```dafny\nmethod m(x: int, y: int) returns (max: int) \n{\n  if {\n    case x  max := y;\n    case y  max := x;\n  }\n}\n```\n\nIn this form, the expressions following the `case` keyword are called\n_guards_. The statement is evaluated by evaluating the guards in an\nundetermined order until one is found that is `true` and the statements\nto the right of `=>` for that guard are executed. The statement requires\nat least one of the guards to evaluate to `true` (that is, `if-case`\nstatements must be exhaustive: the guards must cover all cases).\n\nIn the if-with-cases, a sequence of statements may follow the `=>`; it\nmay but need not be a block statement (a brace-enclosed sequence of statements).\n\nThe form that used `...` (a refinement feature) as the guard is deprecated.", "start_char_idx": 2, "end_char_idx": 2423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5964dbf0-37d0-4421-b6b4-8e52cfe613f2": {"__data__": {"id_": "5964dbf0-37d0-4421-b6b4-8e52cfe613f2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c0c1bf9-307e-449b-86ff-b236af956e3e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dac2fe7ef1c8f8b06a1db1bbc965a494d21c493f7d2d53db261aa9ddcb9704eb", "class_name": "RelatedNodeInfo"}}, "text": "8.11. Match Statement (grammar) {sec-match-statement}\n\nExamples:\n\n```dafny\n\nmatch list {\n  case Nil => {}\n  case Cons(head,tail) => print head;\n}\nmatch x\ncase 1 =>\n  print x;\ncase 2 =>\n  var y := x*x;\n  print y;\ncase _ =>\n  print \"Other\";\n  // Any statement after is captured in this case.\n```\n\nThe `match` statement is used to do case analysis on a value of an expression.\nThe expression may be a value of a basic type (e.g. `int`), a newtype, or\nan inductive or coinductive datatype (which includes the built-in tuple types). \nThe expression after the `match` keyword is called the _selector_. \nThe selector is evaluated and then matched against\neach clause in order until a matching clause is found.\n\nThe process of matching the selector expression against the case patterns is\nthe same as for match expressions and is described in\nSection 9.31.2.\n\nThe selector need not be enclosed in parentheses; the sequence of cases may but need not be enclosed in braces.\nThe cases need not be disjoint.\nThe cases must be exhaustive, but you can use a wild variable (`_`) or a simple identifier to indicate \"match anything\".\nPlease refer to the section about case patterns to learn more about shadowing, constants, etc.\n\nThe code below shows an example of a match statement.\n\n\n```dafny\ndatatype Tree = Empty | Node(left: Tree, data: int, right: Tree)\n\n// Return the sum of the data in a tree.\nmethod Sum(x: Tree) returns (r: int)\n{\n  match x {\n    case Empty => r := 0;\n    case Node(t1, d, t2) =>\n      var v1 := Sum(t1);\n      var v2 := Sum(t2);\n      r := v1 + d + v2;\n  }\n}\n```\n\nNote that the `Sum` method is recursive yet has no `decreases` annotation.\nIn this case it is not needed because Dafny is able to deduce that\n`t1` and `t2` are _smaller_ (structurally) than `x`. If `Tree` had been\ncoinductive this would not have been possible since `x` might have been\ninfinite.", "start_char_idx": 2, "end_char_idx": 1872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f0487b5-12e4-4c71-9f11-e00af22b0cc7": {"__data__": {"id_": "4f0487b5-12e4-4c71-9f11-e00af22b0cc7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03a64d82-0dff-41e3-8978-1bbb104218e3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "752f76f0f5f82b77cfb332ada1b2ceb993a1985e41cf100b50fb7bad3e50ed7c", "class_name": "RelatedNodeInfo"}}, "text": "8.12. While Statement (grammar) {sec-while-statement}\n\nExamples:\n\n```dafny\nmethod m() {\n  var i := 10;\n  while 0 < i\n    invariant 0 <= i <= 10\n    decreases i\n  {\n    i := i-1;\n  }\n  while * {}\n  i := *;\n  while \n     decreases if i < 0 then -i else i\n  {\n     case i  i := i + 1;\n     case i > 0 => i := i - 1;\n  }\n}\n```\n\nLoops\n- may be a conventional loop with a condition and a block statement for a body\n- need not have parentheses around the condition\n- may have a `*` for the condition (the loop is then non-deterministic)\n- binding guards are not allowed\n- may have a case-based structure\n- may have no body --- a bodyless loop is not compilable, but can be reaosnaed about\n\nImportantly, loops need _loop specifications_ in order for Dafny to prove that\nthey obey expected behavior. In some cases Dafny can infer the loop specifications by analyzing the code,\nso the loop specifications need not always be explicit.\nThese specifications are described in Section 7.6 and Section 8.15.\n\nThe general loop statement in Dafny is the familiar `while` statement.\nIt has two general forms.\n\nThe first form is similar to a while loop in a C-like language. For\nexample:\n\n\n```dafny\nmethod m(){\n  var i := 0;\n  while i < 5 {\n    i := i + 1;\n  }\n}\n```\n\nIn this form, the condition following the `while` is one of these:\n\n* A boolean expression. If true it means execute one more\niteration of the loop. If false then terminate the loop.\n* An asterisk (`*`), meaning non-deterministically yield either\n`true` or `false` as the value of the condition\n\nThe _body_ of the loop is usually a block statement, but it can also\nbe missing altogether.\nA loop with a missing body may still pass verification, but any attempt\nto compile the containing program will result in an error message.\nWhen verifying a loop with a missing body, the verifier will skip attempts\nto prove loop invariants and decreases assertions that would normally be\nasserted at the end of the loop body.\nThere is more discussion about bodyless loops in Section 8.15.4.\n\nThe second form uses a case-based block. It is similar to the\n`do ... od` construct used in the book \"A Discipline of Programming\" by\nEdsger W. Dijkstra. For example:\n\n\n```dafny\nmethod m(n: int){\n  var r := n;\n  while\n    decreases if 0 <= r then r else -r\n  {\n    case r \n      r := r + 1;\n    case 0 \n      r := r - 1;\n  }\n}\n```\nFor this form, the guards are evaluated in some undetermined order\nuntil one is found that is true, in which case the corresponding statements\nare executed and the while statement is repeated.\nIf none of the guards evaluates to true, then the\nloop execution is terminated.\n\nThe form that used `...` (a refinement feature) as the guard is deprecated.", "start_char_idx": 2, "end_char_idx": 2709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e44257c1-9830-418b-abf3-6151237bdf3f": {"__data__": {"id_": "e44257c1-9830-418b-abf3-6151237bdf3f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f8c1349-0a25-46d5-8422-da4ed056e86c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "174eb3ff99d86e4363fbe66b8aa1c2ec0030e057b158f21356da1003a22a5a41", "class_name": "RelatedNodeInfo"}}, "text": "8.13. For Loops (grammar) {sec-for-statement}\n\nExamples:\n\n```dafny\nmethod m() decreases * {\n  for i := 0 to 10 {}\n  for _ := 0 to 10 {}\n  for i := 0 to * invariant i >= 0 decreases * {}\n  for i: int := 10 downto 0 {}\n  for i: int := 10 downto 0 \n}\n```\nThe `for` statement provides a convenient way to write some common loops.\n\nThe statement introduces a local variable with optional type, which is called\nthe _loop index_. The loop index is in scope in the specification and the body,\nbut not after the `for` loop. Assignments to the loop index are not allowed.\nThe type of the loop index can typically be inferred; if so, it need not be given\nexplicitly. If the identifier is not used, it can be written as `_`, as illustrated\nin this repeat-20-times loop:\n\n```dafny\nfor _ := 0 to 20 {\n  Body\n}\n```\n\nThere are four basic variations of the `for` loop:\n\n```dafny\nfor i: T := lo to hi\n  LoopSpec\n{ Body }\n\nfor i: T := hi downto lo\n  LoopSpec\n{ Body }\n\nfor i: T := lo to *\n  LoopSpec\n{ Body }\n\nfor i: T := hi downto *\n  LoopSpec\n{ Body }\n```\nSemantically, they are defined as the following respective `while` loops:\n\n```dafny\n{\n  var _lo, _hi := lo, hi;\n  assert _lo  _i is T;\n  var i := _lo;\n  while i != _hi\n    invariant _lo <= i <= _hi\n    LoopSpec\n    decreases _hi - i\n  {\n    Body\n    i := i + 1;\n  }\n}\n\n{\n  var _lo, _hi := lo, hi;\n  assert _lo  _i is T;\n  var i := _hi;\n  while i != lo\n    invariant _lo <= i <= _hi\n    LoopSpec\n    decreases i - _lo\n  {\n    i := i - 1;\n    Body\n  }\n}\n\n{\n  var _lo := lo;\n  assert forall _i: int :: _lo  _i is T;\n  var i := _lo;\n  while true\n    invariant _lo <= i\n    LoopSpec\n  {\n    Body\n    i := i + 1;\n  }\n}\n\n{\n  var _hi := hi;\n  assert forall _i: int :: _i  _i is T;\n  var i := _hi;\n  while true\n    invariant i <= _hi\n    LoopSpec\n  {\n    i := i - 1;\n    Body\n  }\n}\n```\n\nThe expressions `lo` and `hi` are evaluated just once, before the loop\niterations start.\n\nAlso, in all variations the values of `i` in the body are the values\nfrom `lo` to, _but not including_, `hi`. This makes it convenient to\nwrite common loops, including these:\n\n\n```dafny\nfor i := 0 to a.Length {\n  Process(a[i]);\n}\nfor i := a.Length downto 0 {\n  Process(a[i]);\n}\n```\nNevertheless, `hi` must be a legal value for the type of the index variable,\nsince that is how the index variable is used in the invariant.\n\nIf the end-expression is not `*`, then no explicit `decreases` is\nallowed, since such a loop is already known to terminate.\nIf the end-expression is `*`, then the absence of an explicit `decreases`\nclause makes it default to `decreases *`. So, if the end-expression is `*` and no\nexplicit `decreases` clause is given, the loop is allowed only in methods\nthat are declared with `decreases *`.\n\nThe directions `to` or `downto` are contextual keywords. That is, these two\nwords are part of the syntax of the `for` loop, but they are not reserved\nkeywords elsewhere.\n\nJust like for while loops, the body of a for-loop may be omitted during\nverification. This suppresses attempts to check assertions (like invariants)\nthat would occur at the end of the loop. Eventually, however a body must\nbe provided; the compiler will not compile a method containing a body-less\nfor-loop. There is more discussion about bodyless loops in Section 8.15.4.", "start_char_idx": 2, "end_char_idx": 3267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e17afd0-163a-4724-95f9-5700f88661aa": {"__data__": {"id_": "1e17afd0-163a-4724-95f9-5700f88661aa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c0fd52ea12399b383da508d81acb5d3d07bc7e497fbc591d36f4faf02feab446", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8051d47-e1b1-4f8c-8992-c11e0ea4088a", "node_type": "1", "metadata": {}, "hash": "5f5fda77fb7673926e851afa4ca789744676804f44383f6f61640aaa40af3d21", "class_name": "RelatedNodeInfo"}}, "text": "8.14. Break and Continue Statements (grammar) {sec-break-continue-statement}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nmethod m(a: A) {\n  label x:\n  while true {\n    if (*) { break; }\n  }\n  label y: {\n    var z := 1;\n    if * { break y; }\n    z := 2;\n  }\n\n}\n```\n\nBreak and continue statements provide a means to transfer control\nin a way different than the usual nested control structures.\nThere are two forms of each of these statements: with and without a label.\n\nIf a label is used, the break or continue statement must be enclosed in a statement\nwith that label. The enclosing statement is called the _target_ of the break\nor continue.\n\nA `break` statement transfers control to the point immediately\nfollowing the target statement. For example, such a break statement can be\nused to exit a sequence of statements in a block statement before\nreaching the end of the block.\n\nFor example,\n\n```dafny\nlabel L: {\n  var n := ReadNext();\n  if n < 0 {\n    break L;\n  }\n  DoSomething(n);\n}\n```\nis equivalent to\n\n```dafny\n{\n  var n := ReadNext();\n  if 0 <= n {\n    DoSomething(n);\n  }\n}\n```\n\nIf no label is specified and the statement lists `n`\noccurrences of `break`, then the statement must be enclosed in\nat least `n` levels of loop statements. Control continues after exiting `n`\nenclosing loops. For example,\n\n\n```dafny\nmethod m() {\n  for i := 0 to 10 {\n    for j := 0 to 10 {\n      label X: {\n        for k := 0 to 10 {\n          if j + k == 15 {\n            break break;\n          }\n        }\n      }\n    }\n    // control continues here after the \"break break\", exiting two loops\n  }\n}\n```\n\nNote that a non-labeled `break` pays attention only to loops, not to labeled\nstatements. For example, the labeled block `X` in the previous example\ndoes not play a role in determining the target statement of the `break break;`.\n\nFor a `continue` statement, the target statement must be a loop statement.\nThe continue statement transfers control to the point immediately\nbefore the closing curly-brace of the loop body.\n\nFor example,\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    if i == 17 {\n      continue;\n    }\n    DoSomething(i);\n  }\n}\nmethod DoSomething(i:int){}\n```\nis equivalent to\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    if i != 17 {\n      DoSomething(i);\n    }\n  }\n}\nmethod DoSomething(i:int){}\n```\nThe same effect can also be obtained by wrapping the loop body in a labeled\nblock statement and then using `break` with a label, but that usually makes\nfor a more cluttered program:\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    label LoopBody: {\n      if i == 17 {\n        break LoopBody;\n      }\n      DoSomething(i);\n    }\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nStated differently, `continue` has the effect of ending the current loop iteration,\nafter which control continues with any remaining iterations. This is most natural\nfor `for` loops. For a `while` loop, be careful to make progress toward termination\nbefore a `continue` statement. For example, the following program snippet shows\nan easy mistake to make (the verifier will complain that the loop may not terminate):\n\n\n```dafny\nmethod m() {\n  var i := 0;\n  while i < 100 {\n    if i == 17 {\n      continue; // error: this would cause an infinite loop\n    }\n    DoSomething(i);\n    i := i + 1;\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nThe `continue` statement can give a label, provided the label is a label of a loop.\nFor example,", "start_char_idx": 2, "end_char_idx": 3408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8051d47-e1b1-4f8c-8992-c11e0ea4088a": {"__data__": {"id_": "d8051d47-e1b1-4f8c-8992-c11e0ea4088a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c0fd52ea12399b383da508d81acb5d3d07bc7e497fbc591d36f4faf02feab446", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e17afd0-163a-4724-95f9-5700f88661aa", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cecf9bc5e2133bae2b74a985a6a435c021fae5ec6ba174df5be1ff17ed75b79e", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nmethod m() {\n  var i := 0;\n  while i < 100 {\n    if i == 17 {\n      continue; // error: this would cause an infinite loop\n    }\n    DoSomething(i);\n    i := i + 1;\n  }\n}\nmethod DoSomething(i:int){}\n```\n\nThe `continue` statement can give a label, provided the label is a label of a loop.\nFor example,\n\n\n```dafny\nmethod m() {\n  label Outer:\n  for i := 0 to 100 {\n    for j := 0 to 100 {\n      if i + j == 19 {\n        continue Outer;\n      }\n      WorkIt(i, j);\n    }\n    PostProcess(i);\n    // the \"continue Outer\" statement above transfers control to here\n  }\n}\nmethod WorkIt(i:int, j:int){}\nmethod PostProcess(i:int){}\n```\n\nIf a non-labeled continue statement lists `n` occurrences of `break` before the\n`continue` keyword, then the statement must be enclosed in at least `n + 1` levels\nof loop statements. The effect is to `break` out of the `n` most closely enclosing\nloops and then `continue` the iterations of the next loop. That is, `n` occurrences\nof `break` followed by one more `break;` will break out of `n` levels of loops\nand then do a `break`, whereas `n` occurrences of `break` followed by `continue;`\nwill break out of `n` levels of loops and then do a `continue`.\n\nFor example, the `WorkIt` example above can equivalently be written without labels\nas\n\n```dafny\nmethod m() {\n  for i := 0 to 100 {\n    for j := 0 to 100 {\n      if i + j == 19 {\n        break continue;\n      }\n      WorkIt(i, j);\n    }\n    PostProcess(i);\n    // the \"break continue\" statement above transfers control to here\n  }\n}\nmethod WorkIt(i:int, j:int){}\nmethod PostProcess(i:int){}\n```\n\nNote that a loop invariant is checked on entry to a loop and at the closing curly-brace\nof the loop body. It is not checked at break statements. For continue statements, \nthe loop invariant is checked as usual at the closing curly-brace\nthat the continue statement jumps to.\nThis checking ensures that the loop invariant holds at the very top of\nevery iteration. Commonly, the only exit out of a loop happens when the loop guard evaluates\nto `false`. Since no state is changed between the top of an iteration (where the loop\ninvariant is known to hold) and the evaluation of the loop guard, one can also rely on\nthe loop invariant to hold immediately following the loop. But the loop invariant may\nnot hold immediately following a loop if a loop iteration changes the program state and\nthen exits the loop with a break statement.\n\nFor example, the following program verifies:\n\n```dafny\nmethod m() {\n  var i := 0;\n  while i < 10\n    invariant 0 <= i <= 10\n  {\n    if P(i) {\n      i := i + 200;\n      break;\n    }\n    i := i + 1;\n  }\n  assert i == 10 || 200 <= i < 210;\n}\npredicate P(i:int)\n```\nTo explain the example, the loop invariant `0 <= i <= 10` is known to hold at the very top\nof each iteration,\nthat is, just before the loop guard `i < 10` is evaluated. If the loop guard evaluates\nto `false`, then the negated guard condition (`10 <= i`) and the invariant hold, so\n`i == 10` will hold immediately after the loop. If the loop guard evaluates to `true`\n(that is, `i < 10` holds), then the loop body is entered. If the test `P(i)` then evaluates\nto `true`, the loop adds `200` to `i` and breaks out of the loop, so on such a\npath, `200 <= i < 210` is known to hold immediately after the loop. This is summarized\nin the assert statement in the example.\nSo, remember, a loop invariant holds at the very top of every iteration, not necessarily\nimmediately after the loop.", "start_char_idx": 3100, "end_char_idx": 6559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9264b5f-cd39-4b13-b3d3-9d7029f68ba4": {"__data__": {"id_": "d9264b5f-cd39-4b13-b3d3-9d7029f68ba4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72aa08cf-3996-4b8f-9b51-ca893c918039", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c4a34cbac1764c96ea7bad3f3881760e7d4d22fbcb5008ca7645288caf4df185", "class_name": "RelatedNodeInfo"}}, "text": "8.15. Loop Specifications {sec-loop-specifications}\nFor some simple loops, such as those mentioned previously, Dafny can figure\nout what the loop is doing without more help. However, in general the user\nmust provide more information in order to help Dafny prove the effect of\nthe loop. This information is provided by a _loop specification_. A\nloop specification provides information about invariants, termination, and\nwhat the loop modifies.\nFor additional tutorial information see [@KoenigLeino:MOD2011] or the\nonline Dafny tutorial.", "start_char_idx": 2, "end_char_idx": 537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0cfbd3b-d5a1-4d4f-8ecf-b13822454fbf": {"__data__": {"id_": "f0cfbd3b-d5a1-4d4f-8ecf-b13822454fbf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b94c90b-2179-49b3-a0cd-a6b6057ea41b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4f62f28c078cdc8d73385a1bd99b1b36e642562cb7f9521cc243b16466424752", "class_name": "RelatedNodeInfo"}}, "text": "8.15.1. Loop invariants {sec-loop-invariants}\n\nLoops present a problem for specification-based reasoning. There is no way to\nknow in advance how many times the code will go around the loop and\na tool cannot reason about every one of a possibly unbounded sequence of unrollings.\nIn order to consider all paths through a program, specification-based\nprogram verification tools require loop invariants, which are another kind of\nannotation.\n\nA loop invariant is an expression that holds just prior to the loop test,\nthat is, upon entering a loop and\nafter every execution of the loop body. It captures something that is\ninvariant, i.e. does not change, about every step of the loop. Now,\nobviously we are going to want to change variables, etc. each time around\nthe loop, or we wouldn't need the loop. Like pre- and postconditions, an\ninvariant is a property that is preserved for each execution of the loop,\nexpressed using the same boolean expressions we have seen. For example,\n\n\n```dafny\nvar i := 0;\nwhile i < n\n  invariant 0 <= i\n{\n  i := i + 1;\n}\n```\n\nWhen you specify an invariant, Dafny proves two things: the invariant\nholds upon entering the loop, and it is preserved by the loop. By\npreserved, we mean that assuming that the invariant holds at the\nbeginning of the loop (just prior to the loop test), we must show that executing the loop body once\nmakes the invariant hold again. Dafny can only know upon analyzing the\nloop body what the invariants say, in addition to the loop guard (the\nloop condition). Just as Dafny will not discover properties of a method\non its own, it will not know that any but the most basic properties of a loop\nare preserved unless it is told via an invariant.", "start_char_idx": 2, "end_char_idx": 1698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "414b8b51-d779-41e2-9352-dfe09ecb10a4": {"__data__": {"id_": "414b8b51-d779-41e2-9352-dfe09ecb10a4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ab72737-5ff7-49d2-96d5-86b06d7184e4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e1cf2652867ff3b35e2d444d981649f48e8b98ffe11f1261b9c1a700b2ae636a", "class_name": "RelatedNodeInfo"}}, "text": "8.15.2. Loop termination {sec-loop-termination}\n\nDafny proves that code terminates, i.e. does not loop forever, by using\n`decreases` annotations. For many things, Dafny is able to guess the right\nannotations, but sometimes it needs to be made explicit.\nThere are two places Dafny proves termination: loops and recursion.\nBoth of these situations require either an explicit annotation or a\ncorrect guess by Dafny.\n\nA `decreases` annotation, as its name suggests, gives Dafny an expression\nthat decreases with every loop iteration or recursive call. There are two\nconditions that Dafny needs to verify when using a `decreases` expression:\n\n* that the expression actually gets smaller, and\n* that it is bounded.\n\nThat is, the expression must strictly decrease in a well-founded ordering\n(cf. Section 12.7).\n\nMany times, an integral value (natural or plain integer) is the quantity\nthat decreases, but other values can be used as well. In the case of\nintegers, the bound is assumed to be zero.\nFor each loop iteration the `decreases` expression at the end of the loop\nbody must be strictly smaller than its value at the beginning of the loop\nbody (after the loop test). For integers, the well-founded relation between\n`x` and `X` is `x < X && 0 <= X`.\nThus if the `decreases` value (`X`) is negative at the\nloop test, it must exit the loop, since there is no permitted value for\n`x` to have at the end of the loop body.\n\nFor example, the following is\na proper use of `decreases` on a loop:\n\n\n```dafny\nmethod m(n: nat){\n  var i := n;\n  while 0 < i\n    invariant 0 <= i\n    decreases i\n  {\n    i := i - 1;\n  }\n}\n```\n\nHere Dafny has all the ingredients it needs to prove termination. The\nvariable `i` becomes smaller each loop iteration, and is bounded below by\nzero. When `i` becomes 0, the lower bound of the well-founded order, control\nflow exits the loop.\n\nThis is fine, except the loop is backwards compared to most loops, which\ntend to count up instead of down. In this case, what decreases is not the\ncounter itself, but rather the distance between the counter and the upper\nbound. A simple trick for dealing with this situation is given below:\n\n\n```dafny\nmethod m(m: nat, n: int) \n  requires m <= n \n{\n  var i := m;\n  while i < n\n    invariant 0 <= i <= n\n    decreases n - i\n  {\n    i := i + 1;\n  }\n}\n```\n\nThis is actually Dafny's guess for this situation, as it sees `i < n` and\nassumes that `n - i` is the quantity that decreases. The upper bound of the\nloop invariant implies that `0 <= n \u2013 i`, and gives Dafny a lower bound on\nthe quantity. This also works when the bound `n` is not constant, such as\nin the binary search algorithm, where two quantities approach each other,\nand neither is fixed.\n\nIf the `decreases` clause of a loop specifies `*`, then no\ntermination check will be performed. Use of this feature is sound only with\nrespect to partial correctness.", "start_char_idx": 2, "end_char_idx": 2872, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9cd5532-823e-4340-a539-7a73d096283e": {"__data__": {"id_": "c9cd5532-823e-4340-a539-7a73d096283e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32119044-3b24-4eda-8f05-1ef4be79a26c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2edc188488f71d1e4e27b512d501c1810ca3eeca1740a0faccb494b1379dd73d", "class_name": "RelatedNodeInfo"}}, "text": "8.15.3. Loop framing {sec-loop-framing}\n\nThe specification of a loop also includes _framing_, which says what the\nloop modifies. The loop frame includes both local variables and locations\nin the heap.\n\nFor local variables, the Dafny verifier performs a syntactic\nscan of the loop body to find every local variable or out-parameter that occurs as a left-hand\nside of an assignment. These variables are called\n_syntactic assignment targets of the loop_, or _syntactic loop targets_ for short.\nAny local variable or out-parameter that is not a syntactic assignment target is known by the\nverifier to remain unchanged by the loop.\n\nThe heap may or may not be a syntactic loop target. It is when the loop body\nsyntactically contains a statement that can modify a heap location. This\nincludes calls to compiled methods, even if such a method has an empty\n`modifies` clause, since a compiled method is always allowed to allocate\nnew objects and change their values in the heap.\n\nIf the heap is not a syntactic loop target, then the verifier knows the heap\nremains unchanged by the loop. If the heap _is_ a syntactic loop target,\nthen the loop's effective `modifies` clause determines what is allowed to be\nmodified by iterations of the loop body.\n\nA loop can use `modifies` clauses to declare the effective `modifies` clause\nof the loop. If a loop does not explicitly declare any `modifies` clause, then\nthe effective `modifies` clause of the loop is the effective `modifies` clause\nof the most tightly enclosing loop or, if there is no enclosing loop, the\n`modifies` clause of the enclosing method.\n\nIn most cases, there is no need to give an explicit `modifies` clause for a\nloop. The one case where it is sometimes needed is if a loop modifies less\nthan is allowed by the enclosing method. Here are two simple methods that\nillustrate this case:\n\n\n```dafny\nclass Cell {\n  var data: int\n}\n\nmethod M0(c: Cell, d: Cell)\n  requires c != d\n  modifies c, d\n  ensures c.data == d.data == 100\n{\n  c.data, d.data := 100, 0;\n  var i := 0;\n  while i < 100\n    invariant d.data == i\n    // Needs \"invariant c.data == 100\" or \"modifies d\" to verify\n  {\n    d.data := d.data + 1;\n    i := i + 1;\n  }\n}\n\nmethod M1(c: Cell)\n  modifies c\n  ensures c.data == 100\n{\n  c.data := 100;\n  var i := 0;\n  while i < 100\n    // Needs \"invariant c.data == 100\" or \"modifies {}\" to verify\n  {\n    var tmp := new Cell;\n    tmp.data := i;\n    i := i + 1;\n  }\n}\n```\n\nIn `M0`, the effective `modifies` clause of the loop is `modifies c, d`. Therefore,\nthe method's postcondition `c.data == 100` is not provable. To remedy the situation,\nthe loop needs to be declared either with `invariant c.data == 100` or with\n`modifies d`.\n\nSimilarly, the effective `modifies` clause of the loop in `M1` is `modifies c`. Therefore,\nthe method's postcondition `c.data == 100` is not provable. To remedy the situation,\nthe loop needs to be declared either with `invariant c.data == 100` or with\n`modifies {}`.\n\nWhen a loop has an explicit `modifies` clause, there is, at the top of\nevery iteration, a proof obligation that\n\n* the expressions given in the `modifies` clause are well-formed, and\n* everything indicated in the loop `modifies` clause is allowed to be modified by the\n  (effective `modifies` clause of the) enclosing loop or method.", "start_char_idx": 2, "end_char_idx": 3293, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c86a397-326f-41c6-8cf0-9f288bab2811": {"__data__": {"id_": "8c86a397-326f-41c6-8cf0-9f288bab2811", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e8bce1e-5123-40f3-be33-bbefd7d0050b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dcde14407a9c8e67b9fc8e4ff3211005da2e7ac6b97acaf5a0ef20cf081b0c1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b181c83-886c-42ed-9122-4ba086d2a077", "node_type": "1", "metadata": {}, "hash": "361cd8a5e1c8829353ddd03daf86f7216e6fdecef077f40f93e264351bfcf120", "class_name": "RelatedNodeInfo"}}, "text": "8.15.4. Body-less methods, functions, loops, and aggregate statements {sec-bodyless-constructs}\n\nMethods (including lemmas), functions, loops, and `forall` statements are ordinarily\ndeclared with a body, that is, a curly-braces pair that contains (for methods, loops, and `forall`)\na list of zero-or-more statements or (for a function) an expression. In each case, Dafny syntactically\nallows these constructs to be given without a body (no braces at all). This is to allow programmers to\ntemporarily postpone the development of the implementation of the method, function, loop, or\naggregate statement.\n\nIf a method has no body, there is no difference for callers of the method. Callers still reason\nabout the call in terms of the method's specification. But without a body, the verifier has\nno method implementation to check against the specification, so the verifier is silently happy.\nThe compiler, on the other hand, will complain if it encounters a body-less method, because the\ncompiler is supposed to generate code for the method, but it isn't clever enough to do that by\nitself without a given method body. If the method implementation is provided by code written\noutside of Dafny, the method can be marked with an `{:extern}` annotation, in which case the\ncompiler will no longer complain about the absence of a method body; the verifier will not \nobject either, even though there is now no proof that the Dafny specifications are satisfied\nby the external implementation.\n\nA lemma is a special kind of (ghost) method. Callers are therefore unaffected by the absence of a body,\nand the verifier is silently happy with not having a proof to check against the lemma specification.\nDespite a lemma being ghost, it is still the compiler that checks for, and complains about,\nbody-less lemmas. A body-less lemma is an unproven lemma, which is often known as an _axiom_.\nIf you intend to use a lemma as an axiom, omit its body and add the attribute `{:axiom}`, which\ncauses the compiler to suppress its complaint about the lack of a body.\n\nSimilarly, calls to a body-less function use only the specification of the function. The\nverifier is silently happy, but the compiler complains (whether or not the function is ghost).\nAs for methods and lemmas, the `{:extern}` and `{:axiom}` attributes can be used to suppress the\ncompiler's complaint.\n\nBy supplying a body for a method or function, the verifier will in effect show the feasibility of\nthe specification of the method or function. By supplying an `{:extern}` or `{:axiom}` attribute,\nyou are taking that responsibility into your own hands. Common mistakes include forgetting to\nprovide an appropriate `modifies` or `reads` clause in the specification, or forgetting that\nthe results of functions in Dafny (unlike in most other languages) must be deterministic.\n\nJust like methods and functions have two sides, callers and implementations, loops also have\ntwo sides. One side (analogous to callers) is the context that uses the loop. That context treats\nthe loop in the same way, using its specifications, regardless of whether or not the loop has a body. The other side\nis the loop body, that is, the implementation of each loop iteration. The verifier checks\nthat the loop body maintains the loop invariant and that the iterations will eventually terminate,\nbut if there is no loop body, the verifier is silently happy. This allows you to temporarily\npostpone the authoring of the loop body until after you've made sure that the loop specification\nis what you need in the context of the loop.\n\nThere is one thing that works differently for body-less loops than for loops with bodies.\nIt is the computation of syntactic loop targets, which become part of the loop frame\n(see Section 8.15.3). For a body-less loop, the local variables\ncomputed as part of the loop frame are the mutable variables that occur free in the\nloop specification. The heap is considered a part of the loop frame if it is used\nfor mutable fields in the loop specification or if the loop has an explicit `modifies` clause.\nThe IDE will display the computed loop frame in hover text.\n\nFor example, consider", "start_char_idx": 2, "end_char_idx": 4137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b181c83-886c-42ed-9122-4ba086d2a077": {"__data__": {"id_": "1b181c83-886c-42ed-9122-4ba086d2a077", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e8bce1e-5123-40f3-be33-bbefd7d0050b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dcde14407a9c8e67b9fc8e4ff3211005da2e7ac6b97acaf5a0ef20cf081b0c1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c86a397-326f-41c6-8cf0-9f288bab2811", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "07b51a46a1150e62edd3ce99a129a8b669ed8423b13635d695caed545abd6ba3", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nclass Cell {\n  var data: int\n  const K: int\n}\n\nmethod BodylessLoop(n: nat, c: Cell)\n  requires c.K == 8\n  modifies c\n{\n  c.data := 5;\n  var a, b := n, n;\n  for i := 0 to n\n    invariant c.K < 10\n    invariant a <= n\n    invariant c.data < 10\n  assert a == n;\n  assert b == n;\n  assert c.data == 5;\n}\n```\n\nThe loop specification mentions local variable `a`, and thus `a` is considered part of\nthe loop frame. Since what the loop invariant says about `a` is not strong enough to\nprove the assertion `a == n` that follows the loop, the verifier complains about that\nassertion.\n\nLocal variable `b` is not mentioned in the loop specification, and thus `b` is not\nincluded in the loop frame. Since in-parameter `n` is immutable, it is not included\nin the loop frame, either, despite being mentioned in the loop specification. For\nthese reasons, the assertion `b == n` is provable after the loop.\n\nBecause the loop specification mentions the mutable field `data`, the heap becomes\npart of the loop frame. Since the loop invariant is not strong enough to prove the\nassertion `c.data == 5` that follows the loop, the verifier complains about that\nassertion. On the other hand, had `c.data < 10` not been mentioned in the loop\nspecification, the assertion would be verified, since field `K` is then the only\nfield mentioned in the loop specification and `K` is immutable.\n\nFinally, the aggregate statement (`forall`) can also be given without a body. Such\na statement claims that the given `ensures` clause holds true for all values of\nthe bound variables that satisfy the given range constraint. If the statement has\nno body, the program is in effect omitting the proof, much like a body-less lemma\nis omitting the proof of the claim made by the lemma specification. As with the\nother body-less constructs above, the verifier is silently happy with a body-less\n`forall` statement, but the compiler will complain.", "start_char_idx": 4140, "end_char_idx": 6052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a72895aa-8e46-4ff1-a4aa-67a64a81db3a": {"__data__": {"id_": "a72895aa-8e46-4ff1-a4aa-67a64a81db3a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da6ed72f-561f-426b-95cb-be6f4dd17259", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d3bec12fca66cdc2c3d16dc5ae22eec9642c0c658f8ccd8aa48893ad08517de5", "class_name": "RelatedNodeInfo"}}, "text": "8.16. Print Statement (grammar) {sec-print-statement}\n\nExamples:\n\n```dafny\nprint 0, x, list, array;\n```\n\nThe `print` statement is used to print the values of a comma-separated\nlist of expressions to the console (standard-out). The generated code uses\ntarget-language-specific idioms to perform this printing.\nThe expressions may of course include strings that are used\nfor captions. There is no implicit new line added, so to add a new\nline you must include `\"\\n\"` as part of one of the expressions.\nDafny automatically creates implementations of methods that convert values to strings\nfor all Dafny data types. For example,\n\n\n```dafny\ndatatype Tree = Empty | Node(left: Tree, data: int, right: Tree)\nmethod Main()\n{\n  var x : Tree := Node(Node(Empty, 1, Empty), 2, Empty);\n  print \"x=\", x, \"\\n\";\n}\n```\n\nproduces this output:\n\n```text\nx=Tree.Node(Tree.Node(Tree.Empty, 1, Tree.Empty), 2, Tree.Empty)\n```\n\nNote that Dafny does not have method overriding and there is no mechanism to\noverride the built-in value->string conversion.  Nor is there a way to\nexplicitly invoke this conversion.\nOne can always write an explicit function to convert a data value to a string\nand then call it explicitly in a `print` statement or elsewhere.\n\nBy default, Dafny does not keep track of print effects, but this can be changed\nusing the `--track-print-effects` command line flag. `print` statements are allowed\nonly in non-ghost contexts and not in expressions, with one exception.\nThe exception is that a function-by-method may contain `print` statements,\nwhose effect may be observed as part of the run-time evaluation of such functions\n(unless `--track-print-effects` is enabled).\n\nThe verifier checks that each expression is well-defined, but otherwise \nignores the `print` statement.\n\n\n\n**Note:** `print` writes to standard output.  To improve compatibility with\nnative code and external libraries, the process of encoding Dafny strings passed\nto `print` into standard-output byte strings is left to the runtime of the\nlanguage that the Dafny code is compiled to (some language runtimes use UTF-8 in\nall cases; others obey the current locale or console encoding).\n\nIn most cases, the standard-output encoding can be set before running the\ncompiled program using language-specific flags or environment variables\n(e.g. `-Dfile.encoding=` for Java).  This is in fact how `dafny run` operates:\nit uses language-specific flags and variables to enforce UTF-8 output regardless\nof the target language (but note that the C++ and Go backends currently have\nlimited support for UTF-16 surrogates).", "start_char_idx": 2, "end_char_idx": 2579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c67183e-1385-473e-a7b0-ca7954f78b5d": {"__data__": {"id_": "7c67183e-1385-473e-a7b0-ca7954f78b5d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4526dc34-1d55-470e-8a6e-6d0f37d255fb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0d204d77740a77e55fba6ef82c1139b2b6abf463881aa4ee40c0a14038079d0c", "class_name": "RelatedNodeInfo"}}, "text": "8.17. Assert statement (grammar) {sec-assert-statement}\n\nExamples:\n\n```dafny\nassert i > 0;\nassert IsPositive: i > 0;\nassert i > 0 by {\n ...\n}\n```\n\n`Assert` statements are used to express logical propositions that are\nexpected to be true. Dafny will attempt to prove that the assertion\nis true and give an error if the assertion cannot be proven.\nOnce the assertion is proved,\nits truth may aid in proving subsequent deductions.\nThus if Dafny is having a difficult time verifying a method,\nthe user may help by inserting assertions that Dafny can prove,\nand whose truth may aid in the larger verification effort,\nmuch as lemmas might be used in mathematical proofs.\n\n`Assert` statements are ignored by the compiler.\n\nIn the `by` form of the `assert` statement, there is an additional block of statements that provide the Dafny verifier with additional proof steps.\nThose statements are often a sequence of lemmas, `calc` statements, `reveal` statements or other `assert` statements,\ncombined with ghost control flow, ghost variable declarations and ghost update statements of variables declared in the `by` block.\nThe intent is that those statements be evaluated in support of proving the `assert` statement.\nFor that purpose, they could be simply inserted before the `assert` statement.\nBut by using the `by` block, the statements in the block are discarded after the assertion is proved.\nAs a result, the statements in the block do not clutter or confuse the solver in performing subsequent\nproofs of assertions later in the program. Furthermore, by isolating the statements in the `by` block,\ntheir purpose -- to assist in proving the given assertion -- is manifest in the structure of the code.\n\nExamples of this form of assert are given in the section of the `reveal` statement and in _Different Styles of Proof_\n\nAn assert statement may have a label, whose use is explained in Section 8.20.1.\n\nThe attributes recognized for assert statements are discussed in Section 11.4.\n\nUsing `...` as the argument of the statement is deprecated.\n\nAn assert statement can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 2105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb17fd94-4894-436d-858e-abc71b25c586": {"__data__": {"id_": "cb17fd94-4894-436d-858e-abc71b25c586", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa76cb2c-0915-45dc-95fd-7ab858e0e588", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dd41a10e37cf5dbfd1cee14892179f79534fa041d24d9451b1496e30b8a2d2da", "class_name": "RelatedNodeInfo"}}, "text": "8.18. Assume Statement (grammar) {sec-assume-statement}\n\nExamples:\n\n```dafny\nassume i > 0;\nassume {:axiom} i > 0 ==> -i < 0;\n```\n\nThe `assume` statement lets the user specify a logical proposition\nthat Dafny may assume to be true without proof. If in fact the\nproposition is not true this may lead to invalid conclusions.\n\nAn `assume` statement would ordinarily be used as part of a larger\nverification effort where verification of some other part of\nthe program required the proposition. By using the `assume` statement\nthe other verification can proceed. Then when that is completed the\nuser would come back and replace the `assume` with `assert`.\n\nTo help the user not forget about that last step, a warning is emitted for any assume statement.\nAdding the `{:axiom}` attribute to the assume will suppress the warning,\nindicating the user takes responsibility for being absolutely sure \nthat the proposition is indeed true.\n\nUsing `...` as the argument of the statement is deprecated.", "start_char_idx": 2, "end_char_idx": 988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc85b694-e0ba-4401-9c1c-14c5218a16c3": {"__data__": {"id_": "cc85b694-e0ba-4401-9c1c-14c5218a16c3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8483b3f-665c-4dd4-9889-4605e60879e3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4fdda87f69be1970fb9bf33cc5f4a0946cc57ac1da789734308d45c2b05dc2a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6379b404-0246-4944-bfb0-b5fdbe087bc5", "node_type": "1", "metadata": {}, "hash": "eaa9438167cddad7f13518e490c8f58d0881d382e634041e4b7e450a7f47a9bd", "class_name": "RelatedNodeInfo"}}, "text": "8.19. Expect Statement (grammar) {sec-expect-statement}\n\nExamples:\n\n```dafny\nexpect i > 0;\nexpect i > 0, \"i is positive\";\n```\n\nThe `expect` statement states a boolean expression that is\n(a) assumed to be true by the verifier\nand (b) checked to be true\nat run-time. That is, the compiler inserts into the run-time executable a\ncheck that the given expression is true; if the expression is false, then\nthe execution of the program halts immediately. If a second argument is\ngiven, it may be a value of any type.\nThat value is converted to a string (just like the `print` statement)\nand the string is included\nin the message emitted by the program\nwhen it halts; otherwise a default message is emitted.\n\nBecause the expect expression and optional second argument are compiled, they cannot be ghost expressions.\n\nThe `expect` statement behaves like\n`assume` for the verifier, but also inserts a run-time check that the\nassumption is indeed correct (for the test cases used at run-time).\n\nHere are a few use-cases for the `expect` statement.\n\nA) To check the specifications of external methods.\n\nConsider an external method `Random` that takes a `nat` as input\nand returns a `nat` value that is less than the input.\nSuch a method could be specified as\n\n```dafny\nmethod {:extern} Random(n: nat) returns (r: nat)\n  ensures r < n\n```\nBut because there is no body for `Random` (only the external non-dafny implementation),\nit cannot be verified that `Random` actually satisfies this specification.\n\nTo mitigate this situation somewhat, we can define a wrapper function, `Random'`,\nthat calls `Random` but in which we can put some run-time checks:\n\n```dafny\nmethod {:extern} Random(n: nat) returns (r: nat)\n\nmethod Random'(n: nat) returns (r: nat)\n  ensures r < n\n{\n  r := Random(n);\n  expect r < n;\n}\n```\nHere we can verify that `Random'` satisfies its own specification,\nrelying on the unverified specification of `Random`.\nBut we are also checking at run-time that any input-output pairs for `Random`\nencountered during execution\ndo satisfy the specification,\nas they are checked by the `expect` statement.\n\nNote, in this example, two problems still remain.\nOne problem is that the out-parameter of the extern `Random` has type `nat`,\nbut there is no check that the value returned really is non-negative.\nIt would be better to declare the out-parameter of `Random` to be `int` and\nto include `0 <= r` in the condition checked by the `expect` statement in `Random'`.\nThe other problem is that `Random` surely will need `n` to be strictly positive.\nThis can be fixed by adding `requires n != 0` to `Random'` and `Random`.\n\nB) Run-time testing\n\nVerification and run-time testing are complementary\nand both have their role in assuring that software does what is intended.\nDafny can produce executables\nand these can be instrumented with unit tests.\nAnnotating a method with the `{:test}` attribute\nindicates to the compiler\nthat it should produce target code\nthat is correspondingly annotated to mark the method\nas a unit test (e.g., an XUnit test) in the target language.\nAlternatively, the `dafny test` command will produce a main method\nthat invokes all methods with the `{:test}` attribute, and hence does not\ndepend on any testing framework in the target language.\nWithin such methods one might use `expect` statements (as well as `print` statements)\nto insert checks that the target program is behaving as expected.\n\nC) Debugging\n\nWhile developing a new program, one work style uses proof attempts and runtime tests in combination.\nIf an assert statement does not prove, one might run the program with a corresponding expect statement\nto see if there are some conditions when the assert is not actually true. So one might have\npaired assert/expect statements:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nOnce the program is debugged, both statements can be removed.\nNote that it is important that the `assert` come before the `expect`, because\nby the verifier, the `expect` is interpreted as an `assume`, which would automatically make\na subsequent `assert` succeed.", "start_char_idx": 2, "end_char_idx": 4057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6379b404-0246-4944-bfb0-b5fdbe087bc5": {"__data__": {"id_": "6379b404-0246-4944-bfb0-b5fdbe087bc5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8483b3f-665c-4dd4-9889-4605e60879e3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4fdda87f69be1970fb9bf33cc5f4a0946cc57ac1da789734308d45c2b05dc2a6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc85b694-e0ba-4401-9c1c-14c5218a16c3", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0faf2ed2ca0d0df2f4a8338f6cc9ff747d7da05cc9c690b0c59719b2505c9c74", "class_name": "RelatedNodeInfo"}}, "text": "Within such methods one might use `expect` statements (as well as `print` statements)\nto insert checks that the target program is behaving as expected.\n\nC) Debugging\n\nWhile developing a new program, one work style uses proof attempts and runtime tests in combination.\nIf an assert statement does not prove, one might run the program with a corresponding expect statement\nto see if there are some conditions when the assert is not actually true. So one might have\npaired assert/expect statements:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nOnce the program is debugged, both statements can be removed.\nNote that it is important that the `assert` come before the `expect`, because\nby the verifier, the `expect` is interpreted as an `assume`, which would automatically make\na subsequent `assert` succeed.\n\nD) Compiler tests\n\nThe same approach might be taken to assure that compiled code is behaving at run-time consistently with the statically verified code,\none can again use paired assert/expect statements with the same expression:\n\n```dafny\nassert _P_;\nexpect _P_;\n```\nThe verifier will check that _P_ is always true at the given point in a program\n(at the `assert` statement).\n\nAt run-time, the compiler will insert checks that the same predicate,\nin the `expect` statement, is true.\nAny difference identifies a compiler bug.\nAgain the `expect` must be after the `assert`:\nif the `expect` is first,\nthen the verifier will interpret the `expect` like an `assume`,\nin which case the `assert` will be proved trivially\nand potential unsoundness will be hidden.\n\nUsing `...` as the argument of the statement is deprecated.", "start_char_idx": 3261, "end_char_idx": 4875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcb709d3-9c95-4774-96e8-2bdc9b381b11": {"__data__": {"id_": "dcb709d3-9c95-4774-96e8-2bdc9b381b11", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f82c292c-2274-4be7-8877-5b6719e7b49a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c28a02aa526becd7a7f2abb1c2cc4fea5279ac0dbb115b54b42df121c455e49e", "class_name": "RelatedNodeInfo"}}, "text": "8.20. Reveal Statement (grammar) {sec-reveal-statement}\n\nExamples:\n\n```dafny\nreveal f(), L;\n```\n\nThe `reveal` statement makes available to the solver information that is otherwise not visible, as described in the following subsections.", "start_char_idx": 2, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d069fd20-2613-4110-bb1f-6e7b7e7b96fc": {"__data__": {"id_": "d069fd20-2613-4110-bb1f-6e7b7e7b96fc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efaecf7e-6d2b-462d-8295-47ec19f33d1f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "90135bf134924c6cbcec444848d850b0d4e886452c91d59543b6401cfb10a5a0", "class_name": "RelatedNodeInfo"}}, "text": "8.20.1. Revealing assertions {sec-reveal-assertions}\n\nIf an assert statement has an expression label, then a proof of that assertion is attempted, but the assertion itself\nis not used subsequently.  For example, consider\n\n```dafny\nmethod m(i: int) {\n  assert x: i == 0; // Fails\n  assert i == 0; // Fails also because the x: makes the first assertion opaque\n}\n```\nThe first assertion fails. Without the label `x:`, the second would succeed because after a failing assertion, the \nassertion is assumed in the context of the rest of the program.  But with the label, the first assertion is hidden from\nthe rest of the program. That assertion can be _revealed_ by adding a `reveal` statement:\n\n\n```dafny\nmethod m(i: int) {\n  assert x: i == 0; // Fails\n  reveal x;\n  assert i == 0; // Now succeeds\n}\n```\nor\n\n```dafny\nmethod m(i: int) {\n  assert x: i == 0; // Fails\n  assert i == 0 by { reveal x; } // Now succeeds\n}\n```\nAt the point of the `reveal` statement, the labeled assertion is made visible and can be used in proving the second assertion.\nIn this example there is no point to labeling an assertion and then immediately revealing it. More useful are the cases where\nthe reveal is in an assert-by block or much later in the method body.", "start_char_idx": 2, "end_char_idx": 1240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31c25aec-6c32-4468-b0c3-70ff559f0126": {"__data__": {"id_": "31c25aec-6c32-4468-b0c3-70ff559f0126", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a263e8b0-1a88-4dcf-b80c-1baf0a500418", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b011b0aa0a27f3f100276a2f7f7fd5edf5e498def50c481e4d7f39e667e7c0ef", "class_name": "RelatedNodeInfo"}}, "text": "8.20.2. Revealing preconditions\n\nIn the same way as assertions, preconditions can be labeled.\nWithin the body of a method, a precondition is an assumption; if the precondition is labeled then that assumption is not visible in the body of the method.\nA `reveal` statement naming the label of the precondition then makes the assumption visible.\n\nHere is a toy example:\n\n```dafny\nmethod m(x: int, y: int) returns (z: int)\n  requires L: 0 < y\n  ensures z == x+y\n  ensures x < z\n{\n  z := x + y;\n}\n```\nThe above method will not verify. In particular, the second postcondition cannot be proved.\nHowever, if we add a `reveal L;` statement in the body of the method, then the precondition is visible \nand both postconditions can be proved.\n\nOne could also use this style:\n\n```dafny\nmethod m(x: int, y: int) returns (z: int)\n  requires L: 0 < y\n  ensures z == x+y\n  ensures x < z\n{\n  z := x + y;\n  assert x < z by { reveal L; }\n}\n```\n\nThe reason to possibly hide a precondition is the same as the reason to hide assertions: \nsometimes less information is better for the solver as it helps the solver focus attention on \nrelevant information.\n\nSection 7 of http://leino.science/papers/krml276.html provides \nan extended illustration of this technique to make all the dependencies of an `assert` explicit.", "start_char_idx": 2, "end_char_idx": 1295, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de7feb17-a6db-4c38-9f53-8cd8cc5425ae": {"__data__": {"id_": "de7feb17-a6db-4c38-9f53-8cd8cc5425ae", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88e7237a-1bd2-4af4-ad0e-193996602605", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0a715cd1a1c824a1ad31498210b1e5b0a7462a07ce05fff7c2fb6e9f945ad126", "class_name": "RelatedNodeInfo"}}, "text": "8.20.3. Revealing function bodies\n\nBy default, function bodies are transparent and available for constructing proofs of assertions that use those functions. \nThis can be changed using the `--defaul-function-opacity` commandline flag, or by using the `:{opaque}` attribute and treat it as an uninterpreted function, whose properties are\njust its specifications.  This action limits the information available to the logical reasoning engine and may make a proof \npossible where there might be information overload otherwise.\n\nBut then there may be specific instances where the definition of that opaque function is needed. In that situation, the\nbody of the function can be _revealed_ using the reveal statement. Here is an example:\n\n```dafny\nopaque function f(i: int): int { i + 1 }\n\nmethod m(i: int) {\n  assert f(i) == i + 1;\n}\n```\nWithout the [`opaque`] modifier, the assertion is valid; with the modifier it cannot be proved because the body of the\nfunction is not visible. However if a `reveal f();` statement is inserted before the assertion, the proof succeeds.\nNote that the pseudo-function-call in the `reveal` statement is written without arguments and serves to mark `f` as a function name\ninstead of a label.", "start_char_idx": 2, "end_char_idx": 1220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4620db99-d7f1-4f7e-b825-db9aa950b5cd": {"__data__": {"id_": "4620db99-d7f1-4f7e-b825-db9aa950b5cd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec7413be-409a-428f-a62e-b88fe99e5142", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "48b9e9fa38c19fbb04b2b2d0ff86bca628f4f14e78c4aecc2b627bb11ef6bca4", "class_name": "RelatedNodeInfo"}}, "text": "8.20.4. Revealing constants\n\nA `const` declaration can be `opaque`. If so the value of the constant is not known in reasoning about its uses, just its type and the\nfact that the value does not change. The constant's identifier can be listed in a reveal statement. In that case, like other revealed items,\nthe value of the constant will be known to the reasoning engine until the end of the block containing the reveal statement.\n\nA label or locally declared name in a method body will shadow an opaque constant with the same name outside the method body,\nmaking it unable to be revealed without using a qualified name.", "start_char_idx": 2, "end_char_idx": 620, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ee3dc9d-9c8f-4930-ace1-07d5cbaec157": {"__data__": {"id_": "7ee3dc9d-9c8f-4930-ace1-07d5cbaec157", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "247e8b3c-2be2-4279-bf00-799b6bf4ca21", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4fa0aa0db6cafc00c3dc453655e47c251a8a2fede5313fbca85fc83c7a57c052", "class_name": "RelatedNodeInfo"}}, "text": "8.21. Forall Statement (grammar) {sec-forall-statement}\n\nExamples:\n\n```dafny\nforall i | 0 <= i < a.Length {\n  a[i] := 0;\n}\nforall i | 0 <= i < 100 {\n  P(i); // P a lemma\n}\nforall i | 0 <= i < 100\n  ensures i < 1000 {\n} \n```\n\nThe `forall` statement executes the body\nsimultaneously for all quantified values in the specified quantifier domain.\nYou can find more details about quantifier domains here.\n\nThere are several variant uses of the `forall`\nstatement and there are a number of restrictions.\nA `forall` statement can be classified as one of the following:\n\n* _Assign_ - the `forall` statement is used for simultaneous assignment.\nThe target must be an array element or an object field.\n* _Call_ - The body consists of a single call to a ghost method without side effects\n* _Proof_ - The `forall` has `ensure` expressions which are effectively\nquantified or proved by the body (if present).\n\nAn _assign_ `forall` statement performs simultaneous assignment.\nThe left-hand sides must denote different l-values, unless the\ncorresponding right-hand sides also coincide.\n\nThe following is an excerpt of an example given by Leino in\n[_Developing Verified Programs with Dafny_][leino233].\nWhen the buffer holding the queue needs to be resized,\nthe `forall` statement is used to simultaneously copy the old contents\ninto the new buffer.\n\n[leino233]: http://research.microsoft.com/en-us/um/people/leino/papers/krml233.pdf\n\n\n```dafny\nclass SimpleQueue\n{\n  ghost var Contents: seq\n  var a: array  // Buffer holding contents of queue.\n  var m: int          // Index head of queue.\n  var n: int          // Index just past end of queue\n   \n  method Enqueue(d: Data)\n    requires a.Length > 0\n    requires 0 <= m <= n <= a.Length\n    modifies this, this.a\n    ensures Contents == old(Contents) + [d]\n  {\n    if n == a.Length {\n      var b := a;\n      if m == 0 { b := new Data[2 * a.Length]; }\n      forall i | 0 <= i < n - m {\n      \tb[i] := a[m + i];\n      }\n      a, m, n := b, 0, n - m;\n    }\n    a[n], n, Contents := d, n + 1, Contents + [d];\n  }\n}\n```\n\nHere is an example of a _call_ `forall` statement and the\ncallee. This is contained in the `CloudMake-ConsistentBuilds.dfy`\ntest in the Dafny repository.\n\n\n```dafny\nmethod m() {\n  forall cmd', deps', e' |\n       Hash(Loc(cmd', deps', e')) == Hash(Loc(cmd, deps, e)) {\n    HashProperty(cmd', deps', e', cmd, deps, e);\n  }\n}\n\nlemma HashProperty(cmd: Expression, deps: Expression, ext: string,\n    cmd': Expression, deps': Expression, ext': string)\n  requires Hash(Loc(cmd, deps, ext)) == Hash(Loc(cmd', deps', ext'))\n  ensures cmd == cmd' && deps == deps' && ext == ext'\n```\n\nThe following example of a _proof_ `forall` statement comes from the same file:\n\n\n```dafny\nforall p | p in DomSt(stCombinedC.st) && p in DomSt(stExecC.st)\n  ensures GetSt(p, stCombinedC.st) == GetSt(p, stExecC.st)\n{\n  assert DomSt(stCombinedC.st) <= DomSt(stExecC.st);\n  assert stCombinedC.st == Restrict(DomSt(stCombinedC.st),\n                                               stExecC.st);\n}\n```\n\nMore generally, the statement\n\n```dafny\nforall x | P(x) { Lemma(x); }\n```\nis used to invoke `Lemma(x)` on all `x` for which `P(x)` holds. If\n`Lemma(x)` ensures `Q(x)`, then the forall statement establishes\n\n```dafny\nforall x :: P(x) ==> Q(x).\n```\n\nThe `forall` statement is also used extensively in the de-sugared forms of\nco-predicates and co-lemmas. See datatypes.", "start_char_idx": 2, "end_char_idx": 3387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b07d7c72-9b25-4a06-a6fa-49bf93a061a3": {"__data__": {"id_": "b07d7c72-9b25-4a06-a6fa-49bf93a061a3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "751b795f-126b-4e20-93fc-04ca0b769fe1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "62ef72c396aa03a454e273a030d770478b7749dc71d348d09b714a4dbc9d843d", "class_name": "RelatedNodeInfo"}}, "text": "8.22. Modify Statement (grammar) {sec-modify-statement}\n\nThe effect of the `modify` statement\nis to say that some undetermined\nmodifications have been made to any or all of the memory\nlocations specified by the given frame expressions.\nIn the following example, a value is assigned to field `x`\nfollowed by a `modify` statement that may modify any field\nin the object. After that we can no longer prove that the field\n`x` still has the value we assigned to it. The now unknown values\nstill are values of their type (e.g. of the subset type or newtype).\n\n\n```dafny\nclass MyClass {\n  var x: int\n  method N()\n    modifies this\n  {\n    x := 18;\n    modify this;\n    assert x == 18;  // error: cannot conclude this here\n  }\n}\n```\n\nUsing `...` as the argument of the statement is deprecated.\n\nThe form of the `modify` statement which includes a block\nstatement is also deprecated.\n\nThe havoc assignment also sets a variable or field\nto some arbitrary (but type-consistent) value. The difference is that\nthe havoc assignment acts on one LHS variable or memory location;\nthe modify statement acts on all the fields of an object.", "start_char_idx": 2, "end_char_idx": 1122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bce30c1-459e-4799-8e80-c1c4414799d1": {"__data__": {"id_": "0bce30c1-459e-4799-8e80-c1c4414799d1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fe082ae-0eeb-4489-84c6-d2d2c5580971", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c61c7e829b2caecd7ac5dbb65060909103a9f627e46cf355c44f835260a522d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02386565-1812-4697-91b6-8e0ffda4bdb4", "node_type": "1", "metadata": {}, "hash": "c1baab42d6aa1e88e2639ab28a14409cfd02eedc07eababa1541dc0d77d01f4f", "class_name": "RelatedNodeInfo"}}, "text": "8.23. Calc Statement (grammar) {sec-calc-statement}\n\nSee also: Verified Calculations.\n\nThe `calc` statement supports _calculational proofs_ using a language\nfeature called _program-oriented calculations_ (poC). This feature was\nintroduced and explained in the [_Verified Calculations_] paper by Leino\nand Polikarpova[@LEINO:Dafny:Calc]. Please see that paper for a more\ncomplete explanation of the `calc` statement. We here mention only the\nhighlights.\n\nCalculational proofs are proofs by stepwise formula manipulation\nas is taught in elementary algebra. The typical example is to prove\nan equality by starting with a left-hand-side and through a series of\ntransformations morph it into the desired right-hand-side.\n\nNon-syntactic rules further restrict hints to only ghost and side-effect\nfree statements, as well as imposing a constraint that only\nchain-compatible operators can be used together in a calculation. The\nnotion of chain-compatibility is quite intuitive for the operators\nsupported by poC; for example, it is clear that \"\" cannot be used within\nthe same calculation, as there would be no relation to conclude between\nthe first and the last line. See the [paper][Verified Calculations] for\na more formal treatment of chain-compatibility.\n\nNote that we allow a single occurrence of the intransitive operator \"!=\" to\nappear in a chain of equalities (that is, \"!=\" is chain-compatible with\nequality but not with any other operator, including itself). Calculations\nwith fewer than two lines are allowed, but have no effect. If a step\noperator is omitted, it defaults to the calculation-wide operator,\ndefined after the `calc` keyword. If that operator is omitted, it defaults\nto equality.\n\nHere is an example using `calc` statements to prove an elementary\nalgebraic identity. As it turns out, Dafny is able to prove this without\nthe `calc` statements, but the example illustrates the syntax.\n\n\n```dafny\nlemma docalc(x : int, y: int)\n  ensures (x + y) * (x + y) == x * x + 2 * x * y + y * y\n{\n  calc {\n    (x + y) * (x + y);\n    ==\n    // distributive law: (a + b) * c == a * c + b * c\n    x * (x + y) + y * (x + y);\n    ==\n    // distributive law: a * (b + c) == a * b + a * c\n    x * x + x * y + y * x + y * y;\n    ==\n    calc {\n\t    y * x;\n      ==\n\t    x * y;\n    }\n    x * x + x * y + x * y + y * y;\n    ==\n    calc {\n      x * y + x * y;\n      ==\n      // a = 1 * a\n      1 * x * y + 1 * x * y;\n      ==\n      // Distributive law\n      (1 + 1) * x * y;\n      ==\n      2 * x * y;\n    }\n    x * x + 2 * x * y + y * y;\n  }\n}\n```\n\nHere we started with `(x + y) * (x + y)` as the left-hand-side\nexpressions and gradually transformed it using distributive,\ncommutative and other laws into the desired right-hand-side.\n\nThe justification for the steps are given as comments or as\nnested `calc` statements that prove equality of some sub-parts\nof the expression.\n\nThe `==` operators show the relation between\nthe previous expression and the next. Because of the transitivity of\nequality we can then conclude that the original left-hand-side is\nequal to the final expression.\n\nWe can avoid having to supply the relational operator between\nevery pair of expressions by giving a default operator between\nthe `calc` keyword and the opening brace as shown in this abbreviated\nversion of the above calc statement:", "start_char_idx": 2, "end_char_idx": 3316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02386565-1812-4697-91b6-8e0ffda4bdb4": {"__data__": {"id_": "02386565-1812-4697-91b6-8e0ffda4bdb4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fe082ae-0eeb-4489-84c6-d2d2c5580971", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c61c7e829b2caecd7ac5dbb65060909103a9f627e46cf355c44f835260a522d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0bce30c1-459e-4799-8e80-c1c4414799d1", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e75b30d36bb332861a06eeda65953e38d9323d18f491fadbb9b8a3396eff2e2a", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nlemma docalc(x : int, y: int)\n  ensures (x + y) * (x + y) == x * x + 2 * x * y + y * y\n{\n  calc == {\n    (x + y) * (x + y);\n    x * (x + y) + y * (x + y);\n    x * x + x * y + y * x + y * y;\n    x * x + x * y + x * y + y * y;\n    x * x + 2 * x * y + y * y;\n  }\n}\n```\n\nAnd since equality is the default operator, we could have omitted\nit after the `calc` keyword.\nThe purpose of the block statements or the `calc` statements between\nthe expressions is to provide hints to aid Dafny in proving that\nstep. As shown in the example, comments can also be used to aid\nthe human reader in cases where Dafny can prove the step automatically.", "start_char_idx": 3319, "end_char_idx": 3959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00cf4590-fcfd-4814-ad16-e79f1490a880": {"__data__": {"id_": "00cf4590-fcfd-4814-ad16-e79f1490a880", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Suffix_description.md", "file_name": "Suffix_description.md", "file_type": "text/markdown", "file_size": 205, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ae5531e-9f4e-497d-b523-de45c03c1f98", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Suffix_description.md", "file_name": "Suffix_description.md", "file_type": "text/markdown", "file_size": 205, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "12e3ab6a17c41df2471be03b91758325b02d17e51f6492b59fe23e893e5a426e", "class_name": "RelatedNodeInfo"}}, "text": "9.34. Suffix (grammar) {sec-suffix}\n\nA _suffix_ describes ways of deriving a new value from\nthe entity to which the suffix is appended. The several kinds\nof suffixes are described below.", "start_char_idx": 2, "end_char_idx": 188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "990d4022-43fc-420b-8edd-cfc3b5998348": {"__data__": {"id_": "990d4022-43fc-420b-8edd-cfc3b5998348", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/SyntaxTests.md", "file_name": "SyntaxTests.md", "file_type": "text/markdown", "file_size": 2549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45e35def-1e62-4011-90f1-ad5484586d51", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/SyntaxTests.md", "file_name": "SyntaxTests.md", "file_type": "text/markdown", "file_size": 2549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6f587159cc5ca50abc0c1c1bba5f616cb945499deb2e1436ac30b2144d600a11", "class_name": "RelatedNodeInfo"}}, "text": "18. Testing syntax rendering\n\nSample math B: $a \\to b$ or\n$$ a \\to \\pi $$\n or \\( a \\top \\) or \\[ a \\to \\pi \\]\n\nColors\n\n```dafny\ninteger literal:  10\nhex literal:      0xDEAD\nreal literal:     1.1\nboolean literal:  true false\nchar literal:     'c'\nstring literal:   \"abc\"\nverbatim string:  @\"abc\"\nident:            ijk\ntype:             int\ngeneric type:     map\noperator:         <=\npunctuation:      { }\nkeyword:          while\nspec:             requires\ncomment:          // comment\nattribute         {: name }\nerror:            $\n```\n\nSyntax color tests:\n\n\n```dafny\ninteger: 0 00 20 01 0_1\nfloat:   .0 1.0 1. 0_1.1_0\nbad:    0_\nhex:    0x10_abcdefABCDEF\nstring:   \"string \\n \\t \\r \\0\" \"a\\\"b\" \"'\" \"\\'\" \"\"\nstring:   \"!@#$%^&*()_-+={}[]|:;\\\\,.?/~`\"\nstring:   \"\\u1234 \"\nstring:   \"     \" : \"\\0\\n\\r\\t\\'\\\"\\\\\"\nnotstring: \"abcde\nnotstring: \"\\u123 \" : \"x\\Zz\" : \"x\\ux\"\nvstring:  @\"\" @\"a\" @\"\"\"\" @\"'\\\" @\"\\u\"\nvstring:  @\"xx\"\"y y\"\"zz \"\nvstring:  @\" \" @\"       \"\nvstring:  @\"x\nx\"\nbad:      @!\nchar:    'a' '\\n' '\\'' '\"' '\\\"' ' ' '\\\\'\nchar:    '\\0' '\\r' '\\t'  '\\u1234'\nbadchar:  $ `\nids:  '\\u123'   '\\Z'  '\\u'  '\\u2222Z'\nids:  '\\u123ZZZ'     '\\u2222Z'\nids: 'a : a' : 'ab' :  'a'b' : 'a''b'\nids:  a_b _ab ab? _0\nid-label:  a@label\nliteral:  true false null\nop:      - ! ~ x  -!~x\nop:      a + b - c * d / e % f a+b-c*d/e%f\nop:      =  == != b&&c || ==>  <==\nop:      !=# !! in !in\nop:      !in\u2206  !in\u00e9\nnot op:  !inx\npunc:    . , :: | :| := ( ) [ ] { }\ntypes:   int real string char bool nat ORDINAL\ntypes:   object object?\ntypes:   bv1 bv10 bv0\ntypes:   array array2 array20 array10\ntypes:   array? array2? array20? array10?\nids:     array1 array0 array02 bv02 bv_1\nids:     intx natx int0 int_ int? bv1_ bv1x array2x\ntypes:   seq  set \ntypes:   map  imap \ntypes:   seq seq\ntypes:   seq >\ntypes:   map,seq>\ntypes:   G G,G>\ntypes:   seq map imap set iset multiset\nids:     seqx mapx\nno arg:  seq   seq   seq   seq\nkeywords: if while assert assume\nspec:    requires  reads modifies\nattribute:  {: MyAttribute \"asd\", 34 }\nattribute:  {: MyAttribute }\ncomment:  // comment\ncomment:  /* comment */ after\ncomment:  // comment /* asd */ dfg\ncomment:  /* comment /* embedded */ tail */ after\ncomment:  /* comment // embedded */ after\ncomment: /* comment\n   /* inner comment\n   */\n   outer comment\n   */ after\n   more after\n```", "start_char_idx": 2, "end_char_idx": 2305, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edafeb10-332d-4542-9d52-7f6bd18def82": {"__data__": {"id_": "edafeb10-332d-4542-9d52-7f6bd18def82", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Terms_description.md", "file_name": "Terms_description.md", "file_type": "text/markdown", "file_size": 831, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c140514e-bd64-48f6-b8f8-1acd67ece23f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Terms_description.md", "file_name": "Terms_description.md", "file_type": "text/markdown", "file_size": 831, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c19ee9fd4ffdaeeffbfe010b88d082830a1b62e30bf7407f6f99b19a0d310b64", "class_name": "RelatedNodeInfo"}}, "text": "9.7. Terms (grammar) {sec-addition-expression}\n\nExamples:\n\n```dafny\nx + y - z\n```\n\n`Terms` combine `Factors` by adding or subtracting.\nAddition has these meanings for different types:\n\n* arithmetic addition for numeric types (Section 5.2.2])\n* union for sets and multisets (Section 5.5.1 and Section 5.5.2)\n* concatenation for sequences (Section 5.5.3)\n* map merging for maps (Section 5.5.4)\n\nSubtraction is \n\n* arithmetic subtraction for numeric types\n* set or multiset subtraction for sets and multisets\n* domain subtraction for maps.\n\nAll addition operations are associative. Arithmetic addition and union are commutative. Subtraction is neither; it groups to the left as expected:\n`x - y -z` is `(x - y) -z`.", "start_char_idx": 2, "end_char_idx": 714, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e946726-3dae-4d81-9215-3af8f40519cc": {"__data__": {"id_": "4e946726-3dae-4d81-9215-3af8f40519cc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Top_Level_Declarations_description.md", "file_name": "Top_Level_Declarations_description.md", "file_type": "text/markdown", "file_size": 1308, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e00921f0-61ba-4bda-b568-bd6023555455", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Top_Level_Declarations_description.md", "file_name": "Top_Level_Declarations_description.md", "file_type": "text/markdown", "file_size": 1308, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e2f55d37c69bebe74fd0bd3d9bf54cddda6967100992a7533f0f0bf2950a5d7f", "class_name": "RelatedNodeInfo"}}, "text": "3.2. Top Level Declarations (grammar) {sec-top-level-declaration}\n\nExamples:\n\n```dafny\nabstract module M { }\ntrait R { }\nclass C { }\ndatatype D = A | B\nnewtype pos = i: int | i >= 0\ntype T = i: int | 0 <= i < 100\nmethod m() {}\nfunction f(): int\nconst c: bool\n```\n\nTop-level declarations may appear either at the top level of a Dafny file,\nor within a (sub)module declaration. A top-level declaration is one of\nvarious kinds of declarations described later. Top-level declarations are\nimplicitly members of a default (unnamed) top-level module.\n\nDeclarations within a module or at the top-level all begin with reserved keywords and do not end with semicolons.\n\nThese declarations are one of these kinds:\n- methods and functions, encapsulating computations or actions\n- const declarations, which are names (of a given type) initialized to an unchanging value;\n  declarations of variables and mutable fields are not allowed at the module level\n- type declarations of various kinds (Section 5 and the following sections)\n\nMethods, functions and const declarations are placed in an implicit class declaration\nthat is in the top-level implicit module. These declarations are all implicitly\n`static` (and may not be declared explicitly static).", "start_char_idx": 2, "end_char_idx": 1239, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7a1fd39-d50a-4d07-ac7d-b41b96168102": {"__data__": {"id_": "a7a1fd39-d50a-4d07-ac7d-b41b96168102", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82650227-7313-462c-9c13-c7e7af3e2e11", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fd42e4ad8dacb2c8761cf774641629bb8a299dc36019fb413188918b845a92ad", "class_name": "RelatedNodeInfo"}}, "text": "12. Advanced Topics {sec-advanced-topics}", "start_char_idx": 2, "end_char_idx": 43, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20c9c89a-9460-4c77-8872-9f23bf40e9cb": {"__data__": {"id_": "20c9c89a-9460-4c77-8872-9f23bf40e9cb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fbdbf5f-b54b-4646-81dc-7c6e33dde93c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0ccf842fd012bc402a7a8eac39a766d726524529dc5a104ae3405c42ac619d38", "class_name": "RelatedNodeInfo"}}, "text": "12.1. Type Parameter Completion {sec-type-parameter-completion}\n\nGeneric types, like `A`, consist of a _type constructor_, here `A`, and type parameters, here `T` and `U`.\nType constructors are not first-class entities in Dafny, they are always used syntactically to construct\ntype names; to do so, they must have the requisite number of type parameters, which must be either concrete types, type parameters, or \na generic type instance.\n\nHowever, those type parameters do not always have to be explicit; Dafny can often infer what they ought to be.\nFor example, here is a fully parameterized function signature:\n\n```dafny\ntype List\nfunction Elements(list: List): set\n```\nHowever, Dafny also accepts\n\n```dafny\ntype List\nfunction Elements(list: List): set\n```\nIn the latter case, Dafny knows that the already defined types `set` and `List` each take one type parameter\nso it fills in `` (using some unique type parameter name) and then determines that the function itself needs\na type parameter `` as well.\n\nDafny also accepts\n\n```dafny\ntype List\nfunction Elements(list: List): set\n```\nIn this case, the function already has a type parameter list. `List` and `set` are each known to need type parameters,\nso Dafny takes the first `n` parameters from the function signature and applies them to `List` and `set`, where `n` (here `1`) is the\nnumber needed by those type constructors.\n \nIt never hurts to simply write in all the type parameters, but that can reduce readability.\nOmitting them in cases where Dafny can intuit them makes a more compact definition.\n\nThis process is described in more detail with more examples in this paper:\nhttp://leino.science/papers/krml270.html.", "start_char_idx": 2, "end_char_idx": 1677, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9053324-d09c-45e0-a110-4ebff6d4d027": {"__data__": {"id_": "c9053324-d09c-45e0-a110-4ebff6d4d027", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "33313ee8343e385d8f8f8bc0c248460090d0103ce94a9f85c279211007259624", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "429a90a1-d830-45b7-9dcd-87e0450650f5", "node_type": "1", "metadata": {}, "hash": "f8cc3f8b5584824f2f6b8f73c642aced8a48f253cf15067f72af3d4a91d1340c", "class_name": "RelatedNodeInfo"}}, "text": "12.2. Type Inference {sec-type-inference}\n\nSignatures of methods, functions, fields (except `const` fields with a\nRHS), and datatype constructors have to declare the types of their\nparameters. In other places, types can be omitted, in which case\nDafny attempts to infer them. Type inference is \"best effort\" and may\nfail. If it fails to infer a type, the remedy is simply for the\nprogram to give the type explicitly.\n\nDespite being just \"best effort\", the types of most local variables,\nbound variables, and the type parameters of calls are usually inferred\nwithout the need for a program to give the types explicitly. Here are\nsome notes about type inference:\n\n* With some exceptions, type inference is performed across a whole\n  method body. In some cases, the information needed to infer a local\n  variable's type may be found after the variable has been declared\n  and used. For example, the nonsensical program\n\n\n    ```dafny\n    method M(n: nat) returns (y: int)\n    {\n      var a, b;\n      for i := 0 to n {\n        if i % 2 == 0 {\n          a := a + b;\n        }\n      }\n      y := a;\n    }\n    ```\n\n  uses `a` and `b` after their declarations. Still, their types are\n  inferred to be `int`, because of the presence of the assignment `y := a;`.\n\n  A more useful example is this:\n\n\n    ```dafny\n    class Cell {\n      var data: int\n    }\n    \n    method LastFive(a: array) returns (r: int)\n    {\n      var u := null;\n      for i := 0 to a.Length {\n        if a[i] == 5 {\n          u := new Cell;\n          u.data := i;\n        }\n      }\n      r := if u == null then a.Length else u.data;\n    }\n    ```\n\n  Here, using only the assignment `u := null;` to infer the type of\n  `u` would not be helpful. But Dafny looks past the initial\n  assignment and infers the type of `u` to be `Cell?`.\n\n* The primary example where type inference does not inspect the entire\n  context before giving up on inference is when there is a member\n  lookup. For example,\n\n\n    ```dafny\n    datatype List = Nil | Cons(T, List)\n\n    method Tutone() {\n      assert forall pair :: pair.0 == 867 && pair.1 == 5309 ==> pair == (867, 5309); // error: members .0 and .1 not found\n      assert forall pair: (int, int) :: pair.0 == 867 && pair.1 == 5309 ==> pair == (867, 5309);\n    }\n    ```\n\n  In the first quantifier, type inference fails to infer the type of\n  `pair` before it tries to look up the members `.0` and `.1`, which\n  results in a \"type of the receiver not fully determined\" error. The\n  remedy is to provide the type of `pair` explicitly, as is done in the\n  second quantifier.\n\n  (In the future, Dafny may do more type inference before giving up on the member lookup.)\n\n* If type parameters cannot be inferred, then they can be given\n  explicitly in angle brackets. For example, in\n\n\n    ```dafny\n    datatype Option = None | Some(T)\n    \n    method M() {\n      var a: Option := None;\n      var b := None; // error: type is underspecified\n      var c := Option.None;\n      var d := None;\n      d := Some(400);\n    }\n    ```\n\n  the type of `b` cannot be inferred, because it is underspecified.\n  However, the types of `c` and `d` are inferred to be `Option`.\n\n  Here is another example:\n\n\n    ```dafny\n    function EmptySet(): set {\n      {}\n    }\n\n    method M() {\n      var a := EmptySet(); // error: type is underspecified\n      var b := EmptySet();\n      b := b + {2, 3, 5};\n      var c := EmptySet();\n    }\n    ```\n\n  The type instantiation in the initial assignment to `a` cannot\n  be inferred, because it is underspecified. However, the type\n  instantiation in the initial assignment to `b` is inferred to\n  be `int`, and the types of `b` and `c` are inferred to be\n  `set`.\n\n* Even the element type of `new` is optional, if it can be inferred. For example, in", "start_char_idx": 2, "end_char_idx": 3760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "429a90a1-d830-45b7-9dcd-87e0450650f5": {"__data__": {"id_": "429a90a1-d830-45b7-9dcd-87e0450650f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "33313ee8343e385d8f8f8bc0c248460090d0103ce94a9f85c279211007259624", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9053324-d09c-45e0-a110-4ebff6d4d027", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "03d3d9a3f016b877152a80a73fe744ef34f8985b451756bf39b36d20aaf1122d", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\n    function EmptySet(): set {\n      {}\n    }\n\n    method M() {\n      var a := EmptySet(); // error: type is underspecified\n      var b := EmptySet();\n      b := b + {2, 3, 5};\n      var c := EmptySet();\n    }\n    ```\n\n  The type instantiation in the initial assignment to `a` cannot\n  be inferred, because it is underspecified. However, the type\n  instantiation in the initial assignment to `b` is inferred to\n  be `int`, and the types of `b` and `c` are inferred to be\n  `set`.\n\n* Even the element type of `new` is optional, if it can be inferred. For example, in\n\n\n    ```dafny\n    method NewArrays()\n    {\n      var a := new int[3];\n      var b: array := new [3];\n      var c := new [3];\n      c[0] := 200;\n      var d := new [3] [200, 800, 77];\n      var e := new [] [200, 800, 77];\n      var f := new 3;\n    }\n    ```\n\n  the omitted types of local variables are all inferred as\n  `array` and the omitted element type of each `new` is inferred\n  to be `int`.\n\n* In the absence of any other information, integer-looking literals\n  (like `5` and `7`) are inferred to have type `int` (and not, say,\n  `bv128` or `ORDINAL`).\n\n* Many of the types inferred can be inspected in the IDE.", "start_char_idx": 3186, "end_char_idx": 4379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b55cb08-93ef-45b5-a7fb-f82b1129d661": {"__data__": {"id_": "1b55cb08-93ef-45b5-a7fb-f82b1129d661", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbc735e7-c463-4e63-89c6-423346652688", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "552243b48f8f2c99c0f02147c5f300dc086fada81b74df93195a3e0c45847c65", "class_name": "RelatedNodeInfo"}}, "text": "12.3. Ghost Inference {sec-ghost-inference}\n\nAfter^why-after-type-inference] [type inference, Dafny revisits the program\nand makes a final decision about which statements are to be compiled,\nand which statements are ghost.\nThe ghost statements form what is called the _ghost context_ of expressions.\n\n[^why-after-type-inference]: Ghost inference has to be performed after type inference, at least because it is not possible to determine if a member access `a.b` refers to a ghost variable until the type of `a` is determined.\n\nThese statements are determined to be ghost:\n\n- `assert`, `assume`, `reveal`, and `calc` statements.\n- The body of the `by` of an `assert` statement.\n- Calls to ghost methods, including lemmas.\n- `if`, `match`, and `while` statements with condition expressions or alternatives containing ghost expressions. Their bodies are also ghost.\n- `for` loops whose start expression contains ghost expressions.\n- Variable declarations if they are explicitly ghost or if their respective right-hand side is a ghost expression.\n- Assignments or update statement if all updated variables are ghost.\n- `forall` statements, unless there is exactly one assignment to a non-ghost array in its body.\n\nThese statements always non-ghost:\n\n- `expect` statements.\n- `print` statements.\n\nThe following expressions are ghost, which is used in some of the tests above:\n\n- All specification expressions\n- All calls to functions and predicates marked as `ghost`\n- All variables, constants and fields declared using the `ghost` keyword\n\nNote that inferring ghostness can uncover other errors, such as updating non-ghost variables in ghost contexts.\nFor example, if `f` is a ghost function, in the presence of the following code:\n\n\n```dafny\nvar x := 1;\nif(f(x)) {\n  x := 2;\n}\n```\n\nDafny will infer that the entire `if` is ghost because the condition uses a ghost function,\nand will then raise the error that it's not possible to update the non-ghost variable `x` in a ghost context.", "start_char_idx": 2, "end_char_idx": 1982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11f761b8-7bb8-42be-ab73-98e6864e88d1": {"__data__": {"id_": "11f761b8-7bb8-42be-ab73-98e6864e88d1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c806965-ab33-458c-81c5-67d8e2cc5f91", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f3b13f1f65f2a8196c7ce09cc7c5ed06a5c41e344c4f6ef532b74db60144652a", "class_name": "RelatedNodeInfo"}}, "text": "12.4. Well-founded Functions and Extreme Predicates {sec-extreme}\n\nRecursive functions are a core part of computer science and mathematics.\nRoughly speaking, when the definition of such a function spells out a\nterminating computation from given arguments, we may refer to\nit as a _well-founded function_.  For example, the common factorial and\nFibonacci functions are well-founded functions.\n\nThere are also other ways to define functions.  An important case\nregards the definition of a boolean function as an extreme solution\n(that is, a least or greatest solution) to some equation.  For\ncomputer scientists with interests in logic or programming languages,\nthese _extreme predicates_ are important because they describe the\njudgments that can be justified by a given set of inference rules\n(see, e.g., [@CamilleriMelham:InductiveRelations;\n@Winskel:FormalSemantics;\n  @LeroyGrall:CoinductiveBigStep; @Pierce:SoftwareFoundations;\n  @NipkowKlein:ConcreteSemantics]).\n\nTo benefit from machine-assisted reasoning, it is necessary not just\nto understand extreme predicates but also to have techniques for\nproving theorems about them.  A foundation for this reasoning was\ndeveloped by Paulin-Mohring [@PaulinMohring:InductiveCoq] and is the\nbasis of the constructive logic supported by Coq [@Coq:book] as well\nas other proof assistants [@BoveDybjerNorell:BriefAgda;\n@SwamyEtAl:Fstar2011].  Essentially, the idea is to represent the\nknowledge that an extreme predicate holds by the proof term by which\nthis knowledge was derived.  For a predicate defined as the least\nsolution, such proof terms are values of an inductive datatype (that\nis, finite proof trees), and for the greatest solution, a coinductive\ndatatype (that is, possibly infinite proof trees).  This means that\none can use induction and coinduction when reasoning about these proof\ntrees.  These extreme predicates are known as,\nrespectively, _least predicates_ and _greatest predicates_.\nSupport for extreme predicates is also\navailable in the proof assistants Isabelle [@Paulson:CADE1994] and HOL\n[@Harrison:InductiveDefs].\n\nDafny supports both well-founded functions and extreme predicates.\nThis section describes the difference in general\nterms, and then describes novel syntactic support in Dafny for\ndefining and proving lemmas with extreme predicates.  Although Dafny's\nverifier has at its core a first-order SMT solver, Dafny's logical\nencoding makes it possible to reason about fixpoints in an automated\nway.\n\nThe encoding for greatest predicates in Dafny was described previously\n@LeinoMoskal:Coinduction] and is here described in [the section about datatypes.", "start_char_idx": 2, "end_char_idx": 2632, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73a92648-749d-4fd1-b7c1-fdf74af5a5f7": {"__data__": {"id_": "73a92648-749d-4fd1-b7c1-fdf74af5a5f7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6f57849-1cc8-4988-87be-b0c854a9b116", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c40d6ac477dae8c56978dee3391b210b3f20779f320e3ddc6133b432020c38d7", "class_name": "RelatedNodeInfo"}}, "text": "12.4.1. Function Definitions\n\nTo define a function $f \\colon X \\to Y$ in terms of itself, one can\nwrite a general equation like\n\n\n$$f = \\mathcal{F}(f)$$\n\n\nwhere $\\mathcal{F}$ is a non-recursive function of type\n$(X \\to Y) \\to X \\to Y$.\nBecause it takes a function as an argument,\n$\\mathcal{F}$\nis referred to as a _functor_ (or _functional_, but not to be\nconfused by the category-theory notion of a functor).\nThroughout, assume that\n$\\mathcal{F}(f)$\nby itself is well defined,\nfor example that it does not divide by zero.  Also assume that\n$f$\noccurs\nonly in fully applied calls in\n$\\mathcal{F}(f)$;\n eta expansion can be applied to\nensure this.  If\n$f$\nis a `boolean` function, that is, if\n$Y$\nis\nthe type of booleans, then \n$f$ is called\na _predicate_.\n\nFor example, the common Fibonacci function over the\nnatural numbers can be defined by the equation\n\n$$\n\\mathit{fib} = \\lambda n \\bullet\\: \\mathbf{if}\\:n < 2 \\:\\mathbf{then}\\: n \\:\\mathbf{else}\\: \\mathit{fib}(n-2) + \\mathit{fib}(n-1)\n$$\n\n\nWith the understanding that the argument $n$ is universally\nquantified, we can write this equation equivalently as\n\n\n$$\n\\mathit{fib}(n) = \\mathbf{if}\\:n < 2\\:\\mathbf{then}\\:n\\:\\mathbf{else}\\:\\mathit{fib}(n-2)%2B\\mathit{fib}(n-1)\n$$\n\n\n\nThe fact that the function being defined occurs on both sides of the equation\ncauses concern that we might not be defining the function properly, leading to a\nlogical inconsistency.  In general, there\ncould be many solutions to an equation like the general equation or there could be none.\nLet's consider two ways to make sure we're defining the function uniquely.", "start_char_idx": 2, "end_char_idx": 1596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27904fa7-8afc-45f5-94ee-b3877a68581b": {"__data__": {"id_": "27904fa7-8afc-45f5-94ee-b3877a68581b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5713057-fdd4-4b21-8a24-8fd26133267d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ea6696842b13c9f1a3d93dcb5a645c398b0da62027c238408a223dc5ba737ef", "class_name": "RelatedNodeInfo"}}, "text": "12.4.1.1. Well-founded Functions\n\nA standard way to ensure that the general equation has a unique solution in $f$ is\nto make sure the recursion is well-founded, which roughly means that the\nrecursion terminates.  This is done by introducing any well-founded\nrelation $\\ll$ on the domain of $f$ and making sure that the argument to each recursive\ncall goes down in this ordering.  More precisely, if we formulate the general equation as\n\n$$\nf(x) = \\mathcal{F}{'}(f)\n$$\n\n\nthen we want to check $E \\ll x$ for each call $f(E)$ in $f(x) = \\mathcal{F}'(f)$.\nWhen a function\ndefinition satisfies  this _decrement condition_, then the function is said to be\n_well-founded_.\n\nFor example, to check the decrement condition for $\\mathit{fib}$\nin the fib equation, we can pick $\\ll$\nto be the arithmetic less-than relation on natural numbers and check the\nfollowing, for any $n$:\n $$ 2 \\leq n \\;\\Longrightarrow\\; n-2 \\ll n \\;\\wedge\\; n-1 \\ll n $$\n\n\nNote that we are entitled to use the antecedent\n$2 \\leq n$ because that is the\ncondition under which the else branch in the fib equation is evaluated.\n\nA well-founded function is often thought of as \"terminating\" in the sense\nthat the recursive _depth_ in evaluating $f$\non any given argument is finite.  That is, there are no infinite descending chains\nof recursive calls.  However, the evaluation of $f$ on a given argument\nmay fail to terminate, because its _width_ may be infinite.  For example, let $P$\nbe some predicate defined on the ordinals and let $\\mathit{P}_\\downarrow$ be a predicate on the\nordinals defined by the following equation:\n\n\n$\\mathit{P}_\\downarrow = P(o) \\;\\wedge\\; \\forall p \\bullet\\; p \\ll o \\;\\Longrightarrow\\; \\mathit{P}_\\downarrow(p)$\n\n\n\nWith $\\ll$ as the usual ordering on ordinals, this equation satisfies the decrement\ncondition, but evaluating $\\mathit{P}\\_\\downarrow(\\omega)$ would require evaluating\n$\\mathit{P}\\_\\downarrow(n)$ for every natural number $n$.  However, what we are concerned\nabout here is to avoid mathematical inconsistencies, and that is\nindeed a consequence of the decrement condition.", "start_char_idx": 2, "end_char_idx": 2078, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fc324e0-d4d9-442f-bb02-cdc59b796d6e": {"__data__": {"id_": "1fc324e0-d4d9-442f-bb02-cdc59b796d6e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6117e2a5-9a56-496a-8413-ff02e2800105", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9ebcd82a04325384da2e88acd0ad3e17487a7f3768f6853a6a68d53fdeb3f73d", "class_name": "RelatedNodeInfo"}}, "text": "12.4.1.2. Example with Well-founded Functions {sec-fib-example}\n\nSo that we can later see how inductive proofs are done in Dafny, let's prove that\nfor any $n$, $\\mathit{fib}(n)$ is even iff $n$ is a multiple of $3$.\nWe split our task into\ntwo cases.  If $n < 2$, then the property follows directly from the definition\nof $\\mathit{fib}$.  Otherwise, note that exactly one of the three numbers $n-2$, $n-1$, and $n$\nis a multiple of 3.  If $n$ is the multiple of 3, then by invoking the\ninduction hypothesis on $n-2$\nand $n-1$, we obtain that $\\mathit{fib}(n-2) + \\mathit{fib}(n-1)$ is the sum of two odd numbers,\nwhich is even.  If $n-2$ or $n-1$ is a multiple of 3, then by invoking the induction\nhypothesis on $n-2$ and $n-1$, we obtain that $\\mathit{fib}(n-2) + \\mathit{fib}(n-1)$ is the sum of an\neven number and an odd number, which is odd.  In this proof, we invoked the induction\nhypothesis on $n-2$ and on $n-1$.  This is allowed, because both are smaller than\n$n$, and hence the invocations go down in the well-founded ordering on natural numbers.", "start_char_idx": 2, "end_char_idx": 1057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f06ed515-19ca-4e58-b42a-64dc8c55b31e": {"__data__": {"id_": "f06ed515-19ca-4e58-b42a-64dc8c55b31e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c116e219-0619-4234-9f03-35685392358d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "710f3491b8b180d69ce5895d398033b6ceb1cb345c44b68eeb733209898a5987", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7d056fb-06db-4b43-ab67-08874b8c19a1", "node_type": "1", "metadata": {}, "hash": "e80749d8c49027d4c316c220d08a0aefd02af6f37922aa25aceaf760ec4a16d8", "class_name": "RelatedNodeInfo"}}, "text": "12.4.1.3. Extreme Solutions\n\nWe don't need to exclude the possibility of the general equation having multiple\nsolutions---instead, we can just be clear about which one of them we want.\nLet's explore this, after a smidgen of lattice theory.\n\nFor any complete lattice $(Y,\\leq)$ and any set $X$, we can by _pointwise extension_ define\na complete lattice $(X \\to Y, \\dot{\\Rightarrow})$, where for any $f,g \\colon X \\to Y$,\n\n\n$$\nf \\dot{\\Rightarrow} g  \\;\\;\\equiv\\;\\; \\forall x \\bullet\\; f(x) \\leq g(x)\n$$\n\n\n\n\nIn particular, if $Y$ is the set of booleans ordered by implication (`false` $\\leq$ `true`),\nthen the set of predicates over any domain $X$ forms a complete lattice.\nTarski's Theorem [@Tarski:theorem] tells us that any monotonic function over a\ncomplete lattice has a least and a greatest fixpoint.  In particular, this means that\n$\\mathcal{F}$ has a least fixpoint and a greatest fixpoint, provided $\\mathcal{F}$ is monotonic.\n\nSpeaking about the _set of solutions_ in $f$ to the general equation is the same as speaking\nabout the _set of fixpoints_ of functor $\\mathcal{F}$.  In particular, the least and greatest\nsolutions to the general equation are the same as the least and greatest fixpoints of $\\mathcal{F}$.\nIn casual speak, it happens that we say \"fixpoint of the general equation\", or more\ngrotesquely, \"fixpoint of $f$\" when we really mean \"fixpoint of $\\mathcal{F}$\".\n\nTo conclude our little excursion into lattice theory, we have that, under the\nproviso of $\\mathcal{F}$ being monotonic, the set of solutions in $f$ to the general equation is nonempty,\nand among these solutions, there is in the $\\dot{\\Rightarrow}$ ordering a least solution (that is,\na function that returns `false` more often than any other) and a greatest solution (that\nis, a function that returns `true` more often than any other).\n\nWhen discussing extreme solutions, let's now restrict our attention to boolean functions\n(that is, with $Y$ being the type of booleans).  Functor $\\mathcal{F}$ is monotonic\nif the calls to $f$ in $\\mathcal{F}'(f)$ are in _positive positions_ (that is, under an even number\nof negations).  Indeed, from now on, we will restrict our attention to such monotonic\nfunctors $\\mathcal{F}$.\n\nHere is a running example.  Consider the following equation,\nwhere $x$ ranges over the integers:\n\n\n$$\ng(x) = (x = 0 \\:\\vee\\: g(x-2))\n$$\n\n\nThis equation has four solutions in $g$.  With $w$ ranging over the integers, they are:\n\n\n$$\n \\begin{array}{r@{}l}\n  g(x) \\;\\;\\equiv\\;\\;{}&  x \\in \\{w \\;|\\; 0 \\leq w \\;\\wedge\\; w\\textrm{ even}\\} \\\\\n  g(x) \\;\\;\\equiv\\;\\;{}&  x \\in \\{w \\;|\\; w\\textrm{ even}\\} \\\\\n  g(x) \\;\\;\\equiv\\;\\;{}&  x \\in \\{w \\;|\\; (0 \\leq w \\;\\wedge\\; w\\textrm{ even}) \\:\\vee\\: w\\textrm{ odd}\\} \\\\\n  g(x) \\;\\;\\equiv\\;\\;{}&  x \\in \\{w \\;|\\; \\mathit{true}\\}\n  \\end{array}\n$$\n\n\n\nThe first of these is the least solution and the last is the greatest solution.\n\nIn the literature, the definition of an extreme predicate is often given as a set of\n_inference rules_.  To designate the least solution, a single line separating the\nantecedent (on top) from conclusion (on bottom) is used:\n\n\n  $$\\dfrac{}{g(0)} \\qquad\\qquad \\dfrac{g(x-2)}{g(x)}$$", "start_char_idx": 2, "end_char_idx": 3157, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7d056fb-06db-4b43-ab67-08874b8c19a1": {"__data__": {"id_": "b7d056fb-06db-4b43-ab67-08874b8c19a1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c116e219-0619-4234-9f03-35685392358d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "710f3491b8b180d69ce5895d398033b6ceb1cb345c44b68eeb733209898a5987", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f06ed515-19ca-4e58-b42a-64dc8c55b31e", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bea8876c17ddb16cdd208a9b9219d7d38568454328a001ece69d9c12555ae276", "class_name": "RelatedNodeInfo"}}, "text": "The first of these is the least solution and the last is the greatest solution.\n\nIn the literature, the definition of an extreme predicate is often given as a set of\n_inference rules_.  To designate the least solution, a single line separating the\nantecedent (on top) from conclusion (on bottom) is used:\n\n\n  $$\\dfrac{}{g(0)} \\qquad\\qquad \\dfrac{g(x-2)}{g(x)}$$\n\n\nThrough repeated applications of such rules, one can show that the predicate holds for\na particular value.  For example, the _derivation_, or _proof tree_,\nto the left in the proof tree figure shows that $g(6)$ holds.\n(In this simple example, the derivation is a rather degenerate proof \"tree\".)\nThe use of these inference rules gives rise to a least solution, because proof trees are\naccepted only if they are _finite_.\n\nWhen inference rules are to designate the greatest solution, a thick\nline is used:\n\n\n    $$\\genfrac{}{}{1.2pt}0{}{g(0)}\n  \\qquad\\qquad\n    \\genfrac{}{}{1.2pt}0{g(x-2)}{g(x)}$$\n\n\nIn this case, proof trees are allowed to be infinite.\nFor example, the left-hand example below shows a finite proof tree that uses the inductive rules to establish $g(6)$.\nOn the right is a partial depiction of an infinite proof tree that uses the coinductive rules to establish $g(1)$.\n\n\n$$\\dfrac{\n  \\dfrac{\n    \\dfrac{\n      \\dfrac{}{g(0)}\n      }{g(2)}\n    }{g(4)}\n  }{g(6)}\n\\qquad\\qquad\n\\genfrac{}{}{1.2pt}0{\n  \\genfrac{}{}{1.2pt}0{\n    \\genfrac{}{}{1.2pt}0{\n      \\genfrac{}{}{1.2pt}0{\n          {} {\\vdots }\n        }{g(-5)}\n      }{g(-3)}\n    }{g(-1)}\n  }{g(1)}$$\n\n\n\nNote that derivations may not be unique.  For example, in the case of the greatest\nsolution for $g$, there are two proof trees that establish $g(0)$:  one is the finite\nproof tree that uses the left-hand rule of these coinductive rules once, the other is the infinite\nproof tree that keeps on using the right-hand rule of these coinductive rules.", "start_char_idx": 2796, "end_char_idx": 4680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4806c7cc-7a2a-4b97-a8b9-ff9282fd0fc3": {"__data__": {"id_": "4806c7cc-7a2a-4b97-a8b9-ff9282fd0fc3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8bdcfa7-c581-4202-b7df-2f0db76126ab", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d4dcc1a8fb4699a6577d1af3ea8a064e7f1717586f5cca5e864ffab8fe8ce8a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64926f2b-9b14-4e7c-94bb-9da0a6eb914f", "node_type": "1", "metadata": {}, "hash": "9619462ddd11fd3feddb7d0eaaaf9ff94761c18c624b032386c85d9217773230", "class_name": "RelatedNodeInfo"}}, "text": "12.4.2. Working with Extreme Predicates {sec-extreme-predicates}\n\nIn general, one cannot evaluate whether or not an extreme predicate holds for some\ninput, because doing so may take an infinite number of steps.  For example, following\nthe recursive calls in the definition the EvenNat equation to try to evaluate $g(7)$ would never\nterminate.  However, there are useful ways to establish that an extreme predicate holds\nand there are ways to make use of one once it has been established.\n\nFor any $\\mathcal{F}$ as in the general equation, define two infinite series of well-founded\nfunctions, ${ {}^{\\flat}\\kern-1mm f}_k$ and ${ {}^{\\sharp}\\kern-1mm f}_k$\nwhere $k$ ranges over the natural numbers:\n\n\n$$\n   { {}^{\\flat}\\kern-1mm f}_k(x) = \\left\\{\n    \\begin{array}{ll}\n      \\mathit{false}         & \\textrm{if } k = 0 \\\\\n      \\mathcal{F}({ {}^{\\flat}\\kern-1mm f}_{k-1})(x) & \\textrm{if } k > 0\n    \\end{array}\n     \\right\\} \n$$\n\n\n\n$$\n   { {}^{\\sharp}\\kern-1mm f}_k(x) = \\left\\{\n    \\begin{array}{ll}\n      \\mathit{true}          & \\textrm{if } k = 0 \\\\\n      \\mathcal{F}({ {}^{\\sharp}\\kern-1mm f}_{k-1})(x) & \\textrm{if } k > 0\n    \\end{array}\n    \\right\\} \n$$\n\n\nThese functions are called the _iterates_ of $f$, and we will also refer to them\nas the _prefix predicates_ of $f$ (or the _prefix predicate_ of $f$, if we think\nof $k$ as being a parameter).\nAlternatively, we can define ${ {}^{\\flat}\\kern-1mm f}_k$ and ${ {}^{\\sharp}\\kern-1mm f}_k$ without mentioning $x$:\nlet $\\bot$ denote the function that always returns `false`, let $\\top$\ndenote the function that always returns `true`, and let a superscript on $\\mathcal{F}$ denote\nexponentiation (for example, $\\mathcal{F}^0(f) = f$ and $\\mathcal{F}^2(f) = \\mathcal{F}(\\mathcal{F}(f))$).\nThen, the least approx definition and the greatest approx definition can be stated equivalently as\n${ {}^{\\flat}\\kern-1mm f}_k = \\mathcal{F}^k(\\bot)$ and ${ {}^{\\sharp}\\kern-1mm f}_k = \\mathcal{F}^k(\\top)$.\n\nFor any solution $f$ to the general equation, we have, for any $k$ and $\\ell$\nsuch that $k \\leq \\ell$:", "start_char_idx": 2, "end_char_idx": 2057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64926f2b-9b14-4e7c-94bb-9da0a6eb914f": {"__data__": {"id_": "64926f2b-9b14-4e7c-94bb-9da0a6eb914f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8bdcfa7-c581-4202-b7df-2f0db76126ab", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d4dcc1a8fb4699a6577d1af3ea8a064e7f1717586f5cca5e864ffab8fe8ce8a6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4806c7cc-7a2a-4b97-a8b9-ff9282fd0fc3", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "59dd0147357c5d08ce382f729d225cb6b592b70de3b5b5a6c844f5465f499a2e", "class_name": "RelatedNodeInfo"}}, "text": "$$\n {\\;{}^{\\flat}\\kern-1mm f}_k    \\quad\\;\\dot{\\Rightarrow}\\;\\quad {\\;{}^{\\flat}\\kern-1mm f}_\\ell \\quad\\;\\dot{\\Rightarrow}\\;\\quad f      \\quad\\;\\dot{\\Rightarrow}\\;\\quad {\\;{}^{\\sharp}\\kern-1mm f}_\\ell \\quad\\;\\dot{\\Rightarrow}\\;\\quad { {}^{\\sharp}\\kern-1mm f}_k $$\n\nIn other words, every ${\\;{}^{\\flat}\\kern-1mm f}\\_{k}$ is a _pre-fixpoint_ of $f$ and every ${\\;{}^{\\sharp}\\kern-1mm f}\\_{k}$ is a _post-fixpoint_\nof $f$.  Next, define two functions, $f^{\\downarrow}$ and $f^{\\uparrow}$, in\nterms of the prefix predicates:\n\n$$\n f^{\\downarrow}(x) \\;=\\;  \\exists k \\bullet\\; { {}^{\\flat}\\kern-1mm f}_k(x) $$\n$$\n  f^{\\uparrow}(x) \\;=\\;  \\forall k \\bullet\\; { {}^{\\sharp}\\kern-1mm f}_k(x) $$\n\nBy the prefix postfix result, we also have that $f^{\\downarrow}$ is a pre-fixpoint of $\\mathcal{F}$ and $f^{\\uparrow}$\nis a post-fixpoint of $\\mathcal{F}$.  The marvelous thing is that, if $\\mathcal{F}$ is _continuous_, then\n$f^{\\downarrow}$ and $f^{\\uparrow}$ are the least and greatest fixpoints of $\\mathcal{F}$.\nThese equations let us do proofs by induction when dealing with extreme predicates.\nThe extreme predicate section explains how to check for continuity.\n\nLet's consider two examples, both involving function $g$ in\nthe EvenNat equation.  As it turns out, $g$'s defining functor is continuous,\nand therefore I will write $g^{\\downarrow}$ and $g^{\\uparrow}$ to denote the\nleast and greatest solutions for $g$ in the EvenNat equation.", "start_char_idx": 2060, "end_char_idx": 3492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3fc9bfa-1491-4a7d-9c81-20aaa3f295d7": {"__data__": {"id_": "d3fc9bfa-1491-4a7d-9c81-20aaa3f295d7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c25cec6-ab48-43c6-b6d4-54418f5e017d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2408aabf3a3dd93cfe91ab8bdb3d9b2c44a8e85121558093271419c3054283e6", "class_name": "RelatedNodeInfo"}}, "text": "12.4.2.1. Example with Least Solution {sec-example-least-solution}\n\nThe main technique for establishing that $g^{\\downarrow}(x)$ holds for some\n$x$, that is, proving something of the form $Q \\Longrightarrow g^{\\downarrow}(x)$, is to\nconstruct a proof tree like the one for $g(6)$ in the proof tree figure.\nFor a proof in this direction, since we're just\napplying the defining equation, the fact that\nwe're using a least solution for $g$ never plays a role (as long as we\nlimit ourselves to finite derivations).\n\nThe technique for going in the other direction, proving something _from_ an established\n$g^{\\downarrow}$ property, that is, showing something of the form $g^{\\downarrow}(x) \\Longrightarrow R$, typically\nuses induction on the structure of the proof tree.  When the antecedent of our proof\nobligation includes a predicate term $g^{\\downarrow}(x)$, it is sound to\nimagine that we have been given a proof tree for $g^{\\downarrow}(x)$.  Such a proof tree\nwould be a data structure---to be more precise, a term in an\n_inductive datatype_.\nLeast solutions like $g^{\\downarrow}$ have been given the\nname _least predicate_.\n\nLet's prove $g^{\\downarrow}(x) \\Longrightarrow 0 \\leq x \\wedge x \\text{ even}$.\nWe split our task into two cases, corresponding to which of the two\nproof rules in the inductive rules was the\nlast one applied to establish $g^{\\downarrow}(x)$.  If it was the left-hand rule, then $x=0$,\nwhich makes it easy to establish the conclusion of our proof goal.  If it was the\nright-hand rule, then we unfold the proof tree one level and obtain $g^{\\downarrow}(x-2)$.\nSince the proof tree for $g^{\\downarrow}(x-2)$ is smaller than where we started, we invoke\nthe _induction hypothesis_ and obtain $0 \\leq (x-2) \\wedge (x-2) \\textrm{ even}$, from which\nit is easy to establish the conclusion of our proof goal.\n\nHere's how we do the proof formally using the least exists definition.  We massage the\ngeneral form of our proof goal:\n\n\n$$\n\\begin{array}{lll}\n    & f^{\\uparrow}(x) \\;\\Longrightarrow\\; R  & \\\\\n  = &  & \\textrm{ (the least exists definition) }    \\\\\n    & (\\exists k \\bullet\\; { {}^{\\flat}\\kern-1mm f}_k(x)) \\;\\Longrightarrow\\; R    &     \\\\\n  = &  & \\text{distribute} \\;\\Longrightarrow\\; \\text{over} \\;\\exists\\; \\text{to the left}  \\\\\n    & \\forall k \\bullet\\; ({ {}^{\\flat}\\kern-1mm f}_k(x) \\;\\Longrightarrow\\; R)        &       \n\\end{array}\n$$\n\n\nThe last line can be proved by induction over $k$.  So, in our case, we prove\n${ {}^{\\flat}\\kern-1mm g}\\_k(x) \\Longrightarrow 0 \\leq x \\wedge x \\textrm{ even}$ for every $k$.\nIf $k = 0$, then ${ {}^{\\flat}\\kern-1mm g}\\_k(x)$ is `false`, so our goal holds trivially.\nIf $k > 0$, then ${ {}^{\\flat}\\kern-1mm g}\\_k(x) = (x = 0 \\:\\vee\\: { {}^{\\flat}\\kern-1mm g}\\_{k-1}(x-2))$.  Our goal holds easily\nfor the first disjunct ($x=0$).  For the other disjunct,\nwe apply the induction hypothesis (on the smaller $k-1$ and with $x-2$) and\nobtain $0 \\leq (x-2)\\;\\wedge\\; (x-2) \\textrm{ even}$, from which our proof goal\nfollows.", "start_char_idx": 2, "end_char_idx": 2996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fc64754-69d3-4d02-bf17-fd0e0d1f2f7b": {"__data__": {"id_": "6fc64754-69d3-4d02-bf17-fd0e0d1f2f7b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f95e6351-1296-4cd4-96ef-0d87e63390f3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "47068b59a51a4521e81a6788ec5076c63f6314c435f20ed27935821beee6b3ea", "class_name": "RelatedNodeInfo"}}, "text": "12.4.2.2. Example with Greatest Solution {sec-example-greatest-solution}\n\nWe can think of a predicate $g^{\\uparrow}(x)$ as being represented\nby a proof tree---in this case a term in a _coinductive datatype_,\nsince the proof may be infinite.\nGreatest solutions like $g^{\\uparrow}$ have\nbeen given the name _greatest predicate_.\nThe main technique for proving something from a given proof tree, that\nis, to prove something of the form $g^{\\uparrow}(x) \\;\\Longrightarrow\\; R$, is to\ndestruct the proof.  Since this is just unfolding the defining\nequation, the fact that we're using a greatest solution for $g$ never\nplays a role (as long as we limit ourselves to a finite number of\nunfoldings).\n\nTo go in the other direction, to establish a predicate defined as a greatest solution,\nlike $Q \\Longrightarrow g^{\\uparrow}(x)$, we may need an infinite number of steps.  For this purpose,\nwe can use induction's dual, _coinduction_.  Were it not for one little detail, coinduction\nis as simple as continuations in programming: the next part of the proof obligation\nis delegated to the _coinduction hypothesis_.  The little detail is making sure that\nit is the \"next\" part we're passing on for the continuation, not the same part.  This\ndetail is called _productivity_ and corresponds to the requirement in\ninduction of making sure we're going down a well-founded relation when\napplying the induction hypothesis.  There are\nmany sources with more information, see for example the classic account by\nJacobs and Rutten [@JacobsRutten:IntroductionCoalgebra]\nor a new attempt by Kozen and Silva\nthat aims to emphasize the simplicity, not the mystery, of\ncoinduction [@KozenSilva:Coinduction].\n\nLet's prove $\\mathit{true} \\Longrightarrow g^{\\uparrow}(x)$.  The intuitive coinductive proof goes like this:\nAccording to the right-hand rule of these coinductive rules, $g^{\\uparrow}(x)$ follows if we\nestablish $g^{\\uparrow}(x-2)$, and that's easy to do by invoking the coinduction hypothesis.\nThe \"little detail\", productivity, is satisfied in this proof because we applied\na rule in these coinductive rules before invoking the coinduction hypothesis.\n\nFor anyone who may have felt that the intuitive proof felt too easy, here is a formal\nproof using the greatest forall definition, which relies only on induction.  We massage the\ngeneral form of our proof goal:\n\n\n\n$$\n\\begin{array}{lll}\n    & Q \\;\\Longrightarrow\\; f^{\\uparrow}(x)           &             \\\\\n  = &  & \\textrm{ (the greatest forall definition) }   \\\\\n    & Q \\;\\Longrightarrow\\; \\forall k \\bullet\\; { {}^{\\sharp}\\kern-1mm f}_k(x)  &  \\\\\n  = &  & \\text{distribute} \\;\\Longrightarrow\\; \\text{over} \\;\\forall\\; \\text{to the right } \\\\\n    & \\forall k \\bullet\\; Q \\;\\Longrightarrow\\; { {}^{\\sharp}\\kern-1mm f}_k(x)                 &\n\\end{array}\n$$\n\n\n\nThe last line can be proved by induction over $k$.  So, in our case, we prove\n$\\mathit{true} \\;\\Longrightarrow\\; { {}^{\\sharp}\\kern-1mm g}_k(x)$ for every $k$.\nIf $k=0$, then ${ {}^{\\sharp}\\kern-1mm g}\\_k(x)$ is $\\mathit{true}$, so our goal holds trivially.\nIf $k > 0$, then ${ {}^{\\sharp}\\kern-1mm g}\\_k(x) = (x = 0 \\:\\vee\\: { {}^{\\sharp}\\kern-1mm g}\\_{k-1}(x-2))$.  We establish the second\ndisjunct by applying the induction hypothesis (on the smaller $k-1$ and with $x-2$).", "start_char_idx": 2, "end_char_idx": 3276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "488162b9-e72e-4d95-b9b7-cef1a300edd5": {"__data__": {"id_": "488162b9-e72e-4d95-b9b7-cef1a300edd5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a4dfb54-018a-4949-86d4-d93ff358abcb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "444f4269fd6289cfdc50f0b2a071e476af8b09566767cb7ae9120561518cc77a", "class_name": "RelatedNodeInfo"}}, "text": "12.4.3. Other Techniques\n\nAlthough this section has considered only well-founded functions and extreme\npredicates, it is worth mentioning that there are additional ways of making sure that\nthe set of solutions to the general equation is nonempty.  For example, if all calls to $f$ in\n$\\mathcal{F}'(f)$ are _tail-recursive calls_, then (under the assumption that $Y$ is nonempty) the set of\nsolutions is nonempty.  To see this, consider an attempted evaluation of $f(x)$ that fails\nto determine a definite result value because of an infinite chain of calls that applies $f$\nto each value of some subset $X'$ of $X$.  Then, apparently, the value of $f$ for any one\nof the values in $X'$ is not determined by the equation, but picking any particular result\nvalue for these makes for a consistent definition.\nThis was pointed out by Manolios and Moore [@ManoliosMoore:PartialFunctions].\nFunctions can be underspecified in this way in the proof assistants ACL2 [@ACL2:book]\nand HOL [@Krauss:PhD].", "start_char_idx": 2, "end_char_idx": 993, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6cabe471-be5d-4085-bd30-f617b4f7363a": {"__data__": {"id_": "6cabe471-be5d-4085-bd30-f617b4f7363a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44f7641a-d637-49eb-a39f-76fc785257b4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2f47a0c8264e43d664e5f225bfd1f9f279fa7521d6208582fe9c9e117f668961", "class_name": "RelatedNodeInfo"}}, "text": "12.5. Functions in Dafny\n\nThis section explains with examples the support in\nDafny for well-founded functions, extreme predicates,\nand proofs regarding these, building on the concepts \nexplained in the previous section.", "start_char_idx": 2, "end_char_idx": 221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6eafd2bc-2965-416f-8ded-c50c64ce6252": {"__data__": {"id_": "6eafd2bc-2965-416f-8ded-c50c64ce6252", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58e7993c-96ff-4468-9371-0c5a4158ebae", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "68e903b7aca0064521ce6810de480a9ef44de3dfb1add3c0e9c74aef98c9246c", "class_name": "RelatedNodeInfo"}}, "text": "12.5.1. Well-founded Functions in Dafny\n\nDeclarations of well-founded functions are unsurprising.  For example, the Fibonacci\nfunction is declared as follows:\n\n\n```dafny\nfunction fib(n: nat): nat\n{\n  if n < 2 then n else fib(n-2) + fib(n-1)\n}\n```\n\nDafny verifies that the body (given as an expression in curly braces) is well defined.\nThis includes decrement checks for recursive (and mutually recursive) calls.  Dafny\npredefines a well-founded relation on each type and extends it to lexicographic tuples\nof any (fixed) length.  For example, the well-founded relation $x \\ll y$ for integers\nis $x < y \\;\\wedge\\; 0 \\leq y$, the one for reals is $x \\leq y - 1.0 \\;\\wedge\\; 0.0 \\leq y$\n(this is the same ordering as for integers, if you read the integer\nrelation as $x \\leq y - 1 \\;\\wedge\\; 0 \\leq y$), the one for inductive\ndatatypes is structural inclusion,\nand the one for coinductive datatypes is `false`.\n\nUsing a `decreases` clause, the programmer can specify the term in this predefined\norder.  When a function definition omits a `decreases` clause, Dafny makes a simple\nguess.  This guess (which can be inspected by hovering over the function name in the\nDafny IDE) is very often correct, so users are rarely bothered to provide explicit\n`decreases` clauses.\n\nIf a function returns `bool`, one can drop the result type `: bool` and change the\nkeyword `function` to `predicate`.", "start_char_idx": 2, "end_char_idx": 1385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1c1a69d-6b06-4eb0-8c9c-4c26549be98e": {"__data__": {"id_": "c1c1a69d-6b06-4eb0-8c9c-4c26549be98e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d9d9cca-705c-4d70-a3a5-6abc5f0179fe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "33bbd45a3828275755f737e0e10ef3f5cb2a610f48635b9641d9cac8c6bf7951", "class_name": "RelatedNodeInfo"}}, "text": "12.5.2. Proofs in Dafny {sec-proofs-in-dafny}\n\nDafny has `lemma` declarations, as described in Section 6.3.3:\nlemmas can have pre- and postcondition specifications and their body is a code block.\nHere is the lemma we stated and proved in the fib example in the previous section:\n\n\n```dafny\nlemma FibProperty(n: nat)\n  ensures fib(n) % 2 == 0  n % 3 == 0\n{\n  if n < 2 {\n  } else {\n    FibProperty(n-2); FibProperty(n-1);\n  }\n}\nfunction fib(n: nat): nat\n{\n  if n < 2 then n else fib(n-2) + fib(n-1)\n}\n```\n\nThe postcondition of this lemma (keyword `ensures`) gives the proof\ngoal.  As in any program-correctness logic (e.g.,\n[@Hoare:AxiomaticBasis]), the postcondition must\nbe established on every control path through the lemma's body.  For\n`FibProperty`, I give the proof by\nan `if` statement, hence introducing a case split.  The then branch is empty, because\nDafny can prove the postcondition automatically in this case.  The else branch\nperforms two recursive calls to the lemma.  These are the invocations of the induction\nhypothesis and they follow the usual program-correctness rules,\nnamely: the precondition must hold at the call site, the call must terminate, and then\nthe caller gets to assume the postcondition upon return.  The \"proof glue\" needed\nto complete the proof is done automatically by Dafny.\n\nDafny features an aggregate statement using which it is possible to make (possibly\ninfinitely) many calls at once.  For example, the induction hypothesis can be called\nat once on all values `n'` smaller than `n`:\n\n\n```dafny\nforall n' | 0 <= n' < n {\n  FibProperty(n');\n}\n```\n\nFor our purposes, this corresponds to _strong induction_.  More\ngenerally, the `forall` statement has the form\n\n\n```dafny\nforall k | P(k)\n  ensures Q(k)\n{ Statements; }\n```\n\nLogically, this statement corresponds to _universal introduction_: the body proves that\n`Q(k)` holds for an arbitrary `k` such that `P(k)`, and the conclusion of the `forall` statement\nis then $\\forall k \\bullet\\; P(k) \\;\\Longrightarrow\\; Q(k)$.  When the body of the `forall` statement is\na single call (or `calc` statement), the `ensures` clause is inferred and can be omitted,\nlike in our `FibProperty` example.\n\nLemma `FibProperty` is simple enough that its whole body can be replaced by the one\n`forall` statement above.  In fact, Dafny goes one step further: it automatically\ninserts such a `forall` statement at the beginning of every lemma [@Leino:induction].\nThus, `FibProperty` can be declared and proved simply by:\n\n\n```dafny\nlemma FibProperty(n: nat)\n  ensures fib(n) % 2 == 0  n % 3 == 0\n{ }\nfunction fib(n: nat): nat\n{\n  if n < 2 then n else fib(n-2) + fib(n-1)\n}\n```\n\nGoing in the other direction from universal introduction is existential elimination,\nalso known as Skolemization.  Dafny has a statement for this, too:\nfor any variable `x` and boolean expression `Q`, the\n_assign such that_ statement `x :| Q;` says to assign to `x` a value such that `Q`\nwill hold.  A proof obligation when using this statement is to show that there\nexists an `x` such that `Q` holds.  For example, if the fact\n$\\\\exists k \\bullet\\; 100 \\leq \\mathit{fib}(k) < 200$ is known, then the statement\n`k :| 100 <= fib(k) < 200;` will assign to `k` some value (chosen arbitrarily)\nfor which `fib(k)` falls in the given range.", "start_char_idx": 2, "end_char_idx": 3283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "461ac7ec-b794-4260-aa7d-c6c71ad48325": {"__data__": {"id_": "461ac7ec-b794-4260-aa7d-c6c71ad48325", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0694a68-e407-4d4d-80da-9a16d6801702", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "efccb76527663b82ff4d753d15f0df9bebe3a92e7d4c5b85bf48815bc3f30272", "class_name": "RelatedNodeInfo"}}, "text": "12.5.3. Extreme Predicates in Dafny {sec-friendliness}\n\nThe previous subsection explained that a `predicate` declaration introduces a\nwell-founded predicate.  The declarations for introducing extreme predicates are\n`least predicate` and `greatest predicate`.  Here is the definition of the least and\ngreatest solutions of $g$ from above; let's call them `g` and `G`:\n\n\n```dafny\nleast predicate gnat { x == 0 || g(x-2) }\ngreatest predicate Gnat { x == 0 || G(x-2) }\n```\n\nWhen Dafny receives either of these definitions, it automatically declares the corresponding\nprefix predicates.  Instead of the names ${ {}^{\\flat}\\kern-1mm g}_k$ and ${ {}^{\\sharp}\\kern-1mm g}_k$ that I used above, Dafny\nnames the prefix predicates `g#[k]` and `G#[k]`, respectively, that is, the name of\nthe extreme predicate appended with `#`, and the subscript is given as an argument in\nsquare brackets.  The definition of the prefix predicate derives from the body of\nthe extreme predicate and follows the form in the least approx definition and the greatest approx definition.\nUsing a faux-syntax for illustrative purposes, here are the prefix\npredicates that Dafny defines automatically from the extreme\npredicates `g` and `G`:\n\n\n```dafny\npredicate g#_k: nat { _k != 0 && (x == 0 || g#_k-1) }\npredicate G#_k: nat { _k != 0 ==> (x == 0 || G#_k-1) }\n```\n\nThe Dafny verifier is aware of the connection between extreme predicates and their\nprefix predicates, the least exists definition and the greatest forall definition.\n\nRemember that to be well defined, the defining functor of an extreme predicate\nmust be monotonic, and for the least exists definition and the greatest forall definition to hold,\nthe functor must be continuous.  Dafny enforces the former of these by checking that\nrecursive calls of extreme predicates are in positive positions.  The continuity\nrequirement comes down to checking that they are also in _continuous positions_:\nthat recursive calls to least predicates are\nnot inside unbounded universal quantifiers and that recursive calls to greatest predicates\nare not inside unbounded existential quantifiers [@Milner:CCS; @LeinoMoskal:Coinduction].", "start_char_idx": 2, "end_char_idx": 2150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "954dc33b-39fa-4388-a896-a0209ab1ca6b": {"__data__": {"id_": "954dc33b-39fa-4388-a896-a0209ab1ca6b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "474fe770-43e7-4b48-a00d-ee46f77d93dd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "533e34b6d27476a578d6fa748035682db86b27dca12419e8e9e22b657e37ffc2", "class_name": "RelatedNodeInfo"}}, "text": "12.5.4. Proofs about Extreme Predicates\n\nFrom what has been presented so far, we can do the formal proofs for\nthe example about the least solution and the example about the greatest solution.  Here is the\nformer:\n\n\n```dafny\nleast predicate gnat { x == 0 || g(x-2) }\ngreatest predicate Gnat { x == 0 || G(x-2) }\nlemma EvenNat(x: int)\n  requires g(x)\n  ensures 0 <= x && x % 2 == 0\n{\n  var k: nat :| g#k;\n  EvenNatAux(k, x);\n}\nlemma EvenNatAux(k: nat, x: int)\n  requires g#k\n  ensures 0 <= x && x % 2 == 0\n{\n  if x == 0 { } else { EvenNatAux(k-1, x-2); }\n}\n```\n\nLemma `EvenNat` states the property we wish to prove.  From its\nprecondition (keyword `requires`) and\nthe least exists definition, we know there is some `k` that will make the condition in the\nassign-such-that statement true.  Such a value is then assigned to `k` and passed to\nthe auxiliary lemma, which promises to establish the proof goal.  Given the condition\n`g#k`, the definition of `g#` lets us conclude `k != 0` as well as the disjunction\n`x == 0 || g#k-1`.  The then branch considers the case of the first disjunct,\nfrom which the proof goal follows automatically.  The else branch can then assume\n`g#k-1` and calls the induction hypothesis with those parameters.  The proof\nglue that shows the proof goal for `x` to follow from the proof goal with `x-2` is\ndone automatically.\n\nBecause Dafny automatically inserts the statement\n\n\n```dafny\nforall k', x' | 0 <= k' < k && g#k' {\n  EvenNatAux(k', x');\n}\n```\n\nat the beginning of the body of `EvenNatAux`, the body can be left empty and Dafny\ncompletes the proof automatically.\n\nHere is the Dafny program that gives the proof from the example of the greatest solution:\n\n\n```dafny\nleast predicate gnat { x == 0 || g(x-2) }\ngreatest predicate Gnat { x == 0 || G(x-2) }\nlemma Always(x: int)\n  ensures G(x)\n{ forall k: nat { AlwaysAux(k, x); } }\nlemma AlwaysAux(k: nat, x: int)\n  ensures G#k\n{ }\n```\n\nWhile each of these proofs involves only basic proof rules, the setup feels a bit clumsy,\neven with the empty body of the auxiliary lemmas.  Moreover,\nthe proofs do not reflect the intuitive proofs described in\nthe example of the least solution and the example of the greatest solution.\nThese shortcomings are addressed in the next subsection.", "start_char_idx": 2, "end_char_idx": 2258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1a17d64-935e-4af0-bd19-95308ebc4a47": {"__data__": {"id_": "d1a17d64-935e-4af0-bd19-95308ebc4a47", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84538c01-eb63-411b-b242-38d0af1e7812", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "821caafb3939bf936801a2336761a335fb80ae78fce865da2fdd26db567486e9", "class_name": "RelatedNodeInfo"}}, "text": "12.5.5. Nicer Proofs of Extreme Predicates {sec-nicer-proofs-of-extremes}\n\nThe proofs we just saw follow standard forms:\nuse Skolemization to convert the least predicate into a prefix predicate for some `k`\nand then do the proof inductively over `k`; respectively,\nby induction over `k`, prove the prefix predicate for every `k`, then use\nuniversal introduction to convert to the greatest predicate.\nWith the declarations `least lemma` and `greatest lemma`, Dafny offers to\nset up the proofs\nin these standard forms.  What is gained is not just fewer characters in the program\ntext, but also a possible intuitive reading of the proofs.  (Okay, to be fair, the\nreading is intuitive for simpler proofs; complicated proofs may or may not be intuitive.)\n\nSomewhat analogous to the creation of prefix predicates from extreme predicates, Dafny\nautomatically creates a _prefix lemma_ `L#` from each \"extreme lemma\" `L`.  The pre-\nand postconditions of a prefix lemma are copied from those of the extreme lemma,\nexcept for the following replacements:\n* for a least lemma, Dafny looks in the precondition to find calls (in positive, continuous\npositions) to least predicates `P(x)` and replaces these with `P#_k`;\n* for a greatest lemma,\n  Dafny looks in the postcondition to find calls (in positive, continuous positions)\n  to greatest predicates `P` (including equality among coinductive datatypes, which is a built-in\n  greatest predicate) and replaces these with `P#_k`.\nIn each case, these predicates `P` are the lemma's _focal predicates_.\n\nThe body of the extreme lemma is moved to the prefix lemma, but with\nreplacing each recursive\ncall `L(x)` with `L#_k-1` and replacing each occurrence of a call\nto a focal predicate\n`P(x)` with `P#_k-1`.  The bodies of the extreme lemmas are then replaced as shown\nin the previous subsection.  By construction, this new body correctly leads to the\nextreme lemma's postcondition.\n\nLet us see what effect these rewrites have on how one can write proofs.  Here are the proofs\nof our running example:\n\n\n```dafny\nleast predicate g(x: int) { x == 0 || g(x-2) }\ngreatest predicate G(x: int) { x == 0 || G(x-2) }\nleast lemma EvenNat(x: int)\n  requires g(x)\n  ensures 0 <= x && x % 2 == 0\n{ if x == 0 { } else { EvenNat(x-2); } }\ngreatest lemma Always(x: int)\n  ensures G(x)\n{ Always(x-2); }\n```\n\nBoth of these proofs follow the intuitive proofs given in\nthe example of the least solution and the example of the greatest solution.  Note that in these\nsimple examples, the user is never bothered with either prefix predicates nor\nprefix lemmas---the proofs just look like \"what you'd expect\".\n\nSince Dafny automatically inserts calls to the induction hypothesis at the beginning of\neach lemma, the bodies of the given extreme lemmas `EvenNat` and\n`Always` can be empty and Dafny still completes the proofs.\nFolks, it doesn't get any simpler than that!", "start_char_idx": 2, "end_char_idx": 2880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a20fb4d-782d-4160-9366-767dc2a7eece": {"__data__": {"id_": "9a20fb4d-782d-4160-9366-767dc2a7eece", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00995115-81fe-4552-a0ba-0d263ca0389f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e61b955feef5232f79d23b17e7b7f059f07607d9ddbe39048b64339d24a8114c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "960f11c7-e28b-4ae1-b019-35a9edeec3d3", "node_type": "1", "metadata": {}, "hash": "b66b2e08c5f26e40a08862ff04034a13860b84de771a117a540993c4bcf4b41c", "class_name": "RelatedNodeInfo"}}, "text": "12.6. Variable Initialization and Definite Assignment {sec-definite-assignment}\n\nThe Dafny language semantics ensures that any use (read) of a variable (or constant,\nparameter, object field, or array element) gives a value of the variable's type.\nIt is easy to see that this property holds for any variable that is declared with\nan initializing assignment. However, for many useful programs, it would be too strict\nto require an initializing assignment at the time a variable is declared.\nInstead, Dafny ensures the property through _auto-initialization_ and rules for _definite assignment_.\n\nAs explained in section 5.3.1, each type in Dafny is one of the following:\n\n- _auto-init type_: the type is nonempty and the compiler has some way to emit code that constructs a value\n- _nonempty type_: the type is nonempty, but the compiler does not know how perform automatic initialization\n- _possibly empty type_: the type is not known for sure to have a value\n\nFor a variable of an auto-init type, the compiler can initialize the variable automatically.\nThis means that the variable can be used immediately after declaration, even if the program does not\nexplicitly provide an initializing assignment.\n\nIn a ghost context, one can an imagine a \"ghost\" that initializes variables. Unlike the compiler, such\na \"ghost\" does not need to emit code that constructs an initializing value; it suffices for the ghost to\nknow that a value exists. Therefore, in a ghost context, a variable of a nonempty type can be used immediately\nafter declaration.\n\nBefore a variable of a possibly empty type can be used, the program must initialize it.\nThe variable need not be given a value when it is declared,\nbut it must have a value by the time it is first used. Dafny uses the precision of the verifier to\nreason about the control flow between assignments and uses of variables, and it reports an error\nif it cannot assure itself that the variable has been given a value.\n\nThe elements of an array must be assured to have values already in the statement that allocates the array.\nThis is achieved in any of the following four ways:\n- If the array is allocated to be empty (that is, one of its dimensions is requested to be 0), then\n  the array allocation trivially satisfies the requirement.\n- If the element type of the array is an auto-init type, then nothing further is required by the program.\n- If the array allocation occurs in a ghost context and the element type is a nonempty type, then nothing\n  further is required by the program.\n- Otherwise, the array allocation must provide an initialization display or an initialization function.\nSee section 5.10 for information about array initialization.\n\nThe fields of a class must have values by the end of the first phase of each constructor (that is, at\nthe explicit or implicit `new;` statement in the constructor). If a class has a compiled field that is\nnot of an auto-init type, or if it has a ghost field of a possibly empty type, then the class is required\nto declare a(t least one) constructor.\n\nThe yield-parameters of an `iterator` turn into fields of the corresponding iterator class, but there\nis no syntactic place to give these initial values. Therefore, every compiled yield-parameter must be of\nauto-init types and every ghost yield-parameter must be of an auto-init or nonempty type.\n\nFor local variables and out-parameters, Dafny supports two definite-assignment modes:\n- A strict mode (the default, which is `--relax-definite-assignment=false`; or `/definiteAssignment:4`\n  in the legacy CLI), in which local variables and out-parameters are always subject\n  to definite-assignment rules, even for auto-initializable types.\n- A relaxed mode (enabled by the option `--relax-definite-assignment`; or `/definiteAssignment:1`\n  in the legacy CLI), in which the auto-initialization (or, for ghost variables and parametes, nonemptiness)\n  is sufficient to satisfy the definite assignment rules.\n\nA program using the strict mode can still indicate that it is okay with an arbitrary value of a variable `x`\nby using an assignment statement `x := *;`, provided the type of `x` is an auto-init type (or, if `x` is\nghost, a nonempty type). (If `x` is of a possibly nonempty type, then `x := *;` is still allowed, but it\nsets `x` to a value of its type only if the type actually contains a value.", "start_char_idx": 2, "end_char_idx": 4341, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "960f11c7-e28b-4ae1-b019-35a9edeec3d3": {"__data__": {"id_": "960f11c7-e28b-4ae1-b019-35a9edeec3d3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00995115-81fe-4552-a0ba-0d263ca0389f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e61b955feef5232f79d23b17e7b7f059f07607d9ddbe39048b64339d24a8114c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a20fb4d-782d-4160-9366-767dc2a7eece", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c55d2fda3118dd4475eb68208bac8c8943eb033735f727abead6ee02eebb9e57", "class_name": "RelatedNodeInfo"}}, "text": "- A relaxed mode (enabled by the option `--relax-definite-assignment`; or `/definiteAssignment:1`\n  in the legacy CLI), in which the auto-initialization (or, for ghost variables and parametes, nonemptiness)\n  is sufficient to satisfy the definite assignment rules.\n\nA program using the strict mode can still indicate that it is okay with an arbitrary value of a variable `x`\nby using an assignment statement `x := *;`, provided the type of `x` is an auto-init type (or, if `x` is\nghost, a nonempty type). (If `x` is of a possibly nonempty type, then `x := *;` is still allowed, but it\nsets `x` to a value of its type only if the type actually contains a value. Therefore, when `x` is of\na possibly empty type, `x := *;` does not count as a definite assignment to `x`.)\n\nNote that auto-initialization is nondeterministic. Dafny only guarantees that each value it assigns to\na variable of an auto-init type is _some_ value of the type. Indeed, a variable may be auto-initialized\nto different values in different runs of the program or even at different times during the same run of\nthe program. In other words, Dafny does not guarantee the \"zero-equivalent value\" initialization that\nsome languages do. Along these lines, also note that the `witness` value provided in some subset-type\ndeclarations is not necessarily the value chosen by auto-initialization, though it does esstablish that\nthe type is an auto-init type.\n\nIn some programs (for example, in some test programs), it is desirable to avoid nondeterminism.\nFor that purpose, Dafny provides an `--enforce-determinism` option. It forbids use of any program\nstatement that may have nondeterministic behavior and it disables auto-initialization.\nThis mode enforces definite assignments everywhere, going beyond what the strict mode does by enforcing\ndefinite assignment also for fields and array elements. It also forbids the use of `iterator` declarations\nand `constructor`-less `class` declarations. It is up to a user's build process to ensure that\n`--enforce-determinism` is used consistently throughout the program. (In the legacy CLI, this\nmode is enabled by `/definiteAssignment:3`.)\n\nThis document, which is intended for developers of the\nDafny tool itself, has more detail on auto-initialization and how it is implemented.\n\nFinally, note that `--relax-definite-assignment=false` is the default in the command-based CLI,\nbut, for backwards compatibility, the relaxed rules (`/definiteAssignment:1) are still the default\nin the legacy CLI.", "start_char_idx": 3681, "end_char_idx": 6182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "348f85eb-145e-4766-bfc2-10a8b7219f8f": {"__data__": {"id_": "348f85eb-145e-4766-bfc2-10a8b7219f8f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5549ca23-6b43-46e0-a7b5-6a00d8973004", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4864ef5ddfb3fec71c1cc960d9de083732ce18f1b08bdfc00bba6b7139275767", "class_name": "RelatedNodeInfo"}}, "text": "12.7. Well-founded Orders {sec-well-founded-orders}\n\nThe well-founded order relations for a variety of built-in types in Dafny\nare given in the following table:\n\n| type of `X` and `x`    | `x` strictly below `X`   |\n|:-----------------------|:---------------------------------------------------------------|\n| `bool`                 | `X && !x`                                                      |\n| `int`                  | `x < X && 0 <= X`                                              |\n| `real`                 | `x <= X - 1.0 && 0.0 <= X`                                     |\n| `set`               | `x` is a proper subset of `X`                                  |\n| `multiset`               | `x` is a proper multiset-subset of `X`                                  |\n| `seq`               | `x` is a consecutive proper sub-sequence of `X`                |\n| `map`               | `x.Keys` is a proper subset of `X.Keys`                |\n| inductive datatypes    | `x` is structurally included in `X`                            |\n| reference types | `x == null && X != null` |\n| coinductive datatypes | `false` |\n| type parameter | `false` |\n| arrow types | `false` |\n\nAlso, there are a few relations between the rows in the table above. For example, a datatype value `x` sitting inside a set that sits inside another datatype value `X` is considered to be strictly below `X`. Here's an illustration of that order, in a program that verifies:\n\n\n```dafny\ndatatype D = D(s: set)\n\nmethod TestD(dd: D) {\n  var d := dd;\n  while d != D({})\n    decreases d\n  {\n    var x :| x in d.s;\n    d := x;\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1608, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31ae4762-4103-4b84-a0da-f35c3c7d9936": {"__data__": {"id_": "31ae4762-4103-4b84-a0da-f35c3c7d9936", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01db9572-6470-4490-a6f8-d8d72e6af061", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bae855fafb8907bc661a4de2494327d8b38000e9fc5d99159aa305352e4c363e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1fc36e91-946d-4749-a76c-b6a82961315d", "node_type": "1", "metadata": {}, "hash": "bb61b8f40dd0b65830ecd82fc0265db9861c8f5b6dd9e872236744e02719a15b", "class_name": "RelatedNodeInfo"}}, "text": "12.8. Quantifier instantiation rules {sec-quantifier-triggers}\nDuring verification, when Dafny knows that a universal quantifier is true, such as when verifying the body of a function that has the requires clause `forall x :: f(x) == 1`, it may instantiate the quantifier. Instantiation means Dafny will pick a value for all the variables of the quantifier, leading to a new expression, which it hopes to use to prove an assertion. In the above example, instantiating using `3` for `x` will lead to the expression `f(3) == 1`.\n\nFor each universal quantifier, Dafny generates rules to determine which instantiations are worthwhile doing. We call these rules triggers, a term that originates from SMT solvers. If Dafny can not generate triggers for a specific quantifier, it falls back to a set of generic rules. However, this is likely to be problematic, since the generic rules can cause many useless instantiations, leading to verification timing out or failing to proof a valid assertion. When the generic rules are used, Dafny emits a warning telling the user no triggers were found for the quantifier, indicating the Dafny program should be changed so Dafny can find triggers for this quantifier.\n\nHere follows the approach Dafny uses to generate triggers based on a quantifier. Dafny finds terms in the quantifier body where a quantified variable is used in an operation, such as in a function application `P(x)`, array access `a[x]`, member accesses `x.someField`, or set membership tests `x in S`. To find a trigger, Dafny must find a set of such terms so that each quantified variable is used. You can investigate which triggers Dafny finds by hovering over quantifiers in the IDE and looking for 'Selected triggers', or by using the options `--show-tooltips` when using the LCI.\n\nThere are particular expressions which, for technical reasons, Dafny can not use as part of a trigger. Among others, these expression include: match, let, arithmetic operations and logical connectives. For example, in the quantifier `forall x :: x in S \u21d0\u21d2 f(x) > f(x+1)`, Dafny will use `x in S` and `f(x)` as trigger terms, but will not use `x+1` or any terms that contain it. You can investigate which triggers Dafny can not use by hovering over quantifiers in the IDE and looking for 'Rejected triggers', or by using the options `--show-tooltips` when using the LCI.\n\nBesides not finding triggers, another problematic situation is when Dafny was able to generate triggers, but believes the triggers it found may still cause useless instantiations because they create matching loops. Dafny emits a warning when this happens, indicating the Dafny program should be changed so Dafny can find triggers for this quantifier that do not cause matching loops.\n\nTo understand matching loops, one needs to understand how triggers are used. During a single verification run, such as verifying a method or function, Dafny maintains a set of expressions which it believes to be true, which we call the ground terms. For example, in the body of a method, Dafny knows the requires clauses of that method hold, so the expressions in those will be ground terms. When Dafny steps through the statements of the body, the set of ground terms grows. For example, when an assignment `var x := 3` is evaluated, a ground term `x == 3` will be added. Given a universal quantifier that's a ground term, Dafny will try to pattern match its triggers on sub-expressions of other ground terms. If the pattern matches, that sub-expression is used to instantiate the quantifier. \n\nDafny makes sure not to perform the exact same instantiation twice. However, if an instantiation leads to a new term that also matches the trigger, but is different from the term used for the instantiation, the quantifier may be instantiated too often, an event we call a matching loop. For example, given the ground terms `f(3)` and `forall x {f(x)} :: f(x) + f(f(x))`, where `{f(x)}` indicates the trigger for the quantifier, Dafny may instantiate the quantifier using `3` for `x`.", "start_char_idx": 2, "end_char_idx": 4026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fc36e91-946d-4749-a76c-b6a82961315d": {"__data__": {"id_": "1fc36e91-946d-4749-a76c-b6a82961315d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01db9572-6470-4490-a6f8-d8d72e6af061", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bae855fafb8907bc661a4de2494327d8b38000e9fc5d99159aa305352e4c363e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31ae4762-4103-4b84-a0da-f35c3c7d9936", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5c49a2844b254a1afc24287f65cf248ceb49f8fb911046bbf3650d35fdd5d33b", "class_name": "RelatedNodeInfo"}}, "text": "For example, when an assignment `var x := 3` is evaluated, a ground term `x == 3` will be added. Given a universal quantifier that's a ground term, Dafny will try to pattern match its triggers on sub-expressions of other ground terms. If the pattern matches, that sub-expression is used to instantiate the quantifier. \n\nDafny makes sure not to perform the exact same instantiation twice. However, if an instantiation leads to a new term that also matches the trigger, but is different from the term used for the instantiation, the quantifier may be instantiated too often, an event we call a matching loop. For example, given the ground terms `f(3)` and `forall x {f(x)} :: f(x) + f(f(x))`, where `{f(x)}` indicates the trigger for the quantifier, Dafny may instantiate the quantifier using `3` for `x`. This creates a new ground term `f(3) + f(f(3))`, of which the right hand side again matches the trigger, allowing Dafny to instantiate the quantifier again using `f(3)` for `x`, and again and again, leading to an unbounded amount of instantiations.\n\nEven existential quantifiers need triggers. This is because when Dafny determines an existential quantifier is false, for example in the body of a method that has `requires !exists x :: f(x) == 2`, Dafny will use a logical rewrite rule to change this existential into a universal quantifier, so it becomes `requires forall x :: f(x) != 2`. Before verification, Dafny can not determine whether quantifiers will be determined to be true or false, so it must assume any quantifier may turn into a universal quantifier, and thus they all need triggers. Besides quantifiers, comprehensions such as set and map comprehensions also need triggers, since these are modeled using universal quantifiers.\n\nDafny may report 'Quantifier was split into X parts'. This occurs when Dafny determines it can only generate good triggers for a quantifier by splitting it into multiple smaller quantifiers, whose aggregation is logically equivalent to the original one. To maintain logical equivalence, Dafny may have to generate more triggers than if the split had been done manually in the Dafny source file. An example is the expression `forall x :: P(x) && (Q(x) =\u21d2 P(x+1))`, which Dafny will split into\n\n```dafny\nforall x {P(x)} {Q(x)} :: P(x) &&\nforall x {(Q(x)} :: Q(x) =\u21d2 P(x+1)\n```\n\nNote the trigger `{Q(x)}` in the first quantifier, which was added to maintain equivalence with the original quantifier. If the quantifier had been split in source, only the trigger `{P(x)}` would have been added for `forall x :: P(x)`.", "start_char_idx": 3223, "end_char_idx": 5783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b59813be-51b3-48f0-ba6d-013219207d8c": {"__data__": {"id_": "b59813be-51b3-48f0-ba6d-013219207d8c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Trait_types_description.md", "file_name": "Trait_types_description.md", "file_type": "text/markdown", "file_size": 1638, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be998502-ad11-4278-b67a-979814606aa7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Trait_types_description.md", "file_name": "Trait_types_description.md", "file_type": "text/markdown", "file_size": 1638, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "29dfaf070cb3f9c0a5d2fefe7659b60bdd8b2b0c308afcafb352e35b4e48afd1", "class_name": "RelatedNodeInfo"}}, "text": "5.9. Trait types (grammar) {sec-trait-types}\n\nA _trait_ is an abstract superclass, similar to an \"interface\" or\n\"mixin\". A trait can be _extended_ only by another trait or\nby a class (and in the latter case we say that the class _implements_\nthe trait). More specifically, algebraic datatypes cannot extend traits.[^fn-traits]\n\n[^fn-traits]: Traits are new to Dafny and are likely to evolve for a while.\n\nThe declaration of a trait is much like that of a class:\n\n```dafny\ntrait J\n{\n  _members_\n}\n```\nwhere _members_ can include fields, constant fields, functions, methods and declarations of nested traits, but\nno constructor methods.  The functions and methods are allowed to be\ndeclared `static`.\n\nA reference type `C` that extends a trait `J` is assignable to a variable of\ntype `J`;\na value of type `J` is assignable to a variable of a reference type `C` that\nextends `J` only if the verifier can prove that the reference does\nindeed refer to an object of allocated type `C`.\nThe members of `J` are available as members\nof `C`.  A member in `J` is not allowed to be redeclared in `C`,\nexcept if the member is a non-`static` function or method without a\nbody in `J`.  By doing so, type `C` can supply a stronger\nspecification and a body for the member. There is further discussion on\nthis point in Section 5.9.2.\n\n`new` is not allowed to be used with traits.  Therefore, there is no\nobject whose allocated type is a trait.  But there can of course be\nobjects of a class `C` that implement a trait `J`, and a reference to\nsuch a `C` object can be used as a value of type `J`.", "start_char_idx": 2, "end_char_idx": 1579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8586c3e9-5244-4a43-8994-13960cd546b0": {"__data__": {"id_": "8586c3e9-5244-4a43-8994-13960cd546b0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Type_parameters_description.md", "file_name": "Type_parameters_description.md", "file_type": "text/markdown", "file_size": 474, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecef8314-27e5-48ab-8bb4-2e80c5287a87", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Type_parameters_description.md", "file_name": "Type_parameters_description.md", "file_type": "text/markdown", "file_size": 474, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d1efb18a458905c1906bedf97b67ad1c0f7b60f091a18402a064e6bcf1fda192", "class_name": "RelatedNodeInfo"}}, "text": "5.3. Type parameters (grammar) {sec-type-parameters}\n\nExamples:\n\n```dafny\ntype G1\ntype G2\ntype G3\n```\n\nMany of the types, functions, and methods in Dafny can be\nparameterized by types.  These _type parameters_ are \ndeclared inside angle brackets and can stand for any type.\n\nDafny has some inference support that makes certain signatures less\ncluttered (described in Section 12.2).", "start_char_idx": 2, "end_char_idx": 383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4b4a431-0dac-4db0-afa4-d3eee49b7e8b": {"__data__": {"id_": "c4b4a431-0dac-4db0-afa4-d3eee49b7e8b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6cf7d10-1b3b-4375-8ca2-eb4fc17361ff", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "23f29d3ae5f445678cb2c3310a9fe962ac4e84d36c7af49d168895b1c46eb3e5", "class_name": "RelatedNodeInfo"}}, "text": "5. Types {sec-types}\n\nA Dafny type is a (possibly-empty) set of values or heap data-structures,\ntogether with allowed operations on those values.\nTypes are classified as mutable reference types or immutable value types,\ndepending on whether their values are stored in the heap or are \n(mathematical) values independent of the heap.\n\nDafny supports the following kinds of types,\nall described in later sections of this manual:\n* builtin scalar types, \n* builtin collection types, \n* reference types (classes, traits, iterators),\n* tuple types (including as a special case a parenthesized type),\n* inductive and coinductive datatypes, \n* function (arrow) types, and\n* types, such as subset types, derived from other types.", "start_char_idx": 2, "end_char_idx": 722, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa594b50-f7de-487b-9c3d-caf3a0023f3f": {"__data__": {"id_": "aa594b50-f7de-487b-9c3d-caf3a0023f3f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c324bb22-0e17-41ea-8eaa-b52f6521606d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9066f6280f3f988d0facd2526c9c389ec9a52a2e94db3b399ddd15e4b36332f0", "class_name": "RelatedNodeInfo"}}, "text": "5.1. Kinds of types", "start_char_idx": 2, "end_char_idx": 21, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "261f2840-102e-4f11-91d7-485db860ba30": {"__data__": {"id_": "261f2840-102e-4f11-91d7-485db860ba30", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "272a4237-1e18-4f0b-b808-86376975ea72", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "84f9aec97576432aafe5cffa907e8a5bfa1187b7d41cd39aeeada4f58b3aa702", "class_name": "RelatedNodeInfo"}}, "text": "5.1.1. Value Types\nThe value types are those whose values do not lie in the program heap.\nThese are:\n\n* The basic scalar types: `bool`, `char`, `int`, `real`, `ORDINAL`, bitvector types\n* The built-in collection types: `set`, `iset`, `multiset`, `seq`, `string`, `map`, `imap`\n* Tuple Types\n* Inductive and coinductive types\n* Function (arrow) types\n* Subset and newtypes that are based on value types\n\nData items having value types are passed by value. Since they are not\nconsidered to occupy _memory_, framing expressions do not reference them.\n\nThe `nat` type is a pre-defined subset type of `int`.\n\nDafny does not include types themselves as values, nor is there a type of types.", "start_char_idx": 2, "end_char_idx": 685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcffc13f-c4df-463b-a714-0c3b61ec8c66": {"__data__": {"id_": "dcffc13f-c4df-463b-a714-0c3b61ec8c66", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24fdc7ba-d644-4c0f-863c-cd03c031fa4e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8f5974633bf9d01ae26c9d69d0d68a184476f77c032e0e93ce76b1b6a4a61214", "class_name": "RelatedNodeInfo"}}, "text": "5.1.2. Reference Types {sec-reference-types}\nDafny offers a host of _reference types_.  These represent\n_references_ to objects allocated dynamically in the program heap.  To\naccess the members of an object, a reference to (that is, a _pointer_\nto or _object identity_ of) the object is _dereferenced_.\n\nThe reference types are class types, traits and array types.\nDafny supports both reference types that contain the special `null` value\n(_nullable types_) and reference types that do not (_non-null types_).", "start_char_idx": 2, "end_char_idx": 511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6c062d7-06c4-4c5f-a433-23324c80c638": {"__data__": {"id_": "a6c062d7-06c4-4c5f-a433-23324c80c638", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fb3ba6b-5634-41ee-bee1-b174d6784f34", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "38c1e399cf49a9a5ea0216b37653c7d96d65ac4eb9192b0c42e31d5f2abc367e", "class_name": "RelatedNodeInfo"}}, "text": "5.1.3. Named Types (grammar)\n\nA _Named Type_ is used to specify a user-defined type by a (possibly module- or class-qualified) name.\nNamed types are introduced by\nclass, trait, inductive, coinductive, synonym and abstract\ntype declarations. They are also used to refer to type variables.\nA Named Type is denoted by a dot-separated sequence of name segments (Section 9.32).\n\nA name segment (for a type) is a type name optionally followed by a\n_generic instantiation_, which supplies type parameters to a generic\ntype, if needed.\n\nThe following sections describe each of these kinds of types in more detail.", "start_char_idx": 2, "end_char_idx": 607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a79742c0-8ea5-4d28-9d12-6db3456821d0": {"__data__": {"id_": "a79742c0-8ea5-4d28-9d12-6db3456821d0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e453f199-ede1-4549-b9d5-f96e16f9220d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "57f93387f2cb53ca67ef0674dd269f227748c8514ce0cfa28a0c4888c003845c", "class_name": "RelatedNodeInfo"}}, "text": "5.2. Basic types {sec-basic-type}\n\nDafny offers these basic types: `bool` for booleans, `char` for\ncharacters, `int` and `nat` for integers, `real` for reals,\n`ORDINAL`, and bit-vector types.", "start_char_idx": 2, "end_char_idx": 193, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78d37b02-b2f6-49fa-91f7-7d12929f1a0b": {"__data__": {"id_": "78d37b02-b2f6-49fa-91f7-7d12929f1a0b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1afb769-c445-4074-85ba-ab9b35108d79", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3004771408e66eb71183d6f9b42325906a8d060635d73a57f204e1ef99771152", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1. Booleans (grammar) {sec-booleans}\n\nThere are two boolean values and each has a corresponding literal in\nthe language:  `false` and `true`.\n\nType `bool` supports the following operations:\n\n operator           | precedence | description\n--------------------|:----------:|------------------------------------\n ``             | 1 | equivalence (if and only if)\n--------------------|------------------------------------\n `==>`              | 2 | implication (implies)\n `<==`              | 2 | reverse implication (follows from)\n--------------------|------------------------------------\n `&&`               | 3 | conjunction (and)\n `||`               | 3 |  disjunction (or)\n--------------------|------------------------------------\n `==`               | 4 | equality\n `!=`               | 4 | disequality\n--------------------|------------------------------------\n `!`                | 10 | negation (not)\n\nNegation is unary; the others are binary.  The table shows the operators\nin groups of increasing binding power, with equality binding stronger\nthan conjunction and disjunction, and weaker than negation.  Within\neach group, different operators do not associate, so parentheses need\nto be used.  For example,\n\n```dafny\nA && B || C    // error\n```\nwould be ambiguous and instead has to be written as either\n\n```dafny\n(A && B) || C\n```\nor\n\n```dafny\nA && (B || C)\n```\ndepending on the intended meaning.", "start_char_idx": 2, "end_char_idx": 1408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26b6b14b-785a-450b-947f-b23135443514": {"__data__": {"id_": "26b6b14b-785a-450b-947f-b23135443514", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "adc8ab33-6743-430c-b25c-7114f2b07044", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9c6241bf6ef1cece5bb2d8dbe535007001c21c94786f5dcc78227c06027a2511", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1.1. Equivalence Operator {sec-equivalence-operator}\n\nThe expressions `A  B` and `A == B` give the same value, but note\nthat `` is _associative_ whereas `==` is _chaining_ and they have\ndifferent precedence.  So,\n\n```dafny\nA  B  C\n```\nis the same as\n\n```dafny\nA  (B  C)\n```\nand\n\n```dafny\n(A  B)  C\n```\nwhereas\n\n```dafny\nA == B == C\n```\nis simply a shorthand for\n\n```dafny\nA == B && B == C\n```\n\nAlso,\n\n```dafny\nA  B == C  D\n```\nis\n\n```dafny\nA  (B == C)  D\n```", "start_char_idx": 2, "end_char_idx": 464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fed9849-1ce7-4da2-b410-8600526e610a": {"__data__": {"id_": "5fed9849-1ce7-4da2-b410-8600526e610a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f516c167-fa7b-4905-8dfb-311f593bad2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2a3b273fc4f77192a62b6e1293bd957ef35c79ea2defb9aeb3f1a2eafc55ab2c", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1.2. Conjunction and Disjunction {sec-conjunction-and-disjunction}\n\nConjunction and disjunction are associative.  These operators are\n_short circuiting (from left to right)_, meaning that their second\nargument is evaluated only if the evaluation of the first operand does\nnot determine the value of the expression.  Logically speaking, the\nexpression `A && B` is defined when `A` is defined and either `A`\nevaluates to `false` or `B` is defined.  When `A && B` is defined, its\nmeaning is the same as the ordinary, symmetric mathematical\nconjunction `&`.  The same holds for `||` and `|`.", "start_char_idx": 2, "end_char_idx": 593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2c47d91-22ba-48f7-8fd3-9cdbd9b32347": {"__data__": {"id_": "d2c47d91-22ba-48f7-8fd3-9cdbd9b32347", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91202be0-40df-47cc-aa64-84a17c614d75", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bf98dbe0f219291fe82e9578dbef78b82845dd181d52726c7cf38ce5dab5d22c", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1.3. Implication and  Reverse Implication {sec-implication-and-reverse-implication}\n\nImplication is _right associative_ and is short-circuiting from left\nto right.  Reverse implication `B <== A` is exactly the same as\n`A ==> B`, but gives the ability to write the operands in the opposite\norder.  Consequently, reverse implication is _left associative_ and is\nshort-circuiting from _right to left_.  To illustrate the\nassociativity rules, each of the following four lines expresses the\nsame property, for any `A`, `B`, and `C` of type `bool`:\n\n```dafny\nA ==> B ==> C\nA ==> (B ==> C) // parentheses redundant, ==> is right associative\nC <== B <== A\n(C <== B) <== A // parentheses redundant, <== is left associative\n```\nTo illustrate the short-circuiting rules, note that the expression\n`a.Length` is defined for an array `a` only if `a` is not `null` (see\nSection 5.1.2), which means the following two\nexpressions are well-formed:\n\n```dafny\na != null ==> 0 <= a.Length\n0 <= a.Length <== a != null\n```\nThe contrapositives of these two expressions would be:\n\n```dafny\na.Length  a == null  // not well-formed\na == null <== a.Length < 0  // not well-formed\n```\nbut these expressions might not necessarily be well-formed, since well-formedness\nrequires the left (and right, respectively) operand, `a.Length < 0`,\nto be well-formed in their context.\n\nImplication `A ==> B` is equivalent to the disjunction `!A || B`, but\nis sometimes (especially in specifications) clearer to read.  Since,\n`||` is short-circuiting from left to right, note that\n\n```dafny\na == null || 0 <= a.Length\n```\nis well-formed by itself, whereas\n\n```dafny\n0 <= a.Length || a == null  // not well-formed\n```\nis not if the context cannot prove that `a != null`.\n\nIn addition, booleans support _logical quantifiers_ (forall and\nexists), described in Section 9.31.4.", "start_char_idx": 2, "end_char_idx": 1835, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e1fe5fe-f24b-410f-a5a3-b3f4ee30917f": {"__data__": {"id_": "3e1fe5fe-f24b-410f-a5a3-b3f4ee30917f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de566029-7180-40da-b5fa-777897d28db1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "252a9a9cf00ff6f0ccceb0b284721285a39ddd0c93e7c5634213edd1dad5149b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06b5eb91-1302-400a-acb6-e758877aaf3b", "node_type": "1", "metadata": {}, "hash": "7e008bf81a6a279ff3cc074e8e2c980a99323afb6a779ccc6a3e2c4482486de5", "class_name": "RelatedNodeInfo"}}, "text": "5.2.2. Numeric Types (grammar) {sec-numeric-types}\n\nDafny supports _numeric types_ of two kinds, _integer-based_, which\nincludes the basic type `int` of all integers, and _real-based_, which\nincludes the basic type `real` of all real numbers.  User-defined\nnumeric types based on `int` and `real`, either _subset types_ or _newtypes_,\nare described in Section 5.6.3 and Section 5.7.\n\nThere is one built-in _subset type_,\n`nat`, representing the non-negative subrange of `int`.\n\nThe language includes a literal for each integer, like\n`0`, `13`, and `1985`.  Integers can also be written in hexadecimal\nusing the prefix \"`0x`\", as in `0x0`, `0xD`, and `0x7c1` (always with\na lower case `x`, but the hexadecimal digits themselves are case\ninsensitive).  Leading zeros are allowed.  To form negative literals,\nuse the unary minus operator, as in `-12`, but not `-(12)`.\n\nThere are also literals for some of the reals.  These are\nwritten as a decimal point with a nonempty sequence of decimal digits\non both sides, optionally prefixed by a `-` character.\nFor example, `1.0`, `1609.344`, `-12.5`, and `0.5772156649`.\nReal literals using exponents are not supported in Dafny. For now, you'd have to write your own function for that, e.g. \n\n```dafny\n// realExp(2.37, 100) computes 2.37e100\nfunction realExp(r: real, e: int): real decreases if e > 0 then e else -e {\n  if e == 0 then r\n  else if e < 0 then realExp(r/10.0, e+1)\n  else realExp(r*10.0, e-1)\n}\n```\n\nFor integers (in both decimal and hexadecimal form) and reals,\nany two digits in a literal may be separated by an underscore in order\nto improve human readability of the literals.  For example:\n\n```dafny\nconst c1 := 1_000_000        // easier to read than 1000000\nconst c2 := 0_12_345_6789    // strange but legal formatting of 123456789\nconst c3 := 0x8000_0000      // same as 0x80000000 -- hex digits are\n                             // often placed in groups of 4\nconst c4 := 0.000_000_000_1  // same as 0.0000000001 -- 1 Angstrom\n```\n\nIn addition to equality and disequality, numeric types\nsupport the following relational operations, which have the\nsame precedence as equality:\n\n operator          | description\n-------------------|------------------------------------\n  `<`              | less than\n  `<=`             | at most\n  `>=`             | at least\n  `>`              | greater than\n\nLike equality and disequality, these operators are chaining, as long\nas they are chained in the \"same direction\".  That is,\n\n```dafny\nA <= B < C == D <= E\n```\nis simply a shorthand for\n\n```dafny\nA <= B && B < C && C == D && D <= E\n```\nwhereas\n\n```dafny\nA  C\n```\nis not allowed.\n\nThere are also operators on each numeric type:\n\n operator        | precedence | description\n-----------------|:---:|------------------------------------\n  `+`            | 6 | addition (plus)\n  `-`            | 6 | subtraction (minus)\n-----------------|------------------------------------\n  `*`            | 7 | multiplication (times)\n  `/`            | 7 | division (divided by)\n  `%`            | 7 | modulus (mod)  -- int only\n-----------------|------------------------------------\n  `-`            | 10 | negation (unary minus)\n\nThe binary operators are left associative, and they associate with\neach other in the two groups.\nThe groups are listed in order of\nincreasing binding power, with equality binding less strongly than any of these operators.\nThere is no implicit conversion between `int` and `real`: use `as int` or\n`as real` conversions to write an explicit conversion (cf. Section 9.10).\n\nModulus is supported only for integer-based numeric types.  Integer\ndivision and modulus are the _Euclidean division and modulus_.", "start_char_idx": 2, "end_char_idx": 3669, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06b5eb91-1302-400a-acb6-e758877aaf3b": {"__data__": {"id_": "06b5eb91-1302-400a-acb6-e758877aaf3b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de566029-7180-40da-b5fa-777897d28db1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "252a9a9cf00ff6f0ccceb0b284721285a39ddd0c93e7c5634213edd1dad5149b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e1fe5fe-f24b-410f-a5a3-b3f4ee30917f", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ee762a1523d48a7d1d0b1efc7beb5a3074c893b35c5aece49e5fd5a9fafda904", "class_name": "RelatedNodeInfo"}}, "text": "The groups are listed in order of\nincreasing binding power, with equality binding less strongly than any of these operators.\nThere is no implicit conversion between `int` and `real`: use `as int` or\n`as real` conversions to write an explicit conversion (cf. Section 9.10).\n\nModulus is supported only for integer-based numeric types.  Integer\ndivision and modulus are the _Euclidean division and modulus_.  This\nmeans that modulus always returns a non-negative value, regardless of the\nsigns of the two operands.  More precisely, for any integer `a` and\nnon-zero integer `b`,\n\n```dafny\na == a / b * b + a % b\n0 <= a % b < B\n```\nwhere `B` denotes the absolute value of `b`.\n\nReal-based numeric types have a member `Floor` that returns the\n_floor_ of the real value (as an int value), that is, the largest integer not exceeding\nthe real value.  For example, the following properties hold, for any\n`r` and `r'` of type `real`:\n\n```dafny\nmethod m(r: real, r': real) {\n  assert 3.14.Floor == 3;\n  assert (-2.5).Floor == -3;\n  assert -2.5.Floor == -2; // This is -(2.5.Floor)\n  assert r.Floor as real <= r;\n  assert r  r.Floor <= r'.Floor;\n}\n```\nNote in the third line that member access (like `.Floor`) binds\nstronger than unary minus.  The fourth line uses the conversion\nfunction `as real` from `int` to `real`, as described in\nSection 9.10.", "start_char_idx": 3265, "end_char_idx": 4602, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7501230-cf20-4ba8-9757-3674aef47781": {"__data__": {"id_": "d7501230-cf20-4ba8-9757-3674aef47781", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68ca7387-9afb-414b-b1fa-971bde07235f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "167f6207f958b618859c278534f6e291d6808c57dddf5399a2765b57d968517d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a67c42d-0bf4-49d0-a875-9af31a1c557a", "node_type": "1", "metadata": {}, "hash": "b07907f0de33c8c4205cd4f829ef4380f4dfcacd4e65898938bb6bcf2c8ac95d", "class_name": "RelatedNodeInfo"}}, "text": "5.2.3. Bit-vector Types (grammar) {sec-bit-vector-types}\n\nDafny includes a family of bit-vector types, each type having a specific,\nconstant length, the number of bits in its values.\nEach such type is\ndistinct and is designated by the prefix `bv` followed (without white space) by\na positive integer without leading zeros or zero, stating the number of bits. For example,\n`bv1`, `bv8`, and `bv32` are legal bit-vector type names.\nThe type `bv0` is also legal; it is a bit-vector type with no bits and just one value, `0x0`.\n\nConstant literals of bit-vector types are given by integer literals converted automatically\nto the designated type, either by an implicit or explicit conversion operation or by initialization in a declaration.\nDafny checks that the constant literal is in the correct range. For example,\n\n```dafny\nconst i: bv1 := 1\nconst j: bv8 := 195\nconst k: bv2 := 5 // error - out of range\nconst m := (194 as bv8) | (7 as bv8)\n```\n\nBit-vector values can be converted to and from `int` and other bit-vector types, as long as\nthe values are in range for the target type. Bit-vector values are always considered unsigned.\n\nBit-vector operations include bit-wise operators and arithmetic operators\n(as well as equality, disequality, and comparisons).\nThe arithmetic operations\ntruncate the high-order bits from the results; that is, they perform\nunsigned arithmetic modulo 2^{number of bits}, like 2's-complement machine arithmetic.\n\n operator        | precedence | description\n-----------------|:---:|------------------------------------\n `<<`            | 5 | bit-limited bit-shift left\n `>>`            | 5 | unsigned bit-shift right\n-----------------|------------------------------------\n  `+`            | 6 | bit-limited addition\n  `-`            | 6 | bit-limited subtraction\n-----------------|------------------------------------\n  `*`            | 7 | bit-limited multiplication\n-----------------|------------------------------------\n  `&`            | 8 | bit-wise and\n  `|`            | 8 | bit-wise or \n  `^`            | 8 | bit-wise exclusive-or\n-----------------|------------------------------------\n  `-`            | 10 | bit-limited negation (unary minus)\n  `!`            | 10 | bit-wise complement\n-----------------|------------------------------------\n  .RotateLeft(n) | 11 | rotates bits left by n bit positions\n  .RotateRight(n)| 11 | rotates bits right by n bit positions\n\nThe groups of operators lower in the table above bind more tightly.[^binding]\nAll operators bind more tightly than equality, disequality, and comparisons.\nAll binary operators are left-associative, but the \nbit-wise `&`, `|`, and `^` do not associate together (parentheses are required to disambiguate).\nThe `+`, `|`, `^`, and `&` operators are commutative.\n\nThe right-hand operand of bit-shift operations is an `int` value,\nmust be non-negative, and\nno more than the number of bits in the type.\nThere is no signed right shift as all bit-vector values correspond to\nnon-negative integers.\n\nBit-vector negation returns an unsigned value in the correct range for the type.\nIt has the properties `x + (-x) == 0` and `(!x) + 1 == -x`, for a bitvector value `x`\nof at least one bit.\n\nThe argument of the `RotateLeft` and `RotateRight` operations is a\nnon-negative `int` that is no larger than the bit-width of the value being rotated.\n`RotateLeft` moves bits to higher bit positions (e.g., `(2 as bv4).RotateLeft(1) == (4 as bv4)`\nand `(8 as bv4).RotateLeft(1) == (1 as bv4)`);\n`RotateRight` moves bits to lower bit positions, so `b.RotateLeft(n).RotateRight(n) == b`.", "start_char_idx": 2, "end_char_idx": 3570, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a67c42d-0bf4-49d0-a875-9af31a1c557a": {"__data__": {"id_": "6a67c42d-0bf4-49d0-a875-9af31a1c557a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68ca7387-9afb-414b-b1fa-971bde07235f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "167f6207f958b618859c278534f6e291d6808c57dddf5399a2765b57d968517d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7501230-cf20-4ba8-9757-3674aef47781", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "996fbb191bceeabb55b0c9194547571099dbf65c6671f7932c2def811da5521d", "class_name": "RelatedNodeInfo"}}, "text": "There is no signed right shift as all bit-vector values correspond to\nnon-negative integers.\n\nBit-vector negation returns an unsigned value in the correct range for the type.\nIt has the properties `x + (-x) == 0` and `(!x) + 1 == -x`, for a bitvector value `x`\nof at least one bit.\n\nThe argument of the `RotateLeft` and `RotateRight` operations is a\nnon-negative `int` that is no larger than the bit-width of the value being rotated.\n`RotateLeft` moves bits to higher bit positions (e.g., `(2 as bv4).RotateLeft(1) == (4 as bv4)`\nand `(8 as bv4).RotateLeft(1) == (1 as bv4)`);\n`RotateRight` moves bits to lower bit positions, so `b.RotateLeft(n).RotateRight(n) == b`.\n\nHere are examples of the various operations (all the assertions are true except where indicated):\n\n```dafny\nconst i: bv4 := 9\nconst j: bv4 := 3\n\nmethod m() {\n  assert (i & j) == (1 as bv4);\n  assert (i | j) == (11 as bv4);\n  assert (i ^ j) == (10 as bv4);\n  assert !i == (6 as bv4);\n  assert -i == (7 as bv4);\n  assert (i + i) == (2 as bv4);\n  assert (j - i) == (10 as bv4);\n  assert (i * j) == (11 as bv4);\n  assert (i as int) / (j as int) == 3;\n  assert (j << 1) == (6 as bv4);\n  assert (i << 1) == (2 as bv4);\n  assert (i >> 1) == (4 as bv4);\n  assert i == 9; // auto conversion of literal to bv4\n  assert i * 4 == j + 8 + 9; // arithmetic is modulo 16\n  assert i + j >> 1 == (i + j) >> 1; // + - bind tigher than >\n  assert i + j ^ 2 == i + (j^2);\n  assert i * j & 1 == i * (j&1); // & | ^ bind tighter than + - *\n}\n```\nThe following are incorrectly formed:\n\n```dafny\nconst i: bv4 := 9\nconst j: bv4 := 3\n\nmethod m() {\n  assert i & 4 | j == 0 ; // parentheses required\n}\n```\n\n```dafny\nconst k: bv4 := 9\n\nmethod p() {\n  assert k as bv5 == 9 as bv6; // error: mismatched types\n}\n```\nThese produce assertion errors:\n\n```dafny\nconst i: bv4 := 9\n\nmethod m() {\n  assert i as bv3 == 1; // error: i is out of range for bv3\n}\n```\n\n```dafny\nconst j: bv4 := 9\n\nmethod n() {\n  assert j == 25; // error: 25 is out of range for bv4\n}\n```\n\nBit-vector constants (like all constants) can be initialized using expressions, but pay attention\nto how type inference applies to such expressions. For example,\n\n```dafny\nconst a: bv3 := -1\n```\nis legal because Dafny interprets `-1` as a `bv3` expression, because `a` has type `bv3`.\nConsequently the `-` is `bv3` negation and the `1` is a `bv3` literal; the value of the expression `-1` is\nthe `bv3` value `7`, which is then the value of `a`.\n\nOn the other hand,\n\n```dafny\nconst b: bv3 := 6 & 11\n```\nis illegal because, again, the `&` is `bv3` bit-wise-and and the numbers must be valid `bv3` literals.\nBut `11` is not a valid `bv3` literal.\n\n[^binding]: The binding power of shift and bit-wise operations is different than in C-like languages.", "start_char_idx": 2903, "end_char_idx": 5646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1af58d90-f048-4db3-8d80-b0b521164b81": {"__data__": {"id_": "1af58d90-f048-4db3-8d80-b0b521164b81", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29d4a37f-ca6c-465b-a815-5b5955fa6d60", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "700f59705fb452c02d8b3bdec986e12d673439324125a50ab9491f68d03089dc", "class_name": "RelatedNodeInfo"}}, "text": "5.2.4. Ordinal type (grammar) {sec-ordinals}\n\nValues of type `ORDINAL` behave like `nat`s in many ways, with one important difference:\nthere are `ORDINAL` values that are larger than any `nat`. The smallest of these non-nat ordinals is\nrepresented as $\\omega$ in mathematics, though there is no literal expression in Dafny that represents this value.\n\nThe natural numbers are ordinals.\nAny ordinal has a successor ordinal (equivalent to adding `1`).\nSome ordinals are _limit_ ordinals, meaning they are not a successor of any other ordinal;\nthe natural number `0` and  $\\omega$ are limit ordinals.\n\nThe _offset_ of an ordinal is the number of successor operations it takes to reach it from a limit ordinal.\n\nThe Dafny type `ORDINAL` has these member functions:\n- `o.IsLimit` -- true if `o` is a limit ordinal (including `0`)\n- `o.IsSucc` -- true if `o` is a successor to something, so `o.IsSucc  !o.IsLimit`\n- `o.IsNat` -- true if `o` represents a `nat` value, so for `n` a `nat`, `(n as ORDINAL).IsNat` is true\nand if `o.IsNat` is true then `(o as nat)` is well-defined\n- `o.Offset` -- is the `nat` value giving the offset of the ordinal\n\nIn addition, \n- non-negative numeric literals may be considered `ORDINAL` literals, so `o + 1` is allowed\n- `ORDINAL`s may be compared, using `== !=  >=`\n- two `ORDINAL`s may be added and the result is `>=` either one of them; addition is associative but not commutative\n- `*`, `/` and `%` are not defined for `ORDINAL`s\n- two `ORDINAL`s may be subtracted if the RHS satisfies `.IsNat` and the offset of the LHS is not smaller than the offset of the RHS\n\nIn Dafny, `ORDINAL`s are used primarily in conjunction with extreme functions and lemmas.", "start_char_idx": 2, "end_char_idx": 1686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07912f0a-0c19-446c-990b-c8416f96fba5": {"__data__": {"id_": "07912f0a-0c19-446c-990b-c8416f96fba5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94c64109-e7d1-46dc-9d9a-17a818417825", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f45cbc3048719049dcbba33d1bec2b778b6ff313c8c813c9c954aaf7c6dd1689", "class_name": "RelatedNodeInfo"}}, "text": "5.2.5. Characters (grammar) {sec-characters}\n\nDafny supports a type `char` of _characters_.  \nIts exact meaning is controlled by the command-line switch `--unicode-char:true|false`.\n\nIf `--unicode-char` is disabled, then `char` represents any UTF-16 code unit.\nThis includes surrogate code points.\n\nIf `--unicode-char` is enabled, then `char` represents any Unicode scalar value.\nThis excludes surrogate code points.\n\nCharacter literals are enclosed in single quotes, as in `'D'`. \nTo write a single quote as a\ncharacter literal, it is necessary to use an _escape sequence_.\nEscape sequences can also be used to write other characters.  The\nsupported escape sequences are the following:\n\n escape sequence    | meaning\n--------------------|-------------------------------------------------------\n `\\'`               | the character `'`\n `\\\"`               | the character `\"`\n `\\\\`               | the character `\\`\n `\\0`               | the null character, same as `\\u0000` or `\\U{0}`\n `\\n`               | line feed\n `\\r`               | carriage return\n `\\t`               | horizontal tab\n `\\u`_xxxx_         | UTF-16 code unit whose hexadecimal code is _xxxx_,  where each _x_ is a hexadecimal digit\n `\\U{`_x..x_`}`     | Unicode scalar value whose hexadecimal code is _x..x_,  where each _x_ is a hexadecimal digit\n\nThe escape sequence for a double quote is redundant, because\n`'\"'` and `'\\\"'` denote the same\ncharacter---both forms are provided in order to support the same\nescape sequences in string literals (Section 5.5.3.5).\n\nIn the form `\\u`_xxxx_, which is only allowed if `--unicode-char` is disabled,\nthe `u` is always lower case, but the four\nhexadecimal digits are case insensitive.\n\nIn the form `\\U{`_x..x_`}`, \nwhich is only allowed if `--unicode-char` is enabled,\nthe `U` is always upper case,\nbut the hexadecimal digits are case insensitive, and there must\nbe at least one and at most six digits.\nSurrogate code points are not allowed.\nThe hex digits may be interspersed with underscores for readability \n(but not beginning or ending with an underscore), as in `\\U{1_F680}`.\n\nCharacter values are ordered and can be compared using the standard\nrelational operators:\n\n operator        | description\n-----------------|-----------------------------------\n  `<`              | less than\n  `<=`             | at most\n  `>=`             | at least\n  `>`              | greater than\n\nSequences of characters represent _strings_, as described in\nSection 5.5.3.5.\n\nCharacter values can be converted to and from `int` values using the\n`as int` and `as char` conversion operations. The result is what would\nbe expected in other programming languages, namely, the `int` value of a\n`char` is the ASCII or Unicode numeric value.\n\nThe only other operations on characters are obtaining a character\nby indexing into a string, and the implicit conversion to string\nwhen used as a parameter of a `print` statement.", "start_char_idx": 2, "end_char_idx": 2917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8674ed8e-3f50-4796-af16-a3306fb312c6": {"__data__": {"id_": "8674ed8e-3f50-4796-af16-a3306fb312c6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "361468f2-1b62-46c5-98c5-b84e80020968", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "963348eae4ce0fdf5d0642629c9b9462f660a0a704175fa4e22bb91790549262", "class_name": "RelatedNodeInfo"}}, "text": "5.3. Type parameters (grammar) {sec-type-parameters}\n\nExamples:\n\n```dafny\ntype G1\ntype G2\ntype G3\n```\n\nMany of the types, functions, and methods in Dafny can be\nparameterized by types.  These _type parameters_ are \ndeclared inside angle brackets and can stand for any type.\n\nDafny has some inference support that makes certain signatures less\ncluttered (described in Section 12.2).", "start_char_idx": 2, "end_char_idx": 383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46d67619-e9c7-48cd-b37c-be49cf74b882": {"__data__": {"id_": "46d67619-e9c7-48cd-b37c-be49cf74b882", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2406c72-0b13-48d0-9fcb-0a45b778e4e9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5d78d919f592194ec070382f91ce89e7ea05c98baf0e53e86a2bbe3686e54c07", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1. Declaring restrictions on type parameters {sec-type-characteristics}\n\nIt is sometimes necessary to restrict type parameters so that\nthey can only be instantiated by certain families of types, that is,\nby types that have certain properties. These properties are known as\n_type characteristics_. The following subsections\ndescribe the type characteristics that Dafny supports.\n\nIn some cases, type inference will infer that a type-parameter\nmust be restricted in a particular way, in which case Dafny\nwill add the appropriate suffix, such as `(==)`, automatically.\n\nIf more than one restriction is needed, they are either\nlisted comma-separated,\ninside the parentheses or as multiple parenthesized elements:\n `T(==,0)` or `T(==)(0)`.\n\nWhen an actual type is substituted for a type parameter in a generic type instantiation,\nthe actual type must have the declared or inferred type characteristics of the type parameter.\nThese characteristics might also be inferred for the actual type. For example, a numeric-based\nsubset or newtype automatically has the `==` relationship of its base type. Similarly, \ntype synonyms have the characteristics of the type they represent.\n\nAn abstract type has no known characteristics. If it is intended to be defined only as types\nthat have certain characteristics, then those characteristics must be declared.\nFor example,\n\n```dafny\nclass A {}\ntype Q\nconst a: A\n```\nwill give an error because it is not known whether the type `Q` is non-empty (`00`).\nInstead, one needs to write\n\n```dafny\nclass A {}\ntype Q(00)\nconst a: A? := null\n```", "start_char_idx": 2, "end_char_idx": 1574, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1d71578-b9a8-4ec5-9ceb-e86bb5e9ed47": {"__data__": {"id_": "d1d71578-b9a8-4ec5-9ceb-e86bb5e9ed47", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1030143a-95a4-47c2-beae-a496579eb29e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e8c9edf96dd1fcbab04f3d3f7c13db42a2e7a70a227ef5c16a3d7e0c01bf4350", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1.1. Equality-supporting type parameters: `T(==)` {sec-equality-supporting}\n\nDesignating a type parameter with the `(==)` suffix indicates that\nthe parameter may only be replaced in non-ghost contexts\nwith types that are known to\nsupport run-time equality comparisons (`==` and `!=`).\nAll types support equality in ghost contexts,\nas if, for some types, the equality function is ghost.\n\nFor example,\n\n```dafny\nmethod Compare(a: T, b: T) returns (eq: bool)\n{\n  if a == b { eq := true; } else { eq := false; }\n}\n```\nis a method whose type parameter is restricted to equality-supporting\ntypes when used in a non-ghost context.\nAgain, note that _all_ types support equality in _ghost_\ncontexts; the difference is only for non-ghost (that is, compiled)\ncode.  Coinductive datatypes, arrow types, and inductive\ndatatypes with ghost parameters are examples of types that are not\nequality supporting.", "start_char_idx": 2, "end_char_idx": 898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29fcc009-954f-45d4-8a15-ed8fd514e7b3": {"__data__": {"id_": "29fcc009-954f-45d4-8a15-ed8fd514e7b3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37edcb88-1125-4ce4-ac35-f0c17986943a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d0f68742c3a127d7e4a1b266b3df8994403f9763bc333e358d25e98926c90821", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1.2. Auto-initializable types: `T(0)` {sec-auto-init}\n\nAt every access of a variable `x` of a type `T`, Dafny ensures that\n`x` holds a legal value of type `T`.\nIf no explicit initialization is given, then an arbitrary value is\nassumed by the verifier and supplied by the compiler,\nthat is, the variable is _auto-initialized_, but to an arbitrary value.\nFor example,\n\n```dafny\nclass Example {\n  var n: nat\n  var i: int\n  var a: A\n  var x: X\n\n  constructor () {\n    new; // error: field 'x' has not been given a value`\n    assert n >= 0; // true, regardless of the value of 'n'\n    assert i >= 0; // possibly false, since an arbitrary 'int' may be negative\n    // 'a' does not require an explicit initialization, since 'A' is auto-init\n  }\n}\n```\nIn the example above, the class fields do not need to be explicitly initialized\nin the constructor because they are auto-initialized to an arbitrary value.\n\nLocal variables and out-parameters are however, subject to definite assignment\nrules. The following example requires `--relax-definite-assignment`,\nwhich is not the default.\n\n```dafny\nmethod m() {\n  var n: nat; // Auto-initialized to an arbitrary value of type `nat`\n  assert n >= 0; // true, regardless of the value of n\n  var i: int;\n  assert i >= 0; // possibly false, arbitrary ints may be negative\n}\n```\nWith the default behavior of definite assignment, `n` and `i` need to be initialized\nto an explicit value of their type or to an arbitrary value using, for example,\n`var n: nat := *;`.\n\nFor some types (known as _auto-init types_), the compiler can choose an\ninitial value, but for others it does not.\nVariables and fields whose type the compiler does not auto-initialize\nare subject to _definite-assignment_ rules. These ensure that the program\nexplicitly assigns a value to a variable before it is used.\nFor more details see Section 12.6 and the `--relax-definite-assignment` command-line option.\nMore detail on auto-initializing is in this document.\n\nDafny supports auto-init as a type characteristic.\nTo restrict a type parameter to auto-init types, mark it with the\n`(0)` suffix. For example,\n\n```dafny\nmethod AutoInitExamples() returns (a: A, x: X)\n{\n  // 'a' does not require an explicit initialization, since A is auto-init\n  // error: out-parameter 'x' has not been given a value\n}\n```\nIn this example, an error is reported because out-parameter `x` has not\nbeen assigned---since nothing is known about type `X`, variables of\ntype `X` are subject to definite-assignment rules. In contrast, since\ntype parameter `A` is declared to be restricted to auto-init types,\nthe program does not need to explicitly assign any value to the\nout-parameter `a`.", "start_char_idx": 2, "end_char_idx": 2670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7c7e773-888f-41fd-9b0f-26a4a45ce02b": {"__data__": {"id_": "b7c7e773-888f-41fd-9b0f-26a4a45ce02b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6112bfc-4c50-46f2-ac01-8ec96859ffac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b8ad6d7035209417b32c454d894209c02b9bd27baa0b0190fc182c6e6a730d93", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1.3. Nonempty types: `T(00)` {sec-nonempty-types}\n\nAuto-init types are important in compiled contexts. In ghost contexts, it\nmay still be important to know that a type is nonempty. Dafny supports\na type characteristic for nonempty types, written with the suffix `(00)`.\nFor example, with `--relax-definite-assignment`, the following example happens:\n\n\n```dafny\nmethod NonemptyExamples() returns (b: B, ghost g: B, ghost h: X)\n{\n  // error: non-ghost out-parameter 'b' has not been given a value\n  // ghost out-parameter 'g' is fine, since its type is nonempty\n  // error: 'h' has not been given a value\n}\n```\nBecause of `B`'s nonempty type characteristic, ghost parameter `g` does not\nneed to be explicitly assigned. However, Dafny reports an error for the\nnon-ghost `b`, since `B` is not an auto-init type, and reports an error\nfor `h`, since the type `X` could be empty.\n\nNote that every auto-init type is nonempty.\n\nIn the default definite-assignment mode (that is, without `--relax-definite-assignment`)\nthere will be errors for all three formal parameters in the example just given.\n\nFor more details see Section 12.6.", "start_char_idx": 2, "end_char_idx": 1129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d67d6b4-42e4-4205-9350-8cf29af526b0": {"__data__": {"id_": "4d67d6b4-42e4-4205-9350-8cf29af526b0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39dffa2c-2b88-4c7d-a570-12402a8ef90d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ae6ca984ccac850ca1dedf30f7110b2e326f47ed4c5921bb4d393e98e5245988", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1.4. Non-heap based: `T(!new)` {sec-non-heap-based}\n\nDafny makes a distinction between types whose values are on the heap,\ni.e. references, like\nclasses and arrays, and those that are strictly value-based, like basic\ntypes and datatypes.\nThe practical implication is that references depend on allocation state\n(e.g., are affected by the `old` operation) whereas non-reference values\nare not.\nThus it can be relevant to know whether the values of a type parameter\nare heap-based or not. This is indicated by the mode suffix `(!new)`.\n\nA type parameter characterized by `(!new)` is _recursively_ independent\nof the allocation state. For example, a datatype is not a reference, but for\na parameterized data type such as\n\n```dafny\ndatatype Result = Failure(error: string) | Success(value: T)\n```\nthe instantiation `Result` satisfies `(!new)`, whereas\n`Result>` does not.\n\nNote that this characteristic of a type parameter is operative for both\nverification and compilation.\nAlso, abstract types at the topmost scope are always implicitly `(!new)`.\n\nHere are some examples:\n\n```dafny\ndatatype Result = Failure(error: string) | Success(v: T)\ndatatype ResultN = Failure(error: string) | Success(v: T)\n\nclass C {}\n\nmethod m() {\n  var x1: Result;\n  var x2: ResultN;\n  var x3: Result;\n  var x4: ResultN; // error\n  var x5: Result>;\n  var x6: ResultN>; // error\n}\n```", "start_char_idx": 2, "end_char_idx": 1362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27f5600d-837a-42ea-9636-8ef2c65f7496": {"__data__": {"id_": "27f5600d-837a-42ea-9636-8ef2c65f7496", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f225871a-3301-49f5-aa47-e537a9bea192", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d145e475e762304d5dcbcf190154ad5a2196e56e0c6e64d5eb64efe48f55464a", "class_name": "RelatedNodeInfo"}}, "text": "5.3.2. Type parameter variance {sec-type-parameter-variance}\n\nType parameters have several different variance and cardinality properties.\nThese properties of type parameters are designated in a generic type definition.\nFor instance, in `type A = ... `, the `+` indicates that the `T` position\nis co-variant. These properties are indicated by the following notation:\n\nnotation | variance | cardinality-preserving\n:-------:|----------|-----------------------\n(nothing) | non-variant | yes\n`+`      | co-variant | yes\n`-`      | contra-variant | not necessarily\n`*`      | co-variant | not necessarily\n`!`      | non-variant | not necessarily\n\n- _co-variance_ (`A` or `A`) means that if `U` is a subtype of `V` then `A` is a subtype of `A`\n- _contra-variance_ (`A`) means that if `U` is a subtype of `V` then `A` is a subtype of `A`\n- _non-variance_ (`A` or `A`)  means that if `U` is a different type than `V` then there is no subtyping relationship between `A` and `A`\n\n_Cardinality preserving_ \nmeans that the cardinality of the type being defined never exceeds the cardinality of any of its type parameters.\nFor example `type T = X -> bool`\nis illegal and returns the error message `formal type parameter 'X' is not used according to its variance specification (it is used left of an arrow) (perhaps try declaring 'X' as '-X' or '!X')`\nThe type `X -> bool` has strictly more values than the type `X`. \nThis affects certain uses of the type, so Dafny requires the declaration of `T` to explicitly say so. \nMarking the type parameter `X` with `-` or `!` announces that the cardinality of `T` may by larger than that of `X`. \nIf you use `-`, you\u2019re also declaring `T` to be contravariant in its type argument, and if you use `!`, you\u2019re declaring that `T` is non-variant in its type argument.\n\nTo fix it, we use the variance `!`:\n\n    type T = X -> bool\n\nThis states that `T` does not preserve the cardinality of `X`, meaning there could be strictly more values of type `T` than values of type `E` for any `E`.\n\nA more detailed explanation of these topics is here.", "start_char_idx": 2, "end_char_idx": 2064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "014e6f0a-da78-4af5-82df-e973de8213cd": {"__data__": {"id_": "014e6f0a-da78-4af5-82df-e973de8213cd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97c0898a-d8a8-411a-9a7a-c83773f967d4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d6c807dfca8b0e7952f34048a6b3ed454941542a64e3c225703b89c1c20c0526", "class_name": "RelatedNodeInfo"}}, "text": "5.4. Generic Instantiation (grammar) {sec-generic-instantiation}\n\nA generic instantiation consists of a comma-separated list of 1 or more Types,\nenclosed in angle brackets (``),\nproviding actual types to be used in place of the type parameters of the \ndeclaration of the generic type.\nIf there is no instantion for a generic type, type inference will try\nto fill these in (cf. Section 12.2).", "start_char_idx": 2, "end_char_idx": 393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d17c9382-7537-4ff1-a69b-fd78ea32e180": {"__data__": {"id_": "d17c9382-7537-4ff1-a69b-fd78ea32e180", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de2826bf-768d-4797-9f69-a52677664c3d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "092fe26e03f09981c7921483446f05068293620f6718d1aee86cf36756710ccc", "class_name": "RelatedNodeInfo"}}, "text": "5.5. Collection types {sec-collection-types}\n\nDafny offers several built-in collection types.", "start_char_idx": 2, "end_char_idx": 95, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8d08f32-08b5-4741-8456-c3c8b18ebc24": {"__data__": {"id_": "b8d08f32-08b5-4741-8456-c3c8b18ebc24", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f73f188b-9c30-477c-b1d8-8e2a8b7f7b34", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6be35b494f4f3c314d065224398eb05e31c2b498dd08caf076816b1a14b5a7c9", "class_name": "RelatedNodeInfo"}}, "text": "5.5.1. Sets (grammar) {sec-sets}\n\nFor any type `T`, each value of type `set` is a finite set of\n`T` values.\n\nSet membership is determined by equality in the type `T`,\nso `set` can be used in a non-ghost context only if `T` is\nequality supporting.\n\nFor any type `T`, each value of type `iset` is a potentially infinite\nset of `T` values.\n\nA set can be formed using a _set display_ expression, which is a\npossibly empty, unordered, duplicate-insensitive list of expressions\nenclosed in curly braces.  To illustrate,\n\n```dafny\n{}        {2, 7, 5, 3}        {4+2, 1+5, a*b}\n```\nare three examples of set displays. There is also a _set comprehension_\nexpression (with a binder, like in logical quantifications), described in\nSection 9.31.5.\n\nIn addition to equality and disequality, set types\nsupport the following relational operations:\n\n operator        | precedence | description\n-----------------|------------------------------------\n `<`             | 4 | proper subset\n `<=`            | 4 | subset\n `>=`            | 4 | superset\n `>`             | 4 | proper superset\n\nLike the arithmetic relational operators, these operators are\nchaining.\n\nSets support the following binary operators, listed in order of\nincreasing binding power:\n\n operator      | precedence | description\n---------------|:---:|------------------------------------\n `!!`          | 4 | disjointness\n---------------|------------------------------------\n `+`           | 6 | set union\n `-`           | 6 | set difference\n---------------|------------------------------------\n `*`           | 7 |set intersection\n\nThe associativity rules of `+`, `-`, and `*` are like those of the\narithmetic operators with the same names.  The expression `A !! B`,\nwhose binding power is the same as equality (but which neither\nassociates nor chains with equality), says that sets `A` and `B` have\nno elements in common, that is, it is equivalent to\n\n```dafny\nA * B == {}\n```\nHowever, the disjointness operator is chaining though in a slightly different way than other chaining operators:\n `A !! B !! C !! D` means that `A`, `B`, `C` and `D` are all mutually disjoint, that is\n\n```dafny\nA * B == {} && (A + B) * C == {} && (A + B + C) * D == {}\n```\n\nIn addition, for any set `s` of type `set` or `iset` and any\nexpression `e` of type `T`, sets support the following operations:\n\n expression          | precedence | result type |  description\n---------------------|:---:|:---:|------------------------------------\n `e in s`            | 4   | `bool` | set membership\n `e !in s`           | 4   | `bool` | set non-membership\n `|s|`               | 11  | `nat`  | set cardinality (not for `iset`)\n\nThe expression `e !in s` is a syntactic shorthand for `!(e in s)`.\n\n(No white space is permitted between `!` and `in`, making `!in` effectively\nthe one example of a mixed-character-class token in Dafny.)", "start_char_idx": 2, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cc76a36-8d65-4638-bb28-a6b860725fd5": {"__data__": {"id_": "2cc76a36-8d65-4638-bb28-a6b860725fd5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07f0540a-3881-4799-9c57-84674e069fbc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f24347aa97e844818211bfc96b4588ff134ebe43bf05520449bfc119a6ea5ddd", "class_name": "RelatedNodeInfo"}}, "text": "5.5.2. Multisets (grammar) {sec-multisets}\n\nA _multiset_ is similar to a set, but keeps track of the multiplicity\nof each element, not just its presence or absence.  For any type `T`,\neach value of type `multiset` is a map from `T` values to natural\nnumbers denoting each element's multiplicity.  Multisets in Dafny\nare finite, that is, they contain a finite number of each of a finite\nset of elements.  Stated differently, a multiset maps only a finite\nnumber of elements to non-zero (finite) multiplicities.\n\nLike sets, multiset membership is determined by equality in the type\n`T`, so `multiset` can be used in a non-ghost context only if `T`\nis equality supporting.\n\nA multiset can be formed using a _multiset display_ expression, which\nis a possibly empty, unordered list of expressions enclosed in curly\nbraces after the keyword `multiset`.  To illustrate,\n\n```dafny\nmultiset{}   multiset{0, 1, 1, 2, 3, 5}   multiset{4+2, 1+5, a*b}\n```\nare three examples of multiset displays.  There is no multiset\ncomprehension expression.\n\nIn addition to equality and disequality, multiset types\nsupport the following relational operations:\n\n\n operator          | precedence | description\n-------------------|-----------------------------------\n  `<`              | 4 | proper multiset subset\n  `<=`             | 4 | multiset subset\n  `>=`             | 4 | multiset superset\n  `>`              | 4 | proper multiset superset\n\nLike the arithmetic relational operators, these operators are\nchaining.\n\nMultisets support the following binary operators, listed in order of\nincreasing binding power:\n\n operator      | precedence | description\n---------------|:---:|------------------------------------\n `!!`          | 4 | multiset disjointness\n---------------|------------------------------------\n `+`           | 6 |multiset sum\n `-`           | 6 |multiset difference\n---------------|------------------------------------\n `*`           | 7 | multiset intersection\n\nThe associativity rules of `+`, `-`, and `*` are like those of the\narithmetic operators with the same names. The `+` operator\nadds the multiplicity of corresponding elements, the `-` operator\nsubtracts them (but 0 is the minimum multiplicity),\nand the `*` has multiplicity that is the minimum of the\nmultiplicity of the operands. There is no operator for multiset\nunion, which would compute the maximum of the multiplicities of the operands.\n\nThe expression `A !! B`\nsays that multisets `A` and `B` have no elements in common, that is,\nit is equivalent to\n\n```dafny\nA * B == multiset{}\n```\nLike the analogous set operator, `!!` is chaining and means mutual disjointness.\n\nIn addition, for any multiset `s` of type `multiset`,\nexpression `e` of type `T`, and non-negative integer-based numeric\n`n`, multisets support the following operations:\n\n expression      | precedence | result type      | description\n-----------------|:---:|:----------------:|------------------------------------------\n `e in s`        | 4  |  `bool`         | multiset membership\n `e !in s`       | 4  |  `bool`         | multiset non-membership\n `|s|`           | 11 |   `nat`          | multiset cardinality\n `s[e]`          | 11 |  `nat`          | multiplicity of `e` in `s`\n `s[e := n]`     | 11 | `multiset`    | multiset update (change of multiplicity)\n\nThe expression `e in s` returns `true` if and only if `s[e] != 0`.\nThe expression `e !in s` is a syntactic shorthand for `!(e in s)`.\nThe expression `s[e := n]` denotes a multiset like\n`s`, but where the multiplicity of element `e` is `n`.  Note that\nthe multiset update `s[e := 0]` results in a multiset like `s` but\nwithout any occurrences of `e` (whether or not `s` has occurrences of\n`e` in the first place).  As another example, note that\n`s - multiset{e}` is equivalent to:\n\n```dafny\nif e in s then s[e := s[e] - 1] else s\n```", "start_char_idx": 2, "end_char_idx": 3826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3acc4864-b10b-41aa-a56d-dd709c6495fe": {"__data__": {"id_": "3acc4864-b10b-41aa-a56d-dd709c6495fe", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4f1c2af-c205-4d67-b4b6-49b86c27b36e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "61e9d5133670231cf370cb3a2fab3bfab492b64f5eaad6c103745a38ccd22b84", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3. Sequences (grammar) {sec-sequences}\n\nFor any type `T`, a value of type `seq` denotes a _sequence_ of `T`\nelements, that is, a mapping from a finite downward-closed set of natural\nnumbers (called _indices_) to `T` values.", "start_char_idx": 2, "end_char_idx": 229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2e16cec-b755-4525-be6a-6d9298b0b5e3": {"__data__": {"id_": "b2e16cec-b755-4525-be6a-6d9298b0b5e3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c7670f6-4d4f-4cf6-9917-9e7b916940b1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d2df640225f6b61a0d9cf3d9d7e67aa1d05888d68ed942207f9291e6ffee5e66", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3.1. Sequence Displays {sec-sequence-displays}\nA sequence can be formed using a _sequence display_ expression, which\nis a possibly empty, ordered list of expressions enclosed in square\nbrackets.  To illustrate,\n\n```dafny\n[]        [3, 1, 4, 1, 5, 9, 3]        [4+2, 1+5, a*b]\n```\nare three examples of sequence displays.\n\n  There is also a sequence\ncomprehension expression (Section 9.28):\n\n```dafny\nseq(5, i => i*i)\n```\nis equivalent to `[0, 1, 4, 9, 16]`.", "start_char_idx": 2, "end_char_idx": 463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10b2a4f5-59bf-41e9-83aa-66eda05c0b2b": {"__data__": {"id_": "10b2a4f5-59bf-41e9-83aa-66eda05c0b2b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b18da3b-f1d5-4270-8433-2bda266df9e3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ffd212ab40bbf30edb96a48eebdf3d19c81ed911ca330e1f2b89d54820ea0ee9", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3.2. Sequence Relational Operators\nIn addition to equality and disequality, sequence types\nsupport the following relational operations:\n\n operator        | precedence | description\n-----------------|------------------------------------\n  <              | 4 | proper prefix\n  <=             | 4 | prefix\n\nLike the arithmetic relational operators, these operators are\nchaining.  Note the absence of `>` and `>=`.", "start_char_idx": 2, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8077592a-52c9-4e9f-a18f-805738a9f255": {"__data__": {"id_": "8077592a-52c9-4e9f-a18f-805738a9f255", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68243be3-6e9e-4ccf-8b74-5b9caf34eb40", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "422c1d7c43f2eef571a8b2209367266fb8c0e191b59cbcd9c37b302f6d15a4e5", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3.3. Sequence Concatenation\nSequences support the following binary operator:\n\n operator      | precedence | description\n---------------|------------------------------------\n `+`           | 6 | concatenation\n\nOperator `+` is associative, like the arithmetic operator with the\nsame name.", "start_char_idx": 2, "end_char_idx": 292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "601b8f3c-72e4-4f5c-85f6-d1dfd0987a44": {"__data__": {"id_": "601b8f3c-72e4-4f5c-85f6-d1dfd0987a44", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "336bf07d-3a85-4438-a104-26fe75cbc519", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "838518c3a50cd5c5b75e0b2b37ba2163a55c34979e3d8963c602c71385ce1ff3", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3.4. Other Sequence Expressions {sec-other-sequence-expressions}\nIn addition, for any sequence `s` of type `seq`, expression `e`\nof type `T`, integer-based numeric index `i` satisfying `0 <= i < |s|`, and\ninteger-based numeric bounds `lo` and `hi` satisfying\n`0 <= lo <= hi <= |s|`, noting that bounds can equal the length of the sequence,\nsequences support the following operations:\n\n expression         | precedence | result type | description\n -------------------|:---:|:---:|----------------------------------------\n `e in s`           | 4 | `bool` | sequence membership\n `e !in s`          | 4 | `bool` | sequence non-membership\n `|s|`              | 11 | `nat` | sequence length\n `s[i]`             | 11 | `T` | sequence selection\n `s[i := e]`        | 11 | `seq` | sequence update\n `s[lo..hi]`        | 11 | `seq`| subsequence\n `s[lo..]`          | 11 | `seq` | drop\n `s[..hi]`          | 11 | `seq` | take\n `s[`_slices_`]`    | 11 | `seq>` | slice\n `multiset(s)`      | 11 | `multiset`| sequence conversion to a `multiset`\n\nExpression `s[i := e]` returns a sequence like `s`, except that the\nelement at index `i` is `e`.  The expression `e in s` says there\nexists an index `i` such that `s[i] == e`.  It is allowed in non-ghost\ncontexts only if the element type `T` is\nequality supporting.\nThe expression `e !in s` is a syntactic shorthand for `!(e in s)`.\n\nExpression `s[lo..hi]` yields a sequence formed by taking the first\n`hi` elements and then dropping the first `lo` elements.  The\nresulting sequence thus has length `hi - lo`.  Note that `s[0..|s|]`\nequals `s`.  If the upper bound is omitted, it\ndefaults to `|s|`, so `s[lo..]` yields the sequence formed by dropping\nthe first `lo` elements of `s`.  If the lower bound is omitted, it\ndefaults to `0`, so `s[..hi]` yields the sequence formed by taking the\nfirst `hi` elements of `s`.\n\nIn the sequence slice operation, _slices_ is a nonempty list of\nlength designators separated and optionally terminated by a colon, and\nthere is at least one colon.  Each length designator is a non-negative\ninteger-based numeric; the sum of the length designators is no greater than `|s|`.  If there\nare _k_ colons, the operation produces _k + 1_ consecutive subsequences\nfrom `s`, with the length of each indicated by the corresponding length\ndesignator, and returns these as a sequence of\nsequences.\nIf _slices_ is terminated by a\ncolon, then the length of the last slice extends until the end of `s`,\nthat is, its length is `|s|` minus the sum of the given length\ndesignators.  For example, the following equalities hold, for any\nsequence `s` of length at least `10`:\n\n```dafny\nmethod m(s: seq) {\n  var t := [3.14, 2.7, 1.41, 1985.44, 100.0, 37.2][1:0:3];\n  assert |t| == 3 && t[0] == [3.14] && t[1] == [];\n  assert t[2] == [2.7, 1.41, 1985.44];\n  var u := [true, false, false, true][1:1:];\n  assert |u| == 3 && u[0][0] && !u[1][0] && u[2] == [false, true];\n  assume |s| > 10;\n  assert s[10:][0] == s[..10];\n  assert s[10:][1] == s[10..];\n}\n```\n\nThe operation `multiset(s)` yields the multiset of elements of\nsequence `s`.  It is allowed in non-ghost contexts only if the element\ntype `T` is equality supporting.", "start_char_idx": 2, "end_char_idx": 3170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaebc064-5ab7-4a1f-a391-4a4c0e199a74": {"__data__": {"id_": "aaebc064-5ab7-4a1f-a391-4a4c0e199a74", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62e896f9-07e4-4c68-a20b-30b33118a8cd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d9478b9b0b9d8d473fc1bbaa3f031d7dca2258162c95588894320742868ff2fc", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3.5. Strings (grammar) {sec-strings}\n\nA special case of a sequence type is `seq`, for which Dafny\nprovides a synonym: `string`.  Strings are like other sequences, but\nprovide additional syntax for sequence display expressions, namely\n_string literals_.  There are two forms of the syntax for string\nliterals:  the _standard form_ and the _verbatim form_.\n\nString literals of the standard form are enclosed in double quotes, as\nin `\"Dafny\"`.  To include a double quote in such a string literal,\nit is necessary to use an escape sequence.  Escape sequences can also\nbe used to include other characters.  The supported escape sequences\nare the same as those for character literals (Section 5.2.5).\nFor example, the Dafny expression `\"say \\\"yes\\\"\"` represents the\nstring `'say \"yes\"'`.\nThe escape sequence for a single quote is redundant, because\n`\"\\'\"` and `\"\\'\"` denote the same\nstring---both forms are provided in order to support the same\nescape sequences as do character literals.\n\nString literals of the verbatim form are bracketed by\n`@\"` and `\"`, as in `@\"Dafny\"`.  To include\na double quote in such a string literal, it is necessary to use the\nescape sequence `\"\"`, that is, to write the character\ntwice.  In the verbatim form, there are no other escape sequences.\nEven characters like newline can be written inside the string literal\n(hence spanning more than one line in the program text).\n\nFor example, the following three expressions denote the same string:\n\n```dafny\n\"C:\\\\tmp.txt\"\n@\"C:\\tmp.txt\"\n['C', ':', '\\\\', 't', 'm', 'p', '.', 't', 'x', 't']\n```\n\nSince strings are sequences, the relational operators `<`\nand `<=` are defined on them.  Note, however, that these operators\nstill denote proper prefix and prefix, respectively, not some kind of\nalphabetic comparison as might be desirable, for example, when\nsorting strings.", "start_char_idx": 2, "end_char_idx": 1842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0216a4d9-8096-4703-9d61-df5f4684cb8f": {"__data__": {"id_": "0216a4d9-8096-4703-9d61-df5f4684cb8f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97e677cd-ff91-40c4-bbbf-667649ef0085", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "43faf20d8ec6fb26c44bbf0c79a9f803cfd650b9323834f8281ee13fadb13405", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58577188-9087-4b23-8930-873ab1159a52", "node_type": "1", "metadata": {}, "hash": "e5ae48babfdb32e7c30983e9b84f53b99eedf9a872b2d5bc764a6c0db8044c78", "class_name": "RelatedNodeInfo"}}, "text": "5.5.4. Finite and Infinite Maps (grammar) {sec-maps}\n\nFor any types `T` and `U`, a value of type `map` denotes a\n_(finite) map_\nfrom `T` to `U`.  In other words, it is a look-up table indexed by\n`T`.  The _domain_ of the map is a finite set of `T` values that have\nassociated `U` values.  Since the keys in the domain are compared\nusing equality in the type `T`, type `map` can be used in a\nnon-ghost context only if `T` is\nequality supporting.\n\nSimilarly, for any types `T` and `U`, a value of type `imap`\ndenotes a _(possibly) infinite map_.  In most regards, `imap` is\nlike `map`, but a map of type `imap` is allowed to have an\ninfinite domain.\n\nA map can be formed using a _map display_ expression (see Section 9.30),\nwhich is a possibly empty, ordered list of _maplets_, each maplet having the\nform `t := u` where `t` is an expression of type `T` and `u` is an\nexpression of type `U`, enclosed in square brackets after the keyword\n`map`.  To illustrate,\n\n```dafny\nmap[]\nmap[20 := true, 3 := false, 20 := false]\nmap[a+b := c+d]\n```\nare three examples of map displays.  By using the keyword `imap`\ninstead of `map`, the map produced will be of type `imap`\ninstead of `map`.  Note that an infinite map (`imap`) is allowed\nto have a finite domain, whereas a finite map (`map`) is not allowed\nto have an infinite domain.\nIf the same key occurs more than\nonce in a map display expression, only the last occurrence appears in the resulting\nmap.[^fn-map-display]  There is also a _map comprehension expression_,\nexplained in Section 9.31.8.\n\n[^fn-map-display]: This is likely to change in the future to disallow\n    multiple occurrences of the same key.\n\nFor any map `fm` of type `map`,\nany map `m` of type `map` or `imap`,\nany expression `t` of type `T`,\nany expression `u` of type `U`, and any `d` in the domain of `m` (that\nis, satisfying `d in m`), maps support the following operations:\n\n expression     | precedence | result type | description\n ---------------|:---:|:-----------:|------------------------------------\n `t in m`       | 4 | `bool`      | map domain membership\n `t !in m`      | 4 | `bool`      | map domain non-membership\n `|fm|`         | 11 | `nat`       | map cardinality\n `m[d]`         | 11 | `U`         | map selection\n `m[t := u]`    | 11 | `map`  | map update\n `m.Keys`      | 11 | (i)`set`    | the domain of `m`\n `m.Values`    | 11 | (i)`set`    | the range of `m`\n `m.Items`     | 11 | (i)`set`| set of pairs (t,u) in `m`\n\n`|fm|` denotes the number of mappings in `fm`, that is, the\ncardinality of the domain of `fm`.  Note that the cardinality operator\nis not supported for infinite maps.\nExpression `m[d]` returns the `U` value that `m` associates with `d`.\nExpression `m[t := u]` is a map like `m`, except that the\nelement at key `t` is `u`.  The expression `t in m` says `t` is in the\ndomain of `m` and `t !in m` is a syntactic shorthand for\n`!(t in m)`.[^fn-map-membership]\n\nThe expressions `m.Keys`, `m.Values`, and `m.Items` return, as sets,\nthe domain, the range, and the 2-tuples holding the key-value\nassociations in the map. Note that `m.Values` will have a different\ncardinality than `m.Keys` and `m.Items` if different keys are\nassociated with the same value. If `m` is an `imap`, then these\nexpressions return `iset` values. If `m` is a map, `m.Values` and `m.Items`\nrequire the type of the range `U` to support equality.", "start_char_idx": 2, "end_char_idx": 3368, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58577188-9087-4b23-8930-873ab1159a52": {"__data__": {"id_": "58577188-9087-4b23-8930-873ab1159a52", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97e677cd-ff91-40c4-bbbf-667649ef0085", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "43faf20d8ec6fb26c44bbf0c79a9f803cfd650b9323834f8281ee13fadb13405", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0216a4d9-8096-4703-9d61-df5f4684cb8f", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1ba31d3251155e0e12b61f315d7c26cd10d7adae63f56d0dc4a4509ae6137a0d", "class_name": "RelatedNodeInfo"}}, "text": "The expression `t in m` says `t` is in the\ndomain of `m` and `t !in m` is a syntactic shorthand for\n`!(t in m)`.[^fn-map-membership]\n\nThe expressions `m.Keys`, `m.Values`, and `m.Items` return, as sets,\nthe domain, the range, and the 2-tuples holding the key-value\nassociations in the map. Note that `m.Values` will have a different\ncardinality than `m.Keys` and `m.Items` if different keys are\nassociated with the same value. If `m` is an `imap`, then these\nexpressions return `iset` values. If `m` is a map, `m.Values` and `m.Items`\nrequire the type of the range `U` to support equality.\n\n[^fn-map-membership]: This is likely to change in the future as\n    follows:  The `in` and `!in` operations will no longer be\n    supported on maps, with `x in m` replaced by `x in m.Keys`,\nand similarly for `!in`.\n\nHere is a small example, where a map `cache` of type `map`\nis used to cache computed values of Joule-Thomson coefficients for\nsome fixed gas at a given temperature:\n\n```dafny\nif K in cache {  // check if temperature is in domain of cache\n  coeff := cache[K];  // read result in cache\n} else {\n  coeff := ComputeJTCoefficient(K); // do expensive computation\n  cache := cache[K := coeff];  // update the cache\n}\n```\n\nDafny also overloads the `+` and `-` binary operators for maps.\nThe `+` operator merges two maps or imaps of the same type, as if each\n(key,value) pair of the RHS is added in turn to the LHS (i)map.\nIn this use, `+` is not commutative; if a key exists in both\n(i)maps, it is the value from the RHS (i)map that is present in the result.\n\nThe `-` operator implements a map difference operator. Here the LHS\nis a `map` or `imap` and the RHS is a `set` (but not an `iset`); the operation removes\nfrom the LHS all the (key,value) pairs whose key is a member of the RHS set.\n\nTo avoid cuasing circular reasoning chains or providing too much informatino that might\ncomplicate Dafny's prover finding proofs, not all properties of maps are known by the prover by default.\nFor example, the following does not prove:\n\n```dafny\nmethod mmm(m: map, k: K, v: V) {\n    var mm := m[k := v];\n    assert v in mm.Values;\n  }\n```\nRather, one must provide an intermediate step, which is not entirely obvious:\n\n```dafny\nmethod mmm(m: map, k: K, v: V) {\n    var mm := m[k := v];\n    assert k in mm.Keys;\n    assert v in mm.Values;\n  }\n```", "start_char_idx": 2779, "end_char_idx": 5115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cd239d1-f70c-4890-84e3-86db363a54c0": {"__data__": {"id_": "3cd239d1-f70c-4890-84e3-86db363a54c0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4409bb1-ad0a-4fcb-9de7-99970c08306d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "217d65034ac8d1c9505b5580c9699aee7d51ea86b936c442b2896bf8822e9b6e", "class_name": "RelatedNodeInfo"}}, "text": "5.5.5. Iterating over collections\n\nCollections are very commonly used in programming and one frequently\nneeds to iterate over the elements of a collection. Dafny does not have\nbuilt-in iterator methods, but the idioms by which to do so are straightforward.\nThe subsections below give some introductory examples; more\ndetail can be found in this power user note.", "start_char_idx": 2, "end_char_idx": 363, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb793c38-202e-43f0-8fa0-6a927751a19d": {"__data__": {"id_": "fb793c38-202e-43f0-8fa0-6a927751a19d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a114a3f6-6adf-4277-9c9c-b3f98d965aec", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4780fa4bd9130c42a9966c8195973110ae44c99fd9940aa251f23a868c1752d3", "class_name": "RelatedNodeInfo"}}, "text": "5.5.5.1. Sequences and arrays\n\nSequences and arrays are indexable and have a length. So the idiom to\niterate over the contents is well-known. For an array:\n\n```dafny\nmethod m(a: array) {\n  var i := 0;\n  var sum := 0;\n  while i < a.Length {\n    sum := sum + a[i];\n    i := i + 1;\n  }\n}\n```\nFor a sequence, the only difference is the length operator:\n\n```dafny\nmethod m(s: seq) {\n  var i := 0;\n  var sum := 0;\n  while i < |s| {\n    sum := sum + s[i];\n    i := i + 1;\n  }\n}\n```\n\nThe `forall` statement (Section 8.21) can also be used\nwith arrays where parallel assignment is needed:\n\n```dafny\nmethod m(s: array) {\n  var rev := new int[s.Length];\n  forall i | 0 <= i < s.Length {\n    rev[i] := s[s.Length-i-1];\n  }\n}\n```\n\nSee Section 5.10.2 on how to convert an array to a sequence.", "start_char_idx": 2, "end_char_idx": 780, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34ef16fc-1621-47c7-af7a-275fbcaacbfe": {"__data__": {"id_": "34ef16fc-1621-47c7-af7a-275fbcaacbfe", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f09d8c91-6fef-40a3-87f5-df6b367c9f47", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "394307f1fd6daf6472fd026dc6ff41139f1965dbee94413b80b4cf38af872f02", "class_name": "RelatedNodeInfo"}}, "text": "5.5.5.2. Sets\nThere is no intrinsic order to the elements of a set. Nevertheless, we can\nextract an arbitrary element of a nonempty set, performing an iteration\nas follows:\n\n```dafny\nmethod m(s: set) {\n  var ss := s;\n  while ss != {}\n    decreases |ss|\n  {\n    var i: int :| i in ss;\n    ss := ss - {i};\n    print i, \"\\n\";\n  }\n}\n```\n\nBecause `iset`s may be infinite, Dafny does not permit iteration over an `iset`.", "start_char_idx": 2, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f74daf1-46e9-4641-a776-7f1d115bbcf7": {"__data__": {"id_": "3f74daf1-46e9-4641-a776-7f1d115bbcf7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "521bf329-12d3-4b09-bc5e-db921bcc1568", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "18aec06d7e32435ccb31bd1d86aa1a4d51aac7869320f748ebed56d18a0f3316", "class_name": "RelatedNodeInfo"}}, "text": "5.5.5.3. Maps\n\nIterating over the contents of a `map` uses the component sets: `Keys`, `Values`, and `Items`. The iteration loop follows the same patterns as for sets:\n\n\n```dafny\nmethod m (m: map) {\n  var items := m.Items;\n  while items != {}\n    decreases |items|\n  {\n    var item :| item in items;\n    items := items - { item };\n    print item.0, \" \", item.1, \"\\n\";\n  }\n}\n```\n\nThere are no mechanisms currently defined in Dafny for iterating over `imap`s.", "start_char_idx": 2, "end_char_idx": 459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a73df20-799b-4e7d-9008-f61257891952": {"__data__": {"id_": "8a73df20-799b-4e7d-9008-f61257891952", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf9fa624-c442-4910-9c76-9202151ad1f7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c7dc633d653cae9359316d20116881403bffc41f7893277296a2d18598593d48", "class_name": "RelatedNodeInfo"}}, "text": "5.6. Types that stand for other types (grammar) {sec-type-definition}\n\nIt is sometimes useful to know a type by several names or to treat a\ntype abstractly. There are several mechanisms in Dafny to do this:\n\n* (Section 5.6.1) A typical _synonym type_, in which a type name is a synonym for another type\n* (Section 5.6.2) An _abstract type_, in which a new type name is declared as an uninterpreted type\n* (Section 5.6.3) A _subset type_, in which a new type name is given to a subset of the values of a given type\n* ([Section 0.0){#sec-newtypes)) A _newtype_, in which a subset type is declared, but with restrictions on converting to and from its base type", "start_char_idx": 2, "end_char_idx": 659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd8659bb-2a73-4a1f-9344-57bae35aacc5": {"__data__": {"id_": "fd8659bb-2a73-4a1f-9344-57bae35aacc5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "316747a6-8574-4b16-b75a-7065667b6426", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "09e2d2ae85ea88ba748115bdc7a620aedecb23eef3ab992f295f592627a4f766", "class_name": "RelatedNodeInfo"}}, "text": "5.6.1. Type synonyms (grammar) {sec-synonym-type}\n\n\n```dafny\ntype T = int\ntype SS = set>\n```\n\nA _type synonym_ declaration:\n\n```dafny\ntype Y = G\n```\ndeclares `Y` to be a synonym for the type `G`.\nIf the `= G` is omitted then the declaration just declares a name as an uninterpreted\n_abstract_ type, as described in Section 5.6.2.  Such types may be\ngiven a definition elsewhere in the Dafny program.\n\n  Here, `T` is a\nnonempty list of type parameters (each of which optionally\nhas a type characteristics suffix), which can be used as free type\nvariables in `G`.  If the synonym has no type parameters, the \"``\"\nis dropped.  In all cases, a type synonym is just a synonym.  That is,\nthere is never a difference, other than possibly in error messages\nproduced, between `Y` and `G`.\n\nFor example, the names of the following type synonyms may improve the\nreadability of a program:\n\n```dafny\ntype Replacements = map\ntype Vertex = int\n```\n\nThe new type name itself may have type characteristics declared, and may need to if there is no definition.\nIf there is a definition, the type characteristics are typically inferred from the definition. The syntax is like this:\n\n```dafny\ntype Z(==)\n```\n\nAs already described in Section 5.5.3.5, `string` is a built-in\ntype synonym for `seq`, as if it would have been declared as\nfollows:\n\n```dafny\ntype string_(==,0,!new) = seq\n```\nIf the implicit declaration did not include the type characteristics, they would be inferred in any case.\n\nNote that although a type synonym can be declared and used in place of a type name, \nthat does not affect the names of datatype or class constructors.\nFor example, consider\n\n```dafny\ndatatype Pair = Pair(first: T, second: T)\ntype IntPair = Pair\n\nconst p: IntPair := Pair(1,2) // OK\nconst q: IntPair := IntPair(3,4) // Error\n```\n\nIn the declaration of `q`, `IntPair` is the name of a type, not the name of a function or datatype constructor.", "start_char_idx": 2, "end_char_idx": 1915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20b602ef-5660-4f47-976e-8f6de9ae04dc": {"__data__": {"id_": "20b602ef-5660-4f47-976e-8f6de9ae04dc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85513348-7c69-4887-a70e-d774c1cc9696", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "484811f2afb46797879419ce6c2d80a90d6fe6e82456a91dbf3684b81ac9f3e3", "class_name": "RelatedNodeInfo"}}, "text": "5.6.2. Abstract types (grammar) {sec-abstract-types}\n\nExamples:\n\n```dafny\ntype T\ntype Q { function toString(t: T): string }\n```\n\nAn abstract type is a special case of a type synonym that is underspecified.  Such\na type is declared simply by:\n\n```dafny\ntype Y\n```\nIts definition can be stated in a\nrefining module.  The name `Y` can be immediately followed by\na type characteristics suffix (Section 5.3.1).\nBecause there is no defining RHS, the type characteristics cannot be inferred and so\nmust be stated. If, in some refining module, a definition of the type is given, the\ntype characteristics must match those of the new definition.\n\nFor example, the declarations\n\n```dafny\ntype T\nfunction F(t: T): T\n```\ncan be used to model an uninterpreted function `F` on some\narbitrary type `T`.  As another example,\n\n```dafny\ntype Monad\n```\ncan be used abstractly to represent an arbitrary parameterized monad.\n\nEven as an abstract type, the type\nmay be given members such as constants, methods or functions.\nFor example,\n\n```dafny\nabstract module P {\n  type T {\n    function ToString(): string\n  }\n}\n\nmodule X refines P {\n  newtype T = i | 0 <= i < 10 {\n    function ToString(): string {  \"\" }\n  }\n}\n```\nThe abstract type `P.T` has a declared member `ToString`, which can be called wherever `P.T` may be used.\nIn the refining module `X`, `T` is declared to be a `newtype`, in which `ToString` now has a body.\n\nIt would be an error to refine `P.T` as a simple type synonym or subset type in `X`, say `type T = int`, because\ntype synonyms may not have members.", "start_char_idx": 2, "end_char_idx": 1553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6771a582-5c30-4221-b694-da22b94c43e0": {"__data__": {"id_": "6771a582-5c30-4221-b694-da22b94c43e0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63deead1-4934-45c0-b454-b43418a89a69", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7b077d1415eb2578f76cd58217655dcc2740594377ff05dddf96000802295f41", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3. Subset types (grammar) {sec-subset-types}\n\nExamples:\n\n```dafny\ntype Pos = i: int | i > 0 witness 1\ntype PosReal = r | r > 0.0 witness 1.0\ntype Empty = n: nat | n < 0 witness *\ntype Big = n: nat | n > 1000 ghost witness 10000\n```\n\nA _subset type_ is a restricted use of an existing type, called\nthe _base type_ of the subset type.  A subset type is like a\ncombined use of the base type and a predicate on the base\ntype.\n\nAn assignment from a subset type to its base type is always\nallowed.  An assignment in the other direction, from the base type to\na subset type, is allowed provided the value assigned does indeed\nsatisfy the predicate of the subset type. This condition is checked\nby the verifier, not by the type checker. Similarly, assignments from\none subset type to another (both with the same base type) are also\npermitted, as long as it can be established that the value being assigned\nsatisfies the predicate defining the receiving subset type.\n(Note, in contrast, assignments between a newtype and its base type\nare never allowed, even if the value assigned is a value of the target\ntype.  For such assignments, an explicit conversion must be used, see\nSection 9.10.)\n\nThe declaration of a subset type permits an optional `witness` clause, to declare that there is\na value that satisfies the subset type's predicate; that is, the witness clause establishes that the defined\ntype is not empty. The compiler may, but is not obligated to, use this value when auto-initializing a\nnewly declared variable of the subset type.\n\nDafny builds in three families of subset types, as described next.", "start_char_idx": 2, "end_char_idx": 1607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a82c8c13-a929-448e-bf15-7c2ad06636be": {"__data__": {"id_": "a82c8c13-a929-448e-bf15-7c2ad06636be", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4296752a-5fb1-4e62-bce6-9b863c87cf1d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d829fc4cf2b2f777e1ad036139c82fd7603d8b4d7bfdf4c282f6568e8376e94b", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3.1. Type `nat`\n\nThe built-in type `nat`, which represents the non-negative integers\n(that is, the natural numbers), is a subset type:\n\n```dafny\ntype nat = n: int | 0 <= n\n```\n\nA simple example that\nputs subset type `nat` to good use is the standard Fibonacci\nfunction:\n\n```dafny\nfunction Fib(n: nat): nat\n{\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n```\nAn equivalent, but clumsy, formulation of this function (modulo the\nwording of any error messages produced at call sites) would be to use\ntype `int` and to write the restricting predicate in pre- and\npostconditions:\n\n```dafny\nfunction Fib(n: int): int\n  requires 0 <= n  // the function argument must be non-negative\n  ensures 0 <= Fib(n)  // the function result is non-negative\n{\n  if n < 2 then n else Fib(n - 2) + Fib(n - 1)\n}\n```", "start_char_idx": 2, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e75e1d0-79c3-4630-b4bc-552aa48ef0df": {"__data__": {"id_": "7e75e1d0-79c3-4630-b4bc-552aa48ef0df", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3d92c7d-bfab-4218-a979-da817c8c886c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "66138b34c4936acd161de2799cd97a95ffc2e9a0b4b9af9b8842a66cc57fca76", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3.2. Non-null types\n\nEvery class, trait, and iterator declaration `C` gives rise to two types.\n\nOne type has the name `C?` (that is, the name of the class, trait,\nor iterator declaration with a `?` character appended to the end).\nThe values of `C?` are the references to `C` objects, and also\nthe value `null`.\nIn other words, `C?` is the type of _possibly null_ references\n(aka, _nullable_ references) to `C` objects.\n\nThe other type has the name `C` (that is, the same name as the\nclass, trait, or iterator declaration).\nIts values are the references to `C` objects, and does not contain\nthe value `null`.\nIn other words, `C` is the type of _non-null_ references to `C`\nobjects.\n\nThe type `C` is a subset type of `C?`:\n\n```dafny\ntype C = c: C? | c != null\n```\n(It may be natural to think of the type `C?` as the union of\ntype `C` and the value `null`, but, technically, Dafny defines\n`C` as a subset type with base type `C?`.)\n\nFrom being a subset type, we get that `C` is a subtype of `C?`.\nMoreover, if a class or trait `C` extends a trait `B`, then\ntype `C` is a subtype of `B` and type `C?` is a subtype of `B?`.\n\nEvery possibly-null reference type is a subtype of the\nbuilt-in possibly-null trait type `object?`, and\nevery non-null reference type is a subtype of the\nbuilt-in non-null trait type `object`. (And, from the fact\nthat `object` is a subset type of `object?`, we also have that\n`object` is a subtype of `object?`.)\n\nArrays are references and array types also come in these two flavors.\nFor example,\n`array?` and `array2?` are possibly-null (1- and 2-dimensional) array types, and\n`array` and `array2` are their respective non-null types.\n\nNote that `?` is not an operator. Instead, it is simply the last\ncharacter of the name of these various possibly-null types.", "start_char_idx": 2, "end_char_idx": 1787, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61497079-eade-478b-befa-4beecaa2474e": {"__data__": {"id_": "61497079-eade-478b-befa-4beecaa2474e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3503804-e20f-4a73-95b4-6352ae9cca19", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2dbd71a76bb50e3189cb9229d0333eb80e3d80f44119a900fc71cce0f48c6030", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3.3. Arrow types: `->`, `-->`, and `~>` {sec-arrow-subset-types}\n\nFor more information about arrow types (function types), see Section 5.12.\nThis section is a preview to point out the subset-type relationships among the kinds\nof function types.\n\nThe built-in type \n\n- `->` stands for total functions, \n- `-->` stands for partial functions (that is, functions with possible `requires` clauses),\nand \n- `~>` stands for all functions. \n\nMore precisely, type constructors\nexist for any arity (`() -> X`, `A -> X`, `(A, B) -> X`, `(A, B, C) -> X`,\netc.).\n\nFor a list of types `TT` and a type `U`, the values of the arrow type `(TT) ~> U`\nare functions from `TT` to `U`. This includes functions that may read the\nheap and functions that are not defined on all inputs. It is not common\nto need this generality (and working with such general functions is\ndifficult). Therefore, Dafny defines two subset types that are more common\n(and much easier to work with).\n\nThe type `(TT) --> U` denotes the subset of `(TT) ~> U` where the functions\ndo not read the (mutable parts of the) heap.\nValues of type `(TT) --> U` are called _partial functions_,\nand the subset type `(TT) --> U` is called the _partial arrow type_.\n(As a mnemonic to help you remember that this is the partial arrow, you may\nthink of the little gap between the two hyphens in `-->` as showing a broken\narrow.)\n\nIntuitively, the built-in partial arrow type is defined as follows (here shown\nfor arrows with arity 1):\n\n```dafny\ntype A --> B = f: A ~> B | forall a :: f.reads(a) == {}\n```\n(except that what is shown here left of the `=` is not legal Dafny syntax\nand that the restriction could not be verified as is).\nThat is, the partial arrow type is defined as those functions `f`\nwhose reads frame is empty for all inputs.\nMore precisely, taking variance into account, the partial arrow type\nis defined as\n\n```dafny\ntype -A --> +B = f: A ~> B | forall a :: f.reads(a) == {}\n```\n\nThe type `(TT) -> U` is, in turn, a subset type of `(TT) --> U`, adding the\nrestriction that the functions must not impose any precondition. That is,\nvalues of type `(TT) -> U` are _total functions_, and the subset type\n`(TT) -> U` is called the _total arrow type_.\n\nThe built-in total arrow type is defined as follows (here shown\nfor arrows with arity 1):\n\n```dafny\ntype -A -> +B = f: A --> B | forall a :: f.requires(a)\n```\nThat is, the total arrow type is defined as those partial functions `f`\nwhose precondition evaluates to `true` for all inputs.\n\nAmong these types, the most commonly used are the total arrow types.\nThey are also the easiest to work with. Because they are common, they\nhave the simplest syntax (`->`).\n\nNote, informally, we tend to speak of all three of these types as arrow types,\neven though, technically, the `~>` types are the arrow types and the\n`-->` and `->` types are subset types thereof. The one place where you may need to\nremember that `-->` and `->` are subset types is in some error messages.\nFor example, if you try to assign a partial function to a variable whose\ntype is a total arrow type and the verifier is not able to prove that the\npartial function really is total, then you'll get an error saying that the subset-type\nconstraint may not be satisfied.\n\nFor more information about arrow types, see Section 5.12.", "start_char_idx": 2, "end_char_idx": 3298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d7321a8-da1b-433c-9b31-71d2b489846c": {"__data__": {"id_": "5d7321a8-da1b-433c-9b31-71d2b489846c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fcac481d-8707-44e1-8f82-4671393f885e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "219f5c4c12c27e49227702de782f349962c9dfbe8e4a1bc8ce031d0a0fc04706", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3.4. Witness clauses {sec-witness}\n\nThe declaration of a subset type permits an optional `witness` clause.\nTypes in Dafny are generally expected to be non-empty, in part because\nvariables of any type are expected to have some value when they are used.\nIn many cases, Dafny can determine that a newly declared type has \nsome value. \nFor example, in the absence of a witness clause,\na numeric type that includes 0 is known by Dafny\nto be non-empty.\nHowever, Dafny cannot always make this determination.\nIf it cannot, a `witness` clause is required. The value given in\nthe `witness` clause must be a valid value for the type and assures Dafny\nthat the type is non-empty. (The variation `witness *` is described below.)\n\n\nFor example, \n\n```dafny\ntype OddInt = x: int | x % 2 == 1\n```\nwill give an error message, but\n\n```dafny\ntype OddInt = x: int | x % 2 == 1 witness 73\n```\ndoes not. Here is another example:\n\n```dafny\ntype NonEmptySeq = x: seq | |x| > 0 witness [0]\n```\n\nIf the witness is only available in ghost code, you can declare the witness\nas a `ghost witness`. In this case, the Dafny verifier knows that the type\nis non-empty, but it will not be able to auto-initialize a variable of that\ntype in compiled code.\n\nThere is even room to do the following:\n\n```dafny\ntype BaseType\npredicate RHS(x: BaseType)\ntype MySubset = x: BaseType | RHS(x) ghost witness MySubsetWitness()\n\nfunction {:axiom} MySubsetWitness(): BaseType\n  ensures RHS(MySubsetWitness())\n```\nHere the type is given a ghost witness: the result of the expression\n`MySubsetWitness()`, which is a call of a (ghost) function.\nNow that function has a postcondition saying that the returned value \nis indeed a candidate value for the declared type, so the verifier is\nsatisfied regarding the non-emptiness of the type. However, the function\nhas no body, so there is still no proof that there is indeed such a witness.\nYou can either supply a, perhaps complicated, body to generate a viable\ncandidate or you can be very sure, without proof, that there is indeed such a value.\nIf you are wrong, you have introduced an unsoundness into your program.\n\nIn addition though, types are allowed to be empty or possibly empty.\nThis is indicated by the clause `witness *`, which tells the verifier not to check for a satisfying witness.\nA declaration like this produces an empty type:\n\n```dafny\ntype ReallyEmpty = x: int | false witness *\n```\nThe type can be used in code like\n\n```dafny\nmethod M(x: ReallyEmpty) returns (seven: int)\n  ensures seven == 7\n{\n  seven := 10;\n}\n```\nwhich does verify. But the method can never be called because there is no value that\ncan be supplied as the argument. Even this code\n\n```dafny\nmethod P() returns (seven: int)\n  ensures seven == 7\n{\n  var x: ReallyEmpty;\n  seven := 10;\n}\n```\ndoes not complain about `x` unless `x` is actually used, in which case it must have a value.\nThe postcondition in `P` does not verify, but not because of the empty type.", "start_char_idx": 2, "end_char_idx": 2947, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5a8cbed-67ec-4bef-b83b-824793a460e4": {"__data__": {"id_": "c5a8cbed-67ec-4bef-b83b-824793a460e4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3534ba5-4f16-435d-a65c-ada22090c572", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d80ddcb03daf950ba3bac89e9675a493f5a58b0cc00f7a729153a83ecca4bcad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "903acb51-a38a-4bb3-8e36-0c314a004e39", "node_type": "1", "metadata": {}, "hash": "39018bc0f5cdf89149cb752ca690e3995061eb90fee3e5dc15314488f1282676", "class_name": "RelatedNodeInfo"}}, "text": "5.7. Newtypes (grammar) {sec-newtypes}\n\nExamples:\n\n```dafny\nnewtype I = int\nnewtype D = i: int | 0 <= i < 10\nnewtype uint8 = i | 0 <= i < 256\n```\n\nA newtype is like a type synonym or subset type except that it declares a wholly new type\nname that is distinct from its base type. It also accepts an optional `witness` clause.\n\nA new type can be declared with the _newtype_\ndeclaration, for example:\n\n```dafny\nnewtype N = x: M | Q\n```\nwhere `M` is a type and `Q` is a boolean expression that can\nuse `x` as a free variable.  If `M` is an integer-based numeric type,\nthen so is `N`; if `M` is real-based, then so is `N`.  If the type `M`\ncan be inferred from `Q`, the \"`: M`\" can be omitted.  If `Q` is just\n`true`, then the declaration can be given simply as:\n\n```dafny\nnewtype N = M\n```\nType `M` is known as the _base type_ of `N`. At present, Dafny only supports\n`int` and `real` as base types of newtypes.\n\nA newtype is a type that supports the same operations as its\nbase type.  The newtype is distinct from and incompatible with other\ntypes; in particular, it is not assignable to its base type\nwithout an explicit conversion.  An important difference between the\noperations on a newtype and the operations on its base type is that\nthe newtype operations are defined only if the result satisfies the\npredicate `Q`, and likewise for the literals of the\nnewtype.\n\nFor example, suppose `lo` and `hi` are integer-based numeric bounds that\nsatisfy `0 <= lo <= hi` and consider the following code fragment:\n\n```dafny\nvar mid := (lo + hi) / 2;\n```\nIf `lo` and `hi` have type `int`, then the code fragment is legal; in\nparticular, it never overflows, since `int` has no upper bound.  In\ncontrast, if `lo` and `hi` are variables of a newtype `int32` declared\nas follows:\n\n```dafny\nnewtype int32 = x | -0x8000_0000 <= x < 0x8000_0000\n```\nthen the code fragment is erroneous, since the result of the addition\nmay fail to satisfy the predicate in the definition of `int32`.  The\ncode fragment can be rewritten as\n\n```dafny\nvar mid := lo + (hi - lo) / 2;\n```\nin which case it is legal for both `int` and `int32`.\n\nAn additional point with respect to arithmetic overflow is that for (signed)\n`int32` values `hi` and `lo` constrained only by `lo <= hi`, the difference `hi - lo`\ncan also overflow the bounds of the `int32` type. So you could also write:\n\n```dafny\nvar mid := lo + (hi/2 - lo/2);\n```\n\nSince a newtype is incompatible with its base type and since all\nresults of the newtype's operations are members of the newtype, a\ncompiler for Dafny is free to specialize the run-time representation\nof the newtype.  For example, by scrutinizing the definition of\n`int32` above, a compiler may decide to store `int32` values using\nsigned 32-bit integers in the target hardware.\n\nThe incompatibility of a newtype and its basetype is intentional,\nas newtypes are meant to be used as distinct types from the basetype.\nIf numeric types are desired that mix more readily with the basetype,\nthe subset types described in Section 5.6.3\n may be more appropriate.\n\nNote that the bound variable `x` in `Q` has type `M`, not `N`.\nConsequently, it may not be possible to state `Q` about the `N`\nvalue.  For example, consider the following type of 8-bit 2's\ncomplement integers:\n\n```dafny\nnewtype int8 = x: int | -128 <= x < 128\n```\nand consider a variable `c` of type `int8`.", "start_char_idx": 2, "end_char_idx": 3353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "903acb51-a38a-4bb3-8e36-0c314a004e39": {"__data__": {"id_": "903acb51-a38a-4bb3-8e36-0c314a004e39", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3534ba5-4f16-435d-a65c-ada22090c572", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d80ddcb03daf950ba3bac89e9675a493f5a58b0cc00f7a729153a83ecca4bcad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5a8cbed-67ec-4bef-b83b-824793a460e4", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9b866b214077e9754ec725a35bb633617c19120957af4067e701a88f91bb00b7", "class_name": "RelatedNodeInfo"}}, "text": "For example, by scrutinizing the definition of\n`int32` above, a compiler may decide to store `int32` values using\nsigned 32-bit integers in the target hardware.\n\nThe incompatibility of a newtype and its basetype is intentional,\nas newtypes are meant to be used as distinct types from the basetype.\nIf numeric types are desired that mix more readily with the basetype,\nthe subset types described in Section 5.6.3\n may be more appropriate.\n\nNote that the bound variable `x` in `Q` has type `M`, not `N`.\nConsequently, it may not be possible to state `Q` about the `N`\nvalue.  For example, consider the following type of 8-bit 2's\ncomplement integers:\n\n```dafny\nnewtype int8 = x: int | -128 <= x < 128\n```\nand consider a variable `c` of type `int8`.  The expression\n\n```dafny\n-128 <= c < 128\n```\nis not well-defined, because the comparisons require each operand to\nhave type `int8`, which means the literal `128` is checked to be of\ntype `int8`, which it is not.  A proper way to write this expression\nis to use a conversion operation, described in Section 5.7.1, on `c` to\nconvert it to the base type:\n\n```dafny\n-128 <= c as int < 128\n```\n\nIf possible, Dafny compilers will represent values of the newtype using\na native type for the sake of efficiency. This action can\nbe inhibited or a specific native data type selected by\nusing the `{:nativeType}` attribute, as explained in\nSection 11.1.2.\n\nFurthermore, for the compiler to be able to make an appropriate choice of\nrepresentation, the constants in the defining expression as shown above must be\nknown constants at compile-time. They need not be numeric literals; combinations\nof basic operations and symbolic constants are also allowed as described\nin Section 9.39.", "start_char_idx": 2607, "end_char_idx": 4325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d8012c7-b2cf-466c-8203-ff1a9c898773": {"__data__": {"id_": "1d8012c7-b2cf-466c-8203-ff1a9c898773", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "928fa89b-066c-403f-9ac9-f6e603bbce1d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "66f866eef996d2f4b7279e62f3def61e60be07c61693a5030fa4a86bb135134b", "class_name": "RelatedNodeInfo"}}, "text": "5.7.1. Conversion operations {sec-conversion}\n\nFor every type `N`, there is a conversion operation with the\nname `as N`, described more fully in Section 9.10.\nIt is a partial function defined when the\ngiven value, which can be of any type, is a member of the type\nconverted to.  When the conversion is from a real-based numeric type\nto an integer-based numeric type, the operation requires that the\nreal-based argument have no fractional part.  (To round a real-based\nnumeric value down to the nearest integer, use the `.Floor` member,\nsee Section 5.2.2.)\n\nTo illustrate using the example from above, if `lo` and `hi` have type\n`int32`, then the code fragment can legally be written as follows:\n\n```dafny\nvar mid := (lo as int + hi as int) / 2;\n```\nwhere the type of `mid` is inferred to be `int`.  Since the result\nvalue of the division is a member of type `int32`, one can introduce\nyet another conversion operation to make the type of `mid` be `int32`:\n\n```dafny\nvar mid := ((lo as int + hi as int) / 2) as int32;\n```\nIf the compiler does specialize the run-time representation for\n`int32`, then these statements come at the expense of two,\nrespectively three, run-time conversions.\n\nThe `as N` conversion operation is grammatically a suffix operation like\n`.`field and array indexing, but binds less tightly than unary operations:\n`- x as int` is `(- x) as int`; `a + b as int` is `a + (b as int)`.\n\nThe `as N` conversion can also be used with reference types. For example,\nif `C` is a class, `c` is an expression of type `C`, and `o` is an expression\nof type `object`, then `c as object` and `c as object?` are upcasts\nand `o is C` is a downcast. A downcast requires the LHS expression to\nhave the RHS type, as is enforced by the verifier.\n\nFor some types (in particular, reference types), there is also a\ncorresponding `is` operation (Section 9.10) that\ntests whether a value is valid for a given type.", "start_char_idx": 2, "end_char_idx": 1910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f435121b-f821-412d-a725-99e7fb10567e": {"__data__": {"id_": "f435121b-f821-412d-a725-99e7fb10567e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7366af7c-34b7-4f13-b9af-5dbb3f72ae91", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9f31c9cba130adca79f2ce7bef8a748f6bf0de123dcce71574f024eb7132cf93", "class_name": "RelatedNodeInfo"}}, "text": "5.8. Class types (grammar) {sec-class-types}\n\nExamples:\n\n```dafny\ntrait T {}\nclass A {}\nclass B extends T {\n  const b: B?\n  var v: int\n  constructor (vv: int) { v := vv; b := null; }\n  function toString(): string { \"a B\" }\n  method m(i: int) { var x := new B(0); }\n  static method q() {}\n}\n```\n\nDeclarations within a class all begin with keywords and do not end with semicolons.\n\n\n\nA _class_ `C` is a reference type declared as follows:\n\n```dafny\nclass C extends J1, ..., Jn\n{\n  _members_\n}\n```\nwhere the -enclosed list of one-or-more type parameters `T` is optional. The text\n\"`extends J1, ..., Jn`\" is also optional and says that the class extends traits `J1` ... `Jn`.\nThe members of a class are _fields_, _constant fields_, _functions_, and\n_methods_.  These are accessed or invoked by dereferencing a reference\nto a `C` instance.\n\nA function or method is invoked on an _instance_\nof `C`, unless the function or method is declared `static`.\nA function or method that is not `static` is called an\n_instance_ function or method.\n\nAn instance function or method takes an implicit _receiver_\nparameter, namely, the instance used to access the member.  In the\nspecification and body of an instance function or method, the receiver\nparameter can be referred to explicitly by the keyword `this`.\nHowever, in such places, members of `this` can also be mentioned\nwithout any qualification.  To illustrate, the qualified `this.f` and\nthe unqualified `f` refer to the same field of the same object in the\nfollowing example:\n\n```dafny\nclass C {\n  var f: int\n  var x: int\n  method Example() returns (b: bool)\n  {\n    var x: int;\n    b := f == this.f;\n  }\n}\n```\nso the method body always assigns `true` to the out-parameter `b`.\nHowever, in this example, `x` and `this.x` are different because\nthe field `x` is shadowed by the declaration of the local variable `x`.\nThere is no semantic difference between qualified and\nunqualified accesses to the same receiver and member.\n\nA `C` instance is created using `new`. There are three forms of `new`,\ndepending on whether or not the class declares any _constructors_\n(see Section 6.3.2):\n\n\n```dafny\nc := new C;\nc := new C.Init(args);\nc := new C(args);\n```\n\nFor a class with no constructors, the first two forms can be used.\nThe first form simply allocates a new instance of a `C` object, initializing\nits fields to values of their respective types (and initializing each `const` field\nwith a RHS to its specified value). The second form additionally invokes\nan _initialization method_ (here, named `Init`) on the newly allocated object\nand the given arguments. It is therefore a shorthand for\n\n```dafny\nc := new C;\nc.Init(args);\n```\nAn initialization method is an ordinary method that has no out-parameters and\nthat modifies no more than `this`.\n\nFor a class that declares one or more constructors, the second and third forms\nof `new` can be used. For such a class, the second form invokes the indicated\nconstructor (here, named `Init`), which allocates and initializes the object.\nThe third form is the same as the second, but invokes the _anonymous constructor_\nof the class (that is, a constructor declared with the empty-string name).\n\nThe details of constructors and other class members are described in Section 6.3.2.", "start_char_idx": 2, "end_char_idx": 3260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d668617c-f2e7-4e32-8143-1add3f6e3c27": {"__data__": {"id_": "d668617c-f2e7-4e32-8143-1add3f6e3c27", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "159ceae9-1828-41ca-98b5-cc0912ec1a2a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3aee316ac7d279d47ffe225b8bc130f2ef4cc2067df69bfc51e33208e636f7d7", "class_name": "RelatedNodeInfo"}}, "text": "5.9. Trait types (grammar) {sec-trait-types}\n\nA _trait_ is an abstract superclass, similar to an \"interface\" or\n\"mixin\". A trait can be _extended_ only by another trait or\nby a class (and in the latter case we say that the class _implements_\nthe trait). More specifically, algebraic datatypes cannot extend traits.[^fn-traits]\n\n[^fn-traits]: Traits are new to Dafny and are likely to evolve for a while.\n\nThe declaration of a trait is much like that of a class:\n\n```dafny\ntrait J\n{\n  _members_\n}\n```\nwhere _members_ can include fields, constant fields, functions, methods and declarations of nested traits, but\nno constructor methods.  The functions and methods are allowed to be\ndeclared `static`.\n\nA reference type `C` that extends a trait `J` is assignable to a variable of\ntype `J`;\na value of type `J` is assignable to a variable of a reference type `C` that\nextends `J` only if the verifier can prove that the reference does\nindeed refer to an object of allocated type `C`.\nThe members of `J` are available as members\nof `C`.  A member in `J` is not allowed to be redeclared in `C`,\nexcept if the member is a non-`static` function or method without a\nbody in `J`.  By doing so, type `C` can supply a stronger\nspecification and a body for the member. There is further discussion on\nthis point in Section 5.9.2.\n\n`new` is not allowed to be used with traits.  Therefore, there is no\nobject whose allocated type is a trait.  But there can of course be\nobjects of a class `C` that implement a trait `J`, and a reference to\nsuch a `C` object can be used as a value of type `J`.", "start_char_idx": 2, "end_char_idx": 1579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76a8bc71-e272-4892-b9b0-55accc2f9c4e": {"__data__": {"id_": "76a8bc71-e272-4892-b9b0-55accc2f9c4e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2ad0839-7d1f-461b-b4ed-7ec79a4b32a0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a9b4b6f0db49cc61b36bb39570694c41da20b5a893e318b5cc833e698ce61326", "class_name": "RelatedNodeInfo"}}, "text": "5.9.1. Type `object` (grammar) {sec-object-type}\n\nThere is a built-in trait `object` that is implicitly extended by all classes and traits.\nIt produces two types: the type `object?` that is a supertype of all\nreference types and a subset type `object` that is a supertype of all non-null reference types.\nThis includes reference types like arrays and iterators that do not permit\nexplicit extending of traits. The purpose of type `object`\nis to enable a uniform treatment of _dynamic frames_. In particular, it\nis useful to keep a ghost field (typically named `Repr` for\n\"representation\") of type `set`.\n\nIt serves no purpose (but does no harm) to explicitly list the trait `object` as\nan extendee in a class or trait declaration.\n\nTraits `object?` and  `object` contain no members.\n\nThe dynamic allocation of objects is done using `new C`...,\n where `C` is the name of a class.\n The name `C` is not allowed to be a trait,\n except that it is allowed to be `object`.\n The construction `new object` allocates a new object (of an unspecified class type).\n The construction can be used to create unique references, where no other properties of those references are needed.\n(`new object?` makes no sense; always use `new object` instead because the result of\n`new` is always non-null.)", "start_char_idx": 2, "end_char_idx": 1282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e98f159e-8edc-4126-af50-ffbbb317a2aa": {"__data__": {"id_": "e98f159e-8edc-4126-af50-ffbbb317a2aa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5b7769b41c9a1c8aac8917057b49b06c0c52b224e45791e91042413dfe0b301f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df2d50f0-3f04-410e-9824-4e09c7acff61", "node_type": "1", "metadata": {}, "hash": "a1e7c1f09f0c7529d9ab11a805cc3c7a028ab5d5d0433d2c6153e41d8da69588", "class_name": "RelatedNodeInfo"}}, "text": "5.9.2. Inheritance {sec-inheritance}\n\nThe purpose of traits is to be able to express abstraction: a trait\nencapsulates a set of behaviors; classes and traits that extend it\n_inherit_ those behaviors, perhaps specializing them.\n\nA trait or class may extend multiple other traits.\nThe traits syntactically listed in a trait or class's `extends` clause\nare called its _direct parents_; the _transitive parents_ of a trait or class\nare its direct parents, the transitive parents of its direct parents, and\nthe `object` trait (if it is not itself `object`).\nThese are sets of traits, in that it does not matter if\nthere are repetitions of a given trait in a class or trait's direct or\ntransitive parents. However, if a trait with type parameters is repeated,\nit must have the same actual type parameters in each instance.\nFurthermore, a trait may not be in its own set of transitive parents; that is,\nthe graph of traits connected by the directed _extends_ relationship may not\nhave any cycles.\n\nA class or trait inherits (as if they are copied) all the instance members\nof its transitive parents. However, since names may not be overloaded in\nDafny, different members (that is, members with different type signatures)\nwithin the set of transitive parents and the class or trait itself must have different names.[^overload]\nThis restriction does mean that traits from different sources that\ncoincidentally use the same name for different purposes cannot be combined\nby being part of the set of transitive parents for some new trait or class.\n\nA declaration of  member `C.M` in a class or trait _overrides_ any other declarations\nof the same name (and signature) in a transitive parent. `C.M` is then called an\noverride; a declaration that\ndoes not override anything is called an _original declaration_.\n\nStatic members of a trait may not be redeclared;\nthus, if there is a body it must be declared in the trait;\nthe compiler will require a body, though the verifier will not.\n\n[//]: # Caution - a newline (not a blank line) ends a footnote\n[^overload]: It is possible to conceive of a mechanism for disambiguating conflicting names, but this would add complexity to the language that does not appear to be needed, at least as yet.\n\nWhere traits within an extension hierarchy do declare instance members with the same\nname (and thus the same signature), some rules apply. Recall that, for methods,\nevery declaration includes a specification; if no specification is given\nexplicitly, a default specification applies. Instance method declarations in traits,\nhowever, need not have a body, as a body can be declared in an override.\n\nFor a given non-static method M,\n\n* A trait or class may not redeclare M if it has a transitive parent that declares M and provides a body.\n* A trait may but need not provide a body if all its transitive parents that declare M do not declare a body.\n* A trait or class may not have more than one transitive parent that declares M with a body.\n* A class that has one or more transitive parents that declare M without a body\nand no transitive parent that declares M with a body must itself redeclare M\nwith a body if it is compiled. (The verifier alone does not require a body.)\n* Currently (and under debate), the following restriction applies:\nif `M` overrides two (or more) declarations, `P.M` and `Q.M`, then either\n`P.M` must override `Q.M` or `Q.M` must override `P.M`.\n\nThe last restriction above is the current implementation. It effectively limits\ninheritance of a method M to a single \"chain\" of declarations and does not\npermit mixins.\n\nEach of any method declarations explicitly or implicitly\nincludes a specification. In simple cases, those syntactically separate\nspecifications will be copies of each other (up to renaming to take account\nof differing formal parameter names). However they need not be. The rule is\nthat the specifications of M in a given class or trait must be _as strong as_\nM's specifications in a transitive parent.", "start_char_idx": 2, "end_char_idx": 3973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df2d50f0-3f04-410e-9824-4e09c7acff61": {"__data__": {"id_": "df2d50f0-3f04-410e-9824-4e09c7acff61", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5b7769b41c9a1c8aac8917057b49b06c0c52b224e45791e91042413dfe0b301f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e98f159e-8edc-4126-af50-ffbbb317a2aa", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fa7256d00396fdcde50add938b56e3b026890631f923235ba1c9448972a0abd0", "class_name": "RelatedNodeInfo"}}, "text": "(The verifier alone does not require a body.)\n* Currently (and under debate), the following restriction applies:\nif `M` overrides two (or more) declarations, `P.M` and `Q.M`, then either\n`P.M` must override `Q.M` or `Q.M` must override `P.M`.\n\nThe last restriction above is the current implementation. It effectively limits\ninheritance of a method M to a single \"chain\" of declarations and does not\npermit mixins.\n\nEach of any method declarations explicitly or implicitly\nincludes a specification. In simple cases, those syntactically separate\nspecifications will be copies of each other (up to renaming to take account\nof differing formal parameter names). However they need not be. The rule is\nthat the specifications of M in a given class or trait must be _as strong as_\nM's specifications in a transitive parent.\nHere _as strong as_  means that it\nmust be permitted to call the subtype's M in the context of the supertype's M.\nStated differently, where P and C are a parent trait and a child class or trait,\nrespectively, then, under the precondition of `P.M`,\n\n* C.M's `requires` clause must be implied by P.M's `requires` clause\n* C.M's `ensures` clause must imply P.M's `ensures` clause\n* C.M's `reads` set must be a subset of P.M's `reads` set\n* C.M's `modifies` set must be a subset of P.M's `modifies` set\n* C.M's `decreases` expression must be smaller than or equal to P.M's `decreases` expression\n\nNon-static const and field declarations are also inherited from parent traits.\nThese may not be redeclared in extending traits and classes.\nHowever, a trait need not initialize a const field with a value.\nThe class that extends a trait that declares such a const field without an\ninitializer can initialize the field in a constructor.\nIf the declaring trait does give\nan initial value in the declaration, the extending class or trait may not either\nredeclare the field or give it a value in a constructor.\n\nWhen names are inherited from multiple traits, they must be different.\nIf two traits declare a common name (even with the same signature),\nthey cannot both be extendees of the same class or trait.", "start_char_idx": 3157, "end_char_idx": 5270, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6d3f303-0054-40c2-971c-b976baf695af": {"__data__": {"id_": "d6d3f303-0054-40c2-971c-b976baf695af", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05a81a1f-cdcf-4156-911a-563e2c0355d8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aa86fd610bd6d0285996d8cc114e6a2ae8035fd50c2b51b5cce5e9a5e61bdec4", "class_name": "RelatedNodeInfo"}}, "text": "5.9.3. Example of traits\nAs an example, the following trait represents movable geometric shapes:\n\n```dafny\ntrait Shape\n{\n  function Width(): real\n    reads this\n    decreases 1\n  method Move(dx: real, dy: real)\n    modifies this\n  method MoveH(dx: real)\n    modifies this\n  {\n    Move(dx, 0.0);\n  }\n}\n```\nMembers `Width` and `Move` are _abstract_ (that is, body-less) and can\nbe implemented differently by different classes that extend the trait.\nThe implementation of method `MoveH` is given in the trait and thus\nis used by all classes that extend `Shape`.  Here are two classes\nthat each extend `Shape`:\n\n```dafny\nclass UnitSquare extends Shape\n{\n  var x: real, y: real\n  function Width(): real \n    decreases 0\n  {  // note the empty reads clause\n    1.0\n  }\n  method Move(dx: real, dy: real)\n    modifies this\n  {\n    x, y := x + dx, y + dy;\n  }\n}\n\nclass LowerRightTriangle extends Shape\n{\n  var xNW: real, yNW: real, xSE: real, ySE: real\n  function Width(): real\n    reads this\n    decreases 0\n  {\n    xSE - xNW\n  }\n  method Move(dx: real, dy: real)\n    modifies this\n  {\n    xNW, yNW, xSE, ySE := xNW + dx, yNW + dy, xSE + dx, ySE + dy;\n  }\n}\n```\nNote that the classes can declare additional members, that they supply\nimplementations for the abstract members of the trait,\nthat they repeat the member signatures, and that they are responsible\nfor providing their own member specifications that both strengthen the\ncorresponding specification in the trait and are satisfied by the\nprovided body.\nFinally, here is some code that creates two class instances and uses\nthem together as shapes:\n\n```dafny\nmethod m() {\n  var myShapes: seq;\n  var A := new UnitSquare;\n  myShapes := [A];\n  var tri := new LowerRightTriangle;\n  // myShapes contains two Shape values, of different classes\n  myShapes := myShapes + [tri];\n  // move shape 1 to the right by the width of shape 0\n  myShapes[1].MoveH(myShapes[0].Width());\n}\n```", "start_char_idx": 2, "end_char_idx": 1921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5231641c-2003-48b5-9fbd-9f2185c0bdbf": {"__data__": {"id_": "5231641c-2003-48b5-9fbd-9f2185c0bdbf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78c4369f-52b6-409a-b1f3-1c7185cae957", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "efc0dc8d52223ab6372f633e3314ec2193b8c50758eed761f5e67e1ca3284126", "class_name": "RelatedNodeInfo"}}, "text": "5.10. Array types (grammar) {sec-array-type}\n\nDafny supports mutable fixed-length _array types_ of any positive\ndimension.  Array types are (heap-based) reference types.\n\n`arrayToken` is a kind of reserved token,\nsuch as `array`, `array?`, `array2`, `array2?`, `array3`, and so on (but not `array1`).\nThe type parameter suffix giving the element type can be omitted if the element type can be inferred, though in that case it is likely that the `arrayToken` itself is also\ninferrable and can be omitted.", "start_char_idx": 2, "end_char_idx": 505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a35f282-dc78-4033-a77e-eab92fe50f5e": {"__data__": {"id_": "9a35f282-dc78-4033-a77e-eab92fe50f5e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c19db938-2b78-41c0-b1d6-138d673d90c8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "11fa6e61c3cffc2ad5f010ed7261cee53f58c8b58ce100c770383a465eef307a", "class_name": "RelatedNodeInfo"}}, "text": "5.10.1. One-dimensional arrays\n\nA one-dimensional array of `n` `T` elements may be initialized by\nany expression that returns a value of the desired type.\nCommonly, array allocation expressions are used.\nSome examples are shown here:\n\n```dafny\ntype T(0)\nmethod m(n: nat) {\n  var a := new T[n];\n  var b: array := new int[8];\n  var c: array := new T[9];\n}\n```\nThe initial values of the array elements are arbitrary values of type\n`T`. \nA one-dimensional array value can also be assigned using an ordered list of expressions enclosed in square brackets, as follows:\n\n```dafny\na := new T[] [t1, t2, t3, t4];\n```\nThe initialization can also use an expression that returns a function of type `nat -> T`:\n\n```dafny\na := new int5;\n```\nIn fact, the initializer can simply be a function name for the right type of function:\n\n```dafny\na := new int5;\n```\n\nThe length of an array is retrieved using the immutable `Length`\nmember.  For example, the array allocated with `a := new T[n];` satisfies:\n\n```dafny\na.Length == n\n```\nOnce an array is allocated, its length cannot be changed.\n\nFor any integer-based numeric `i` in the range `0 <= i < a.Length`,\nthe _array selection_ expression `a[i]` retrieves element `i` (that\nis, the element preceded by `i` elements in the array).  The\nelement stored at `i` can be changed to a value `t` using the array\nupdate statement:\n\n```dafny\na[i] := t;\n```\n\nCaveat: The type of the array created by `new T[n]` is\n`array`.  A mistake that is simple to make and that can lead to\nbefuddlement is to write `array` instead of `T` after `new`.\nFor example, consider the following:\n\n```dafny\ntype T(0)\nmethod m(n: nat) {\n  var a := new array;\n  var b := new array[n];\n  var c := new array(n);  // resolution error\n  var d := new array(n);  // resolution error\n}\n```\nThe first statement allocates an array of type `array`, but of\nunknown length.  The second allocates an array of type\n`array>` of length `n`, that is, an array that holds `n`\nvalues of type `array`.  The third statement allocates an\narray of type `array` and then attempts to invoke an anonymous\nconstructor on this array, passing argument `n`.  Since `array` has no\nconstructors, let alone an anonymous constructor, this statement\ngives rise to an error.  If the type-parameter list is omitted for a\ntype that expects type parameters, Dafny will attempt to fill these\nin, so as long as the `array` type parameter can be inferred, it is\nokay to leave off the \"``\" in the fourth statement above.  However,\nas with the third statement, `array` has no anonymous constructor, so\nan error message is generated.", "start_char_idx": 2, "end_char_idx": 2588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3932bea-7611-48bd-98f3-da622ab71cb8": {"__data__": {"id_": "f3932bea-7611-48bd-98f3-da622ab71cb8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b63fd3d4-017d-4476-bfba-7843663731df", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "846c9394cf83c433d74d08ba3d9e454e853f8b5eef85efde0f8dd46e34d29795", "class_name": "RelatedNodeInfo"}}, "text": "5.10.2. Converting arrays to sequences {sec-array-to-seq}\n\nOne-dimensional arrays support operations that convert a stretch of\nconsecutive elements into a sequence.  For any array `a` of type\n`array`, integer-based numeric bounds `lo` and `hi` satisfying\n`0 <= lo <= hi <= a.Length`, noting that bounds can equal the array's length,\nthe following operations each yields a\n`seq`:\n\n expression          | description\n---------------------|------------------------------------\n `a[lo..hi]`         | subarray conversion to sequence\n `a[lo..]`           | drop\n `a[..hi]`           | take\n `a[..]`             | array conversion to sequence\n\nThe expression `a[lo..hi]` takes the first `hi` elements of the array,\nthen drops the first `lo` elements thereof and returns what remains as\na sequence, with length `hi - lo`.\nThe other operations are special instances of the first.  If `lo` is\nomitted, it defaults to `0` and if `hi` is omitted, it defaults to\n`a.Length`.\nIn the last operation, both `lo` and `hi` have been omitted, thus\n`a[..]` returns the sequence consisting of all the array elements of\n`a`.\n\nThe subarray operations are especially useful in specifications.  For\nexample, the loop invariant of a binary search algorithm that uses\nvariables `lo` and `hi` to delimit the subarray where the search `key`\nmay still be found can be expressed as follows:\n\n```dafny\nkey !in a[..lo] && key !in a[hi..]\n```\nAnother use is to say that a certain range of array elements have not\nbeen changed since the beginning of a method:\n\n```dafny\na[lo..hi] == old(a[lo..hi])\n```\nor since the beginning of a loop:\n\n```dafny\nghost var prevElements := a[..];\nwhile // ...\n  invariant a[lo..hi] == prevElements[lo..hi]\n{\n  // ...\n}\n```\nNote that the type of `prevElements` in this example is `seq`, if\n`a` has type `array`.\n\nA final example of the subarray operation lies in expressing that an\narray's elements are a permutation of the array's elements at the\nbeginning of a method, as would be done in most sorting algorithms.\nHere, the subarray operation is combined with the sequence-to-multiset\nconversion:\n\n```dafny\nmultiset(a[..]) == multiset(old(a[..]))\n```", "start_char_idx": 2, "end_char_idx": 2150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9687b30-b97d-4fb3-a059-3db301edc02e": {"__data__": {"id_": "f9687b30-b97d-4fb3-a059-3db301edc02e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2146183c-6988-4989-bb0e-44b202cf84db", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b1d80d5972dd6b9402133ec14c7f8fb59d081fb4e994e733b232995472f4184", "class_name": "RelatedNodeInfo"}}, "text": "5.10.3. Multi-dimensional arrays {sec-multi-dimensional-arrays}\n\nAn array of 2 or more dimensions is mostly like a one-dimensional\narray, except that `new` takes more length arguments (one for each\ndimension), and the array selection expression and the array update\nstatement take more indices.  For example:\n\n```dafny\nmatrix := new T[m, n];\nmatrix[i, j], matrix[x, y] := matrix[x, y], matrix[i, j];\n```\ncreate a 2-dimensional array whose dimensions have lengths `m` and\n`n`, respectively, and then swaps the elements at `i,j` and `x,y`.\nThe type of `matrix` is `array2`, and similarly for\nhigher-dimensional arrays (`array3`, `array4`, etc.).  Note,\nhowever, that there is no type `array0`, and what could have been\n`array1` is actually named just `array`. (Accordingly, `array0` and `array1` are just\nnormal identifiers, not type names.)\n\nThe `new` operation above requires `m` and `n` to be non-negative\ninteger-based numerics.  These lengths can be retrieved using the\nimmutable fields `Length0` and `Length1`.  For example, the following\nholds for the array created above:\n\n```dafny\nmatrix.Length0 == m && matrix.Length1 == n\n```\nHigher-dimensional arrays are similar (`Length0`, `Length1`,\n`Length2`, ...).  The array selection expression and array update\nstatement require that the indices are in bounds.  For example, the\nswap statement above is well-formed only if:\n\n```dafny\n0 <= i < matrix.Length0 && 0 <= j < matrix.Length1 &&\n0 <= x < matrix.Length0 && 0 <= y < matrix.Length1\n```\n\nIn contrast to one-dimensional arrays, there is no operation to\nconvert stretches of elements from a multi-dimensional array to a\nsequence.\n\nThere is however syntax to create a multi-dimensional array value\nusing a function: see Section 9.16.", "start_char_idx": 2, "end_char_idx": 1739, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f5b1109-f0b8-4b7b-ae0f-a771ce202542": {"__data__": {"id_": "8f5b1109-f0b8-4b7b-ae0f-a771ce202542", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f63e088-db58-40e0-a0e8-bb02467ba6c8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9381f930c1868e20fe9a48775bd389d3fa16454832bf0a6a597dc0980f871f55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e162e284-b42e-44e4-8af6-059bb04955e1", "node_type": "1", "metadata": {}, "hash": "9f14ff2b1700090ad1cb266093083faa12dfee3b226a1f2a785a08f26b32c7dd", "class_name": "RelatedNodeInfo"}}, "text": "5.11. Iterator types (grammar) {sec-iterator-types}\n\nSee Section 7.5 for a description of iterator specifications.\n\nAn _iterator_ provides a programming abstraction for writing code that\niteratively returns elements.  These CLU-style iterators are\n_co-routines_ in the sense that they keep track of their own program\ncounter and control can be transferred into and out of the iterator\nbody.\n\nAn iterator is declared as follows:\n\n```dafny\niterator Iter(_in-params_) yields (_yield-params_)\n  _specification_\n{\n  _body_\n}\n```\nwhere `T` is a list of type parameters (as usual, if there are no type\nparameters, \"``\" is omitted). This declaration gives rise to a\nreference type with the same name, `Iter`. In the signature,\nin-parameters and yield-parameters are the iterator's analog of a\nmethod's in-parameters and out-parameters. The difference is that the\nout-parameters of a method are returned to a caller just once, whereas\nthe yield-parameters of an iterator are returned each time the iterator\nbody performs a `yield`. The body consists of statements, like in a\nmethod body, but with the availability also of `yield` statements.\n\nFrom the perspective of an iterator client, the `iterator` declaration\ncan be understood as generating a class `Iter` with various\nmembers, a simplified version of which is described next.\n\nThe `Iter` class contains an anonymous constructor whose parameters\nare the iterator's in-parameters:\n\n```dafny\npredicate Valid()\nconstructor (_in-params_)\n  modifies this\n  ensures Valid()\n```\nAn iterator is created using `new` and this anonymous constructor.\nFor example, an iterator willing to return ten consecutive integers\nfrom `start` can be declared as follows:\n\n```dafny\niterator Gen(start: int) yields (x: int)\n  yield ensures |xs| <= 10 && x == start + |xs| - 1\n{\n  var i := 0;\n  while i < 10 invariant |xs| == i {\n    x := start + i;\n    yield;\n    i := i + 1;\n  }\n}\n```\nAn instance of this iterator is created using\n\n```dafny\niter := new Gen(30);\n```\nIt is used like this:\n\n```dafny\nmethod Main() {\n  var i := new Gen(30);\n  while true\n    invariant i.Valid() && fresh(i._new)\n    decreases 10 - |i.xs|\n  {\n    var m := i.MoveNext();\n    if (!m) {break; }\n    print i.x;\n  }\n}\n```\n\nThe predicate `Valid()` says when the iterator is in a state where one\ncan attempt to compute more elements.  It is a postcondition of the\nconstructor and occurs in the specification of the `MoveNext` member:\n\n```dafny\nmethod MoveNext() returns (more: bool)\n  requires Valid()\n  modifies this\n  ensures more ==> Valid()\n```\nNote that the iterator remains valid as long as `MoveNext` returns\n`true`.  Once `MoveNext` returns `false`, the `MoveNext` method can no\nlonger be called.  Note, the client is under no obligation to keep\ncalling `MoveNext` until it returns `false`, and the body of the\niterator is allowed to keep returning elements forever.\n\nThe in-parameters of the iterator are stored in immutable fields of\nthe iterator class.  To illustrate in terms of the example above, the\niterator class `Gen` contains the following field:\n\n```dafny\nconst start: int\n```\nThe yield-parameters also result in members of the iterator class:\n\n```dafny\nvar x: int\n```\nThese fields are set by the `MoveNext` method.  If `MoveNext` returns\n`true`, the latest yield values are available in these fields and the\nclient can read them from there.\n\nTo aid in writing specifications, the iterator class also contains\nghost members that keep the history of values returned by\n`MoveNext`.  The names of these ghost fields follow the names of the\nyield-parameters with an \"`s`\" appended to the name (to suggest\nplural).  Name checking rules make sure these names do not give rise\nto ambiguities.  The iterator class for `Gen` above thus contains:\n\n```dafny\nghost var xs: seq\n```\nThese history fields are changed automatically by `MoveNext`, but are\nnot assignable by user code.\n\nFinally, the iterator class contains some special fields for use in\nspecifications.", "start_char_idx": 2, "end_char_idx": 3967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e162e284-b42e-44e4-8af6-059bb04955e1": {"__data__": {"id_": "e162e284-b42e-44e4-8af6-059bb04955e1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f63e088-db58-40e0-a0e8-bb02467ba6c8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9381f930c1868e20fe9a48775bd389d3fa16454832bf0a6a597dc0980f871f55", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f5b1109-f0b8-4b7b-ae0f-a771ce202542", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ab0439ec5b9354eb489e91ab479845dc70f97f812c51eee8c107cf12f403ac69", "class_name": "RelatedNodeInfo"}}, "text": "If `MoveNext` returns\n`true`, the latest yield values are available in these fields and the\nclient can read them from there.\n\nTo aid in writing specifications, the iterator class also contains\nghost members that keep the history of values returned by\n`MoveNext`.  The names of these ghost fields follow the names of the\nyield-parameters with an \"`s`\" appended to the name (to suggest\nplural).  Name checking rules make sure these names do not give rise\nto ambiguities.  The iterator class for `Gen` above thus contains:\n\n```dafny\nghost var xs: seq\n```\nThese history fields are changed automatically by `MoveNext`, but are\nnot assignable by user code.\n\nFinally, the iterator class contains some special fields for use in\nspecifications.  In particular, the iterator specification is\nrecorded in the following immutable fields:\n\n```dafny\nghost var _reads: set\nghost var _modifies: set\nghost var _decreases0: T0\nghost var _decreases1: T1\n// ...\n```\nwhere there is a `_decreases(`_i_`): T(`_i_`)` field for each\ncomponent of the iterator's `decreases`\nclause.[^fn-iterator-field-names]\nIn addition, there is a field:\n\n```dafny\nghost var _new: set;\n```\nto which any objects allocated on behalf of the iterator body are\nadded.  The iterator body is allowed to remove elements from the\n`_new` set, but cannot by assignment to `_new` add any elements.\n\n[^fn-iterator-field-names]:  It would make sense to rename the special\n    fields `_reads` and `_modifies` to have the same names as the\n    corresponding keywords, `reads` and `modifies`, as is done for\n    function values.  Also, the various `_decreases\\(_i_\\)` fields can be\n    combined into one field named `decreases` whose type is a\n    _n_-tuple. These changes may be incorporated into a future version\n    of Dafny.\n\nNote, in the precondition of the iterator, which is to hold upon\nconstruction of the iterator, the in-parameters are indeed\nin-parameters, not fields of `this`.\n\n`reads` clauses on iterators have a different meaning than they do on functions and methods.\nIterators may read any memory they like, but because arbitrary code may be executed\nwhenever they `yield` control, they need to declare what memory locations must not be modified\nby other code in order to maintain correctness.\nThe contents of an iterator's `reads` clauses become part of the `reads` clause\nof the implicitly created `Valid()` predicate.\nThis means if client code modifies any of this state,\nit will not be able to establish the precondition for the iterator's `MoveNext()` method,\nand hence the iterator body will never resume if this state is modified.\n\nIt is regrettably tricky to use iterators. The language really\nought to have a `foreach` statement to make this easier.\nHere is an example showing a definition and use of an iterator.\n\n\n```dafny\niterator Iter(s: set) yields (x: T)\n  yield ensures x in s && x !in xs[..|xs|-1]\n  ensures s == set z | z in xs\n{\n  var r := s;\n  while (r != {})\n    invariant r !! set z | z in xs\n    invariant s == r + set z | z in xs\n  {\n    var y :| y in r;\n    assert y !in xs;\n    r, x := r - {y}, y;\n    assert y !in xs;\n    yield;\n    assert y == xs[|xs|-1]; // a lemma to help prove loop invariant\n  }\n}\n\nmethod UseIterToCopy(s: set) returns (t: set)\n  ensures s == t\n{\n  t := {};\n  var m := new Iter(s);\n  while (true)\n    invariant m.Valid() && fresh(m._new)\n    invariant t == set z | z in m.xs\n    decreases s - t\n  {\n    var more := m.MoveNext();\n    if (!more) { break; }\n    t := t + {m.x};\n  }\n}\n```\n\nThe design of iterators is under discussion and may change.", "start_char_idx": 3232, "end_char_idx": 6785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93934a6b-5619-4389-bc16-bdb09684d63d": {"__data__": {"id_": "93934a6b-5619-4389-bc16-bdb09684d63d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "35f5d86d20ad6781522329a65937931687c72b62a0235195b2dbb29b3472c954", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b472a98-92b8-4c68-910d-57f3e20b26cb", "node_type": "1", "metadata": {}, "hash": "b57f9fadb92ddb18456a656857ef24b2bc6344e66899217b63e46625a9fab8fe", "class_name": "RelatedNodeInfo"}}, "text": "5.12. Arrow types (grammar) {sec-arrow-types}\n\nExamples:\n\n```dafny\n(int) -> int\n(bool,int) ~> bool\n() --> object?\n```\n\nFunctions are first-class values in Dafny. The types of function values\nare called _arrow types_ (aka, _function types_).\nArrow types have the form `(TT) ~> U` where `TT` is a (possibly empty)\ncomma-delimited list of types and `U` is a type.\n`TT` is called the function's _domain type(s)_ and `U` is its\n_range type_.  For example, the type of a function\n\n```dafny\nfunction F(x: int, arr: array): real\n  requires x < 1000\n  reads arr\n```\nis `(int, array) ~> real`.\n\nAs seen in the example above, the functions that are values of a type\n`(TT) ~> U` can have a precondition (as indicated by the `requires` clause)\nand can read values in the heap (as indicated by the `reads` clause).\nAs described in Section 5.6.3.3,\n\n- the subset type `(TT) --> U` denotes partial (but heap-independent) functions\n- and the subset type `(TT) -> U` denotes total functions.\n\nA function declared without a `reads` clause is known by the type\nchecker to be a partial function. For example, the type of\n\n```dafny\nfunction F(x: int, b: bool): real\n  requires x < 1000\n```\nis `(int, bool) --> real`.\nSimilarly, a function declared with neither a `reads` clause nor a\n`requires` clause is known by the type checker to be a total function.\nFor example, the type of\n\n```dafny\nfunction F(x: int, b: bool): real\n```\nis `(int, bool) -> real`.\nIn addition to functions declared by name, Dafny also supports anonymous\nfunctions by means of _lambda expressions_ (see Section 9.13).\n\nTo simplify the appearance of the basic case where a function's\ndomain consists of a list of exactly one non-function, non-tuple type, the parentheses around\nthe domain type can be dropped in this case. For example, you may\nwrite just `T -> U` for a total arrow type.\nThis innocent simplification requires additional explanation in the\ncase where that one type is a tuple type, since tuple types are also\nwritten with enclosing parentheses.\nIf the function takes a single argument that is a tuple, an additional\nset of parentheses is needed.  For example, the function\n\n```dafny\nfunction G(pair: (int, bool)): real\n```\nhas type `((int, bool)) -> real`.  Note the necessary double\nparentheses.  Similarly, a function that takes no arguments is\ndifferent from one that takes a 0-tuple as an argument.  For instance,\nthe functions\n\n```dafny\nfunction NoArgs(): real\nfunction Z(unit: ()): real\n```\nhave types `() -> real` and `(()) -> real`, respectively.\n\nThe function arrows are right associative.\nFor example, `A -> B -> C` means `A -> (B -> C)`, whereas\nthe other association requires explicit parentheses: `(A -> B) -> C`.\nAs another example, `A -> B --> C ~> D` means\n`A -> (B --> (C ~> D))`.\n\nNote that the receiver parameter of a named function is not part of\nthe type.  Rather, it is used when looking up the function and can\nthen be thought of as being captured into the function definition.\nFor example, suppose function `F` above is declared in a class `C` and\nthat `c` references an object of type `C`; then, the following is type\ncorrect:\n\n```dafny\nvar f: (int, bool) -> real := c.F;\n```\nwhereas it would have been incorrect to have written something like:\n\n```dafny\nvar f': (C, int, bool) -> real := F;  // not correct\n```\n\nThe arrow types themselves do not divide a function's parameters into ghost\nversus non-ghost. Instead, a function used as a first-class value is\nconsidered to be ghost if either the function or any of its arguments\nis ghost.", "start_char_idx": 2, "end_char_idx": 3529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b472a98-92b8-4c68-910d-57f3e20b26cb": {"__data__": {"id_": "9b472a98-92b8-4c68-910d-57f3e20b26cb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "35f5d86d20ad6781522329a65937931687c72b62a0235195b2dbb29b3472c954", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93934a6b-5619-4389-bc16-bdb09684d63d", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0fd4ff15144b749d20388389841f4d97819b23e9a13f6441a09df425977c861a", "class_name": "RelatedNodeInfo"}}, "text": "Note that the receiver parameter of a named function is not part of\nthe type.  Rather, it is used when looking up the function and can\nthen be thought of as being captured into the function definition.\nFor example, suppose function `F` above is declared in a class `C` and\nthat `c` references an object of type `C`; then, the following is type\ncorrect:\n\n```dafny\nvar f: (int, bool) -> real := c.F;\n```\nwhereas it would have been incorrect to have written something like:\n\n```dafny\nvar f': (C, int, bool) -> real := F;  // not correct\n```\n\nThe arrow types themselves do not divide a function's parameters into ghost\nversus non-ghost. Instead, a function used as a first-class value is\nconsidered to be ghost if either the function or any of its arguments\nis ghost. The following example program illustrates:\n\n```dafny\nfunction F(x: int, ghost y: int): int\n{\n  x\n}\n\nmethod Example() {\n  ghost var f: (int, int) -> int;\n  var g: (int, int) -> int;\n  var h: (int) -> int;\n  var x: int;\n  f := F;\n  x := F(20, 30);\n  g := F; // error: tries to assign ghost to non-ghost\n  h := F; // error: wrong arity (and also tries to assign ghost to non-ghost)\n}\n```\n\nIn addition to its type signature, each function value has three properties,\ndescribed next.\n\nEvery function implicitly takes the heap as an argument.  No function\never depends on the _entire_ heap, however.  A property of the\nfunction is its declared upper bound on the set of heap locations it\ndepends on for a given input.  This lets the verifier figure out that\ncertain heap modifications have no effect on the value returned by a\ncertain function.  For a function `f: T ~> U` and a value `t` of type\n`T`, the dependency set is denoted `f.reads(t)` and has type\n`set`.\n\nThe second property of functions stems from the fact that every function\nis potentially _partial_. In other words, a property of a function is its\n_precondition_. For a function `f: T ~> U`, the precondition of `f` for a\nparameter value `t` of type `T` is denoted `f.requires(t)` and has type\n`bool`.\n\nThe third property of a function is more obvious---the function's\nbody.  For a function `f: T ~> U`, the value that the function yields\nfor an input `t` of type `T` is denoted `f(t)` and has type `U`.\n\nNote that `f.reads` and `f.requires` are themselves functions.\nWithout loss of generality, suppose `f` is defined as:\n\n```dafny \nfunction f(x: T): U\n  reads R(x)\n  requires P(x)\n{\n  body(x)\n}\n```\nwhere `P`, `R`, and `body` are declared as:\n\n```dafny \npredicate P(x: T)\nfunction R(x: T): set\nfunction body(x: T): U\n```\nThen, `f.reads` is a function of type `T ~> set` \nwhose `reads` and `requires` properties are given by the definition:\n\n```dafny\nfunction f.reads(x: T): set\n  reads R(x)\n  requires P(x)\n{\n  R(x)\n}\n```\n`f.requires` is a function of type `T ~> bool` whose `reads` and\n`requires` properties are given by the definition:\n\n```dafny\npredicate f_requires(x: T)\n  requires true\n  reads if P(x) then R(x) else *\n{\n  P(x)\n}\n```\nwhere `*` is a notation to indicate that any memory location can\nbe read, but is not valid Dafny syntax.\n\nIn these examples, if `f` instead had type `T --> U` or `T -> U`,\nthen the type of `f.reads` is `T -> set` and the type\nof `f.requires` is `T -> bool`.\n\nDafny also supports anonymous functions by means of\n_lambda expressions_. See Section 9.13.", "start_char_idx": 2766, "end_char_idx": 6080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b8b947f-5e1d-48f2-84ef-91360b4f737c": {"__data__": {"id_": "0b8b947f-5e1d-48f2-84ef-91360b4f737c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef32bb7d-5293-4e0f-8f93-547d2a7f5bc5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f0c369588cdb2550f613a45023c67802d93f454da35207adff1f3b871b5f4802", "class_name": "RelatedNodeInfo"}}, "text": "5.13.  Tuple types {sec-tuple-types}\n````grammar\nTupleType = \"(\" [ [ \"ghost\" ] Type { \",\" [ \"ghost\" ] Type } ] \")\"\n````\n\nDafny builds in record types that correspond to tuples and gives these\na convenient special syntax, namely parentheses.  For example, for what\nmight have been declared as\n\n```dafny\ndatatype Pair = Pair(0: T, 1: U)\n```\nDafny provides the type `(T, U)` and the constructor `(t, u)`, as\nif the datatype's name were \"\" (i.e., an empty string)\nand its type arguments are given in\nround parentheses, and as if the constructor name were the empty string.\nNote that\nthe destructor names are `0` and `1`, which are legal identifier names\nfor members.  For an example showing the use of a tuple destructor, here\nis a property that holds of 2-tuples (that is, _pairs_):\n\n```dafny\nmethod m(){\n  assert (5, true).1 == true;\n}\n```\n\nDafny declares _n_-tuples where _n_ is 0 or 2 or more.  There are no\n1-tuples, since parentheses around a single type or a single value have\nno semantic meaning.  The 0-tuple type, `()`, is often known as the\n_unit type_ and its single value, also written `()`, is known as _unit_.\n\nThe `ghost` modifier can be used to mark tuple components as being used for specification only:\n\n```dafny\nconst pair: (int, ghost int) := (1, ghost 2)\n```", "start_char_idx": 2, "end_char_idx": 1278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc214425-62c1-4756-957d-bc975d61f32e": {"__data__": {"id_": "cc214425-62c1-4756-957d-bc975d61f32e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1235b604-e3d7-428a-a26b-4dfac09f3bda", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "155518ba93fe02a0600fdb4382c3d4eaf4b158f603ddcf39354e9609676e987e", "class_name": "RelatedNodeInfo"}}, "text": "5.14. Algebraic Datatypes (grammar) {sec-datatype}\n\nDafny offers two kinds of algebraic datatypes, those defined\ninductively (with `datatype`)  and those defined coinductively (with `codatatype`).\nThe salient property of\nevery datatype is that each value of the type uniquely identifies one\nof the datatype's constructors and each constructor is injective in\nits parameters.", "start_char_idx": 2, "end_char_idx": 376, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ffb24fa-5799-449e-a545-ecd5ee9a3657": {"__data__": {"id_": "5ffb24fa-5799-449e-a545-ecd5ee9a3657", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8bfed476-cc99-46ab-8e28-cc0214dd24a6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "303c3bec55e871f0945894024750d4b8ce35a5a69d7194d7200a56e35dc488b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67fb4d0b-6005-4273-a33f-55698f014ff9", "node_type": "1", "metadata": {}, "hash": "f3b4a4ab85cc212cedc9d15d5db4c9dc12712262cff05f2ffb84da3e81fa6bd8", "class_name": "RelatedNodeInfo"}}, "text": "5.14.1. Inductive datatypes {sec-inductive-datatypes}\n\nThe values of inductive datatypes can be seen as finite trees where\nthe leaves are values of basic types, numeric types, reference types,\ncoinductive datatypes, or arrow types.  Indeed, values of\ninductive datatypes can be compared using Dafny's well-founded\n`<` ordering.\n\nAn inductive datatype is declared as follows:\n\n```dafny\ndatatype D = _Ctors_\n```\nwhere _Ctors_ is a nonempty `|`-separated list of\n_(datatype) constructors_ for the datatype.  Each constructor has the\nform:\n```text\nC(_params_)\n```\nwhere _params_ is a comma-delimited list of types, optionally\npreceded by a name for the parameter and a colon, and optionally\npreceded by the keyword `ghost`.  If a constructor has no parameters,\nthe parentheses after the constructor name may be omitted.  If no\nconstructor takes a parameter, the type is usually called an\n_enumeration_; for example:\n\n```dafny\ndatatype Friends = Agnes | Agatha | Jermaine | Jack\n```\n\nFor every constructor `C`, Dafny defines a _discriminator_ `C?`, which\nis a member that returns `true` if and only if the datatype value has\nbeen constructed using `C`.  For every named parameter `p` of a\nconstructor `C`, Dafny defines a _destructor_ `p`, which is a member\nthat returns the `p` parameter from the `C` call used to construct the\ndatatype value; its use requires that `C?` holds.  For example, for\nthe standard `List` type\n\n```dafny\ndatatype List = Nil | Cons(head: T, tail: List)\n```\nthe following holds:\n\n```dafny\nmethod m() {\n  assert Cons(5, Nil).Cons? && Cons(5, Nil).head == 5;\n}\n```\nNote that the expression\n\n```dafny\nCons(5, Nil).tail.head\n```\nis not well-formed by itself, since `Cons(5, Nil).tail` does not necessarily satisfy\n`Cons?`.\n\nA constructor can have the same name as\nthe enclosing datatype; this is especially useful for\nsingle-constructor datatypes, which are often called\n_record types_.  For example, a record type for black-and-white pixels\nmight be represented as follows:\n\n```dafny\ndatatype Pixel = Pixel(x: int, y: int, on: bool)\n```\n\nTo call a constructor, it is usually necessary only to mention the\nname of the constructor, but if this is ambiguous, it is always\npossible to qualify the name of constructor by the name of the\ndatatype.  For example, `Cons(5, Nil)` above can be written\n\n```dafny\nList.Cons(5, List.Nil)\n```\n\nAs an alternative to calling a datatype constructor explicitly, a\ndatatype value can be constructed as a change in one parameter from a\ngiven datatype value using the _datatype update_ expression.  For any\n`d` whose type is a datatype that includes a constructor `C` that has\na parameter (destructor) named `f` of type `T`, and any expression `t`\nof type `T`,\n\n```dafny\nd.(f := t)\n```\nconstructs a value like `d` but whose `f` parameter is `t`.  The\noperation requires that `d` satisfies `C?`.  For example, the\nfollowing equality holds:\n\n```dafny\nmethod m(){\n  assert Cons(4, Nil).(tail := Cons(3, Nil)) == Cons(4, Cons(3, Nil));\n}\n```\n\nThe datatype update expression also accepts multiple field\nnames, provided these are distinct. For example, a node of some\ninductive datatype for trees may be updated as follows:", "start_char_idx": 2, "end_char_idx": 3166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67fb4d0b-6005-4273-a33f-55698f014ff9": {"__data__": {"id_": "67fb4d0b-6005-4273-a33f-55698f014ff9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8bfed476-cc99-46ab-8e28-cc0214dd24a6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "303c3bec55e871f0945894024750d4b8ce35a5a69d7194d7200a56e35dc488b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ffb24fa-5799-449e-a545-ecd5ee9a3657", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ce8d045abd09baf617b6ed6f0d9e201d7237d51eecbec605b467d6c2a271caa2", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nnode.(left := L, right := R)\n```\n\nThe operator `<` is defined for two operands of the same datataype.\nIt means _is properly contained in_. For example, in the code\n\n```dafny\ndatatype X = T(t: X) | I(i: int)\nmethod comp() {\n  var x := T(I(0));\n  var y := I(0);\n  var z := I(1);\n  assert x.t < x;\n  assert y < x;\n  assert !(x < x);\n  assert z < x; // FAILS\n}\n```\n`x` is a datatype value that holds a `T` variant, which holds a `I` variant, which holds an integer `0`.\nThe value `x.t` is a portion of the datatype structure denoted by `x`, so `x.t < x` is true.\nDatatype values are immutable mathematical values, so the value of `y` is identical to the value of\n`x.t`, so `y < x` is true also, even though `y` is constructed from the ground up, rather than as\na portion of `x`. However, `z` is different than either `y` or `x.t` and consequently `z < x` is not provable.\nFurthermore, `<` does not include `==`, so `x < x` is false.\n\nNote that only `` or `>=`.\n\nAlso, `<` is underspecified. With the above code, one can prove neither `z < x` nor `!(z < x)` and neither\n`z < y` nor `!(z < y)`. In each pair, though, one or the other is true, so `(z < x) || !(z < x)` is provable.", "start_char_idx": 3169, "end_char_idx": 4352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2ea27ab-8706-4f92-8104-9e3df548f39d": {"__data__": {"id_": "f2ea27ab-8706-4f92-8104-9e3df548f39d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe46ace9-1f69-4ab1-b9f3-5b83c03bfb97", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "24790e4478cca2e4595597d78a4466eac7ad115d55b387e2cc70c67b84081bdc", "class_name": "RelatedNodeInfo"}}, "text": "5.14.2. Coinductive datatypes {sec-coinductive-datatypes}\n\nWhereas Dafny insists that there is a way to construct every inductive\ndatatype value from the ground up, Dafny also supports\n_coinductive datatypes_, whose constructors are evaluated lazily, and\nhence the language allows infinite structures.\nA coinductive datatype is declared\nusing the keyword `codatatype`; other than that, it is declared and\nused like an inductive datatype.\n\nFor example,\n\n```dafny\ncodatatype IList = Nil | Cons(head: T, tail: IList)\ncodatatype Stream = More(head: T, tail: Stream)\ncodatatype Tree = Node(left: Tree, value: T, right: Tree)\n```\ndeclare possibly infinite lists (that is, lists that can be either\nfinite or infinite), infinite streams (that is, lists that are always\ninfinite), and infinite binary trees (that is, trees where every\nbranch goes on forever), respectively.\n\nThe paper Co-induction Simply, by Leino and\nMoskal[@LEINO:Dafny:Coinduction], explains Dafny's implementation and\nverification of coinductive types. We capture the key features from that\npaper in the following section but the reader is referred to that paper for more\ncomplete details and to supply bibliographic references that are\nomitted here.", "start_char_idx": 2, "end_char_idx": 1214, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ad1e712-e0c8-46f4-862d-5567cf12b6b5": {"__data__": {"id_": "7ad1e712-e0c8-46f4-862d-5567cf12b6b5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68334d91-a857-416c-ab27-912138f3ce63", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3080f297fa7722cdad3c9b9c22c87121ef88b088b8830e44a3cb99212ae99358", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "04106fa5-ae49-49ce-bdee-f7f750c13799", "node_type": "1", "metadata": {}, "hash": "ae159b781215521cb3eb8e2415536c9950f419ebd63c2b16c1018a2fc8fc3c03", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3. Coinduction {sec-coinduction}\n\nMathematical induction is a cornerstone of programming and program\nverification. It arises in data definitions (e.g., some algebraic data\nstructures can be described using induction), it underlies program\nsemantics (e.g., it explains how to reason about finite iteration and\nrecursion), and it is used in proofs (e.g., supporting lemmas about\ndata structures use inductive proofs). Whereas induction deals with\nfinite things (data, behavior, etc.), its dual, coinduction, deals with\npossibly infinite things. Coinduction, too, is important in programming\nand program verification: it arises in data definitions (e.g., lazy\ndata structures), semantics (e.g., concurrency), and proofs (e.g.,\nshowing refinement in a coinductive big-step semantics). It is thus\ndesirable to have good support for both induction and coinduction in a\nsystem for constructing and reasoning about programs.\n\nCo-datatypes and co-recursive functions make it possible to use lazily\nevaluated data structures (like in Haskell or Agda). _Greatest predicates_,\ndefined by greatest fix-points, let programs state properties of such\ndata structures (as can also be done in, for example, Coq). For the\npurpose of writing coinductive proofs in the language, we introduce\ngreatest and least lemmas. A greatest lemma invokes the coinduction hypothesis\nmuch like an inductive proof invokes the induction hypothesis. Underneath\nthe hood, our coinductive proofs are actually approached via induction:\ngreatest and least lemmas provide a syntactic veneer around this approach.\n\nThe following example gives a taste of how the coinductive features in\nDafny come together to give straightforward definitions of infinite\nmatters.\n\n```dafny\n// infinite streams\ncodatatype IStream = ICons(head: T, tail: IStream)\n\n// pointwise product of streams\nfunction Mult(a: IStream, b: IStream): IStream\n{ ICons(a.head * b.head, Mult(a.tail, b.tail)) }\n\n// lexicographic order on streams\ngreatest predicate Below(a: IStream, b: IStream)\n{ a.head <= b.head &&\n  ((a.head == b.head) ==> Below(a.tail, b.tail))\n}\n\n// a stream is Below its Square\ngreatest lemma Theorem_BelowSquare(a: IStream)\n  ensures Below(a, Mult(a, a))\n{ assert a.head <= Mult(a, a).head;\n  if a.head == Mult(a, a).head {\n    Theorem_BelowSquare(a.tail);\n  }\n}\n\n// an incorrect property and a bogus proof attempt\ngreatest lemma NotATheorem_SquareBelow(a: IStream)\n  ensures Below(Mult(a, a), a) // ERROR\n{\n  NotATheorem_SquareBelow(a);\n}\n```\n\nThe example defines a type `IStream` of infinite streams, with constructor `ICons` and\ndestructors `head` and `tail`. Function `Mult` performs pointwise\nmultiplication on infinite streams of integers, defined using a\nco-recursive call (which is evaluated lazily). Greatest predicate `Below` is\ndefined as a greatest fix-point, which intuitively means that the\nco-predicate will take on the value true if the recursion goes on forever\nwithout determining a different value. The greatest lemma states the theorem\n`Below(a, Mult(a, a))`. Its body gives the proof, where the recursive\ninvocation of the co-lemma corresponds to an invocation of the\ncoinduction hypothesis.\n\nThe proof of the theorem stated by the first co-lemma lends\nitself to the following intuitive reading: To prove that `a` is below\n`Mult(a, a)`, check that their heads are ordered and, if the heads are\nequal, also prove that the tails are ordered. The second co-lemma states\na property that does not always hold; the verifier is not fooled by the\nbogus proof attempt and instead reports the property as unproved.\n\nWe argue that these definitions in Dafny are simple enough to level the\nplaying field between induction (which is familiar) and coinduction\n(which, despite being the dual of induction, is often perceived as eerily\nmysterious). Moreover, the automation provided by our SMT-based verifier\nreduces the tedium in writing coinductive proofs. For example, it\nverifies `Theorem_BelowSquare` from the program text given above---no\nadditional lemmas or tactics are needed.", "start_char_idx": 2, "end_char_idx": 4040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04106fa5-ae49-49ce-bdee-f7f750c13799": {"__data__": {"id_": "04106fa5-ae49-49ce-bdee-f7f750c13799", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68334d91-a857-416c-ab27-912138f3ce63", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3080f297fa7722cdad3c9b9c22c87121ef88b088b8830e44a3cb99212ae99358", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ad1e712-e0c8-46f4-862d-5567cf12b6b5", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ace428f681ccb0af186f6c8982627646afb9729672e15d3d0c5d0f80bf62cfe1", "class_name": "RelatedNodeInfo"}}, "text": "The second co-lemma states\na property that does not always hold; the verifier is not fooled by the\nbogus proof attempt and instead reports the property as unproved.\n\nWe argue that these definitions in Dafny are simple enough to level the\nplaying field between induction (which is familiar) and coinduction\n(which, despite being the dual of induction, is often perceived as eerily\nmysterious). Moreover, the automation provided by our SMT-based verifier\nreduces the tedium in writing coinductive proofs. For example, it\nverifies `Theorem_BelowSquare` from the program text given above---no\nadditional lemmas or tactics are needed. In fact, as a consequence of the\nautomatic-induction heuristic in Dafny, the verifier will\nautomatically verify `Theorem_BelowSquare` even given an empty body.\n\nJust like there are restrictions on when an _inductive hypothesis_ can be\ninvoked, there are restrictions on how a _coinductive_ hypothesis can be\n_used_. These are, of course, taken into consideration by Dafny's verifier.\nFor example, as illustrated by the second greatest lemma above, invoking the\ncoinductive hypothesis in an attempt to obtain the entire proof goal is\nfutile. (We explain how this works in the section about greatest lemmas) Our initial experience\nwith coinduction in Dafny shows it to provide an intuitive, low-overhead\nuser experience that compares favorably to even the best of today\u2019s\ninteractive proof assistants for coinduction. In addition, the\ncoinductive features and verification support in Dafny have other\npotential benefits. The features are a stepping stone for verifying\nfunctional lazy programs with Dafny. Coinductive features have also\nshown to be useful in defining language semantics, as needed to verify\nthe correctness of a compiler, so this opens the possibility that\nsuch verifications can benefit from SMT automation.", "start_char_idx": 3411, "end_char_idx": 5264, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c46e2ed-f411-45db-ac78-22b0f5afd177": {"__data__": {"id_": "8c46e2ed-f411-45db-ac78-22b0f5afd177", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18d86c7e-d50b-42a7-820e-c48a45f411d9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "60fbd7401d94fe85df3b1f6de411c51d1fe090c36c67cf0cac2cfa360517aca7", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.1. Well-Founded Function/Method Definitions\nThe Dafny programming language supports functions and methods. A _function_\nin Dafny is a mathematical function (i.e., it is well-defined,\ndeterministic, and pure), whereas a _method_ is a body of statements that\ncan mutate the state of the program. A function is defined by its given\nbody, which is an expression. To ensure that function definitions\nare mathematically consistent, Dafny insists that recursive calls be well-founded,\nenforced as follows: Dafny computes the call graph of functions. The strongly connected\ncomponents within it are _clusters_ of mutually recursive definitions; the clusters are arranged in\na DAG. This stratifies the functions so that a call from one cluster in the DAG to a\nlower cluster is allowed arbitrarily. For an intra-cluster call, Dafny prescribes a proof\nobligation that is taken through the program verifier\u2019s reasoning engine. Semantically,\neach function activation is labeled by a _rank_\u2014a lexicographic tuple determined\nby evaluating the function\u2019s `decreases` clause upon invocation of the function. The\nproof obligation for an intra-cluster call is thus that the rank of the callee is strictly less\n(in a language-defined well-founded relation) than the rank of the caller. Because\nthese well-founded checks correspond to proving termination of executable code, we\nwill often refer to them as \u201ctermination checks\u201d. The same process applies to methods.\n\nLemmas in Dafny are commonly introduced by declaring a method, stating\nthe property of the lemma in the _postcondition_ (keyword `ensures`) of\nthe method, perhaps restricting the domain of the lemma by also giving a\n_precondition_ (keyword `requires`), and using the lemma by invoking\nthe method. Lemmas are stated, used, and proved as methods, but\nsince they have no use at run time, such lemma methods are typically\ndeclared as _ghost_, meaning that they are not compiled into code. The\nkeyword `lemma` introduces such a method. Control flow statements\ncorrespond to proof techniques\u2014case splits are introduced with if\nstatements, recursion and loops are used for induction, and method calls\nfor structuring the proof. Additionally, the statement:\n\n```dafny\nforall x | P(x) { Lemma(x); }\n```\nis used to invoke `Lemma(x)` on all `x` for which `P(x)` holds. If\n`Lemma(x)` ensures `Q(x)`, then the forall statement establishes\n\n```dafny\nforall x :: P(x) ==> Q(x).\n```", "start_char_idx": 2, "end_char_idx": 2420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "575f68f5-43c6-4ae1-b9f6-c840dd8ba112": {"__data__": {"id_": "575f68f5-43c6-4ae1-b9f6-c840dd8ba112", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67a30c90-155e-40d7-a2ff-96cdead6c272", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "11263df7a2c48ce5cfe33648508ae8aaa0232343b825031b7c2f20f36fbe9b83", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.2. Defining Coinductive Datatypes\nEach value of an inductive datatype is finite, in the sense that it can\nbe constructed by a finite number of calls to datatype constructors. In\ncontrast, values of a coinductive datatype, or co-datatype for short,\ncan be infinite. For example, a co-datatype can be used to represent\ninfinite trees.\n\nSyntactically, the declaration of a co-datatype in Dafny looks like that\nof a datatype, giving prominence to the constructors (following Coq). The\nfollowing example defines a co-datatype Stream of possibly\ninfinite lists.\n\n\n```dafny\ncodatatype Stream = SNil | SCons(head: T, tail: Stream)\nfunction Up(n: int): Stream { SCons(n, Up(n+1)) }\nfunction FivesUp(n: int): Stream\n  decreases 4 - (n - 1) % 5\n{\n  if (n % 5 == 0) then\n    SCons(n, FivesUp(n+1))\n  else\n    FivesUp(n+1)\n}\n```\n\n`Stream` is a coinductive datatype whose values are possibly infinite\nlists. Function `Up` returns a stream consisting of all integers upwards\nof `n` and `FivesUp` returns a stream consisting of all multiples of 5\nupwards of `n` . The self-call in `Up` and the first self-call in `FivesUp`\nsit in productive positions and are therefore classified as co-recursive\ncalls, exempt from termination checks. The second self-call in `FivesUp` is\nnot in a productive position and is therefore subject to termination\nchecking; in particular, each recursive call must decrease the rank\ndefined by the `decreases` clause.\n\nAnalogous to the common finite list datatype, `Stream` declares two\nconstructors, `SNil` and `SCons`. Values can be destructed using match\nexpressions and statements. In addition, like for inductive datatypes,\neach constructor `C` automatically gives rise to a discriminator `C?` and\neach parameter of a constructor can be named in order to introduce a\ncorresponding destructor. For example, if `xs` is the stream\n`SCons(x, ys)`, then `xs.SCons?` and `xs.head == x` hold. In contrast\nto datatype declarations, there is no grounding check for\nco-datatypes\u2014since a codatatype admits infinite values, the type is\nnevertheless inhabited.", "start_char_idx": 2, "end_char_idx": 2071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3e1bc4a-3201-434e-a824-f152c66b807c": {"__data__": {"id_": "b3e1bc4a-3201-434e-a824-f152c66b807c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "462ff9d3-72df-47de-b9cf-034cf572e2f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9e1396104272dfbafa8030b359c710e0400fd1a4e29acf2e3a34fe829838cffc", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.3. Creating Values of Co-datatypes\nTo define values of co-datatypes, one could imagine a \u201cco-function\u201d\nlanguage feature: the body of a \u201cco-function\u201d could include possibly\nnever-ending self-calls that are interpreted by a greatest fix-point\nsemantics (akin to a **CoFixpoint** in Coq). Dafny uses a different design:\nit offers only functions (not \u201cco-functions\u201d), but it classifies each\nintra-cluster call as either _recursive_ or _co-recursive_. Recursive calls\nare subject to termination checks. Co-recursive calls may be\nnever-ending, which is what is needed to define infinite values of a\nco-datatype. For example, function `Up(n)` in the preceding example is defined as the\nstream of numbers from `n` upward: it returns a stream that starts with `n`\nand continues as the co-recursive call `Up(n + 1)`.\n\nTo ensure that co-recursive calls give rise to mathematically consistent definitions,\nthey must occur only in productive positions. This says that it must be possible to determine\neach successive piece of a co-datatype value after a finite amount of work. This\ncondition is satisfied if every co-recursive call is syntactically guarded by a constructor\nof a co-datatype, which is the criterion Dafny uses to classify intra-cluster calls as being\neither co-recursive or recursive. Calls that are classified as co-recursive are exempt from\ntermination checks.\n\nA consequence of the productivity checks and termination checks is that, even in the\nabsence of talking about least or greatest fix-points of self-calling functions, all functions\nin Dafny are deterministic. Since there cannot be multiple fix-points,\nthe language allows one function to be involved in both recursive and co-recursive calls,\nas we illustrate by the function `FivesUp`.", "start_char_idx": 2, "end_char_idx": 1760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d030643-fd49-46b1-b663-0f0578f372aa": {"__data__": {"id_": "6d030643-fd49-46b1-b663-0f0578f372aa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d88905da-5578-42ff-a73e-4ab42110639e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b333fb43e4d0db5738e64fab18170890d895b823fad4148c0ad19b561e58e9fb", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.4. Co-Equality {sec-co-equality}\nEquality between two values of a co-datatype is a built-in co-predicate.\nIt has the usual equality syntax `s == t`, and the corresponding prefix\nequality is written `s ==#[k] t`. And similarly for `s != t`\nand `s !=#[k] t`.", "start_char_idx": 2, "end_char_idx": 265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ee341c7-c112-46bc-a8fe-56dc49cc44a3": {"__data__": {"id_": "2ee341c7-c112-46bc-a8fe-56dc49cc44a3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "967d5ff9-6e6e-4a64-831a-509690e70ba2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "657f9541acf09d6c0f6980856760f9479424f76b1e3e1f2b407493230d0cba9d", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.5. Greatest predicates {sec-copredicates}\n\nDetermining properties of co-datatype values may require an infinite\nnumber of observations. To that end, Dafny provides _greatest predicates_\nwhich are function declarations that use the `greatest predicate` keyword phrase.\nSelf-calls to a greatest predicate need not terminate. Instead, the value\ndefined is the greatest fix-point of the given recurrence equations.\nContinuing the preceding example, the following code defines a\ngreatest predicate that holds for exactly those streams whose payload consists\nsolely of positive integers. The greatest predicate definition implicitly also\ngives rise to a corresponding prefix predicate, `Pos#`. The syntax for\ncalling a prefix predicate sets apart the argument that specifies the\nprefix length, as shown in the last line; for this figure, we took the\nliberty of making up a coordinating syntax for the signature of the\nautomatically generated prefix predicate (which is not part of\nDafny syntax).\n\n\n```dafny\ngreatest predicate Posnat\n{\n  match s\n  case SNil => true\n  case SCons(x, rest) => x > 0 && Pos(rest)\n}\n```\nThe following code is automatically generated by the Dafny compiler:\n\n```dafny\npredicate Pos#_k: nat\n  decreases _k\n{ if _k == 0 then true else\n  match s\n  case SNil => true\n  case SCons(x, rest) => x > 0 && Pos#_k-1\n}\n```\n\nSome restrictions apply. To guarantee that the greatest fix-point always\nexists, the (implicit functor defining the) greatest predicate must be\nmonotonic. This is enforced by a syntactic restriction on the form of the\nbody of greatest predicates: after conversion to negation normal form (i.e.,\npushing negations down to the atoms), intra-cluster calls of\ngreatest predicates must appear only in _positive_ positions\u2014that is, they must\nappear as atoms and must not be negated. Additionally, to guarantee\nsoundness later on, we require that they appear in _continous_\npositions\u2014that is, in negation normal form, when they appear under\nexistential quantification, the quantification needs to be limited to a\nfinite range[^fn-copredicate-restriction]. Since the evaluation of a greatest predicate might not\nterminate, greatest predicates are always ghost. There is also a restriction on\nthe call graph that a cluster containing a greatest predicate must contain only\ngreatest predicates, no other kinds of functions.\n\n[^fn-copredicate-restriction]: To be specific, Dafny has two forms of \nextreme predicates and lemmas, one in which `_k` has type `nat` and one in \nwhich it has type `ORDINAL` (the default). The continuous restriction \napplies only when `_k` is `nat`. Also, higher-order function support in Dafny is\n    rather modest and typical reasoning patterns do not involve them, so this\n    restriction is not as limiting as it would have been in, e.g., Coq.\n\nA **greatest predicate** declaration of `P` defines not just a greatest predicate, but\nalso a corresponding _prefix predicate_ `P#`. A prefix predicate is a\nfinite unrolling of a co-predicate. The prefix predicate is constructed\nfrom the co-predicate by\n\n* adding a parameter `_k` of type `nat` to denote the prefix length,\n\n* adding the clause `decreases _k;` to the prefix predicate (the\n  greatest predicate itself is not allowed to have a decreases clause),\n\n* replacing in the body of the greatest predicate every intra-cluster\n  call `Q(args)` to a greatest predicate by a call `Q#_k - 1`\n  to the corresponding prefix predicate, and then\n\n* prepending the body with `if _k == 0 then true else`.\n\nFor example, for greatest predicate `Pos`, the definition of the prefix\npredicate `Pos#` is as suggested above. Syntactically, the prefix-length\nargument passed to a prefix predicate to indicate how many times to\nunroll the definition is written in square brackets, as in `Pos#k`.\nIn the Dafny grammar this is called a ``HashCall``. The definition of\n`Pos#` is available only at clusters strictly higher than that of `Pos`;\nthat is, `Pos` and `Pos#` must not be in the same cluster. In other\nwords, the definition of `Pos` cannot depend on `Pos#`.", "start_char_idx": 2, "end_char_idx": 4057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e64d332-cb75-4ab7-95f9-e7b2753d4512": {"__data__": {"id_": "4e64d332-cb75-4ab7-95f9-e7b2753d4512", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3ebd2a1-3153-4aec-af50-16d89f5af1e9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cc7a32e666ca894f5e5f56460a3bddf64e0c89efdf079d8577fd321103277dc1", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.6. Coinductive Proofs\n\nFrom what we have said so far, a program can make use of properties of\nco-datatypes. For example, a method that declares `Pos(s)` as a\nprecondition can rely on the stream `s` containing only positive integers.\nIn this section, we consider how such properties are established in the\nfirst place.", "start_char_idx": 2, "end_char_idx": 326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9186fa57-b856-406d-904a-66a6e1441ae3": {"__data__": {"id_": "9186fa57-b856-406d-904a-66a6e1441ae3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17143227-4ae8-4193-aac3-6cc76caac9f8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ffa22eeba535596092132d3489af70a960e95253f2d0c7d3293e77dd95a3aca", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.6.1. Properties of Prefix Predicates\n\nAmong other possible strategies for establishing coinductive properties\nwe take the time-honored approach of reducing coinduction to\ninduction. More precisely, Dafny passes to the SMT solver an\nassumption `D(P)` for every greatest predicate `P`, where:\n\n\n```dafny\nD(P) = forall x \u2022 P(x)  forall k \u2022 P#k\n```\n\nIn other words, a greatest predicate is true iff its corresponding prefix\npredicate is true for all finite unrollings.\n\nIn Sec. 4 of the paper [Co-induction Simply] a soundness theorem of such\nassumptions is given, provided the greatest predicates meet the continous\nrestrictions. An example proof of `Pos(Up(n))` for every `n > 0` is\nshown here:\n\n\n```dafny\nlemma UpPosLemma(n: int)\n  requires n > 0\n  ensures Pos(Up(n))\n{\n  forall k | 0 <= k { UpPosLemmaK(k, n); }\n}\n\nlemma UpPosLemmaK(k: nat, n: int)\n  requires n > 0\n  ensures Pos#k)\n  decreases k\n{\n  if k != 0 {\n    // this establishes Pos#k-1.tail)\n    UpPosLemmaK(k-1, n+1);\n  }\n}\n```\n\nThe lemma `UpPosLemma` proves `Pos(Up(n))` for every `n > 0`. We first\nshow `Pos#k)`, for `n > 0` and an arbitrary `k`, and then use\nthe forall statement to show `forall k \u2022 Pos#k)`. Finally, the axiom\n`D(Pos)` is used (automatically) to establish the greatest predicate.", "start_char_idx": 2, "end_char_idx": 1269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8532b8c0-eaef-494e-955b-1993c9759f0f": {"__data__": {"id_": "8532b8c0-eaef-494e-955b-1993c9759f0f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a277f0d7-21e5-4e0a-bb0e-af5331bbbe4b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "61bb95e7b3851c91044b002144ba09fdd7c84c0dbfe7273b699298a7766276de", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.6.2. Greatest lemmas {sec-colemmas}\n\nAs we just showed, with help of the `D` axiom we can now prove a\ngreatest predicate by inductively proving that the corresponding prefix\npredicate holds for all prefix lengths `k`. In this section, we introduce\n_greatest lemma_ declarations, which bring about two benefits. The first benefit\nis that greatest lemmas are syntactic sugar and reduce the tedium of having to\nwrite explicit quantifications over `k`. The second benefit is that, in\nsimple cases, the bodies of greatest lemmas can be understood as coinductive\nproofs directly. As an example consider the following greatest lemma.\n\n\n```dafny\ngreatest lemma UpPosLemma(n: int)\n  requires n > 0\n  ensures Pos(Up(n))\n{\n  UpPosLemma(n+1);\n}\n```\nThis greatest lemma can be understood as follows: `UpPosLemma` invokes itself\nco-recursively to obtain the proof for `Pos(Up(n).tail)` (since `Up(n).tail`\nequals `Up(n+1)`). The proof glue needed to then conclude `Pos(Up(n))` is\nprovided automatically, thanks to the power of the SMT-based verifier.", "start_char_idx": 2, "end_char_idx": 1045, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d4e0313-c3e5-4df8-bfaa-a8fc3780d4ba": {"__data__": {"id_": "0d4e0313-c3e5-4df8-bfaa-a8fc3780d4ba", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa68d2d0-e061-4fd0-b571-222be1d3acb4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fe81c92586e1f5e97b144c545ab4fb663ffbb78c06073ed111f31f1f0485d69b", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.6.3. Prefix Lemmas {sec-prefix-lemmas}\n\nTo understand why the above `UpPosLemma` greatest lemma code is a sound proof,\nlet us now describe the details of the desugaring of greatest lemmas. In\nanalogy to how a **greatest predicate** declaration defines both a greatest predicate and\na prefix predicate, a **greatest lemma** declaration defines both a greatest lemma and\n_prefix lemma_. In the call graph, the cluster containing a greatest lemma must\ncontain only greatest lemmas and prefix lemmas, no other methods or function.\nBy decree, a greatest lemma and its corresponding prefix lemma are always\nplaced in the same cluster. Both greatest lemmas and prefix lemmas are always\nghost code.\n\nThe prefix lemma is constructed from the greatest lemma by\n\n* adding a parameter `_k` of type `nat` to denote the prefix length,\n\n* replacing in the greatest lemma\u2019s postcondition the positive continuous\n  occurrences of greatest predicates by corresponding prefix predicates,\n  passing in `_k` as the prefix-length argument,\n\n* prepending `_k` to the (typically implicit) **decreases** clause of the greatest lemma,\n\n* replacing in the body of the greatest lemma every intra-cluster call\n  `M(args)` to a greatest lemma by a call `M#_k - 1` to the\n  corresponding prefix lemma, and then\n\n* making the body\u2019s execution conditional on `_k != 0`.\n\nNote that this rewriting removes all co-recursive calls of greatest lemmas,\nreplacing them with recursive calls to prefix lemmas. These recursive\ncalls are, as usual, checked to be terminating. We allow the pre-declared\nidentifier `_k` to appear in the original body of the\ngreatest lemma.[^fn-co-predicate-co-lemma-diffs]\n\n[^fn-co-predicate-co-lemma-diffs]: Note, two places where co-predicates\n    and co-lemmas are not analogous are (a) co-predicates must not make\n    recursive calls to their prefix predicates and (b) co-predicates cannot\n    mention `_k`.\n\nWe can now think of the body of the greatest lemma as being replaced by a\n**forall** call, for every _k_ , to the prefix lemma. By construction,\nthis new body will establish the greatest lemma\u2019s declared postcondition (on\naccount of the `D` axiom, and remembering that only the positive\ncontinuous occurrences of greatest predicates in the greatest lemma\u2019s postcondition\nare rewritten), so there is no reason for the program verifier to check\nit.\n\nThe actual desugaring of our greatest lemma `UpPosLemma` is in fact the\nprevious code for the `UpPosLemma` lemma except that `UpPosLemmaK` is\nnamed `UpPosLemma#` and modulo a minor syntactic difference in how the\n`k` argument is passed.\n\nIn the recursive call of the prefix lemma, there is a proof obligation\nthat the prefixlength argument `_k - 1` is a natural number.\nConveniently, this follows from the fact that the body has been wrapped\nin an `if _k != 0` statement. This also means that the postcondition must\nhold trivially when `_k == 0`, or else a postcondition violation will be\nreported. This is an appropriate design for our desugaring, because\ngreatest lemmas are expected to be used to establish greatest predicates, whose\ncorresponding prefix predicates hold trivially when `_k = 0`. (To prove\nother predicates, use an ordinary lemma, not a greatest lemma.)\n\nIt is interesting to compare the intuitive understanding of the\ncoinductive proof in using a greatest lemma with the inductive proof in using\na lemma. Whereas the inductive proof is performing proofs for deeper\nand deeper equalities, the greatest lemma can be understood as producing the\ninfinite proof on demand.", "start_char_idx": 2, "end_char_idx": 3545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e72301cc-d02b-4f74-8f24-d051461a1c5b": {"__data__": {"id_": "e72301cc-d02b-4f74-8f24-d051461a1c5b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f833de2f-6e4e-4d96-a776-e19304926723", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "be4e87024ca52013c5369d2aa9a2720b6a31d0f906ba656bc9a7c668fad97a44", "class_name": "RelatedNodeInfo"}}, "text": "5.14.3.7. Abstemious and voracious functions {sec-abstemious}\n\nSome functions on codatatypes are _abstemious_, meaning that they do not\nneed to unfold a datatype instance very far (perhaps just one destructor call) \nto prove a relevant property. Knowing this is the case can aid the proofs of\nproperties about the function. The attribute `{:abstemious}` can be applied to\na function definition to indicate this.\n\n_TODO: Say more about the effect of this attribute and when it should be applied\n(and likely, correct the paragraph above)._", "start_char_idx": 2, "end_char_idx": 539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f6427a2-514b-4280-95e3-b30ddc2ac6d6": {"__data__": {"id_": "9f6427a2-514b-4280-95e3-b30ddc2ac6d6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41fb3893-c4d9-433f-820f-f6a470cc7e03", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "90e6960392f51941e652fd87ad2bd640b5b3ae73f2267b8df9387d69dff5b993", "class_name": "RelatedNodeInfo"}}, "text": "6. Member declarations {sec-member-declaration}\n\nMembers are the various kinds of methods, the various kinds of functions, mutable fields,\nand constant fields. These are usually associated with classes, but they also may be\ndeclared (with limitations) in traits, newtypes and datatypes (but not in subset types or type synonyms).", "start_char_idx": 2, "end_char_idx": 331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6074be58-5aef-4152-9cfc-5f5009b24b81": {"__data__": {"id_": "6074be58-5aef-4152-9cfc-5f5009b24b81", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12750cd8-e4d6-4167-adf2-9967b5321d88", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4432d10d870d4f1bd1cc3d0cb40c5e6b102dd4b1a62c816b75f1ee6c74445a5b", "class_name": "RelatedNodeInfo"}}, "text": "6.1. Field Declarations (grammar) {sec-field-declaration}\n\nExamples:\n\n```dafny\nclass C {\n  var c: int  // no initialization\n  ghost var 123: bv10  // name may be a sequence of digits\n  var d: nat, e: real  // type is required\n}\n```\nA field declaration is not permitted in a value type nor as a member of a module\n(despite there being an implicit unnamed class).\n\nThe field name is either an\nidentifier (that is not allowed to start with a leading underscore) or\nsome digits. Digits are used if you want to number your fields, e.g. \"0\",\n\"1\", etc. The digits do not denote numbers but sequences of digits,\nso 0, 00, 0_0 are all different.\n\nA field x of some type T is declared as:\n\n```dafny\nvar x: T\n```\n\nA field declaration declares one or more fields of the enclosing class.\nEach field is a named part of the state of an object of that class. A\nfield declaration is similar to but distinct from a variable declaration\nstatement. Unlike for local variables and bound variables, the type is\nrequired and will not be inferred.\n\nUnlike method and function declarations, a field declaration\nis not permitted as a member of a module, even though there is an implicit class.\nFields can be declared in either an explicit\nclass or a trait. A class that inherits from multiple traits will\nhave all the fields declared in any of its parent traits.\n\nFields that are declared as `ghost` can only be used in specifications,\nnot in code that will be compiled into executable code.\n\nFields may not be declared static.", "start_char_idx": 2, "end_char_idx": 1503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a2434f2-8f23-4d53-9dbb-d00d35fd1849": {"__data__": {"id_": "5a2434f2-8f23-4d53-9dbb-d00d35fd1849", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e1c1ac6-4582-4532-b0b4-1639db44dac8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1d7411b77e19d2a9f1b05e9babf59468145117b2b6ca754237918c7f677c2a93", "class_name": "RelatedNodeInfo"}}, "text": "6.2. Constant Field Declarations (grammar) {sec-constant-field-declaration}\n\nExamples:\n\n```dafny\nconst c: int\nghost const d := 5\nclass A {\n  const e: bool\n  static const f: int\n}\n```\nA `const` declaration declares a name bound to a value,\nwhich value is fixed after initialization.\n\nThe declaration must either have a type or an initializing expression (or both).\nIf the type is omitted, it is inferred from the initializing expression.\n\n* A const declaration may include the `ghost`, `static`, and `opaque` modifiers, but no\nothers.\n* A const declaration may appear within a module or within any declaration\nthat may contain members (class, trait, datatype, newtype).\n* If it is in a module, it is implicitly `static`, and may not also be declared\n`static`.\n* If the declaration has an initializing expression that is a ghost\nexpression, then the ghost-ness of the declaration is inferred; the `ghost`\nmodifier may be omitted.\n* If the declaration includes the `opaque` modifier, then uses of the declared\nvariable know its name and type but not its value. The value can be made known for\nreasoning purposes by using the reveal statement.\n* The initialization expression may refer to other constant fields that are in scope and declared either\nbefore or after this declaration, but circular references are not allowed.", "start_char_idx": 2, "end_char_idx": 1321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5aef22fb-7eda-46d7-aeec-a0c305a9f884": {"__data__": {"id_": "5aef22fb-7eda-46d7-aeec-a0c305a9f884", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d4dff0a-6763-4028-9f56-bf44275347bb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a1b14a41d4368df14cf71085be163b55f4431d6e07d9128950b6180c79f5d399", "class_name": "RelatedNodeInfo"}}, "text": "6.3. Method Declarations (grammar) {sec-method-declaration}\n\nExamples:\n\n```dafny\nmethod m(i: int) requires i > 0 {}\nmethod p() returns (r: int) { r := 0; }\nmethod q() returns (r: int, s: int, t: nat) ensures r < s < t { r := 0; s := 1; t := 2; }\nghost method g() {}\nclass A {\n  method f() {}\n  constructor Init() {}\n  static method g(t: T) {}\n}\nlemma L(p: bool) ensures p || !p {}\ntwostate lemma TL(p: bool) ensures p || !p {}\nleast lemma LLnat ensures p || !p {}\ngreatest lemma GL(p: bool) ensures p || !p {}\nabstract module M { method m(i: int) }\nmodule N refines M { method m ... {} }\n```\n\nMethod declarations include a variety of related types of methods:\n- method\n- constructor\n- lemma\n- twostate lemma\n- least lemma\n- greatest lemma\n\nA method signature specifies the method generic parameters,\ninput parameters and return parameters.\nThe formal parameters are not allowed to have `ghost` specified\nif `ghost` was already specified for the method.\nWithin the body of a method, formal (input) parameters are immutable, that is, \nthey may not be assigned to, though their array elements or fields may be\nassigned, if otherwise permitted.\nThe out-parameters are mutable and must be assigned in the body of the method.\n\nAn ``ellipsis`` is used when a method or function is being redeclared\nin a module that refines another module. (cf. Section 10)\nIn that case the signature is\ncopied from the module that is being refined. This works because\nDafny does not support method or function overloading, so the\nname of the class method uniquely identifies it without the\nsignature.\n\nSee Section 7.2 for a description of the method specification.\n\nHere is an example of a method declaration.\n\n\n```dafny\nmethod {:att1}{:att2} M(a: A, b: B, c: C)\n                                        returns (x: X, y: Y, z: Z)\n  requires Pre\n  modifies Frame\n  ensures Post\n  decreases Rank\n{\n  Body\n}\n```\n\nwhere `:att1` and `:att2` are attributes of the method,\n`T1` and `T2` are type parameters of the method (if generic),\n`a, b, c` are the method\u2019s in-parameters, `x, y, z` are the\nmethod\u2019s out-parameters, `Pre` is a boolean expression denoting the\nmethod\u2019s precondition, `Frame` denotes a set of objects whose fields may\nbe updated by the method, `Post` is a boolean expression denoting the\nmethod\u2019s postcondition, `Rank` is the method\u2019s variant function, and\n`Body` is a list of statements that implements the method. `Frame` can be a list\nof expressions, each of which is a set of objects or a single object, the\nlatter standing for the singleton set consisting of that one object. The\nmethod\u2019s frame is the union of these sets, plus the set of objects\nallocated by the method body. For example, if `c` and `d` are parameters\nof a class type `C`, then\n\n\n```dafny\nmodifies {c, d}\nmodifies {c} + {d}\nmodifies c, {d}\nmodifies c, d\n```\n\nall mean the same thing.\n\nIf the method is an _extreme lemma_ ( a `least` or `greatest` lemma), then the \nmethod signature may also state the type of the _k_ parameter as either `nat` or `ORDINAL`.\nThese are described\nin Section 12.5.3 and subsequent sections.", "start_char_idx": 2, "end_char_idx": 3081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eea21cff-a29e-4eca-93fe-1032b57f2d4c": {"__data__": {"id_": "eea21cff-a29e-4eca-93fe-1032b57f2d4c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fecdbd81-8f7e-42f1-ae6d-a5eaef0fbc1a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a42f02c8795d3acfe4fdd09f7ac2157a2078df5e65c0c7547b0d2ca839be5029", "class_name": "RelatedNodeInfo"}}, "text": "6.3.1. Ordinary methods\n\nA method can be declared as ghost by preceding the declaration with the\nkeyword `ghost` and as static by preceding the declaration with the keyword `static`.\nThe default is non-static (i.e., instance) for methods declared in a type and non-ghost.\nAn instance method has an implicit receiver parameter, `this`.\nA static method M in a class C can be invoked by `C.M(\u2026)`.\n\nAn ordinary method is declared with the `method` keyword;\nthe section about constructors explains methods that instead use the\n`constructor` keyword; the section about lemmas discusses methods that are\ndeclared with the `lemma` keyword. Methods declared with the\n`least lemma` or `greatest lemma` keyword phrases\nare discussed later in the context of extreme\npredicates (see the section about greatest lemmas).\n\nA method without a body is _abstract_. A method is allowed to be\nabstract under the following circumstances:\n\n* It contains an `{:axiom}` attribute\n* It contains an `{:extern}` attribute (in this case, to be runnable, the method must have a body in non-Dafny compiled code in the target language.)\n* It is a declaration in an abstract module.\nNote that when there is no body, Dafny assumes that the *ensures*\nclauses are true without proof.", "start_char_idx": 2, "end_char_idx": 1249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b015159f-6cc0-4976-91b4-5fa0f867ad1f": {"__data__": {"id_": "b015159f-6cc0-4976-91b4-5fa0f867ad1f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "510f4254-fbbf-4c4a-aed5-5088a5f6ccf4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e04ac8c90edd34f11bd4babaf4bf85fb89e4f8c05f3d4d855aa283e3b90c0f84", "class_name": "RelatedNodeInfo"}}, "text": "6.3.2. Constructors {sec-constructor-methods}\nTo write structured object-oriented programs, one often relies on\nobjects being constructed only in certain ways.  For this purpose, Dafny\nprovides _constructor (method)s_.\nA constructor is declared with the keyword\n`constructor` instead of `method`; constructors are permitted only in classes.\nA constructor is allowed to be declared as `ghost`, in which case it\ncan only be used in ghost contexts.\n\nA constructor can only be called at the time an object is allocated (see\nobject-creation examples below). Moreover, when a class contains a\nconstructor, every call to `new` for a class must be accompanied\nby a call to one of its constructors. A class may\ndeclare no constructors or one or more constructors.\n\nIn general, a constructor is responsible for initializating the \ninstance fields of its class. However, any field that is given an\ninitializer in its declaration may not be reassigned in the body\nof the constructor.", "start_char_idx": 2, "end_char_idx": 973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "626abff2-5deb-42e2-aeea-55e35f21557e": {"__data__": {"id_": "626abff2-5deb-42e2-aeea-55e35f21557e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "981dd2e9-6eb2-4dd4-aedd-00f441c2952d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b9ec20db76504fd16f986b322556da0300321ce91c3582eafab9534c090aa4e1", "class_name": "RelatedNodeInfo"}}, "text": "6.3.2.1. Classes with no explicit constructors\n\nFor a class that declares no constructors, an instance of the class is\ncreated with\n\n```dafny\nc := new C;\n```\nThis allocates an object and initializes its fields to values of their\nrespective types (and initializes each `const` field with a RHS to its specified\nvalue). The RHS of a `const` field may depend on other `const` or `var` fields,\nbut circular dependencies are not allowed.\n\nThis simple form of `new` is allowed only if the class declares no constructors,\nwhich is not possible to determine in every scope.\nIt is easy to determine whether or not a class declares any constructors if the\nclass is declared in the same module that performs the `new`. If the class is\ndeclared in a different module and that module exports a constructor, then it is\nalso clear that the class has a constructor (and thus this simple form of `new`\ncannot be used). (Note that an export set that `reveals` a class `C` also exports\nthe anonymous constructor of `C`, if any.)\nBut if the module that declares `C` does not export any constructors\nfor `C`, then callers outside the module do not know whether or not `C` has a\nconstructor. Therefore, this simple form of `new` is allowed only for classes that\nare declared in the same module as the use of `new`.\n\nThe simple `new C` is allowed in ghost contexts. Also, unlike the forms of `new`\nthat call a constructor or initialization method, it can be used in a simultaneous\nassignment; for example\n\n```dafny\nc, d, e := new C, new C, 15;\n```\nis legal.\n\nAs a shorthand for writing\n\n```dafny\nc := new C;\nc.Init(args);\n```\nwhere `Init` is an initialization method (see the top of the section about class types),\none can write\n\n```dafny\nc := new C.Init(args);\n```\nbut it is more typical in such a case to declare a constructor for the class.\n\n(The syntactic support for initialization methods is provided for historical\nreasons. It may be deprecated in some future version of Dafny. In most cases,\na constructor is to be preferred.)", "start_char_idx": 2, "end_char_idx": 2013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48c36fe9-f201-4b7e-b028-bd2387f744d8": {"__data__": {"id_": "48c36fe9-f201-4b7e-b028-bd2387f744d8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17e85e88-e19b-4187-a8b2-90878abd6755", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d3ba47b9c71803768945d60131ec0d443836008cceffc1129d89931738fe3935", "class_name": "RelatedNodeInfo"}}, "text": "6.3.2.2. Classes with one or more constructors\n\nLike other class members, constructors have names. And like other members,\ntheir names must be distinct, even if their signatures are different.\nBeing able to name constructors promotes names like `InitFromList` or\n`InitFromSet` (or just `FromList` and `FromSet`).\nUnlike other members, one constructor is allowed to be _anonymous_;\nin other words, an _anonymous constructor_ is a constructor whose name is\nessentially the empty string.  For example:\n\n```dafny\nclass Item {\n  constructor I(xy: int) // ...\n  constructor (x: int, y: int)\n  // ...\n}\n```\nThe named constructor is invoked as\n\n```dafny\n  i := new Item.I(42);\n```\nThe anonymous constructor is invoked as\n\n```dafny\n  m := new Item(45, 29);\n```\ndropping the \"`.`\".", "start_char_idx": 2, "end_char_idx": 773, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5594af42-aa71-428f-bf41-c447375f8027": {"__data__": {"id_": "5594af42-aa71-428f-bf41-c447375f8027", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60d57dc1-204f-4d4c-b2ba-2453c93efdcf", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7803a2990f12944a1c210aad306149fc3304be558649440ae1e43697599ced59", "class_name": "RelatedNodeInfo"}}, "text": "6.3.2.3. Two-phase constructors\n\nThe body of a constructor contains two sections,\nan initialization phase and a post-initialization phase, separated by a `new;` statement.\nIf there is no `new;` statement, the entire body is the initialization phase.\nThe initialization phase is intended to initialize field variables\nthat were not given values in their declaration; it may not reassign\nto fields that do have initializers in their declarations.\nIn this phase, uses of the object reference `this` are restricted;\na program may use `this`\n\n - as the receiver on the LHS,\n - as the entire RHS of an assignment to a field of `this`,\n - and as a member of a set on the RHS that is being assigned to a field of `this`.\n\nA `const` field with a RHS is not allowed to be assigned anywhere else.\nA `const` field without a RHS may be assigned only in constructors, and more precisely\nonly in the initialization phase of constructors. During this phase, a `const` field\nmay be assigned more than once; whatever value the `const` field has at the end of the\ninitialization phase is the value it will have forever thereafter.\n\nFor a constructor declared as `ghost`, the initialization phase is allowed to assign\nboth ghost and non-ghost fields. For such an object, values of non-ghost fields at\nthe end of the initialization phase are in effect no longer changeable.\n\nThere are no restrictions on expressions or statements in the post-initialization phase.", "start_char_idx": 2, "end_char_idx": 1444, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99640b03-58ae-4773-868d-9ea2b2a0b17e": {"__data__": {"id_": "99640b03-58ae-4773-868d-9ea2b2a0b17e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c313b74-b012-4f41-8b1f-a0ff6685f1b5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b68967d1ba91b14be3159b1e55fff9e9fa7cc79686a158b8a5c99dfdd52b734b", "class_name": "RelatedNodeInfo"}}, "text": "6.3.3. Lemmas {sec-lemmas}\nSometimes there are steps of logic required to prove a program correct,\nbut they are too complex for Dafny to discover and use on its own. When\nthis happens, we can often give Dafny assistance by providing a lemma.\nThis is done by declaring a method with the `lemma` keyword.\nLemmas are implicitly ghost methods and the `ghost` keyword cannot\nbe applied to them.\n\nSyntactically, lemmas can be placed where ghost methods can be placed, but they serve \na significantly different function. First of all, a lemma is forbidden to have \n`modifies` clause: it may not change anything about even the ghost state; ghost methods\nmay have `modifies` clauses and may change ghost (but not non-ghost) state. \nFurthermore, a lemma is not allowed to allocate any new objects.\nAnd a lemma may be used in the program text in places where ghost methods may not,\nsuch as within expressions (cf. Section 21.1).\n\nLemmas may, but typically do not, have out-parameters.\n\nIn summary, a lemma states a logical fact, summarizing an inference that the verifier\ncannot do on its own. Explicitly \"calling\" a lemma in the program text tells the verifier\nto use that fact at that location with the actual arguments substituted for the \nformal parameters. The lemma is proved separately for all cases of its formal parameters\nthat satisfy the preconditions of the lemma. \n\nFor an example, see the `FibProperty` lemma in\nSection 12.5.2.\n\nSee the Dafny Lemmas tutorial\nfor more examples and hints for using lemmas.", "start_char_idx": 2, "end_char_idx": 1509, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc8615f2-fb57-4524-a217-8952f81f11cc": {"__data__": {"id_": "cc8615f2-fb57-4524-a217-8952f81f11cc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de49d5c7-ef37-4732-b126-5c3172f7714b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0e6a4f02ad1e8badf378f2e50fcc5b49cf0f5e21ebc7703540ac2d04a82571c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ac284cc-42fd-4035-923b-e628bfa1552f", "node_type": "1", "metadata": {}, "hash": "09eed83b01ecf699a684e5c2892b75964ad50bf5c29303df66e9b92c0f9af11e", "class_name": "RelatedNodeInfo"}}, "text": "6.3.4. Two-state lemmas and functions {sec-two-state}\n\nThe heap is an implicit parameter to every function, though a function is only allowed\nto read those parts of the mutable heap that it admits to in its `reads` clause.\nSometimes, it is useful for a function to take two heap parameters, for example, so\nthe function can return the difference between the value of a field in the two heaps.\nSuch a _two-state function_ is declared by `twostate function` (or `twostate predicate`,\nwhich is the same as a `twostate function` that returns a `bool`). A two-state function\nis always ghost. It is appropriate to think of these two implicit heap parameters as\nrepresenting a \"current\" heap and an \"old\" heap.\n\nFor example, the predicate\n\n```dafny\nclass Cell { var data: int  constructor(i: int) { data := i; } }\ntwostate predicate Increasing(c: Cell)\n  reads c\n{\n  old(c.data) <= c.data\n}\n```\nreturns `true` if the value of `c.data` has not been reduced from the old state to the\ncurrent. Dereferences in the current heap are written as usual (e.g., `c.data`) and\nmust, as usual, be accounted for in the function's `reads` clause. Dereferences in the\nold heap are enclosed by `old` (e.g., `old(c.data)`), just like when one dereferences\na  method's initial heap. The function is allowed to read anything in the old heap;\nthe `reads` clause only declares dependencies on locations in the current heap.\nConsequently, the frame axiom for a two-state function is sensitive to any change\nin the old-heap parameter; in other words, the frame axiom says nothing about two\ninvocations of the two-state function with different old-heap parameters.\n\nAt a call site, the two-state function's current-heap parameter is always passed in\nas the caller's current heap. The two-state function's old-heap parameter is by\ndefault passed in as the caller's old heap (that is, the initial heap if the caller\nis a method and the old heap if the caller is a two-state function). While there is\nnever a choice in which heap gets passed as the current heap, the caller can use\nany preceding heap as the argument to the two-state function's old-heap parameter.\nThis is done by labeling a state in the caller and passing in the label, just like\nthis is done with the built-in `old` function.\n\nFor example, the following assertions all hold:\n\n```dafny\nmethod Caller(c: Cell)\n  modifies c\n{\n  c.data := c.data + 10;\n  label L:\n  assert Increasing(c);\n  c.data := c.data - 2;\n  assert Increasing(c);\n  assert !Increasing@L(c);\n}\n```\nThe first call to `Increasing` uses `Caller`'s initial state as the old-heap parameter,\nand so does the second call. The third call instead uses as the old-heap parameter\nthe heap at label `L`, which is why the third call returns `false`.\nAs shown in the example, an explicitly given old-heap parameter is given after\nan `@`-sign (which follows the name of the function and any explicitly given type\nparameters) and before the open parenthesis (after which the ordinary parameters are\ngiven).\n\nA two-state function is allowed to be called only from a two-state context, which\nmeans a method, a two-state lemma (see below), or another two-state function.\nJust like a label used with an `old` expression, any label used in a call to a\ntwo-state function must denote a program point that _dominates_ the call. This means\nthat any control leading to the call must necessarily have passed through the labeled\nprogram point.\n\nAny parameter (including the receiver parameter, if any) passed to a two-state function\nmust have been allocated already in the old state.", "start_char_idx": 2, "end_char_idx": 3559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ac284cc-42fd-4035-923b-e628bfa1552f": {"__data__": {"id_": "9ac284cc-42fd-4035-923b-e628bfa1552f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de49d5c7-ef37-4732-b126-5c3172f7714b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0e6a4f02ad1e8badf378f2e50fcc5b49cf0f5e21ebc7703540ac2d04a82571c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc8615f2-fb57-4524-a217-8952f81f11cc", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9c95fcf044e2df88890ad8afd1bfdb8bb7aa825cea63bb1c8fc1cd992c0a0e32", "class_name": "RelatedNodeInfo"}}, "text": "As shown in the example, an explicitly given old-heap parameter is given after\nan `@`-sign (which follows the name of the function and any explicitly given type\nparameters) and before the open parenthesis (after which the ordinary parameters are\ngiven).\n\nA two-state function is allowed to be called only from a two-state context, which\nmeans a method, a two-state lemma (see below), or another two-state function.\nJust like a label used with an `old` expression, any label used in a call to a\ntwo-state function must denote a program point that _dominates_ the call. This means\nthat any control leading to the call must necessarily have passed through the labeled\nprogram point.\n\nAny parameter (including the receiver parameter, if any) passed to a two-state function\nmust have been allocated already in the old state. For example, the second call to\n`Diff` in method `M` is illegal, since `d` was not allocated on entry to `M`:\n\n```dafny\ntwostate function Diff(c: Cell, d: Cell): int\n  reads d\n{\n  d.data - old(c.data)\n}\n\nmethod M(c: Cell) {\n  var d := new Cell(10);\n  label L:\n  ghost var x := Diff@L(c, d);\n  ghost var y := Diff(c, d); // error: d is not allocated in old state\n}\n```\n\nA two-state function may declare that it only assumes a parameter to be allocated\nin the current heap. This is done by preceding the parameter with the `new` modifier,\nas illustrated in the following example, where the first call to `DiffAgain` is legal:\n\n```dafny\ntwostate function DiffAgain(c: Cell, new d: Cell): int\n  reads d\n{\n  d.data - old(c.data)\n}\n\nmethod P(c: Cell) {\n  var d := new Cell(10);\n  ghost var x := DiffAgain(c, d);\n  ghost var y := DiffAgain(d, c); // error: d is not allocated in old state\n}\n```\n\nA _two-state lemma_ works in an analogous way. It is a lemma with both a current-heap\nparameter and an old-heap parameter, it can use `old` expressions in its\nspecification (including in the precondition) and body, its parameters may\nuse the `new` modifier, and the old-heap parameter is by default passed in as\nthe caller's old heap, which can be changed by using an `@`-parameter.\n\nHere is an example of something useful that can be done with a two-state lemma:\n\n```dafny\nfunction SeqSum(s: seq): int\n  reads s\n{\n  if s == [] then 0 else s[0].data + SeqSum(s[1..])\n}\n\ntwostate lemma IncSumDiff(s: seq)\n  requires forall c :: c in s ==> Increasing(c)\n  ensures old(SeqSum(s)) <= SeqSum(s)\n{\n  if s == [] {\n  } else {\n    calc {\n      old(SeqSum(s));\n    ==  // def. SeqSum\n      old(s[0].data + SeqSum(s[1..]));\n    ==  // distribute old\n      old(s[0].data) + old(SeqSum(s[1..]));\n    <=  { assert Increasing(s[0]); }\n      s[0].data + old(SeqSum(s[1..]));\n    <=  { IncSumDiff(s[1..]); }\n      s[0].data + SeqSum(s[1..]);\n    ==  // def. SeqSum\n      SeqSum(s);\n    }\n  }\n}\n```\n\nA two-state function can be used as a first-class function value, where the receiver\n(if any), type parameters (if any), and old-heap parameter are determined at the\ntime the first-class value is mentioned. While the receiver and type parameters can\nbe explicitly instantiated in such a use (for example, `p.F` for a two-state\ninstance function `F` that takes one type parameter), there is currently no syntactic\nsupport for giving the old-heap parameter explicitly. A caller can work\naround this restriction by using (fancy-word alert!) eta-expansion, meaning\nwrapping a lambda expression around the call, as in `x => p.F@L(x)`.\nThe following example illustrates using such an eta-expansion:\n\n```dafny\nclass P {\n  twostate function F(x: X): X\n}\n\nmethod EtaExample(p: P) returns (ghost f: int -> int) {\n  label L:\n  f := x => p.F@L(x);\n}\n```", "start_char_idx": 2740, "end_char_idx": 6372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c30ab9f8-217b-4a85-8c39-5f02387076e3": {"__data__": {"id_": "c30ab9f8-217b-4a85-8c39-5f02387076e3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01190e89-46dc-4721-ad43-8d2d7e45dad7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d90362f94370e90242d8b5155d3b61263eaded5f24dcf1f93c39019aad0542ac", "class_name": "RelatedNodeInfo"}}, "text": "6.4. Function Declarations (grammar) {sec-function-declaration}", "start_char_idx": 2, "end_char_idx": 65, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "715035a2-2a4e-43b1-b0d2-dfb1fd8aa3eb": {"__data__": {"id_": "715035a2-2a4e-43b1-b0d2-dfb1fd8aa3eb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8f7a97d-9fa6-4e03-b5a9-94975571a554", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "20e30caa587fe7fcf8e45145af1fc1d88da16ba62d1fd6a0ce62cd63a205ead5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a0d367a-691a-4f5e-8a00-1956dde92de8", "node_type": "1", "metadata": {}, "hash": "9ad55230660036b0b1bf79b390265b294c1de1ef2c140db3ba995aae088c3f12", "class_name": "RelatedNodeInfo"}}, "text": "6.4.1. Functions\n\nExamples:\n\n```dafny\nfunction f(i: int): real { i as real }\nfunction g(): (int, int) { (2,3) }\nfunction h(i: int, k: int): int requires i >= 0 { if i == 0 then 0 else 1 }\n```\n\nFunctions may be declared as ghost. If so, all the formal parameters and\nreturn values are ghost; if it is not a ghost function, then \nindividual parameters may be declared ghost as desired.\n\nSee Section 7.3 for a description of the function specification.\nA Dafny function is a pure mathematical function. It is allowed to\nread memory that was specified in its `reads` expression but is not\nallowed to have any side effects.\n\nHere is an example function declaration:\n\n```dafny\nfunction {:att1}{:att2} F(a: A, b: B, c: C): T\n  requires Pre\n  reads Frame\n  ensures Post\n  decreases Rank\n{\n  Body\n}\n```\n\nwhere `:att1` and `:att2` are attributes of the function, if any, `T1`\nand `T2` are type parameters of the function (if generic), `a, b, c` are\nthe function\u2019s parameters, `T` is the type of the function\u2019s result,\n`Pre` is a boolean expression denoting the function\u2019s precondition,\n`Frame` denotes a set of objects whose fields the function body may\ndepend on, `Post` is a boolean expression denoting the function\u2019s\npostcondition, `Rank` is the function\u2019s variant function, and `Body` is\nan expression that defines the function's return value. The precondition\nallows a function to be partial, that is, the precondition says when the\nfunction is defined (and Dafny will verify that every use of the function\nmeets the precondition).\n\nThe postcondition is usually not needed, since\nthe body of the function gives the full definition. However, the\npostcondition can be a convenient place to declare properties of the\nfunction that may require an inductive proof to establish, such as when\nthe function is recursive. For example:\n\n\n```dafny\nfunction Factorial(n: int): int\n  requires 0 <= n\n  ensures 1 <= Factorial(n)\n{\n  if n == 0 then 1 else Factorial(n-1) * n\n}\n```\n\nsays that the result of Factorial is always positive, which Dafny\nverifies inductively from the function body.\n\nWithin a postcondition, the result of the function is designated by\na call of the function, such as `Factorial(n)` in the example above.\nAlternatively, a name for the function result can be given in the signature,\nas in the following rewrite of the example above.", "start_char_idx": 2, "end_char_idx": 2339, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a0d367a-691a-4f5e-8a00-1956dde92de8": {"__data__": {"id_": "2a0d367a-691a-4f5e-8a00-1956dde92de8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8f7a97d-9fa6-4e03-b5a9-94975571a554", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "20e30caa587fe7fcf8e45145af1fc1d88da16ba62d1fd6a0ce62cd63a205ead5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "715035a2-2a4e-43b1-b0d2-dfb1fd8aa3eb", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2d150941b807f38ca4b5c7010eea85273ef1df73a8ed0041a2525efd05d885c5", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nfunction Factorial(n: int): int\n  requires 0 <= n\n  ensures 1 <= Factorial(n)\n{\n  if n == 0 then 1 else Factorial(n-1) * n\n}\n```\n\nsays that the result of Factorial is always positive, which Dafny\nverifies inductively from the function body.\n\nWithin a postcondition, the result of the function is designated by\na call of the function, such as `Factorial(n)` in the example above.\nAlternatively, a name for the function result can be given in the signature,\nas in the following rewrite of the example above.\n\n\n```dafny\nfunction Factorial(n: int): (f: int)\n  requires 0 <= n\n  ensures 1 <= f\n{\n  if n == 0 then 1 else Factorial(n-1) * n\n}\n```\n\nPre v4.0, a function is `ghost` by default, and cannot be called from non-ghost\ncode. To make it non-ghost, replace the keyword `function` with the two\nkeywords \"`function method`\". From v4.0 on, a function is non-ghost by\ndefault. To make it ghost, replace the keyword `function` with the two keywords \"`ghost function`\".\n(See the --function-syntax option for a description \nof the migration path for this change in behavior.}\n\nBy default, the body of a function is transparent to its users, but\nsometimes it is useful to hide it. Functions (including predicates, function-by-methods, two-state functions, and extreme predicates) may be\ndeclared opaque using either the `opaque` keyword, or using the `--default-function-opacity` argument. If a function `foo` or `bar` is opaque, then Dafny hides the body of the function,\nso that it can only be seen within its recursive clique (if any),\nor if the programmer specifically asks to see it via the statement `reveal foo(), bar();`.\n\nIn that case, only the signature and specification of the method\nis known at its points of use, not its body. The body can be _revealed_ for reasoning\npurposes using the reveal statment.\n\nLike methods, functions can be either _instance_ (which they are by default when declared within a type) or\n_static_ (when the function declaration contains the keyword `static` or is declared in a module).\nAn instance function, but not a static function, has an implicit receiver parameter, `this`.  \nA static function `F` in a class `C` can be invoked\nby `C.F(\u2026)`. This provides a convenient way to declare a number of helper\nfunctions in a separate class.\n\nAs for methods, a ``...`` is used when declaring\na function in a module refinement (cf. Section 10).\n For example, if module `M0` declares\nfunction `F`, a module `M1` can be declared to refine `M0` and\n`M1` can then refine `F`. The refinement function, `M1.F` can have\na ``...`` which means to copy the signature from\n`M0.F`. A refinement function can furnish a body for a function\n(if `M0.F` does not provide one). It can also add `ensures`\nclauses.\n\nIf a function definition does not have a body, the program that contains it may still be verified.\nThe function itself has nothing to verify.\nHowever, any calls of a body-less function are treated as unverified assumptions by the caller,\nasserting the preconditions and assuming the postconditions.\nBecause body-less functions are unverified assumptions, Dafny will not compile them and will complain if called by `dafny translate`, `dafny build` or even `dafny run`", "start_char_idx": 1825, "end_char_idx": 5023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5990780-37f8-47a9-a7ff-bf4c9fe868c9": {"__data__": {"id_": "f5990780-37f8-47a9-a7ff-bf4c9fe868c9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e755e4e5-0568-4484-8118-b6392f1278aa", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a6c43e9a1c2ab101515bec54e4711d2369e11f6701d15721aa483ddefb2fbafe", "class_name": "RelatedNodeInfo"}}, "text": "6.4.2. Predicates\nA function that returns a `bool` result is called a _predicate_. As an\nalternative syntax, a predicate can be declared by replacing the `function`\nkeyword with the `predicate` keyword and possibly omitting a declaration of the\nreturn type (if it is not named).", "start_char_idx": 2, "end_char_idx": 280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e3cddf6-7be1-4f75-8799-412b446831e8": {"__data__": {"id_": "7e3cddf6-7be1-4f75-8799-412b446831e8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80bf8ab2-d4b5-44dd-8f16-e7db6f201947", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "dc44f0c38e5ba3c67423169cc53be14115e161d7be35863cc9d7e5ba1f3408fd", "class_name": "RelatedNodeInfo"}}, "text": "6.4.3. Function-by-method {sec-function-by-method}\n\nA function with a `by method` clause declares a _function-by-method_.\nA function-by-method gives a way to implement a\n(deterministic, side-effect free) function by a method (whose body may be\nnondeterministic and may allocate objects that it modifies). This can\nbe useful if the best implementation uses nondeterminism (for example,\nbecause it uses `:|` in a nondeterministic way) in a way that does not\naffect the result, or if the implementation temporarily makes use of some\nmutable data structures, or if the implementation is done with a loop.\nFor example, here is the standard definition of the Fibonacci function\nbut with an efficient implementation that uses a loop:\n\n\n```dafny\nfunction Fib(n: nat): nat {\n  if n < 2 then n else Fib(n - 2) + Fib(n - 1)\n} by method {\n  var x, y := 0, 1;\n  for i := 0 to n\n    invariant x == Fib(i) && y == Fib(i + 1)\n  {\n    x, y := y, x + y;\n  }\n  return x;\n}\n```\n\nThe `by method` clause is allowed only for non-ghost `function` or `predicate`\ndeclarations (without `twostate`, `least`, and `greatest`, but\npossibly with `static`); it inherits the in-parameters, attributes, and `requires` and `decreases`\nclauses of the function. The method also gets one out-parameter, corresponding\nto the function's result value (and the name of it, if present). Finally,\nthe method gets an empty `modifies` clause and a postcondition\n`ensures r == F(args)`, where `r` is the name of the out-parameter and\n`F(args)` is the function with its arguments. In other words, the method\nbody must compute and return exactly what the function says, and must\ndo so without modifying any previously existing heap state.\n\nThe function body of a function-by-method is allowed to be ghost, but the\nmethod body must be compilable. In non-ghost contexts, the compiler turns a\ncall of the function-by-method into a call that leads to the method body.\n\nNote, the method body of a function-by-method may contain `print` statements.\nThis means that the run-time evaluation of an expression may have print effects.\nIf `--track-print-effects` is enabled, this use of print in a function context\nwill be disallowed.", "start_char_idx": 2, "end_char_idx": 2175, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86edd3e0-d62d-4d0e-8499-c4302a6a3f8f": {"__data__": {"id_": "86edd3e0-d62d-4d0e-8499-c4302a6a3f8f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9afedf62-17ee-4c31-9fda-4c8ba703245b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8564d05354df61d85e8da5afe43f6b9198e46b45d4a9caa9e9555fd0fe93fac4", "class_name": "RelatedNodeInfo"}}, "text": "6.4.4. Function Transparency {sec-opaque}\nA function is said to be _transparent_ in a location if the\nbody of the function is visible at that point.\nA function is said to be _opaque_ at a location if it is not\ntransparent. However the specification of a function\nis always available.\n\nA function is usually transparent up to some unrolling level (up to\n1, or maybe 2 or 3). If its arguments are all literals it is\ntransparent all the way.\n\nThe default transparency of a function can be set with the `--default-function-opacity` commandline flag. By default, the `--default-function-opacity` is transparent.\nThe transparency of a function is also affected by\nwhether the function was declared with an `opaque` modifier or `transparent` attribute,\nthe (reveal statement),\nand whether it was `reveal`ed in an export set.\n\nInside the module where the function is declared:\n  - If `--default-function-opacity` is set to `transparent` (default), then:\n     - if there is no `opaque` modifier, the function is transparent.\n     - if there is an `opaque` modifier, then the function is opaque. If the function is mentioned in a `reveal` statement, then\n     its body is available starting at that `reveal` statement.\n\n  - If `--default-function-opacity` is set to `opaque`, then:\n    - if there is no `{:transparent}` attribute, the function is opaque. If the function is mentioned in a `reveal` statement, then the body of the function is available starting at that `reveal` statement.\n    - if there is a `{:transparent}` attribute, then the function is transparent.\n\n  - If `--default-function-opacity` is set to `autoRevealDependencies`, then:\n    - if there is no `{:transparent}` attribute, the function is opaque. However, the body of the function is available inside any callable that depends on this function via an implicitly inserted `reveal` statement, unless the callable has the `{autoRevealDependencies k}` attribute for some natural number `k` which is too low.\n    - if there is a `{:transparent}` attribute, then the function is transparent.\n\n\nOutside the module where the function is declared, the function is\n  visible only if it was listed in the export set by which the contents\n  of its module was imported. In that case, if the function was exported\n  with `reveals`, the rules are the same within the importing module as when the function is used inside\n  its declaring module. If the function is exported only with `provides` it is\n  always opaque and is not permitted to be used in a reveal statement.\n\nMore information about the Boogie implementation of opaquenes is here.", "start_char_idx": 2, "end_char_idx": 2594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25741ada-a801-4a5b-b64d-754a9659cd51": {"__data__": {"id_": "25741ada-a801-4a5b-b64d-754a9659cd51", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "205b8b09-b60e-4046-8984-392328c916d5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f55fa421035a20e328e84eebc1b5247347a13c0303aa7e83b8aadc9e1ff3d4e3", "class_name": "RelatedNodeInfo"}}, "text": "6.4.5. Extreme (Least or Greatest) Predicates and Lemmas\nSee Section 12.5.3 for descriptions\nof extreme predicates and lemmas.", "start_char_idx": 2, "end_char_idx": 128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a13dab4-ccad-42af-9286-80fe897c7994": {"__data__": {"id_": "0a13dab4-ccad-42af-9286-80fe897c7994", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8503426835fa9e8d0a4ec713a475601447ca6ff59179478c590deecc8031442d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "922990f0-a2e8-4f7d-805b-b74f8f81cf94", "node_type": "1", "metadata": {}, "hash": "549609cc43dfd3a9f5899d0b12d4d5ce6aeba89b864435a1c05d3435cc67e2fd", "class_name": "RelatedNodeInfo"}}, "text": "6.4.6. `older` parameters in predicates {sec-older-parameters}\n\nA parameter of any predicate (more precisely, of any\nboolean-returning, non-extreme function) can be marked as\n`older`. This specifies that the truth of the predicate implies that\nthe allocatedness of the parameter follows from the allocatedness of\nthe non-`older` parameters.\n\nTo understand what this means and why this attribute is useful,\nconsider the following example, which specifies reachability between\nnodes in a directed graph. A `Node` is declared to have any number of\nchildren:\n\n\n```dafny\nclass Node {\n  var children: seq\n}\n```\n\nThere are several ways one could specify reachability between\nnodes. One way (which is used in `Test/dafny1/SchorrWaite.dfy` in the\nDafny test suite) is to define a type `Path`, representing lists of\n`Node`s, and to define a predicate that checks if a given list of\n`Node`s is indeed a path between two given nodes:\n\n\n```dafny\ndatatype Path = Empty | Extend(Path, Node)\n\npredicate ReachableVia(source: Node, p: Path, sink: Node, S: set)\n  reads S\n  decreases p\n{\n  match p\n  case Empty =>\n    source == sink\n  case Extend(prefix, n) =>\n    n in S && sink in n.children && ReachableVia(source, prefix, n, S)\n}\n```\n\nIn a nutshell, the definition of `ReachableVia` says\n\n* An empty path lets `source` reach `sink` just when\n  `source` and `sink` are the same node.\n* A path `Extend(prefix, n)` lets `source` reach `sink` just when\n  the path `prefix` lets `source` reach `n` and `sink` is one of\n  the children nodes of `n`.\n\nTo be admissible by Dafny, the recursive predicate must be shown to\nterminate. Termination is assured by the specification `decreases p`,\nsince every such datatype value has a finite structure and every\nrecursive call passes in a path that is structurally included in the\nprevious. Predicate `ReachableVia` must also declare (an upper bound\non) which heap objects it depends on. For this purpose, the\npredicate takes an additional parameter `S`, which is used to limit\nthe set of intermediate nodes in the path. More precisely, predicate\n`ReachableVia(source, p, sink, S)` returns `true` if and only if `p`\nis a list of nodes in `S` and `source` can reach `sink` via `p`.\n\nUsing predicate `ReachableVia`, we can now define reachability in `S`:\n\n\n```dafny\npredicate Reachable(source: Node, sink: Node, S: set)\n  reads S\n{\n  exists p :: ReachableVia(source, p, sink, S)\n}\n```\n\nThis looks like a good definition of reachability, but Dafny won't\nadmit it. The reason is twofold:\n\n* Quantifiers and comprehensions are allowed to range only over\n  allocated state. Ater all, Dafny is a type-safe language where every\n  object reference is _valid_ (that is, a pointer to allocated storage\n  of the right type)---it should not be possible, not even through a\n  bound variable in a quantifier or comprehension, for a program to\n  obtain an object reference that isn't valid.\n\n* This property is ensured by disallowing _open-ended_ quantifiers.\n  More precisely, the object references that a quantifier may range\n  over must be shown to be confined to object references that were\n  allocated before some of the non-`older` parameters passed to the\n  predicate. Quantifiers that are not open-ended are called\n  _close-ended_. Note that close-ended refers only to the object\n  references that the quantification or comprehension ranges over---it\n  does not say anything about values of other types, like integers.\n\nOften, it is easy to show that a quantifier is close-ended. In fact,\nif the type of a bound variable does not contain any object\nreferences, then the quantifier is trivially close-ended. For example,\n\n\n```dafny\nforall x: int :: x <= Square(x)\n```\n\nis trivially close-ended.\n\nAnother innocent-looking quantifier occurs in the following example:", "start_char_idx": 2, "end_char_idx": 3777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "922990f0-a2e8-4f7d-805b-b74f8f81cf94": {"__data__": {"id_": "922990f0-a2e8-4f7d-805b-b74f8f81cf94", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8503426835fa9e8d0a4ec713a475601447ca6ff59179478c590deecc8031442d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a13dab4-ccad-42af-9286-80fe897c7994", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e88ff97dbd55883b4135164f2795446c38280bb9db1538b35d1086c136de1092", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "429bbba2-7e2e-497b-aed7-6dd3cb42f088", "node_type": "1", "metadata": {}, "hash": "6d956bec36671616bdf205cc1046b9d6af7868cb928b4e8f4e99f8646fb776de", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nforall x: int :: x <= Square(x)\n```\n\nis trivially close-ended.\n\nAnother innocent-looking quantifier occurs in the following example:\n\n\n```dafny\npredicate IsCommutative(r: (X, X) -> bool)\n{\n  forall x, y :: r(x, y) == r(y, x) // error: open-ended quantifier\n}\n```\n\nSince nothing is known about type `X`, this quantifier might be\nopen-ended.  For example, if `X` were passed in as a class type, then\nthe quantifier would be open-ended. One way to fix this predicate is\nto restrict it to non-heap based types, which is indicated with the\n`(!new)` type characteristic (see Section 5.3.1.4):\n\n\n```dafny\nghost predicate IsCommutative(r: (X, X) -> bool) // X is restricted to non-heap types\n{\n  forall x, y :: r(x, y) == r(y, x) // allowed\n}\n```\n\nAnother way to make `IsCommutative` close-ended is to constrain the values\nof the bound variables `x` and `y`. This can be done by adding a parameter\nto the predicate and limiting the quantified values to ones in the given set:\n\n\n```dafny\npredicate IsCommutativeInS(r: (X, X) -> bool, S: set)\n{\n  forall x, y :: x in S && y in S ==> r(x, y) == r(y, x) // close-ended\n}\n```\n\nThrough a simple syntactic analysis, Dafny detects the antecedents\n`x in S` and `y in S`, and since `S` is a parameter and thus can only be\npassed in as something that the caller has already allocated, the\nquantifier in `IsCommutativeInS` is determined to be close-ended.\n\nNote, the `x in S` trick does not work for the motivating example,\n`Reachable`. If you try to write\n\n\n```dafny\npredicate Reachable(source: Node, sink: Node, S: set)\n  reads S\n{\n  exists p :: p in S && ReachableVia(source, p, sink, S) // type error: p\n}\n```\n\nyou will get a type error, because `p in S` does not make sense if `p`\nhas type `Path`. We need some other way to justify that the\nquantification in `Reachable` is close-ended.\n\nDafny offers a way to extend the `x in S` trick to more situations.\nThis is where the `older` modifier comes in. Before we apply `older`\nin the `Reachable` example, let's first look at what `older` does in a\nless cluttered example.\n\nSuppose we rewrite `IsCommutativeInS` using a programmer-defined predicate `In`:\n\n\n```dafny\npredicate In(x: X, S: set) {\n  x in S\n}\n\npredicate IsCommutativeInS(r: (X, X) -> bool, S: set)\n{\n  forall x, y :: In(x, S) && In(y, S) ==> r(x, y) == r(y, x) // error: open-ended?\n}\n```\n\nThe simple syntactic analysis that looks for `x in S` finds nothing\nhere, because the `in` operator is relegated to the body of predicate\n`In`. To inform the analysis that `In` is a predicate that, in effect,\nis like `in`, you can mark parameter `x` with `older`:\n\n\n```dafny\npredicate In(older x: X, S: set) {\n  x in S\n}\n```\n\nThis causes the simple syntactic analysis to accept the quantifier in\n`IsCommutativeInS`. Adding `older` also imposes a semantic check on\nthe body of predicate `In`, enforced by the verifier. The semantic\ncheck is that all the object references in the value `x` are older (or\nequally old as) the object references that are part of the other\nparameters, _in the event that the predicate returns true_. That is,\n`older` is designed to help the caller only if the predicate returns\n`true`, and the semantic check amounts to nothing if the predicate\nreturns `false`.\n\nFinally, let's get back to the motivating example. To allow the quantifier\nin `Reachable`, mark parameter `p` of `ReachableVia` with `older`:", "start_char_idx": 3636, "end_char_idx": 7011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "429bbba2-7e2e-497b-aed7-6dd3cb42f088": {"__data__": {"id_": "429bbba2-7e2e-497b-aed7-6dd3cb42f088", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e2d016d-7a3d-4629-aaab-8113d5ae5358", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8503426835fa9e8d0a4ec713a475601447ca6ff59179478c590deecc8031442d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "922990f0-a2e8-4f7d-805b-b74f8f81cf94", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3f63bdabd6c23236565b664bc3c83d1e64a4a99ae200a66ebc0af2439b2f11c0", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\npredicate In(older x: X, S: set) {\n  x in S\n}\n```\n\nThis causes the simple syntactic analysis to accept the quantifier in\n`IsCommutativeInS`. Adding `older` also imposes a semantic check on\nthe body of predicate `In`, enforced by the verifier. The semantic\ncheck is that all the object references in the value `x` are older (or\nequally old as) the object references that are part of the other\nparameters, _in the event that the predicate returns true_. That is,\n`older` is designed to help the caller only if the predicate returns\n`true`, and the semantic check amounts to nothing if the predicate\nreturns `false`.\n\nFinally, let's get back to the motivating example. To allow the quantifier\nin `Reachable`, mark parameter `p` of `ReachableVia` with `older`:\n\n\n```dafny\nclass Node {\n  var children: seq\n}\n\ndatatype Path = Empty | Extend(Path, Node)\n\nghost predicate Reachable(source: Node, sink: Node, S: set)\n  reads S\n{\n  exists p :: ReachableVia(source, p, sink, S) // allowed because of 'older p' on ReachableVia\n}\n\nghost predicate ReachableVia(source: Node, older p: Path, sink: Node, S: set)\n  reads S\n  decreases p\n{\n  match p\n  case Empty =>\n    source == sink\n  case Extend(prefix, n) =>\n    n in S && sink in n.children && ReachableVia(source, prefix, n, S)\n}\n```\n\nThis example is more involved than the simpler `In` example\nabove. Because of the `older` modifier on the parameter, the quantifier in\n`Reachable` is allowed. For intuition, you can think of the effect of\n`older p` as adding an antecedent `p in {source} + {sink} + S`\n(but, as we have seen, this is not type correct). The semantic check\nimposed on the body of `ReachableVia` makes sure that, if the\npredicate returns `true`, then every object reference in `p` is as old\nas some object reference in another parameter to the predicate.", "start_char_idx": 6246, "end_char_idx": 8061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8a0e01b-3faf-472d-ba63-7828edaaadd2": {"__data__": {"id_": "f8a0e01b-3faf-472d-ba63-7828edaaadd2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a2314912-7ff7-45c6-9d10-42e6279088cb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e3f8ccda6c2cdac2c79b1ad32b92fc64dcb0df5fa59c21b85a2a1f22cc87c7b0", "class_name": "RelatedNodeInfo"}}, "text": "6.5. Nameonly Formal Parameters and Default-Value Expressions\n\nA formal parameter of a method, constructor in a class, iterator,\nfunction, or datatype constructor can be declared with an expression\ndenoting a _default value_. This makes the parameter _optional_,\nas opposed to _required_.\n\nFor example,\n\n```dafny\nfunction f(x: int, y: int := 10): int\n```\nmay be called as either\n\n```dafny\nconst i := f(1, 2)\nconst j := f(1)\n```\nwhere `f(1)` is equivalent to `f(1, 10)` in this case.\n\nThe above function may also be called as\n\n```dafny\nvar k := f(y := 10, x := 2);\n```\nusing names; actual arguments with names may be given in any order,\nthough they must be after actual arguments without names. \n\nFormal parameters may also be declared `nameonly`, in which case a call site\nmust always explicitly name the formal when providing its actual argument.\n\nFor example, a function `ff` declared as\n\n```dafny\nfunction ff(x: int, nameonly y: int): int\n```\nmust be called either by listing the value for x and then y with a name, \nas in `ff(0, y := 4)` or by giving both actuals by name (in any order). \nA `nameonly` formal may also have a default value and thus be optional.\n\nAny formals after a `nameonly` formal must either be `nameonly` themselves or have default values.\n\nThe formals of datatype constructors are not required to have names.\nA nameless formal may not have a default value, nor may it follow a formal\nthat has a default value.\n\nThe default-value expression for a parameter is allowed to mention the\nother parameters, including `this` (for instance methods and instance\nfunctions), but not the implicit `_k` parameter in least and greatest\npredicates and lemmas. The default value of a parameter may mention\nboth preceding and subsequent parameters, but there may not be any\ndependent cycle between the parameters and their default-value\nexpressions.\n\nThe well-formedness of default-value expressions is checked independent\nof the precondition of the enclosing declaration. For a function, the\nparameter default-value expressions may only read what the function's\n`reads` clause allows. For a datatype constructor, parameter default-value\nexpressions may not read anything. A default-value expression may not be\ninvolved in any recursive or mutually recursive calls with the enclosing\ndeclaration.", "start_char_idx": 2, "end_char_idx": 2307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bde7892-cfe1-4bac-bf4a-f6748357d975": {"__data__": {"id_": "2bde7892-cfe1-4bac-bf4a-f6748357d975", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cf4e5d8-9d0f-4da1-920c-14110125411b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "340b2f77dbc2d3e611b925e895421bd02c0384d5188bf8c1e73b13f1c7dea4f4", "class_name": "RelatedNodeInfo"}}, "text": "5. Types {sec-types}\n\nA Dafny type is a (possibly-empty) set of values or heap data-structures,\ntogether with allowed operations on those values.\nTypes are classified as mutable reference types or immutable value types,\ndepending on whether their values are stored in the heap or are\n(mathematical) values independent of the heap.\n\nDafny supports the following kinds of types,\nall described in later sections of this manual:\n* builtin scalar types,\n* builtin collection types,\n* reference types (classes, traits, iterators),\n* tuple types (including as a special case a parenthesized type),\n* inductive and coinductive datatypes,\n* function (arrow) types, and\n* types, such as subset types, derived from other types.", "start_char_idx": 2, "end_char_idx": 718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2be55503-ddcf-4fe4-acac-9bb3aeda409d": {"__data__": {"id_": "2be55503-ddcf-4fe4-acac-9bb3aeda409d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "767b7250-6a40-4cbe-8f84-154d2576c3bb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d18f45c221a05ccd3d94ccbc8a15aaa98efc472b961333a3c71174ce696963d0", "class_name": "RelatedNodeInfo"}}, "text": "5.1. Kinds of types", "start_char_idx": 2, "end_char_idx": 21, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85a07487-4ba2-404a-bc89-c7ccdbdcbb34": {"__data__": {"id_": "85a07487-4ba2-404a-bc89-c7ccdbdcbb34", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "639dc327-16d6-4f4c-8cb5-782f9788ce6c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "15b6cdfcbb06a6a0cd2641726a78e0881383c549ea74dfca00a6101c8a3b6a8d", "class_name": "RelatedNodeInfo"}}, "text": "5.1.1. Value Types\nThe value types are those whose values do not lie in the program heap.\nThese are:\n\n* The basic scalar types: `bool`, `char`, `int`, `real`, `ORDINAL`, bitvector types\n* The built-in collection types: `set`, `iset`, `multiset`, `seq`, `string`, `map`, `imap`\n* Tuple Types\n* Inductive and coinductive types\n* Function (arrow) types\n* Subset and newtypes that are based on value types\n\nData items having value types are passed by value. Since they are not\nconsidered to occupy _memory_, framing expressions do not reference them.\n\nThe `nat` type is a pre-defined subset type of `int`.\n\nDafny does not include types themselves as values, nor is there a type of types.", "start_char_idx": 2, "end_char_idx": 685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0843219-7487-4050-bc7f-34ef866ce6b1": {"__data__": {"id_": "b0843219-7487-4050-bc7f-34ef866ce6b1", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8787dcf3-ef10-42be-98e1-8d015d660e62", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "47cbd8bed07e33443be7ed14a77181ab565304d61295dd71ff187960baf8505f", "class_name": "RelatedNodeInfo"}}, "text": "5.1.2. Reference Types {sec-reference-types}\nDafny offers a host of _reference types_.  These represent\n_references_ to objects allocated dynamically in the program heap.  To\naccess the members of an object, a reference to (that is, a _pointer_\nto or _object identity_ of) the object is _dereferenced_.\n\nThe reference types are class types, traits and array types.\nDafny supports both reference types that contain the special `null` value\n(_nullable types_) and reference types that do not (_non-null types_).", "start_char_idx": 2, "end_char_idx": 511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26225988-5af7-4aae-8856-723ecbc5e3f0": {"__data__": {"id_": "26225988-5af7-4aae-8856-723ecbc5e3f0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c45a5175-68fb-41fc-b62d-3f75d1144280", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9422e70bafd03aedef4367be667e5e04b5841305f148f3ed450028c604a2a477", "class_name": "RelatedNodeInfo"}}, "text": "5.1.3. Named Types (grammar)\n\nA _Named Type_ is used to specify a user-defined type by a (possibly module- or class-qualified) name.\nNamed types are introduced by\nclass, trait, inductive, coinductive, synonym and abstract\ntype declarations. They are also used to refer to type variables.\nA Named Type is denoted by a dot-separated sequence of name segments (Section 9.32).\n\nA name segment (for a type) is a type name optionally followed by a\n_generic instantiation_, which supplies type parameters to a generic\ntype, if needed.\n\nThe following sections describe each of these kinds of types in more detail.", "start_char_idx": 2, "end_char_idx": 607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f1434b8-505b-432d-beeb-75ff79fd8d26": {"__data__": {"id_": "0f1434b8-505b-432d-beeb-75ff79fd8d26", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45e9b28b-a3ae-411c-99e4-e2e502fe2bb0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "50aafd6203bc69bcd9d8bed8ccc88b911ab5f203bc9a6426cd87ba5deb68e175", "class_name": "RelatedNodeInfo"}}, "text": "5.2. Basic types {sec-basic-type}\n\nDafny offers these basic types: `bool` for booleans, `char` for\ncharacters, `int` and `nat` for integers, `real` for reals,\n`ORDINAL`, and bit-vector types.", "start_char_idx": 2, "end_char_idx": 193, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4885781-b8c8-4319-9d29-f98505be5e44": {"__data__": {"id_": "e4885781-b8c8-4319-9d29-f98505be5e44", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a5219c4-0ca3-4904-914a-6868d880299e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3fd8e8077ff1b34bc7df9bb8062e0db2a8af1c00dd3933d21e87565bc7337df8", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1. Booleans (grammar) {sec-booleans}\n\nThere are two boolean values and each has a corresponding literal in\nthe language:  `false` and `true`.\n\nType `bool` supports the following operations:\n\n operator           | precedence | description\n--------------------|:----------:|------------------------------------\n ``             | 1 | equivalence (if and only if)\n--------------------|------------------------------------\n `==>`              | 2 | implication (implies)\n `<==`              | 2 | reverse implication (follows from)\n--------------------|------------------------------------\n `&&`               | 3 | conjunction (and)\n `||`               | 3 |  disjunction (or)\n--------------------|------------------------------------\n `==`               | 4 | equality\n `!=`               | 4 | disequality\n--------------------|------------------------------------\n `!`                | 10 | negation (not)", "start_char_idx": 2, "end_char_idx": 909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cada206a-8803-4f46-b016-4263bb55a914": {"__data__": {"id_": "cada206a-8803-4f46-b016-4263bb55a914", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de83084d-bb15-485e-94a9-3e0298eee973", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6e26ac7f1d220cb015c155757e6d75ec6094c7db87c50a7fa0ae126723249789", "class_name": "RelatedNodeInfo"}}, "text": "5.2.2. Numeric Types (grammar) {sec-numeric-types}\n\nDafny supports _numeric types_ of two kinds, _integer-based_, which\nincludes the basic type `int` of all integers, and _real-based_, which\nincludes the basic type `real` of all real numbers.  User-defined\nnumeric types based on `int` and `real`, either _subset types_ or _newtypes_,\nare described in Section 5.6.3 and Section 5.7.", "start_char_idx": 2, "end_char_idx": 384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33d59046-ecfd-4004-a3ba-f9c6397b020d": {"__data__": {"id_": "33d59046-ecfd-4004-a3ba-f9c6397b020d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c0670ee6-dd7f-4e25-8d0d-bb665ac99a09", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c7369e60b9eacd5487fd4ad5685402f94baf3bb678082deaa6506acf367a95b9", "class_name": "RelatedNodeInfo"}}, "text": "5.2.3. Bit-vector Types (grammar) {sec-bit-vector-types}\n\nDafny includes a family of bit-vector types, each type having a specific,\nconstant length, the number of bits in its values.\nEach such type is\ndistinct and is designated by the prefix `bv` followed (without white space) by\na positive integer without leading zeros or zero, stating the number of bits. For example,\n`bv1`, `bv8`, and `bv32` are legal bit-vector type names.\nThe type `bv0` is also legal; it is a bit-vector type with no bits and just one value, `0x0`.", "start_char_idx": 2, "end_char_idx": 525, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2605b907-da9b-458b-b108-3a2c4a3f00ab": {"__data__": {"id_": "2605b907-da9b-458b-b108-3a2c4a3f00ab", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2733b70-9120-4ea6-9dd9-c8c76791259a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5699c2601f33db4d01c1d46f7249b6d97e3167bc44dc1adcf235670ecfa16402", "class_name": "RelatedNodeInfo"}}, "text": "5.2.4. Ordinal type (grammar) {sec-ordinals}\n\nValues of type `ORDINAL` behave like `nat`s in many ways, with one important difference:\nthere are `ORDINAL` values that are larger than any `nat`. The smallest of these non-nat ordinals is\nrepresented as $\\omega$ in mathematics, though there is no literal expression in Dafny that represents this value.\n\nThe natural numbers are ordinals.\nAny ordinal has a successor ordinal (equivalent to adding `1`).\nSome ordinals are _limit_ ordinals, meaning they are not a successor of any other ordinal;\nthe natural number `0` and  $\\omega$ are limit ordinals.\n\nThe _offset_ of an ordinal is the number of successor operations it takes to reach it from a limit ordinal.\n\nThe Dafny type `ORDINAL` has these member functions:\n- `o.IsLimit` -- true if `o` is a limit ordinal (including `0`)\n- `o.IsSucc` -- true if `o` is a successor to something, so `o.IsSucc  !o.IsLimit`\n- `o.IsNat` -- true if `o` represents a `nat` value, so for `n` a `nat`, `(n as ORDINAL).IsNat` is true\nand if `o.IsNat` is true then `(o as nat)` is well-defined\n- `o.Offset` -- is the `nat` value giving the offset of the ordinal\n\nIn addition,\n- non-negative numeric literals may be considered `ORDINAL` literals, so `o + 1` is allowed\n- `ORDINAL`s may be compared, using `== !=  >=`\n- two `ORDINAL`s may be added and the result is `>=` either one of them; addition is associative but not commutative\n- `*`, `/` and `%` are not defined for `ORDINAL`s\n- two `ORDINAL`s may be subtracted if the RHS satisfies `.IsNat` and the offset of the LHS is not smaller than the offset of the RHS", "start_char_idx": 2, "end_char_idx": 1594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5dcbad31-d8c0-46fa-a403-a5135e159326": {"__data__": {"id_": "5dcbad31-d8c0-46fa-a403-a5135e159326", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61bf4f29-70c6-49fa-a7a8-889435e051c1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f37e634efd678ca05ff707519ce2856b93278186456928a87b3a3b7aa5462157", "class_name": "RelatedNodeInfo"}}, "text": "5.2.5. Characters (grammar) {sec-characters}\n\nDafny supports a type `char` of _characters_.\nIts exact meaning is controlled by the command-line switch `--unicode-char:true|false`.\n\nIf `--unicode-char` is disabled, then `char` represents any UTF-16 code unit.\nThis includes surrogate code points.\n\nIf `--unicode-char` is enabled, then `char` represents any Unicode scalar value.\nThis excludes surrogate code points.\n\nCharacter literals are enclosed in single quotes, as in `'D'`.\nTo write a single quote as a\ncharacter literal, it is necessary to use an _escape sequence_.\nEscape sequences can also be used to write other characters.  The\nsupported escape sequences are the following:\n\n escape sequence    | meaning\n--------------------|-------------------------------------------------------\n `\\'`               | the character `'`\n `\\\"`               | the character `\"`\n `\\\\`               | the character `\\`\n `\\0`               | the null character, same as `\\u0000` or `\\U{0}`\n `\\n`               | line feed\n `\\r`               | carriage return\n `\\t`               | horizontal tab\n `\\u`_xxxx_         | UTF-16 code unit whose hexadecimal code is _xxxx_,  where each _x_ is a hexadecimal digit\n `\\U{`_x..x_`}`     | Unicode scalar value whose hexadecimal code is _x..x_,  where each _x_ is a hexadecimal digit\n\nThe escape sequence for a double quote is redundant, because\n`'\"'` and `'\\\"'` denote the same\ncharacter---both forms are provided in order to support the same\nescape sequences in string literals (Section 5.5.3.5).\n\nIn the form `\\u`_xxxx_, which is only allowed if `--unicode-char` is disabled,\nthe `u` is always lower case, but the four\nhexadecimal digits are case insensitive.\n\nIn the form `\\U{`_x..x_`}`,\nwhich is only allowed if `--unicode-char` is enabled,\nthe `U` is always upper case,\nbut the hexadecimal digits are case insensitive, and there must\nbe at least one and at most six digits.\nSurrogate code points are not allowed.\nThe hex digits may be interspersed with underscores for readability", "start_char_idx": 2, "end_char_idx": 2021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b801e78-98ac-411c-86c4-24fdc159c2fa": {"__data__": {"id_": "1b801e78-98ac-411c-86c4-24fdc159c2fa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e31e357a-3fba-4eff-b641-cea1362398e3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9bef99754e3a57c9e70049d23d4e9ec097ad6b801e8036cb330cd63d082670a3", "class_name": "RelatedNodeInfo"}}, "text": "5.3. Type parameters (grammar) {sec-type-parameters}\n\nExamples:\n\n```dafny\ntype G1\ntype G2\ntype G3\n```", "start_char_idx": 2, "end_char_idx": 103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69528389-7762-47f5-9206-39efd9034b90": {"__data__": {"id_": "69528389-7762-47f5-9206-39efd9034b90", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8231d588-fc2b-479f-aeb7-c181ccf49659", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ccdb17285c5a30249d9484a642a7d21ac83a0c4276ce22730ba3dfd318f7e5b0", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1. Declaring restrictions on type parameters {sec-type-characteristics}\n\nIt is sometimes necessary to restrict type parameters so that\nthey can only be instantiated by certain families of types, that is,\nby types that have certain properties. These properties are known as\n_type characteristics_. The following subsections\ndescribe the type characteristics that Dafny supports.\n\nIn some cases, type inference will infer that a type-parameter\nmust be restricted in a particular way, in which case Dafny\nwill add the appropriate suffix, such as `(==)`, automatically.\n\nIf more than one restriction is needed, they are either\nlisted comma-separated,\ninside the parentheses or as multiple parenthesized elements:\n `T(==,0)` or `T(==)(0)`.", "start_char_idx": 2, "end_char_idx": 740, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14503817-264a-4e10-a69d-bdba7b99a947": {"__data__": {"id_": "14503817-264a-4e10-a69d-bdba7b99a947", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71adf83d-2727-497b-98c4-4d8b30f26378", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "05f19354095ef715c125253984efc57021c29b8c19a7fb6ee3dbfd1eaa9d496b", "class_name": "RelatedNodeInfo"}}, "text": "5.3.1.3. Nonempty types: `T(00)` {sec-nonempty-types}\n\nAuto-init types are important in compiled contexts. In ghost contexts, it\nmay still be important to know that a type is nonempty. Dafny supports\na type characteristic for nonempty types, written with the suffix `(00)`.\nFor example, with `--relax-definite-assignment`, the following example happens:\n\n\n```dafny\nmethod NonemptyExamples() returns (b: B, ghost g: B, ghost h: X)\n{\n  // error: non-ghost out-parameter 'b' has not been given a value\n  // ghost out-parameter 'g' is fine, since its type is nonempty\n  // error: 'h' has not been given a value\n}\n```\nBecause of `B`'s nonempty type characteristic, ghost parameter `g` does not\nneed to be explicitly assigned. However, Dafny reports an error for the\nnon-ghost `b`, since `B` is not an auto-init type, and reports an error\nfor `h`, since the type `X` could be empty.\n\nNote that every auto-init type is nonempty.\n\nIn the default definite-assignment mode (that is, without `--relax-definite-assignment`)\nthere will be errors for all three formal parameters in the example just given.", "start_char_idx": 2, "end_char_idx": 1093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1272c6d3-e577-43ab-aaf4-d09f490b4d8a": {"__data__": {"id_": "1272c6d3-e577-43ab-aaf4-d09f490b4d8a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecdaa948-0ede-440c-b58c-9b0e87de4def", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "100b9ed73d2ab8c7d33ed2f8211977fb5750cb41a4adfede3fc572617e6a5d49", "class_name": "RelatedNodeInfo"}}, "text": "5.3.2. Type parameter variance {sec-type-parameter-variance}\n\nType parameters have several different variance and cardinality properties.\nThese properties of type parameters are designated in a generic type definition.\nFor instance, in `type A = ... `, the `+` indicates that the `T` position\nis co-variant. These properties are indicated by the following notation:\n\nnotation | variance | cardinality-preserving\n:-------:|----------|-----------------------\n(nothing) | non-variant | yes\n`+`      | co-variant | yes\n`-`      | contra-variant | not necessarily\n`*`      | co-variant | not necessarily\n`!`      | non-variant | not necessarily", "start_char_idx": 2, "end_char_idx": 641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7eb6dd53-cbe2-435f-945c-86cff08e879f": {"__data__": {"id_": "7eb6dd53-cbe2-435f-945c-86cff08e879f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50e7bc77-bccc-4302-ad10-c53e4ad92ee3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "74f2f5915d3a7d79adc0cc52f28efc8d6c47a76e7e113c73f245eafd06cdf184", "class_name": "RelatedNodeInfo"}}, "text": "5.4. Generic Instantiation (grammar) {sec-generic-instantiation}\n\nA generic instantiation consists of a comma-separated list of 1 or more Types,\nenclosed in angle brackets (``),\nproviding actual types to be used in place of the type parameters of the\ndeclaration of the generic type.\nIf there is no instantion for a generic type, type inference will try\nto fill these in (cf. Section 12.2).", "start_char_idx": 2, "end_char_idx": 392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fdefffa-adce-4e0b-a02d-5e4573726c4f": {"__data__": {"id_": "8fdefffa-adce-4e0b-a02d-5e4573726c4f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6752a87-e523-4e90-83ee-572f7b0bf5f1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "34aeb469f9a237780fb1b65172ec661f5e35fc713cdd093cb15477f1e05f9886", "class_name": "RelatedNodeInfo"}}, "text": "5.5. Collection types {sec-collection-types}\n\nDafny offers several built-in collection types.", "start_char_idx": 2, "end_char_idx": 95, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fb4302e-3181-4ec8-9491-f16333f7cf45": {"__data__": {"id_": "9fb4302e-3181-4ec8-9491-f16333f7cf45", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f676f1e1-8b54-40da-9c40-260f38d84e28", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ee7d8b6d288b1df91b8ac886c7617a357ac5d26feb3881d88afd3c9768738dcc", "class_name": "RelatedNodeInfo"}}, "text": "5.5.1. Sets (grammar) {sec-sets}\n\nFor any type `T`, each value of type `set` is a finite set of\n`T` values.\n\nSet membership is determined by equality in the type `T`,\nso `set` can be used in a non-ghost context only if `T` is\nequality supporting.\n\nA _multiset_ is similar to a set, but keeps track of the multiplicity\nof each element, not just its presence or absence.  For any type `T`,\neach value of type `multiset` is a map from `T` values to natural\nnumbers denoting each element's multiplicity.  Multisets in Dafny\nare finite, that is, they contain a finite number of each of a finite\nset of elements.  Stated differently, a multiset maps only a finite\nnumber of elements to non-zero (finite) multiplicities.\n\nLike sets, multiset membership is determined by equality in the type\n`T`, so `multiset` can be used in a non-ghost context only if `T`\nis equality supporting.\n\nA multiset can be formed using a _multiset display_ expression, which\nis a possibly empty, unordered list of expressions enclosed in curly\nbraces after the keyword `multiset`.  To illustrate,\n\n```dafny\nmultiset{}   multiset{0, 1, 1, 2, 3, 5}   multiset{4+2, 1+5, a*b}\n```\nare three examples of multiset displays.  There is no multiset\ncomprehension expression.", "start_char_idx": 2, "end_char_idx": 1237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85a8ffb7-b128-4b4a-a2f2-dc1bd19fdfd6": {"__data__": {"id_": "85a8ffb7-b128-4b4a-a2f2-dc1bd19fdfd6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3dd4ec9f-ec38-4284-b2df-3a3a54a78353", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "345b3221e7eb9171c3f414f8efa95f64386d652e3a0c3e8da7c512a6664707e2", "class_name": "RelatedNodeInfo"}}, "text": "5. Types Grammar {g-types}", "start_char_idx": 2, "end_char_idx": 28, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eb0a1ed-0b62-46fc-b030-95afc58a800e": {"__data__": {"id_": "9eb0a1ed-0b62-46fc-b030-95afc58a800e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5ff8dfc-ddcf-4bac-a908-d79f876b9373", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8bda751a0d7cc7bba7dd1bd1a13bddfc7773b614d7d5641d6fcac08d1d8879b6", "class_name": "RelatedNodeInfo"}}, "text": "5.1. Kinds of types Grammar {g-kinds-of-types}", "start_char_idx": 2, "end_char_idx": 48, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "411df6b8-b5a9-44bc-9308-c19c39b7ff5c": {"__data__": {"id_": "411df6b8-b5a9-44bc-9308-c19c39b7ff5c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cffaec5e-dc72-49de-831c-079ce7de5b33", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "82b29b893da109a66ce7f0f8665b05b1d982f48ced202ce971402ca072d615ad", "class_name": "RelatedNodeInfo"}}, "text": "5.1.1. Value Types Grammar {g-value-types}\n\n```\nvalue-type =\n    basic-scalar-type\n  | built-in-collection-type\n  | tuple-type\n  | inductive-type\n  | coinductive-type\n  | function-type\n  | subset-type\n  | newtype\n```", "start_char_idx": 2, "end_char_idx": 218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b02154e7-6abd-403d-abe5-743cf2093e5b": {"__data__": {"id_": "b02154e7-6abd-403d-abe5-743cf2093e5b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdb3ea36-8bc7-4b6e-92f4-e7dde9ee0b61", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b24beb266cbe97863cc75d1478cb57d925296d96eecb5b3365b52ce44641e12d", "class_name": "RelatedNodeInfo"}}, "text": "5.1.2. Reference Types Grammar {g-reference-types}\n\n```\nreference-type =\n    class-type\n  | trait-type\n  | array-type\n  | nullable-type\n  | non-null-type\n```", "start_char_idx": 2, "end_char_idx": 159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3add3715-5cc0-411e-9a03-7e866407d017": {"__data__": {"id_": "3add3715-5cc0-411e-9a03-7e866407d017", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9ad47d3-3bd5-4ff9-a165-c154ecc6555e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c9b74572791af576d58381c475d1326b2b662157242c31d492e1ac0617ffcb63", "class_name": "RelatedNodeInfo"}}, "text": "5.1.3. Named Types Grammar {g-named-types}\n\n```\nnamed-type =\n    type-name\n  | module-qualified-type-name\n  | class-qualified-type-name\n  | generic-instantiation\n```", "start_char_idx": 2, "end_char_idx": 167, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2468249-5d26-47e8-8eb8-6d6be21f4f3f": {"__data__": {"id_": "d2468249-5d26-47e8-8eb8-6d6be21f4f3f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "307ec46d-bcc2-4cc3-9c0e-300f336f2fc1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8118bf19bdfb60023e0f9508649d6af5fe8dcc8b29437fa9f07c8f7fba708473", "class_name": "RelatedNodeInfo"}}, "text": "5.2. Basic types Grammar {g-basic-type}", "start_char_idx": 2, "end_char_idx": 41, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42572148-d236-457f-b1db-2adbf5bbc63f": {"__data__": {"id_": "42572148-d236-457f-b1db-2adbf5bbc63f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a2fab9c-355e-4084-8503-32bae23f8fbd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "22a8fab29bb55f1bfeafafa2ecd75a33679f00b27d5e40959a4459474883560c", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1. Booleans Grammar {g-booleans}\n\n```\nboolean-literal = \"false\" | \"true\"\n\nboolean-operator =\n    \"\"\n  | \"==>\"\n  | \"<==\"\n  | \"&&\"\n  | \"||\"\n  | \"==\"\n  | \"!=\"\n  | \"!\"\n```", "start_char_idx": 2, "end_char_idx": 173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9708f06f-7773-4d18-99b7-4b5e2977f75a": {"__data__": {"id_": "9708f06f-7773-4d18-99b7-4b5e2977f75a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b6127e6-e1a8-45a0-bf15-70eadde08e7a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c07e706ddbd9a0c04be1286384534f645c47772d2631f95d0693610254d4a028", "class_name": "RelatedNodeInfo"}}, "text": "5.2.2. Numeric Types Grammar {g-numeric-types}\n\n```\nnumeric-type =\n    \"int\"\n  | \"nat\"\n  | \"real\"\n  | subset-type\n  | newtype\n```", "start_char_idx": 2, "end_char_idx": 131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0f932ee-c116-47eb-8781-b6634f2f2651": {"__data__": {"id_": "c0f932ee-c116-47eb-8781-b6634f2f2651", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94466290-b990-48fc-a3cf-57b3f0e4f356", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e0cb24c9f533be7e4700032f68c602904292302c0856da9ad8d3c872eeaefe97", "class_name": "RelatedNodeInfo"}}, "text": "5.2.3. Bit-vector Types Grammar {g-bit-vector-types}\n\n```\nbit-vector-type = \"bv\" positive-integer\n```", "start_char_idx": 2, "end_char_idx": 103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57b820fa-ac5d-4542-aed9-2e3fc6e593d5": {"__data__": {"id_": "57b820fa-ac5d-4542-aed9-2e3fc6e593d5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae61b928-6756-4a98-be24-2ad9079a9d6f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2474b35cd9996fde0af26216ab67fe7eb2bd2a7360ae1daa8ce38329eb3272c6", "class_name": "RelatedNodeInfo"}}, "text": "5.2.4. Ordinal type Grammar {g-ordinals}\n\n```\nordinal-type = \"ORDINAL\"\n\nordinal-member-function =\n    \"IsLimit\"\n  | \"IsSucc\"\n  | \"IsNat\"\n  | \"Offset\"\n\nordinal-operator =\n    \"+\"\n  | \"-\"\n  | \"==\"\n  | \"!=\"\n  | \"<\"\n  | \"<=\"\n  | \">\"\n  | \">=\"\n```", "start_char_idx": 2, "end_char_idx": 243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41003876-0da2-4e6f-94f9-6d431ae631b9": {"__data__": {"id_": "41003876-0da2-4e6f-94f9-6d431ae631b9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce8f0a24-5099-4e73-b11f-8139c55dba1e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e013503959d9125827beb71bc2102dbb06b785ac28241d9d581b083ca9d8e5e7", "class_name": "RelatedNodeInfo"}}, "text": "5.2.5. Characters Grammar {g-characters}\n\n```\ncharacter-literal = \"'\" character \"'\"\n\nescape-sequence =\n    \"\\'\"\n  | \"\\\"\"\n  | \"\\\\\"\n  | \"\\0\"\n  | \"\\n\"\n  | \"\\r\"\n  | \"\\t\"\n  | \"\\u\" hexadecimal-digit{4}\n  | \"\\U{\" hexadecimal-digit{1,6} \"}\"\n```", "start_char_idx": 2, "end_char_idx": 238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9da0cb7-f3b9-4869-a873-ff98972ead16": {"__data__": {"id_": "c9da0cb7-f3b9-4869-a873-ff98972ead16", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa9ef2e3-8025-4242-87a3-d76128bcbece", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "25a8540a3dc8c4e71ca296e12712f587f51ee96f4832ae7548be1850f208adda", "class_name": "RelatedNodeInfo"}}, "text": "5.3. Type parameters Grammar {g-type-parameter}\n\n```\ntype-parameter =\n    \"T\"\n  | \"T(0)\"\n  | \"+T(==)\"\n  | \"-U\"\n```", "start_char_idx": 2, "end_char_idx": 116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfcd8c5c-d44b-4ceb-acd2-45b758ed491b": {"__data__": {"id_": "dfcd8c5c-d44b-4ceb-acd2-45b758ed491b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efe2bd23-d880-4a2c-8ef7-c0d738774120", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e2bb11fadce4130da036db5cad23a99599496695299b8fd177d972a67be7a113", "class_name": "RelatedNodeInfo"}}, "text": "5.4. Generic Instantiation Grammar {g-generic-instantiation}\n\n```\ngeneric-instantiation = \"\"\n```", "start_char_idx": 2, "end_char_idx": 98, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d93b4fe3-4b80-4bb5-bc45-ac15255c66e7": {"__data__": {"id_": "d93b4fe3-4b80-4bb5-bc45-ac15255c66e7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39cedf47-b2e2-4840-99a8-0be4f8faae76", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "946c81f36faa8d203fe14f0a66fdf5af54d471675ec9b46beffce59367a50622", "class_name": "RelatedNodeInfo"}}, "text": "5.5. Collection types Grammar {g-collection-type}", "start_char_idx": 2, "end_char_idx": 51, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80b847eb-3dfd-4a72-adaa-23bffa7c5eb2": {"__data__": {"id_": "80b847eb-3dfd-4a72-adaa-23bffa7c5eb2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c0d6162-64bf-4944-b58f-e11dad2084ac", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3f786ece4d3ea3e244e78c7da0e0a16cc705321281d33a5402ac69802426cc3c", "class_name": "RelatedNodeInfo"}}, "text": "5.5.1. Sets Grammar {g-sets}\n\n```\nset-type = \"set\"\n```", "start_char_idx": 2, "end_char_idx": 56, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5dea3c0a-68d2-44be-be99-eefd77ee8ead": {"__data__": {"id_": "5dea3c0a-68d2-44be-be99-eefd77ee8ead", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_that_stand_for_other_types_description.md", "file_name": "Types_that_stand_for_other_types_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31147310-dd52-488f-abd6-6a690f146712", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_that_stand_for_other_types_description.md", "file_name": "Types_that_stand_for_other_types_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8f033ec7227306c5c6405c09e2dd8d0905d1965b245bc2801c2780107f091789", "class_name": "RelatedNodeInfo"}}, "text": "5.6. Types that stand for other types (grammar) {sec-type-definition}\n\nIt is sometimes useful to know a type by several names or to treat a\ntype abstractly. There are several mechanisms in Dafny to do this:\n\n* (Section 5.6.1) A typical _synonym type_, in which a type name is a synonym for another type\n* (Section 5.6.2) An _abstract type_, in which a new type name is declared as an uninterpreted type\n* (Section 5.6.3) A _subset type_, in which a new type name is given to a subset of the values of a given type\n* ([Section 0.0){#sec-newtypes)) A _newtype_, in which a subset type is declared, but with restrictions on converting to and from its base type", "start_char_idx": 2, "end_char_idx": 659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94660ef5-3848-4c01-815c-a39e1bf5d3a9": {"__data__": {"id_": "94660ef5-3848-4c01-815c-a39e1bf5d3a9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unary_Expressions_description.md", "file_name": "Unary_Expressions_description.md", "file_type": "text/markdown", "file_size": 459, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eed7b529-130e-4787-aea3-1b6650b97ffe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unary_Expressions_description.md", "file_name": "Unary_Expressions_description.md", "file_type": "text/markdown", "file_size": 459, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0ee65da25bcc93160eefd4c601674df9206a92946baf2c284d3427be29e9e787", "class_name": "RelatedNodeInfo"}}, "text": "9.11. Unary Expressions (grammar) {sec-unary-expression}\n\nExamples:\n\n```dafny\n-x\n- - x\n! x\n```\n\nA unary expression applies \n\n- logical complement (`!` -- Section 5.2.1),\n- bit-wise complement (`!` -- Section 5.2.3),\n- numeric negation (`-` -- Section 5.2.2), or\n- bit-vector negation (`-` -- Section 5.2.3)\n\nto its operand.", "start_char_idx": 2, "end_char_idx": 325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc59bdb0-763f-4471-b5bc-7c6121082a7e": {"__data__": {"id_": "fc59bdb0-763f-4471-b5bc-7c6121082a7e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unchanged_Expressions_description.md", "file_name": "Unchanged_Expressions_description.md", "file_type": "text/markdown", "file_size": 1375, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a94f3e09-47f3-4306-a8e8-e0affa673ca6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unchanged_Expressions_description.md", "file_name": "Unchanged_Expressions_description.md", "file_type": "text/markdown", "file_size": 1375, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5babcf8c6f200e0eea809270e97d20b5bec62032550b25c3b4155186fc0156f4", "class_name": "RelatedNodeInfo"}}, "text": "9.25. Unchanged Expressions (grammar) {sec-unchanged-expression}\n\nExamples:\n\n```dafny\nunchanged(c)\nunchanged([c1,c2])\nunchanged@L(c)\n```\n\nThe `unchanged` expression returns `true` if and only if every reference\ndenoted by its arguments has the same value for all its fields in the\nold and current state. For example, if `c` is an object with two\nfields, `x` and `y`, then `unchanged(c)` is equivalent to\n\n```dafny\nc.x == old(c.x) && c.y == old(c.y)\n```\n\nEach argument to `unchanged` can be a reference, a set of references, or\na sequence of references, each optionally followed by a back-tick and field name. \nThis form with a frame field expresses that just the field `f`,\nnot necessarily all fields, has the same value in the old and current\nstate.\nIf there is such a frame field, all the references must have the same type,\nwhich must have a field of that name.\n\nThe optional `@`-label says to use the state at that label as the old-state instead of using\nthe `old` state (the pre-state of the method). That is, using the example `c` from above, the expression\n`unchanged@Lbl(c)` is equivalent to\n\n```dafny\nc.x == old@Lbl(c.x) && c.y == old@Lbl(c.y)\n```\n\nEach reference denoted by the arguments of `unchanged` must be non-null and\nmust be allocated in the old-state of the expression.", "start_char_idx": 2, "end_char_idx": 1289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "636b2b3e-6684-49d8-aa2b-5cf902ab7e05": {"__data__": {"id_": "636b2b3e-6684-49d8-aa2b-5cf902ab7e05", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_and_Call_Statements_description.md", "file_name": "Update_and_Call_Statements_description.md", "file_type": "text/markdown", "file_size": 826, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "131aa035-a9c0-46db-be88-f0e83208082f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_and_Call_Statements_description.md", "file_name": "Update_and_Call_Statements_description.md", "file_type": "text/markdown", "file_size": 826, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5a8e7c4ec2ec67923e47dec217f048ebbc0272c9c63c8a8d4834820bafff4bcc", "class_name": "RelatedNodeInfo"}}, "text": "8.5. Update and Call Statements (grammar) {sec-update-and-call-statement}\n\nExamples:\n\n```dafny\nclass C { var f: int }\nclass D {\n  var i: int\n  constructor(i: int) {\n    this.i := i;\n  }\n}\nmethod q(i: int, j: int) {}\nmethod r() returns (s: int, t: int) { return 2,3; }\nmethod m() {\n  var ss: int, tt: int, c: C?, a: array, d: D?;\n  q(0,1);\n  ss, c.f := r();\n  c := new C;\n  d := new D(2);\n  a := new int[10];\n  ss, tt := 212, 33;\n  ss :| ss > 7;\n  ss := *;\n}\n```\n\nThis statement corresponds to familiar assignment or method call statements,\nwith variations. If more than one\nleft-hand side is used, these must denote different l-values, unless the\ncorresponding right-hand sides also denote the same value.\n\nThe update statement serves several logical purposes.", "start_char_idx": 2, "end_char_idx": 762, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52220fe7-562e-44b3-9278-963480aa9472": {"__data__": {"id_": "52220fe7-562e-44b3-9278-963480aa9472", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_with_Failure_Statement_(`:-`)_description.md", "file_name": "Update_with_Failure_Statement_(`:-`)_description.md", "file_type": "text/markdown", "file_size": 2600, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "779ebe71-60ee-4ebb-859b-bed2419039d0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_with_Failure_Statement_(`:-`)_description.md", "file_name": "Update_with_Failure_Statement_(`:-`)_description.md", "file_type": "text/markdown", "file_size": 2600, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8e1015202ed3adb71ef16fe8369633788ea83bacbca712ac1688e2d73a33c013", "class_name": "RelatedNodeInfo"}}, "text": "8.6. Update with Failure Statement (`:-`) (grammar) {sec-update-with-failure-statement}\n\nSee the subsections below for examples.\n\nA `:-`[^elephant] statement is an alternate form of the `:=` statement that allows for abrupt return if a failure is detected.\nThis is a language feature somewhat analogous to exceptions in other languages.\n\n[^elephant]: The `:-` token is called the elephant symbol or operator.\n\nAn update-with-failure statement uses _failure-compatible_ types.\nA failure-compatible type is a type that has the following (non-static) members (each with no in-parameters and one out-parameter):\n\n * a non-ghost function `IsFailure()` that returns a `bool`\n * an optional non-ghost function `PropagateFailure()` that returns a value assignable to the first out-parameter of the caller\n * an optional function `Extract()`\n(PropagateFailure and Extract were permitted to be methods (but deprecated) prior to Dafny 4. They will be required to be functions in Dafny 4.)\n\nA failure-compatible type with an `Extract` member is called _value-carrying_.\n\nTo use this form of update,\n\n * if the RHS of the update-with-failure statement is a method call, the first out-parameter of the callee must be failure-compatible\n * if instead, the RHS of the update-with-failure statement is one or more expressions, the first of these expressions must be a value with a failure-compatible type\n * the caller must have a first out-parameter whose type matches the output of `PropagateFailure` applied to the first output of the callee, unless an\n`expect`, `assume`, or `assert` keyword is used after `:-` (cf. Section 8.6.7).\n * if the failure-compatible type of the RHS does not have an `Extract` member,\nthen the LHS of the `:-` statement has one less expression than the RHS\n(or than the number of out-parameters from the method call), the value of the first out-parameter or expression being dropped\n(see the discussion and examples in Section 8.6.2)\n * if the failure-compatible type of the RHS does have an `Extract` member,\nthen the LHS of the `:-` statement has the same number of expressions as the RHS\n(or as the number of out-parameters from the method call)\nand the type of the first LHS expression must be assignable from the return type of the `Extract` member\n* the `IsFailure` and `PropagateFailure` methods may not be ghost\n* the LHS expression assigned the output of the `Extract` member is ghost precisely if `Extract` is ghost\n\nThe following subsections show various uses and alternatives.", "start_char_idx": 2, "end_char_idx": 2504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf24e101-a745-462d-8c22-8e86dcc58aab": {"__data__": {"id_": "cf24e101-a745-462d-8c22-8e86dcc58aab", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55dc0d23-4f79-4de0-a552-fd4e3f28cc95", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "52350c90b0400f1401158fbd377dc3753b1e32a8fa5da4aa4612bf678cbfe913", "class_name": "RelatedNodeInfo"}}, "text": "13. Dafny User's Guide {sec-user-guide}\n\nMost of this document describes the Dafny programming language.\nThis section describes the `dafny` tool, a combined verifier and compiler\nthat implements the Dafny language.\n\nThe development of the Dafny language and tool is a GitHub project at https://github.com/dafny-lang/dafny.\nThe project is open source, with collaborators from various organizations; additional contributors are welcome.\nThe software itself is licensed under the MIT license.", "start_char_idx": 2, "end_char_idx": 491, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "034b8747-b32a-4aff-991a-0d82bdd54d09": {"__data__": {"id_": "034b8747-b32a-4aff-991a-0d82bdd54d09", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42a1911a-c31f-40a7-8304-6f0b09876ed7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a99ac0acffe78a9d240cc92a28b331dd72b7e5b2b0d0f6d23f98c57bd504281f", "class_name": "RelatedNodeInfo"}}, "text": "13.1. Introduction\n\nThe `dafny` tool implements the following primary capabilities, implemented as various _commands_ within the `dafny` tool:\n\n- checking that the input files represent a valid Dafny program (i.e., syntax, grammar and name and type resolution);\n- verifying that the program meets its specifications, by translating the program to verification conditions\nand checking those with Boogie and an SMT solver, typically Z3;\n- compiling the program to a target language, such as C#, Java, Javascript, Go (and others in development);\n- running the executable produced by the compiler.\n\nIn addition there are a variety of other capabilities, such as formatting files, also implemented as commands;\nmore such commands are expected in the future.", "start_char_idx": 2, "end_char_idx": 754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd7cebef-df59-4819-b5a9-1742cfec7bca": {"__data__": {"id_": "dd7cebef-df59-4819-b5a9-1742cfec7bca", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "66e0b950-44af-4824-9062-9130be86101a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f847c62e1e86298461226146d7d5af65ce09cbad31dd022153cc0ecd9cc71aae", "class_name": "RelatedNodeInfo"}}, "text": "13.2. Installing Dafny", "start_char_idx": 2, "end_char_idx": 24, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56d2b3a4-a250-498a-a921-a0b5a24ca348": {"__data__": {"id_": "56d2b3a4-a250-498a-a921-a0b5a24ca348", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81f11a49-6e90-4560-8def-ca3bbbb174c3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9cee130c8ef63c62c5d171bde1f10c4fe94005a52003e83faefc994a6e0156ea", "class_name": "RelatedNodeInfo"}}, "text": "13.2.1. Command-line tools\n\nThe instructions for installing `dafny` and the required dependencies and environment\nare described on the Dafny wiki:\nhttps://github.com/dafny-lang/dafny/wiki/INSTALL.\nThey are not repeated here to avoid replicating information that\neasily becomes inconsistent and out of date.\nThe dafny tool can also be installed using `dotnet tool install --global dafny`\n(presuming that `dotnet` is already installed on your system).\n\nMost users will find it most convenient to install the pre-built Dafny binaries available on the project release site or using the `dotnet` CLI.\nAs is typical for Open Source projects, dafny can also be built directly from the source files maintained in the github project.\n\nCurrent and past Dafny binary releases can be found at\nhttps://github.com/dafny-lang/dafny/releases for each supported platform.\nEach release is a .zip file with a name combining the release name and the\nplatform. Current platforms are Windows 11, Ubuntu 20 and later, and MacOS 10.14 and later.\n\nThe dafny tool is distributed as a standalone executable. \nA compatible version of the required Z3 solver is included in the release.\nThere are additional dependencies that are needed to compile dafny to particular target languages,\nas described in the release instructions.\nA development environment to _build_ dafny from source requires additional dependencies, \ndescribed here.", "start_char_idx": 2, "end_char_idx": 1405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a18fe188-1c03-4a6f-9604-c9720cd4447b": {"__data__": {"id_": "a18fe188-1c03-4a6f-9604-c9720cd4447b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c901ca2e-f784-4414-8b95-1b6ebc9d3ec9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "387b3ab781b5bdf56024a81871f513483d75f63b8e8bc4017598da01b2438a40", "class_name": "RelatedNodeInfo"}}, "text": "13.2.2. IDEs for Dafny {sec-ides}\n\nDafny source files are text files and can of course be edited with any\ntext editor. However, some tools provide syntax-aware features:\n\n- VSCode, a cross-platform editor for many programming languages has an extension for Dafny. \n  VSCode is available here and the Dafny extension can be installed from within VSCode.\n  The extension provides syntax highlighting, in-line parser,\n  type and verification errors, code navigation, counter-example display and gutter highlights.\n- There is a [Dafny mode for\n    Emacs](https://github.com/boogie-org/boogie-friends).\n- An old Visual Studio plugin is no longer supported\n\nInformation about installing IDE extensions for Dafny is found\non the Dafny INSTALL page in the wiki.\n\nMore information about using VSCode IDE is here.", "start_char_idx": 2, "end_char_idx": 805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "486271c6-3519-447d-a58a-31fe96367426": {"__data__": {"id_": "486271c6-3519-447d-a58a-31fe96367426", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14f111b0-b213-45d0-9492-dc787c816eb1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9b872d0d0aeb2e2b24507c5b580b1882db6ffdc19f5f8989a6730721f4e855cf", "class_name": "RelatedNodeInfo"}}, "text": "13.3. Dafny Programs and Files\n\nA Dafny program is a set of modules.\nModules can refer to other modules, such as through `import` declarations\nor `refines` clauses.\nA Dafny program consists of all the modules needed so that all module\nreferences are resolved.\nDafny programs are contained in files that have a `.dfy` suffix.\nSuch files each hold\nsome number of top-level declarations. Thus a full program may be\ndistributed among multiple files.\nTo apply the `dafny` tool to a Dafny program, the `dafny` tool must be\ngiven all the files making up a complete program (or, possibly, more than\none program at a time). This can be effected either by listing all of the files\nby name on the command-line or by using `include` directives within a file\nto stipulate what other files contain modules that the given files need.\nThus the complete set of modules are all the modules in all the files listed\non the command-line or referenced, recursively, by `include` directives\nwithin those files. It does not matter if files are repeated either as\nincludes or on the command-line.[^fn-duplicate-files]\n\nAll files recursively included are always parsed and type-checked.\nHowever, which files are verified, built, run, or processed by other\ndafny commands depends on the individual command. \nThese commands are described in Section 13.6.1.\n\n[^fn-duplicate-files]: Files may be included more than once or both included and listed on the command line. Duplicate inclusions are detected and each file processed only once.\nFor the purpose of detecting duplicates, file names are considered equal if they have the same absolute path, compared as case-sensitive strings (regardless of whether the underlying file-system is case sensitive).  Using symbolic links may make the same file have a different absolute path; this will generally cause duplicate declaration errors.", "start_char_idx": 2, "end_char_idx": 1857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a5991f4-5368-4085-9572-f1c29b7d1cbd": {"__data__": {"id_": "0a5991f4-5368-4085-9572-f1c29b7d1cbd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea3103f6-c4a4-4322-82f2-48e9e7a52ec1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3f5b9000381803922b7679e7d1ee1fdac1d336cdc44963f4f5886185edd7283f", "class_name": "RelatedNodeInfo"}}, "text": "13.3.1. Dafny Verification Artifacts: the Library Backend and .doo Files {sec-doo-files}\n\nAs of Dafny 4.1, `dafny` now supports outputting a single file containing\na fully-verified program along with metadata about how it was verified.\nSuch files use the extension `.doo`, for Dafny Output Object,\nand can be used as input anywhere a `.dfy` file can be.\n\n`.doo` files are produced by an additional backend called the \"Dafny Library\" backend,\nidentified with the name `lib` on the command line. For example, to build multiple\nDafny files into a single build artifact for shared reuse, the command would look something like:\n\n```bash\ndafny build -t:lib A.dfy B.dfy C.dfy --output:MyLib.doo\n```\n\nThe Dafny code contained in a `.doo` file is not re-verified when passed back to the `dafny` tool,\njust as included files and those passed with the `--library` option are not.\nUsing `.doo` files provides a guarantee that the Dafny code was in fact verified,\nhowever, and therefore offers protection against build system mistakes.\n`.doo` files are therefore ideal for sharing Dafny libraries between projects.\n\n`.doo` files also contain metadata about the version of Dafny used to verify them\nand the values of relevant options that affect the sound separate verification and\ncompilation of Dafny code, such as `--unicode-char`.\nThis means attempting to use a library that was built with options\nthat are not compatible with the currently executing command options\nwill lead to errors.\nThis also includes attempting to use a `.doo` file built with a different version of Dafny,\nalthough this restriction may be lifted in the future.\n\nA `.doo` file is a compressed archive of multiple files, similar to the `.jar` file format for Java packages.\nThe exact file format is internal and may evolve over time to support additional features.\n\nNote that the library backend only supports the newer command-style CLI interface.", "start_char_idx": 2, "end_char_idx": 1912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f17e1255-f947-40cb-940a-bfbddedebbdb": {"__data__": {"id_": "f17e1255-f947-40cb-940a-bfbddedebbdb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20189416-ab72-4333-a547-8e392a5763d0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "816a16235b1e44dd5d84e047f07f11dca29321b79a359d758244054a0879065c", "class_name": "RelatedNodeInfo"}}, "text": "13.3.2. Dafny Translation Artifacts: .dtr Files {sec-dtr-files}\n\nSome options, such as `--outer-module` or `--optimize-erasable-datatype-wrapper`,\naffect what target language code the same Dafny code is translated to.\nIn order to translate Dafny libaries separately from their consuming codebases,\nthe translation process for consuming code needs to be aware\nof what options were used when translating the library.\n\nFor example, if a library defines a `Foo()` function in an `A` module,\nbut `--outer-module org.coolstuff.foolibrary.dafnyinternal` is specified when translating the library to Java,\nthen a reference to `A.Foo()` in a consuming Dafny project\nneeds to be translated to `org.coolstuff.foolibrary.dafnyinternal.A.Foo()`,\nindependently of what value of `--outer-module` is used for the consuming project.\n\nTo meet this need,\n`dafny translate` also outputs a `-.dtr` Dafny Translation Record file.\nLike `.doo` files, `.dtr` files record all the relevant options that were used,\nin this case relevant to translation rather than verification.\nThese files can be provided to future calls to `dafny translate` using the `--translation-record` option,\nin order to provide the details of how various libraries provided with the `--library` flag were translated.\n\nCurrently `--outer-module` is the only option recorded in `.dtr` files,\nbut more relevant options will be added in the future.\nA later version of Dafny will also require `.dtr` files that cover all modules\nthat are defined in `--library` options,\nto support checking that all relevant options are compatible.", "start_char_idx": 2, "end_char_idx": 1577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d5298eb-8779-4769-8e0d-3c6a8cf98598": {"__data__": {"id_": "5d5298eb-8779-4769-8e0d-3c6a8cf98598", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cbe01d3-2570-478b-850e-3575cceab0e4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d2ea9a83344107194217c6a178cd3fed72f6d4024210d4e76358d4fb26622cce", "class_name": "RelatedNodeInfo"}}, "text": "13.4. Dafny Standard Libraries\n\nAs of Dafny 4.4, the `dafny` tool includes standard libraries that any Dafny code base can depend on.\nFor now they are only available when the `--standard-libraries` option is provided,\nbut they will likely be available by default in the next major version of Dafny.\n\nSee https://github.com/dafny-lang/dafny/blob/master/Source/DafnyStandardLibraries/README.md for details.", "start_char_idx": 2, "end_char_idx": 406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f31931cc-4f9d-49e2-86db-190adb4a6b70": {"__data__": {"id_": "f31931cc-4f9d-49e2-86db-190adb4a6b70", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99b922f7-93aa-42fe-adb4-2bd704d77882", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ffac4c39699281c7765c5422e06d110623e3d60c2a047b02dccad8ff8e2c67dd", "class_name": "RelatedNodeInfo"}}, "text": "13.5. Dafny Code Style\n\nThere are coding style conventions for Dafny code, recorded here.\nMost significantly, code is written without tabs and with a 2 space indentation. Following code style conventions \nimproves readability but does not alter program semantics.", "start_char_idx": 2, "end_char_idx": 265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fc21fbb-5376-4497-8d42-99c68cdf863b": {"__data__": {"id_": "4fc21fbb-5376-4497-8d42-99c68cdf863b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5b7a0e8-8d26-4956-af67-1b389e915687", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5cea37d2df6af55e81a353f3c41cdf4c607df87e7cfc947202fc8627e9c4f8b9", "class_name": "RelatedNodeInfo"}}, "text": "13.6. Using Dafny From the Command Line {command-line}\n\n`dafny` is a conventional command-line tool, operating just like other\ncommand-line tools in Windows and Unix-like systems.\nIn general, the format of a command-line is determined by the shell program that is executing the command-line \n(.e.g., bash, the windows shell, COMMAND, etc.), \nbut is expected to be a series of space-separated \"words\", each representing a command, option, option argument, file, or folder.", "start_char_idx": 2, "end_char_idx": 473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "067e0a74-28be-4389-8d6c-0ea328efd9ce": {"__data__": {"id_": "067e0a74-28be-4389-8d6c-0ea328efd9ce", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "692361cd-f270-4ccc-a259-891e9ea1340b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "854aab67246a6edff16536eb3ab8409b38ad2858b06d233c355087b091f9b2b3", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1. dafny commands {sec-dafny-commands}\n\nAs of v3.9.0, `dafny` uses a command-style command-line (like `git` for example); prior to v3.9.0, the \ncommand line consisted only of options and files.\nIt is expected that additional commands will be added in the future.\nEach command may have its own subcommands and its own options, in addition to generally applicable options. \nThus the format of the command-line is\na command name, followed by options and files:\n`dafny   `;\nthe command-name must be the first command-line argument.\n\nThe command-line `dafny --help` or `dafny -h` lists all the available commands.\n\nThe command-line `dafny  --help` (or `-h` or `-?`) gives help information for that particular \\, including the list of options.\nSome options for a particular command are intended only for internal tool development; those are shown using the `--help-internal` option instead of `--help`.\n\nAlso, the command-style command-line has modernized the syntax of options; they are now POSIX-compliant.\nLike many other tools, options now typically begin with a double hyphen, \nwith some options having a single-hyphen short form, such as `--help` and `-h`.\n \nIf no \\ is given, then the command-line is presumed to use old-style syntax, so any previously \nwritten command-line will still be valid.\n\n`dafny` recognizes the commands described in the following subsections. The most commonly used\nare `dafny verify`, `dafny build`, and `dafny run`.\n\nThe command-line also expects the following:\n- Files are designated by absolute paths or paths relative to the current\nworking directory. A command-line argument not matching a known option is considered a filepath, and likely one\nwith an unsupported suffix, provoking an error message.\n- Files containing dafny code must have a `.dfy` suffix.\n- There must be at least one `.dfy` file (except when using `--stdin` or in the case of `dafny format`, see the Dafny format section) \n- The command-line may contain other kinds of files appropriate to\nthe language that the Dafny files are being compiled to. The kind of file is determined by its suffix.\n- Escape characters are determined by the shell executing the command-line.\n- Per POSIX convention, the option `--` means that all subsequent command-line arguments are not options to the dafny tool; they are either files or arguments to the `dafny run` command.\n- If an option is repeated (e.g., with a different argument), then the later instance on the command-line supersedes the earlier instance, with just a few options accumulating arguments.\n- If an option takes an argument, the option name is followed by a `:` or `=` or whitespace and then by the argument value; if the argument itself contains white space, the argument must be enclosed in quotes. It is recommended to use the `:` or `=` style to avoid misinterpretation or separation of a value from its option.\n- Boolean options can take the values `true` and `false` (or any case-insensitive version of those words). For example, the value of `--no-verify` is by default `false` (that is, do verification). \nIt can be explicitly set to true (no verification) using `--no-verify`, `--no-verify:true`, `--no-verify=true`, `--noverify true`; \nit can be explicitly set false (do verification) using `--no-verify:false` or `--no-verify=false` or `--no-verify false`.\n- There is a potential ambiguity when the form `--option value` is used if the value is optional (such as for boolean values). In such a case an argument afer an option (that does not have an argument given with `:` or `=`) is interpreted as the value if it is indeed a valid value for that option. However, better style advises always using a ':' or '=' to set option values.\nNo valid option values in dafny look like filenames or begin with `--`.", "start_char_idx": 2, "end_char_idx": 3777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfbe2203-c2fb-4b96-986d-4a0ef3bfbff4": {"__data__": {"id_": "bfbe2203-c2fb-4b96-986d-4a0ef3bfbff4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb18fdf2-706d-4cf3-b53f-ccb3480a40d8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4d263065a5dec6a3047befcd23c83ff58216bfe67f517208a290cf427f98bc8d", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.1. Options that are not associated with a command\n\nA few options are not part of a command. In these cases any single-hyphen spelling also permits a spelling beginning with '/'.\n- `dafny --help` or `dafny -h` lists all the available commands\n- `dafny -?` or `dafny -help` list all legacy options\n- `dafny --version` (or `-version`) prints out the number of the version this build of dafny implements", "start_char_idx": 2, "end_char_idx": 408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "608e282b-ab48-4deb-807b-486b98093fa8": {"__data__": {"id_": "608e282b-ab48-4deb-807b-486b98093fa8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c07f96be-c3d2-4dd8-b639-05f6d734b6a5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3319bbc38de8abb00e66a98b49ff96321f6adb0aa4cd7bf0a52ab157251693c7", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.2. `dafny resolve` {sec-dafny-resolve}\n\nThe `dafny resolve` command checks the command-line and then parses and typechecks the given files and any included files.\n\nThe set of files considered by `dafny` are those listed on the command-line,\nincluding those named in a `--library` option, and all files that are\nnamed, recursively, in `include` directives in files in the set being considered by the tool.\n\nThe set of files presented to an invocation of the `dafny` tool must \ncontain all the declarations needed to resolve all names and types, \nelse name or type resolution errors will be emitted.\n\n`dafny` can parse and verify sets of files that do not form a \ncomplete program because they are missing the implementations of \nsome constructs such as functions, lemmas, and loop bodies.[^incomplete]\nHowever, `dafny` will need all implementations in order to compile a working executable.\n\n[^incomplete]: Unlike some languages, Dafny does not allow separation of \ndeclaration and implementation of methods, functions and types in separate files, nor, for that matter,\nseparation of specification and declaration. Implementations can be \nomitted simply by leaving them out of the declaration (or a lemma, for example).\nHowever, a combination of `traits` and\n`classes` can achieve a separation of interface\nand specification from\nimplementation.\n\nThe options relevant to this command are\n- those relevant to the command-line itself\n   - `--allow-warnings` --- return a success exit code, even when there are warnings \n\n- those that affect dafny` as a whole, such as\n   - `--cores` --- set the number of cores dafny should use\n   - `--show-snippets` --- emit a line or so of source code along with an error message\n   - `--library` --- include this file in the program, but do not verify or compile it (multiple such library files can be listed using multiple instances of the `--library` option)\n   - `--stdin` -- read from standard input\n- those that affect the syntax of Dafny, such as\n   - `--prelude`\n   - `--unicode-char`\n   - `--function-syntax` \n   - `--quantifier-syntax` \n   - `--track-print-effects`\n   - `--warn-shadowing`\n   - `--warn-missing-constructor-parentheses`", "start_char_idx": 2, "end_char_idx": 2187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee5b201a-1e16-4997-b252-103b4b9e64f5": {"__data__": {"id_": "ee5b201a-1e16-4997-b252-103b4b9e64f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7afd82ea-e6a1-432d-a165-df88e58b5a0a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "378c5e7fca07cf64bf87c369b83d806f2deb61c009ec5a0e76b23007a14a1d6b", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.3. `dafny verify` {sec-dafny-verify}\n\nThe `dafny verify` command performs the `dafny resolve` checks and then attempts to verify each declaration in the program.\n\nA guide to controlling and aiding the verification process is given in a later section.\n\nTo be considered _verified_ all the methods in all the files in a program must be verified, with consistent sets of options,\nand with no unproven assumptions (see `dafny audit` for a tool to help identify such assumptions).\n\nDafny works _modularly_, meaning that each method is considered by itself, using only the specifications of other methods.\nSo, when using the dafny tool, you can verify the program all at once or one file at a time or groups of files at a time.\nOn a large program, verifying all files at once can take quite a while, with little feedback as to progress, though it does\nsave a small amount of work by parsing all files just once. But, one way or another, to have a complete verification, all \nimplementations of all methods and functions must eventually be verified.\n\n- By default, only those files listed on the command-line are verified in a given invocation of the `dafny` tool.\n- The option `--verify-included-files` (`-verifyAllModules` in legacy mode) forces the contents of all non-library files to be verified, whether they are listed on the command-line or recursively included by files on the command-line.\n- The `--library` option marks files that are excluded from `--verify-included-files`. Such a file may also, but need not, be the target of an `include` directive in some file of the program; in any case, such files are included in the program but not in the set of files verified (or compiled). The intent of this option is to mark files that\nshould be considered as libraries that are independently verified prior to being released for shared use.\n- Verifying files individually is equivalent to verifying them in groups, presuming no other changes.\nIt is also permitted to verify completely disjoint files or\nprograms together in a single run of `dafny`.\n\nVarious options control the verification process, in addition to all those described for `dafny resolve`.\n\n- What is verified\n   - `--verify-included-files` (when enabled, all included files are verified, except library files, otherwise just those files on the command-line)\n   - `--relax-definite-assignment`\n   - `--track-print-effects`\n   - `--disable-nonlinear-arithmetic`\n   - `--filter-symbol`\n\n- Control of the proof engine\n   - `--manual-lemma-induction`\n   - `--verification-time-limit`\n   - `--boogie`\n   - `--solver-path`", "start_char_idx": 2, "end_char_idx": 2593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de169333-3fed-4440-ac80-62841f8a941d": {"__data__": {"id_": "de169333-3fed-4440-ac80-62841f8a941d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61cc164e-c27d-4c75-8c37-e87aed2da76c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7cd6c86b2c9e1b870854c02136341a902ca95332256f59e915da9f5e53dd3471", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.4. `dafny translate <language>` {sec-dafny-translate}\n\nThe `dafny translate` command translates Dafny source code to source code for another target programming language.\nThe command always performs the actions of `dafny resolve` and, unless the `--no-verify` option is specified, does the actions of `dafny verify`.\nThe language is designated by a subcommand argument, rather than an option, and is required.\nThe current set of supported target languages is \n- cs (C#)\n- java (Java)\n- js (JavaScript)\n- py (Python)\n- go (Go)\n- cpp (C++ -- but only limited support)\n\nIn addition to generating the target source code, `dafny` may generate build artifacts to assist in compiling the generated code.\nThe specific files generated depend on the target programming language.\nMore detail is given in the section on compilation.\n\nThe `dafny` tool intends that the compiled program in the target language be a semantically faithful rendering of the \n(verified) Dafny program. However, resource and language limitations make this not always possible. \nFor example, though Dafny can express and reason about arrays of unbounded size, \nnot all target programming languages can represent arrays larger than the maximum signed 32-bit integer.\n\nVarious options control the translation process, in addition to all those described for `dafny resolve` and `dafny verify`.\n\n- General options:\n   - `--no-verify` --- turns off all attempts to verify the program\n   - `--verbose` --- print information about generated files\n\n- The translation results\n   - `--output` (or `-o`) --- location of the generated file(s) (this specifies a file path and name; a folder location for artifacts is derived from this name)\n   - `--include-runtime` --- include the Dafny runtime for the target language in the generated artifacts\n   - `--optimize-erasable-datatype-wrapper`\n   - `--enforce-determinism`\n   - `--test-assumptions` --- (experimental) inserts runtime checks for unverified assumptions when they are compilable", "start_char_idx": 2, "end_char_idx": 1997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b087c2f7-8db7-4701-b2de-34c78a5b5c02": {"__data__": {"id_": "b087c2f7-8db7-4701-b2de-34c78a5b5c02", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "962edbc5-0b6c-46ee-a033-e88bf8033d24", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4badb8ddadafcc147b6f9272397a72043fc8c3f77599df17f606e43285a59452", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.5. `dafny build` {sec-dafny-build}\n\nThe `dafny build` command runs `dafny translate` and then compiles the result into an executable artifact for the target platform,\nsuch as a `.exe` or `.dll` or executable `.jar`, or just the source code for an interpreted language.\nIf the Dafny program does not have a Main entry point, then the build command creates a library, such as a `.dll` or `.jar`.\nAs with `dafny translate`, all the previous phases are also executed, including verification (unless `--no-verify` is a command-line option).\nBy default, the generated file is in the same directory and has the same name with a different extension as the first\n.dfy file on the command line. This location and name can be set by the `--output` option.\n\nThe location of the `Main` entry point is described [here](#sec-user-guide-main}.\n\nThere are no additional options for `dafny build` beyond those for `dafny translate` and the previous compiler phases.\n\nNote that `dafny build` may do optimizations that `dafny run` does not.\n\nDetails for specific target platforms are described in Section 25.7.", "start_char_idx": 2, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "456772ca-16b2-4144-ad26-971aca9c7b50": {"__data__": {"id_": "456772ca-16b2-4144-ad26-971aca9c7b50", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "156ef9dd-49ae-4f37-b4cc-c8160caadf55", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "68da9a1e29bcdcc3f0fee054f146c4fd68d617ee0e5adb68354ea5d01b530e54", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.6. `dafny run` {sec-dafny-run}\n\nThe `dafny run` command compiles the Dafny program and then runs the resulting executable.\nNote that `dafny run` is engineered to quickly compile and launch the program; \n`dafny build` may take more time to do optimizations of the build artifacts.\n\nThe form of the `dafny run` command-line is slightly different than for other commands.\n- It permits just one `.dfy` file, which must be the file containing the `Main` entry point;\nthe location of the `Main` entry point is described [here](#sec-user-guide-main}.\n- Other files are included in the program either by `include` directives within that one file or by \nthe `--input` option on the command-line. \n- Anything that is not an option and is not that one dfy file\nis an argument to the program being run (and not to dafny itself).\n- If the `--` option is used, then anything after that option is a command-line argument to the program being run.\n\nDuring development, users must use `dafny run --allow-warnings` if they want to run their Dafny code when it contains warnings.\n\nHere are some examples:\n  - `dafny run A.dfy` -- builds and runs the Main program in `A.dfy` with no command-line arguments\n  - `dafny run A.dfy --no-verify` -- builds the Main program in `A.dfy` using the `--no-verify` option, and then runs the program with no command-line arguments\n  - `dafny run A.dfy -- --no-verify` -- builds the Main program in `A.dfy` (_not_ using the `--no-verify` option), and then runs the program with one command-line argument, namely `--no-verify`\n  - `dafny run A.dfy 1 2 3 B.dfy` -- builds the Main program in `A.dfy` and\nthen runs it with the four command-line arguments `1 2 3 B.dfy`\n  - `dafny run A.dfy 1 2 3 --input B.dfy` -- builds the Main program in `A.dfy` and `B.dfy`, and\nthen runs it with the three command-line arguments `1 2 3`\n  - `dafny run A.dfy 1 2 -- 3 -quiet` -- builds the Main program in `A.dfy` and then runs it with the four command-line arguments `1 2 3 -quiet`\n\nEach time `dafny run` is invoked, the input Dafny program is compiled before it is executed.\nIf a Dafny program should be run more than once, it can be faster to use `dafny build`,\nwhich enables compiling a Dafny program once and then running it multiple times.\n\n**Note:** `dafny run` will typically produce the same results as the executables produced by `dafny build`.  The only expected differences are these:\n- performance --- `dafny run` may not optimize as much as `dafny build`\n- target-language-specific configuration issues ---  e.g. encoding issues: `dafny run` sets language-specific flags to request UTF-8 output for the `print` statement in all languages, whereas `dafny build` leaves language-specific runtime configuration to the user.", "start_char_idx": 2, "end_char_idx": 2742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb71c7e4-451d-469f-9278-fc08f3ea5463": {"__data__": {"id_": "cb71c7e4-451d-469f-9278-fc08f3ea5463", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0f1e44b-2ec8-41be-9e98-b24df78fd1df", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cfbfe4dd08018a9add565d3ef6c8917a52bba7bd660727ea3aaa905c66939318", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.7. `dafny server` {sec-dafny-server}\n\nThe `dafny server` command starts the Dafny Language Server, which is an LSP-compliant implementation of Dafny.\nThe Dafny VSCode extension uses this LSP implementation, which in turn uses the same core Dafny implementation as the command-line tool.\n\nThe Dafny Language Server is described in more detail here.", "start_char_idx": 2, "end_char_idx": 356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ef2d278-eb81-492f-bdeb-f1d4b0867d53": {"__data__": {"id_": "7ef2d278-eb81-492f-bdeb-f1d4b0867d53", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a4abe2e-f4b4-4daa-8dd8-cd9ede469a94", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b4467ca0d33b12ee0eab5fce54daf5995dc94f825fccbc2ac406e0a6cda7a0c0", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.8. `dafny audit` {sec-dafny-audit}\n\nThe `dafny audit` command reports issues in the Dafny code that might limit the soundness claims of verification.\n\n_This command is under development._\n\nThe command executes the `dafny resolve` phase (accepting its options) and has the following additional options:\n\n- `--report-file:` --- spcifies the path where the audit\n   report file will be stored. Without this option, the report\n    will be issued as standard warnings, written to standard-out.\n- `--report-format:` --- specifies the file format to use for\n   the audit report. Supported options include: \n   - 'txt, 'text': plain text in the format of warnings\n   - 'html': standalone HTML ('html')\n   - 'md', 'markdown', 'md-table', 'markdown-table': a Markdown table\n   - 'md-ietf', 'markdown-ietf': an IETF-language document in Markdown format\n   - The default is to infer the format from the filename extension\n- `--compare-report` --- compare the report that would have\n   been generated with the existing file given by --report-file, and fail if\n   they differ.\n\nThe command emits exit codes of\n- 1 for command-line errors\n- 2 for parsing, type-checking or serious errors in running the auditor (e.g. failure to write a report or when report comparison fails)\n- 0 for normal operation, including operation that identifies audit findings\n\nIt also takes the `--verbose` option, which then gives information about the files being formatted.\n\nThe `dafny audit` command currently reports the following:\n\n* Any declaration marked with the `{:axiom}` attribute.\nThis is typically used to mark that a lemma with no body (and is therefore assumed to always be true) is intended as an axiom.\nThe key purpose of the `audit` command is to ensure that all assumptions are intentional and acknowledged.\nTo improve assurance, however, try to provide a proof.\n\n* Any declaration marked with the `{:verify false}` attribute, which tells the verifier to skip verifying this declaration.\nRemoving the attribute and providing a proof will improve assurance.\n\n* Any declaration marked with the `{:extern}` attribute that has at least one `requires` or `ensures` clause.\nIf code implemented externally, and called from Dafny, has an `ensures` clause, Dafny assumes that it satisfies that clause.\nSince Dafny cannot prove properties about code written in other languages,\nadding tests to provide evidence that any `ensures` clauses do hold can improve assurance.\nThe same considerations apply to `requires` clauses on Dafny code intended to be called from external code.\n\n* Any definition with an `assume` statement in its body.\nTo improve assurance, attempt to convert it to an `assert` statement and prove that it holds.\nSuch a definition will not be compilable unless the statement is also marked with `{:axiom}`.\nAlternatively, converting it to an `expect` statement will cause it to be checked at runtime.\n\n* Any method marked with `decreases *`.\nSuch a method may not terminate.\nAlthough this cannot cause an unsound proof, in the logic of Dafny,\nit's generally important that any non-termination be intentional.\n\n* Any `forall` statement without a body.\nThis is equivalent to an assumption of its conclusion.\nTo improve assurance, provide a body that proves the conclusion.\n\n* Any loop without a body.\nThis is equivalent to an assumption of any loop invariants in the code after the loop.\nTo improve assurance, provide a body that establishes any stated invariants.\n\n* Any declaration with no body and at least one `ensures` clause.\nAny code that calls this declaration will assume that all `ensures` clauses are true after it returns.\nTo improve assurance, provide a body that proves that any `ensures` clauses hold.", "start_char_idx": 2, "end_char_idx": 3711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b144891-3462-431b-8f0b-efcaeb4bbb27": {"__data__": {"id_": "1b144891-3462-431b-8f0b-efcaeb4bbb27", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9e3e7b8-2f29-4f6d-87af-1840b01f1cbe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4cc29c9673bcf9b6983723bc69ec12e8fac2ec1cb37202d3d16f1fc7a1541f9c", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.9. `dafny format` {sec-dafny-format}\n\nDafny supports a formatter, which for now only changes the indentation of lines in a Dafny file, so that it conforms\nto the idiomatic Dafny code formatting style.\nFor the formatter to work, the file should be parsed correctly by Dafny.\n\nThere are four ways to use the formatter:\n\n* `dafny format ` formats the given Dafny files and the Dafny files in the folders, recursively, altering the files in place. For example, `dafny format .` formats all the Dafny files recursively in the current folder.\n* `dafny format --print ` formats each file but instead of altering the files, output the formatted content to stdout\n* `dafny format --check ` does not alter files. It will print a message concerning which files need formatting and return a non-zero exit code if any files would be changed by formatting.\n\nYou can also use `--stdin` instead of providing a file, to format a full Dafny file from the standard input.\nInput files can be named along with `--stdin`, in which case both the files and the content of the stdin are formatted.\n\nEach version of `dafny format` returns a non-zero return code if there are any command-line or parsing\nerrors or if --check is stipulated and at least one file is not the same as its formatted version.  \n`dafny format` does not necessarily report name or type resolution errors and does not attempt verification.", "start_char_idx": 2, "end_char_idx": 1395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c867d0fe-a986-4cce-905e-a9d12f95f661": {"__data__": {"id_": "c867d0fe-a986-4cce-905e-a9d12f95f661", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4862ddeb-5783-4ee6-a1e3-0a19335fc024", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "feac68e7bde77f4fe96546697e9883a4c2cd4be00f5b9cfa8395f50d8c2e6f8f", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.10. `dafny test` {sec-dafny-test}\n \nThis command (verifies and compiles the program and) runs every method in the program that is annotated with the `{:test}` attribute.\nVerification can be disabled using the `--no-verify` option. `dafny test` also accepts all other options of the `dafny build` command. \nIn particular, it accepts the `--target` option that specifies the programming language used in the build and execution phases.\n\n`dafny test` also accepts these options:\n\n- `-spill-translation` - (default disabled) when enabled the compilation artifacts are retained\n- `--output` - gives the folder and filename root for compilation artifacts\n- `--methods-to-test` - the value is a (.NET) regular expression that is matched against the fully\n  qualified name of the method; only those methods that match are tested\n- `--coverage-report` - the value is a directory in which Dafny will save an html coverage report highlighting parts of\n  the program that execution of the tests covered.\n\nThe order in which the tests are run is not specified.\n\nFor example, this code (as the file `t.dfy`)\n\n```dafny\nmethod {:test} m() {\n  mm();\n  print \"Hi!\\n\";\n}\n\nmethod mm() {\n  print \"mm\\n\";\n}\n\nmodule M {\n  method {:test} q() {\n    print 42, \"\\n\";\n  }\n}\n\nclass A {\n  static method {:test} t() { print \"T\\n\"; }\n}\n```\nand this command-line\n```bash\ndafny test --no-verify t.dfy\n```\nproduce this output text:\n```text\nM.q: 42\nPASSED\nA.t: T\nPASSED\nm: mm\nHi!\nPASSED\n```\n\nand this command-line\n```bash\ndafny test --no-verify --methods-to-test='m' t.dfy\n```\nproduces this output text:\n```text\nm: mm\nHi!\nPASSED\n```", "start_char_idx": 2, "end_char_idx": 1605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7963b6bb-1344-4359-9379-c19251370d3e": {"__data__": {"id_": "7963b6bb-1344-4359-9379-c19251370d3e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8dac5fb1-d597-4138-8b22-453846af2fe8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "be8a7b567a2874fbd0ca8d3af3d6a9810dad04cfdb31b253f41ca23dd0c039c8", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.11. `dafny doc` [Experimental] {sec-dafny-doc}\n\nThe `dafny doc` command generates HTML documentation pages describing the contents of each\nmodule in a set of files, using the documentation comments in the source files.\nThis command is experimental; user feedback and contributor PRs on the layout of information and the navigation are welcome.\n\n* The format of the documentation comments is described here.\n* The `dafny doc` command accepts either files or folders as command-line arguments. A folder\nrepresents all the `.dfy` files contained recursively in that folder. A file that is a `.toml`\nproject file represents all the files and options listed in the project file.\n* The command first parses and resolves the given files; it only proceeds to produce documentation\nif type resolution is successful (on all files). All the command-line options relevant to \n`dafny resolve` are available for `dafny doc`.\n* The value of the `--output` option is a folder in which all the generated files will be placed.\nThe default location is `./docs`. The folder is created if it does not already exist.\nAny existing content of the folder is overwritten.\n* If `--verbose` is enabled, a list of the generated files is emitted to stdout.\n* The output files contain information stating the source .dfy file in which the module is\ndeclared. The `--file-name` option controls the form of the filename in that information:\n   * --file-name:none -- no source file information is emitted\n   * --file-name:name -- (default) just the file name is emitted (e.g., `Test.dfy`)\n   * --file-name:absolute -- an absolute full path is emitted\n   * --file-name:relative= -- a file name relative to the given prefix is emitted\n* If `--modify-time` is enabled, then the generated files contain information stating the\nlast modified time of the source of the module being documented.\n* The `--program-name` option states text that will be included in the heading of the TOC and index pages\n\nThe output files are HTML files, all contained in the given folder, one per module plus an \n`index.html` file giving an overall table of contents and a `nameindex.html` file containing\nan alphabetical by name list of all the declarations in all the modules.\nThe documentation for the root module is in `_.html`.", "start_char_idx": 2, "end_char_idx": 2281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54639d29-7d53-42bd-be6c-bdd77c2c986f": {"__data__": {"id_": "54639d29-7d53-42bd-be6c-bdd77c2c986f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d398e272-2de2-4c5d-b759-0979bf1423e0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "8e8fa46f4d6976c72ff7e9207648ea37558343192af0ef2bd9515137b601de7d", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.12. `dafny generate-tests` {sec-dafny-generate-tests}\n\nThis _experimental_ command allows generating tests from Dafny programs.\nThe tests provide complete coverage of the implementation and one can execute them using the `dafny test` command.\nDafny can target different notions of coverage while generating tests, with basic-block coverage being the recommended setting.\nBasic blocks are extracted from the Boogie representation of the Dafny program, with one basic block corresponding\nto a statement or a non-short-circuiting subexpression in the Dafny code. The underlying implementation uses the \nverifier to reason about the reachability of different basic blocks in the program and infers necessary test inputs \nfrom counterexamples.\n\nFor example, this code (as the file `program.dfy`)\n\n```dafny\nmodule M {\n  function {:testEntry} Min(a: int, b: int): int {\n    if a < b then a else b\n  }\n}\n```\nand this command-line\n```bash\ndafny generate-tests Block program.dfy\n```\nproduce two tests:\n\n```dafny\ninclude \"program.dfy\"\nmodule UnitTests {\n  import M\n  method {:test} Test0() {\n    var r0 := M.Min(0, 0);\n  }\n  method {:test} Test1() {\n    var r0 := M.Min(0, 1);\n  }\n}\n```\n\nThe two tests together cover every basic block within the `Min` function in the input program. \nNote that the `Min` function is annotated with the `{:testEntry}` attribute. This attribute marks `Min` as \nthe entry point for all generated tests, and there must always be at least one method or function so annotated.\nAnother requirement is that any top-level declaration that is not itself a module (such as class, method, function, \netc.) must be a member of an explicitly named module, which is called `M` in the example above.\n\n_This command is under development and not yet fully functional._", "start_char_idx": 2, "end_char_idx": 1781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43dabf61-d97f-4304-b98d-ac408cf99223": {"__data__": {"id_": "43dabf61-d97f-4304-b98d-ac408cf99223", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfd9870a-646c-491e-957a-ca7962efd698", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3ce69775e7924bf1602c5c38f75339414ba10ebe63ed6c7043c136517cec637a", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.13. `Inlining` {sec-dafny-generate-tests-inlining}\n\nBy default, when asked to generate tests, Dafny will produce _unit tests_, which guarantee coverage of basic blocks\nwithin the method they call but not within any of its callees. By contrast, system-level tests can\nguarantee coverage of a large part of the program while at the same time using a single method as an entry point. \nIn order to prompt Dafny to generate system-level tests, one must use the `{:testInline}` attribute. \n\nFor example, this code (as the file `program.dfy`)\n\n```dafny\nmodule M {\n  function {:testInline} Min(a: int, b: int): int {\n    if a < b then a else b\n  }\n  method {:testEntry} Max(a: int, b: int) returns (c: int)\n    // the tests convert the postcondition below into runtime check:\n    ensures c == if a > b then a else b\n  {\n    return -Min(-a, -b);\n  }\n}\n```\nand this command-line\n```bash\ndafny generate-tests Block program.dfy\n```\nproduce two tests:\n\n```dafny\ninclude \"program.dfy\"\nmodule UnitTests {\n  import M\n  method {:test} Test0() {\n    var r0 := M.Max(7719, 7720);\n    expect r0 == if 7719 > 7720 then 7719 else 7720;\n  }\n  method {:test} Test1() {\n    var r0 := M.Max(1, 0);\n    expect r0 == if 1 > 0 then 1 else 0;\n  }\n}\n```\n\nWithout the use of the `{:testInline}` attribute in the example above, Dafny will only generate a single test \nbecause there is only one basic-block within the `Max` method itself -- all the branching occurs withing the `Min` function.\nNote also that Dafny automatically converts all non-ghost postconditions on the method under tests into `expect` statements,\nwhich the compiler translates to runtime checks in the target language of choice.\n\nWhen the inlined method or function is recursive, it might be necessary to unroll the recursion several times to \nget adequate code coverage. The depth of recursion unrolling should be provided as an integer argument to the `{:testInline}`\nattribute. For example, in the program below, the function `Mod3` is annotated with `{:testInline 2}` and \nwill, therefore, be unrolled twice during test generation. The function naively implements division by repeatedly and\nrecursively subtracting `3` from its argument, and it returns the remainder of the division, which is one of \nthe three base cases. Because the `TestEntry` method calls `Mod3` with an argument that is guaranteed to be at least `3`,\nthe base case will never occur on first iteration, and the function must be unrolled at least twice for Dafny to generate\ntests covering any of the base cases:\n\n\n```dafny\nmodule M {\n  function {:testInline 2} Mod3 (n: nat): nat\n    decreases n\n  {\n    if n == 0 then 0 else\n    if n == 1 then 1 else\n    if n == 2 then 2 else\n    Mod3(n-3)\n  }\n  method {:testEntry} TestEntry(n: nat) returns (r: nat)\n    requires n >= 3\n  {\n    r := Mod3(n);\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 2826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b3fe7a2-352c-400f-b554-519e9957bfa5": {"__data__": {"id_": "1b3fe7a2-352c-400f-b554-519e9957bfa5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f09081e-7ba0-43f1-be73-6993318d1c8b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "eef625944d21331662fb706ca40899bbd91bcab4fc6199c5daf7ffd1123242b4", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.14. `Command Line Options` {sec-dafny-generate-tests-clo}\n\nTest generation supports a number of command-line options that control its behavior.\n\nThe first argument to appear after the `generate-test` command specifies the coverage criteria Dafny will attempt to satisfy. \nOf these, we recommend basic-block coverage (specified with keyword `Block`), which is also the coverage criteria used\nthroughout the relevant parts of this reference manual. The alternatives are path coverage (`Path`) and block coverage \nafter inlining (`InlinedBlock`). Path coverage provides the most diverse set of tests but it is also the most expensive \nin terms of time it takes to produce these tests. Block coverage after inlining is a call-graph sensitive version of \nblock coverage - it takes into account every block in a given method for every path through the call-graph to that method.\n\nThe following is a list of command-line-options supported by Dafny during test generation:\n\n- `--verification-time-limit` - the value is an integer that sets a timeout for generating a single test. \n  The default is 20 seconds.\n- `--length-limit` - the value is an integer that is used to limit the lenghts or all sequences and sizes of all \n  maps and sets that test generation will consider as valid test inputs. This can sometimes be necessary to \n  prevent test generation from creating unwieldy tests with excessively long strings or large maps. This option is\n  disabled by default\n- `--coverage-report` - the value is a directory in which Dafny will save an html coverage report highlighting parts of\n  the program that the generated tests are expected to cover.\n- `--print-bpl` - the value is the name of the file to which Dafny will save the Boogie code used for generating tests.\n  This options is mostly useful for debugging test generation functionality itself.\n- `--force-prune` - this flag enables axiom pruning, a feature which might significantly speed up test generation but \n  can also reduce coverage or cause Dafny to produce tests that do not satisfy the preconditions.\n\nDafny will also automatically enforce the following options during test generation: `--enforce-determinism`, \n`/typeEncoding:p` (an option passed on to Boogie).", "start_char_idx": 2, "end_char_idx": 2235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11712e52-41da-4974-9ed4-749e2ba331f7": {"__data__": {"id_": "11712e52-41da-4974-9ed4-749e2ba331f7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7c80cc1-3e08-47b5-9e1c-3eab0e9a3d1c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b54947da0750094e4baf572a7f1a257c4cbbdbfd9e3d9e6447d20f2a28fc9aef", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.15. `dafny find-dead-code` {sec-dafny-find-dead-code}\n\nThis _experimental_ command finds dead code in a program, that is, basic-blocks within a method that are not reachable \nby any inputs that satisfy the method's preconditions. The underlying implementation is identical to that of\n`dafny generate-tests` command and can be controlled by the same command line options and method \nattributes.\n\nFor example, this code (as the file `program.dfy`)\n\n```dafny\nmodule M {\n  function {:testEntry} DescribeProduct(a: int): string {\n    if a * a < 0 \n    then \"Product is negative\"\n    else \"Product is nonnegative\"\n  }\n}\n```\nand this command-line\n```bash\ndafny find-dead-code program.dfy\n```\nproduce this output:\n```text\nprogram.dfy(5,9) is reachable.\nprogram.dfy(3,4):initialstate is reachable.\nprogram.dfy.dfy(5,9)#elseBranch is reachable.\nprogram.dfy.dfy(4,9)#thenBranch is potentially unreachable.\nOut of 4 basic blocks, 3 are reachable.\n```\n\nDafny reports that the then branch of the condition is potentially unreachable because the verifier proves that no\ninput can reach it. In this case, this is to be expected, since the product of two numbers can never be negative. In\npractice, `find-dead-code` command can produce both false positives (if the reachability query times out) and false\nnegatives (if the verifier cannot prove true unreachability), so the results of such a report should always be\nreviewed.\n\n_This command is under development and not yet fully functional._", "start_char_idx": 2, "end_char_idx": 1484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6752744b-5c77-413d-be9c-5a596c9e7465": {"__data__": {"id_": "6752744b-5c77-413d-be9c-5a596c9e7465", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8e6ed71-f4d6-4b82-a999-8c550bdc5437", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "308d5e63d25d158f19fd74320100576064be68056f4b589f7efa068f9036e039", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.16. `dafny measure-complexity` {sec-dafny-measure-complexity}\n\nThis _experimental_ command reports complexity metrics of a program.\n\n_This command is under development and not yet functional._", "start_char_idx": 2, "end_char_idx": 201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0b1c9e8-10d7-47d1-8c77-08f0b07275bf": {"__data__": {"id_": "b0b1c9e8-10d7-47d1-8c77-08f0b07275bf", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d04afa5e-4514-44d6-b040-79f7b7688adc", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c5cc8450b75f4ff8679646431ee5ea67462cae2f2232db12a09def0d078b0499", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.17. Plugins\n\nThis execution mode is not a command, per se, but rather a command-line option that enables executing plugins to the dafny tool.\nPlugins may be either standalone tools or be additions to existing commands.\n\nThe form of the command-line is `dafny --plugin:` or `dafny  --plugin:`\nwhere the argument to `--plugin` gives the path to the compiled assembly of the plugin and the arguments to be provided to the plugin.\n\nMore on writing and building plugins can be found in this section.", "start_char_idx": 2, "end_char_idx": 503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e226c319-f12f-441e-9aba-a86c33a915c4": {"__data__": {"id_": "e226c319-f12f-441e-9aba-a86c33a915c4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "baf8c241-724f-4ab5-b86f-ab440560ba5d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "01eeb9182d431d9ffbc51a015738d1e897ae2ccd28c57bab4d6cab41f3c03da6", "class_name": "RelatedNodeInfo"}}, "text": "13.6.1.18. Legacy operation\n\nPrior to implementing the command-based CLI, the `dafny` command-line simply took files and options and the arguments to options.\nThat legacy mode of operation is still supported, though discouraged. The command `dafny -?` produces the list of legacy options.\nIn particular, the common commands like `dafny verify` and `dafny build` are accomplished with combinations of \noptions like `-compile`, `-compileTarget` and `-spillTargetCode`.\n \nUsers are encouraged to migrate to the command-based style of command-lines and the double-hyphen options.", "start_char_idx": 2, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e16f41a-172b-49e6-abe6-c3030d7f23ab": {"__data__": {"id_": "6e16f41a-172b-49e6-abe6-c3030d7f23ab", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5377d929-8d3d-4a0e-abe0-fb8ebb492d53", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a1325f729c0834978cdb674635d139113674a621638aece47692b0649fe9b156", "class_name": "RelatedNodeInfo"}}, "text": "13.6.2. In-tool help\n\nAs is typical for command-line tools, `dafny` provides in-tool help through the `-h` and `--help` options:\n- `dafny -h`, `dafny --help` list the commands available in the `dafny` tool\n- `dafny -?` lists all the (legacy) options implemented in `dafny`\n- `dafny  -h`, `dafny  --help`, `dafny  -?` list the options available for that command", "start_char_idx": 2, "end_char_idx": 362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16b58216-691c-4621-8ce8-8a6a97168e65": {"__data__": {"id_": "16b58216-691c-4621-8ce8-8a6a97168e65", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a070ada-10b2-4516-b388-9f13c0953eaa", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c1f164e6631e69a93c6a7721c3a08e65361fa492ff9c32b13002a3012f81376", "class_name": "RelatedNodeInfo"}}, "text": "13.6.3. dafny exit codes {sec-exit-codes}\n\nThe basic resolve, verify, translate, build, run and commands of dafny terminate with these exit codes.\n\n* 0 -- success\n* 1 -- invalid command-line arguments\n* 2 -- syntax, parse, or name or type resolution errors\n* 3 -- compilation errors\n* 4 -- verification errors\n\nErrors in earlier phases of processing typically hide later errors.\nFor example, if a program has parsing errors, verification or compilation will\nnot be attempted.\n\nOther dafny commands may have their own conventions for exit codes. \nHowever in all cases, an exit code of 0 indicates successful completion of the command's\ntask and small positive integer values indicate errors of some sort.", "start_char_idx": 2, "end_char_idx": 705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce641b0f-3469-4e06-a624-d2f8171d9823": {"__data__": {"id_": "ce641b0f-3469-4e06-a624-d2f8171d9823", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "afe1e043-3f92-4df6-9421-597b68356f11", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ac42de34ceb8fe9cd2f6b2c3870bd34c220531c8cb1dea5e73149ffe201f3693", "class_name": "RelatedNodeInfo"}}, "text": "13.6.4. dafny output\n\nMost output from `dafny` is directed to the standard output of the shell invoking the tool, though some goes to standard error.\n- Command-line errors: these are produced by the dotnet CommandLineOptions package are directed to **standard-error**\n- Other errors: parsing, typechecking, verification and compilation errors are directed to **standard-out**\n- Non-error progress information also is output to **standard-out**\n- Dafny `print` statements, when executed, send output to **standard-out**\n- Dafny `expect` statements (when they fail) send a message to **standard-out**.\n- Dafny I/O libraries send output explicitly to either **standard-out or standard-error**", "start_char_idx": 2, "end_char_idx": 691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ba94a4e-a25d-436a-a415-edbc9b20704f": {"__data__": {"id_": "8ba94a4e-a25d-436a-a415-edbc9b20704f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c7bbd32-64c2-4eee-a147-e54a8b6caa63", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "962cb673aedcae35e111972b061a852b24f20bf251e907a66d635df514927740", "class_name": "RelatedNodeInfo"}}, "text": "13.6.5. Project files {sec-project-files}\n\nCommands on the Dafny CLI that can be passed a Dafny file can also be passed a Dafny project file. Such a project file may define which Dafny files the project contains and which Dafny options it uses. The project file must be a TOML file named `dfyconfig.toml` for it to work on both the CLI and in the Dafny IDE, although the CLI will accept any `.toml` file. \nHere's an example of a Dafny project file:\n\n```toml\nincludes = [\"src/**/*.dfy\"]\nexcludes = [\"**/ignore.dfy\"]\n\nbase = [\"../commonOptions.dfyconfig.toml\"]\n\n[options]\nenforce-determinism = true\nwarn-shadowing = true\ndefault-function-opacity = \"Opaque\"\n```\n\n- At most one `.toml` file may be named on the command-line; when using the command-line no `.toml` file is used by default.\n- In the `includes` and `excludes` lists, the file paths may have wildcards, including `**` to mean any number of directory levels; filepaths are relative to the location of the `.toml` file in which they are named.\n- Dafny will process the union of (a) the files on the command-line and (b) the files designated in the `.toml` file, which are those specified by the `includes`, omitting those specified by the `excludes`.\nThe `excludes` does not remove any files that are listed explicitly on the command-line.\n- Under the section `[options]`, any options from the Dafny CLI can be specified using the option's name without the `--` prefix. \n- When executing a `dafny` command using a project file, any options specified in the file that can be applied to the command, will be. Options that can't be applied are ignored; options that are invalid for any dafny command trigger warnings.\n- Options specified on the command-line take precedence over any specified in the project file, no matter the order of items on the command-line.\n- When using a Dafny IDE based on the `dafny server` command, the IDE will search for project files by traversing up the file tree looking for the closest `dfyconfig.toml` file to the dfy being parsed that it can find. Options from the project file will override options passed to `dafny server`.\n\n- The field 'base' can be used to let one project file inherit options from another. If an option is specified in both, then the value specified in the inheriting project is used. Includes from the inheritor override excludes from the base.\n\nIt's not possible to use Dafny project files in combination with the legacy CLI UI.", "start_char_idx": 2, "end_char_idx": 2443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bc9b8bf-4aa9-477a-82c1-cb6fe91065f5": {"__data__": {"id_": "2bc9b8bf-4aa9-477a-82c1-cb6fe91065f5", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "43f7061c-ed72-46ec-94f1-bab1ac42ecfe", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08215a1951042a8d6d9d65118c67697bee25dc3d3e3aa8ac5cb3fa04a769b012", "class_name": "RelatedNodeInfo"}}, "text": "13.7. Verification {sec-verification}\n\nIn this section, we suggest a methodology to figure out why a single assertion might not hold, we propose techniques to deal with assertions that slow a proof down, we explain how to verify assertions in parallel or in a focused way, and we also give some more examples of useful options and attributes to control verification.", "start_char_idx": 2, "end_char_idx": 368, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b4bc65ea-8fc0-4f86-8eb0-cb8b98e02a5e": {"__data__": {"id_": "b4bc65ea-8fc0-4f86-8eb0-cb8b98e02a5e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec353e76-8c2e-41a0-869c-d0f2ff16a3a8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f68683a0ff1c35447282de0541df7a9c739d767594d917ab49c1935a6f66951d", "class_name": "RelatedNodeInfo"}}, "text": "13.7.1. Verification debugging when verification fails {sec-verification-debugging}\n\nLet's assume one assertion is failing (\"assertion might not hold\" or \"postcondition might not hold\"). What should you do next?\n\nThe following section is textual description of the animation below, which illustrates the principle of debugging an assertion by computing the weakest precondition:  \n!weakestpreconditionDemo", "start_char_idx": 2, "end_char_idx": 407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe5d221d-5b5e-49d9-af7c-5bf8d0cc15fb": {"__data__": {"id_": "fe5d221d-5b5e-49d9-af7c-5bf8d0cc15fb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25f94556-72be-46a7-a7c2-d99c4ebe633d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9301e440b7e69bb57bf3b48d1b9fdb9bd69ec7c21f061a22ef1a14266c28a455", "class_name": "RelatedNodeInfo"}}, "text": "13.7.1.1. Failing postconditions {sec-failing-postconditions}\nLet's look at an example of a failing postcondition.\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  if b {\n    return j;\n  }//^^^^^^^ a postcondition might not hold on this return path.\n  i := 2;\n}\n```\nOne first thing you can do is replace the statement `return j;` by two statements `i := j; return;` to better understand what is wrong:\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  if b {\n    i := j;\n    return;\n  }//^^^^^^^ a postcondition might not hold on this return path.\n  i := 2;\n}\n```\nNow, you can assert the postcondition just before the return:\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  if b {\n    i := j;\n    assert 2 <= i; // This assertion might not hold\n    return;\n  }\n  i := 2;\n}\n```\nThat's it! Now the postcondition is not failing anymore, but the `assert` contains the error!\nyou can now move to the next section to find out how to debug this `assert`.", "start_char_idx": 2, "end_char_idx": 1153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55490801-9cae-4ce7-a189-7e7ff152a33d": {"__data__": {"id_": "55490801-9cae-4ce7-a189-7e7ff152a33d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09936982-5c83-4403-914c-c1147dc97e5d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b366da05338959d29f8cadd345f6e314a4bd299f1e98f6e0c7f4a97f52612297", "class_name": "RelatedNodeInfo"}}, "text": "13.7.1.2. Failing asserts {sec-failing-asserts}\nIn the previous section, we arrived at the point where we have a failing assertion:\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  if b {\n    i := j;\n    assert 2 <= i; // This assertion might not hold\n    return;\n  }\n  i := 2;\n}\n```\nTo debug why this assert might not hold, we need to _move this assert up_, which is similar to _computing the weakest precondition_.\nFor example, if we have `x := Y; assert F;` and the `assert F;` might not hold, the weakest precondition for it to hold before `x := Y;` can be written as the assertion `assert F[x:= Y];`, where we replace every occurence of `x` in `F` into `Y`.\nLet's do it in our example:\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  if b {\n    assert 2 <= j; // This assertion might not hold\n    i := j;\n    assert 2 <= i;\n    return;\n  }\n  i := 2;\n}\n```\nYay! The assertion `assert 2 <= i;` is not proven wrong, which means that if we manage to prove `assert 2 <= j;`, it will work.\nNow, this assert should hold only if we are in this branch, so to _move the assert up_, we need to guard it.\nJust before the `if`, we can add the weakest precondition `assert b ==> (2 <= j)`:\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  var j := if !b then 3 else 1;\n  assert b  ==>  2 <= j;  // This assertion might not hold\n  if b {\n    assert 2 <= j;\n    i := j;\n    assert 2 <= i;\n    return;\n  }\n  i := 2;\n}\n```\nAgain, now the error is only on the topmost assert, which means that we are making progress.\nNow, either the error is obvious, or we can one more time replace `j` by its value and create the assert `assert b ==> ((if !b then 3 else 1) >= 2);`\n\n```dafny\nmethod FailingPostcondition(b: bool) returns (i: int)\n  ensures 2 <= i\n{\n  assert b  ==>  2 <= (if !b then 3 else 1);  // This assertion might not hold\n  var j := if !b then 3 else 1;\n  assert b  ==>  2 <= j;\n  if b {\n    assert 2 <= j;\n    i := j;\n    assert 2 <= i;\n    return;\n  }\n  i := 2;\n}\n```\nAt this point, this is pure logic. We can simplify the assumption:\n\n```dafny\nb ==>  2 <= (if !b then 3 else 1)\n!b ||  (if !b then 2 <= 3 else 2 <= 1)\n!b ||  (if !b then true else false)\n!b || !b;\n!b;\n```\nNow we can understand what went wrong: When b is true, all of these formulas above are false, this is why the `dafny` verifier was not able to prove them.\nIn the next section, we will explain how to \"move asserts up\" in certain useful patterns.", "start_char_idx": 2, "end_char_idx": 2586, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cff496e1-c045-4992-8a5b-e1a80c6b8f35": {"__data__": {"id_": "cff496e1-c045-4992-8a5b-e1a80c6b8f35", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98224082-c00e-4b84-bab1-35d43ac2ab6d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2e6bacda9e01a814b63ffbd6861542a3a798031409190d9c12d458f9b11d1342", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9f56a8f-d9dc-4f12-8709-9369613bbf71", "node_type": "1", "metadata": {}, "hash": "bed51f254df09c95c496aa15227ad4e1293cb771ca1f4849dfd4bca02af92a1b", "class_name": "RelatedNodeInfo"}}, "text": "13.7.1.3. Failing asserts cases {sec-failing-asserts-special-cases}\n\nThis list is not exhaustive but can definitely be useful to provide the next step to figure out why Dafny could not prove an assertion.\n\n Failing assert           | Suggested rewriting\n--------------------------|---------------------------------------\n `x := Y;``assert P;` | `assert P[x := Y];``x := Y;``assert P;`\n `if B {`&nbsp;&nbsp;`  assert P;`&nbsp;&nbsp;`  ...``}` | `assert B ==> P;``if B {`&nbsp;&nbsp;`  assert P;`&nbsp;&nbsp;`  ...``}`\n `if B {`&nbsp;&nbsp;`  ...``} else {`&nbsp;&nbsp;`  assert P;`&nbsp;&nbsp;`  ...``}` | `assert !B ==> P;``if B {`&nbsp;&nbsp;`  ...``} else {`&nbsp;&nbsp;`  assert P;`&nbsp;&nbsp;`  ...``}`\n `if X {`&nbsp;&nbsp;`  ...``} else {`&nbsp;&nbsp;`  ...``}``assert A;` | `if X {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  assert A;``} else {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  assert A;``}``assert A;`\n `assert forall x :: Q(x);` | `forall x`&nbsp;&nbsp;`  ensures Q(x)``{`&nbsp;&nbsp;`  assert Q(x);``};`` assert forall x :: Q(x);`\n `assert forall x :: P(x) ==> Q(x);` | `forall x | P(x)`&nbsp;&nbsp;`  ensures Q(x)``{`&nbsp;&nbsp;`  assert Q(x);``};`` assert forall x :: P(x) ==> Q(x);`\n `assert exists x | P(x) :: Q(x);``assert exists x | P(x) :: Q'(x);` | `if x :| P(x) {`&nbsp;&nbsp;`  assert Q(x);`&nbsp;&nbsp;`  assert Q'(x);``} else {`&nbsp;&nbsp;`  assert false;``}`\n `assert exists x :: P(x);` | `assert P(x0);``assert exists x :: P(x);`for a given expression `x0`.\n `ensures exists i :: P(i);` | `returns (j: int)``ensures P(j) ensures exists i :: P(i)`in a lemma, so that the `j` can be computed explicitly.\n `assert A == B;``callLemma(x);``assert B == C;` | `calc == {`&nbsp;&nbsp;`  A;`&nbsp;&nbsp;`  B;`&nbsp;&nbsp;`  { callLemma(x); }`&nbsp;&nbsp;`  C;``};``assert A == B;`where the `calc` statement can be used to make intermediate computation steps explicit. Works with ``, `=`, `==>`, `` for example.\n `assert A ==> B;` | `if A {`&nbsp;&nbsp;`  assert B;``};``assert A ==> B;`\n `assert A && B;` | `assert A;``assert B;``assert A && B;`\n `assert P(x);`where `P` is an `{:opaque}` predicate | `reveal P();``assert P(x);`\n `assert P(x);`where `P` is an `{:opaque}` predicate | `assert P(x) by {`&nbsp;&nbsp;`  reveal P();``}`\n `assert P(x);`where `P` is not an `{:opaque}` predicate with a lot of `&&` in its body and is assumed | Make `P` `{:opaque}` so that if it's assumed, it can be proven more easily. You can always reveal it when needed.", "start_char_idx": 2, "end_char_idx": 2463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9f56a8f-d9dc-4f12-8709-9369613bbf71": {"__data__": {"id_": "c9f56a8f-d9dc-4f12-8709-9369613bbf71", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98224082-c00e-4b84-bab1-35d43ac2ab6d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2e6bacda9e01a814b63ffbd6861542a3a798031409190d9c12d458f9b11d1342", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cff496e1-c045-4992-8a5b-e1a80c6b8f35", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5e95196d297d1f23c436bb6005547f8640acbae1552fa9c95fa847d487ead40d", "class_name": "RelatedNodeInfo"}}, "text": "Works with ``, `=`, `==>`, `` for example.\n `assert A ==> B;` | `if A {`&nbsp;&nbsp;`  assert B;``};``assert A ==> B;`\n `assert A && B;` | `assert A;``assert B;``assert A && B;`\n `assert P(x);`where `P` is an `{:opaque}` predicate | `reveal P();``assert P(x);`\n `assert P(x);`where `P` is an `{:opaque}` predicate | `assert P(x) by {`&nbsp;&nbsp;`  reveal P();``}`\n `assert P(x);`where `P` is not an `{:opaque}` predicate with a lot of `&&` in its body and is assumed | Make `P` `{:opaque}` so that if it's assumed, it can be proven more easily. You can always reveal it when needed.\n `ensures P ==> Q` on a lemma | `requires P ensures Q` to avoid accidentally calling the lemma on inputs that do not satisfy `P`\n `seq(size, i => P)` | `seq(size, i requires 0  P);`\n  `assert forall x :: G(i) ==> R(i);` |  `assert G(i0);``assert R(i0);``assert forall i :: G(i) ==> R(i);` with a guess of the `i0` that makes the second assert to fail.\n  `assert forall i | 0 `assert forall i | i == m :: P(i);``assert forall i | 0 \n  `assert forall i | i == m :: P(m);` |  `assert P(m);``assert forall i | i == m :: P(i);`\n  `method m(i) returns (j: T)`&nbsp;&nbsp;`  requires A(i)`&nbsp;&nbsp;`  ensures B(i, j)``{`&nbsp;&nbsp;`  ...``}``method n() {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  var x := m(a);`&nbsp;&nbsp;`  assert P(x);` | `method m(i) returns (j: T)`&nbsp;&nbsp;`  requires A(i)`&nbsp;&nbsp;`  ensures B(i, j)``{`&nbsp;&nbsp;`  ...``}``method n() {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  assert A(k);`&nbsp;&nbsp;`  assert forall x :: B(k, x) ==> P(x);`&nbsp;&nbsp;`  var x := m(k);`&nbsp;&nbsp;`  assert P(x);`\n  `method m_mod(i) returns (j: T)`&nbsp;&nbsp;`  requires A(i)`&nbsp;&nbsp;`  modifies this, i`&nbsp;&nbsp;`  ensures B(i, j)``{`&nbsp;&nbsp;`  ...``}``method n_mod() {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  var x := m_mod(a);`&nbsp;&nbsp;`  assert P(x);` | `method m_mod(i) returns (j: T)`&nbsp;&nbsp;`  requires A(i)`&nbsp;&nbsp;`  modifies this, i`&nbsp;&nbsp;`  ensures B(i, j)``{`&nbsp;&nbsp;`  ...``}``method n_mod() {`&nbsp;&nbsp;`  ...`&nbsp;&nbsp;`  assert A(k);`&nbsp;&nbsp;`  modify this, i; // Temporarily`&nbsp;&nbsp;`  var x: T;     // Temporarily`&nbsp;&nbsp;`  assume B(k, x);`&nbsp;&nbsp;`//  var x := m_mod(k);`&nbsp;&nbsp;`  assert P(x);`\n  `modify x, y;``assert P(x, y, z);` | `assert x != z && y != z;``modify x, y;``assert P(x, y, z);`", "start_char_idx": 1880, "end_char_idx": 4233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "538f2613-f738-452b-9d7b-4ed4b8cfe70e": {"__data__": {"id_": "538f2613-f738-452b-9d7b-4ed4b8cfe70e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8eccd97-6f2d-46f0-9fdc-75e9088170c6", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "21a206c09149fe9c985ab57390ff5ada48eca394aa1cdf6856ffe53320270d6c", "class_name": "RelatedNodeInfo"}}, "text": "13.7.1.4. Counterexamples {sec-counterexamples}\n\nWhen verification fails, we can rerun Dafny with `--extract-counterexample` flag to get a counterexample that can potentially explain the proof failure.\nNote that Danfy cannot guarantee that the counterexample it reports provably violates the assertion it was generated for (see [^smt-encoding])\nThe counterexample takes the form of assumptions that can be inserted into the code to describe the potential conditions under which the given assertion is violated. \nThis output should be inspected manually and treated as a hint.", "start_char_idx": 2, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45345f59-fab0-4e84-a4bc-b70fdbea4bd8": {"__data__": {"id_": "45345f59-fab0-4e84-a4bc-b70fdbea4bd8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3095fa76-fa8b-4ffa-9538-6fa38c07999d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "23add5f858814896c45bdf6d8a53e53f991abbef31932268b530a9d8fe3e6d46", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2. Verification debugging when verification is slow {sec-verification-debugging-slow}\n\nIn this section, we describe techniques to apply in the case when verification is slower than expected, does not terminate, or times out.\n\nAdditional detail is available in the verification optimization guide.", "start_char_idx": 2, "end_char_idx": 303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3bfabb1-e505-4720-a30e-93f1bcb82cf7": {"__data__": {"id_": "c3bfabb1-e505-4720-a30e-93f1bcb82cf7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85b46e10-6d42-4a79-9098-f4cd80ab0648", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7acc90fe9c7ce12a8df2daf20a7cf23cbb28582075607ef82eddfd30aa517cdf", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.1. `assume false;` {sec-assume-false}\n\nAssuming `false` is an empirical way to short-circuit the verifier and usually stop verification at a given point,[^explainer-assume-false] and since the final compilation steps do not accept this command, it is safe to use it during development.\nAnother similar command, `assert false;`, would also short-circuit the verifier, but it would still make the verifier try to prove `false`, which can also lead to timeouts.\n\n[^explainer-assume-false]: `assume false` tells the `dafny` verifier \"Assume everything is true from this point of the program\". The reason is that, 'false' proves anything. For example, `false ==> A` is always true because it is equivalent to `!false || A`, which reduces to `true || A`, which reduces to `true`.\n\nThus, let us say a program of this shape takes forever to verify.\n\n\n```dafny\nmethod NotTerminating(b: bool) {\n   assert X;\n   if b {\n     assert Y;\n   } else {\n     assert Z;\n     assert P;\n   }\n}\n```\n\nWhat we can first do is add an `assume false` at the beginning of the method:\n\n\n```dafny\nmethod NotTerminating() {\n   assume false; // Will never compile, but everything verifies instantly\n   assert X;\n   if b {\n     assert Y;\n   } else {\n     assert Z;\n     assert P;\n   }\n   assert W;\n}\n```\n\nThis verifies instantly. This gives us a strategy to bisect, or do binary search to find the assertion that slows everything down.\nNow, we move the `assume false;` below the next assertion:\n\n\n```dafny\nmethod NotTerminating() {\n   assert X;\n   assume false;\n   if b {\n     assert Y;\n   } else {\n     assert Z;\n     assert P;\n   }\n   assert W;\n}\n```\n\nIf verification is slow again, we can use techniques seen before to decompose the assertion and find which component is slow to prove.\n\nIf verification is fast, that's the sign that `X` is probably not the problem,. We now move the `assume false;` after the if/then block:\n\n\n```dafny\nmethod NotTerminating() {\n   assert X;\n   if b {\n     assert Y;\n   } else {\n     assert Z;\n     assert P;\n   }\n   assume false;\n   assert W;\n}\n```\n\nNow, if verification is fast, we know that `assert W;` is the problem. If it is slow, we know that one of the two branches of the `if` is the problem.\nThe next step is to put an `assume false;` at the end of the `then` branch, and an `assume false` at the beginning of the else branch:\n\n\n```dafny\nmethod NotTerminating() {\n   assert X;\n   if b {\n     assert Y;\n     assume false;\n   } else {\n     assume false;\n     assert Z;\n     assert P;\n   }\n   assert W;\n}\n```\n\nNow, if verification is slow, it means that `assert Y;` is the problem.\nIf verification is fast, it means that the problem lies in the `else` branch.\nOne trick to ensure we measure the verification time of the `else` branch and not the then branch is to move the first `assume false;` to the top of the then branch, along with a comment indicating that we are short-circuiting it for now.\nThen, we can move the second `assume false;` down and identify which of the two assertions makes the verifier slow.\n\n\n\n```dafny\nmethod NotTerminating() {\n   assert X;\n   if b {\n     assume false; // Short-circuit because this branch is verified anyway\n     assert Y;\n   } else {\n     assert Z;\n     assume false;\n     assert P;\n   }\n   assert W;\n}\n```\n\nIf verification is fast, which of the two assertions `assert Z;` or `assert P;` causes the slowdown?[^answer-slowdown]\n\n[^answer-slowdown]: `assert P;`.\n\nWe now hope you know enough of `assume false;` to locate assertions that make verification slow.\nNext, we will describe some other strategies at the assertion level to figure out what happens and perhaps fix it.", "start_char_idx": 2, "end_char_idx": 3634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb5df875-a300-4ab9-9278-8ace48414315": {"__data__": {"id_": "fb5df875-a300-4ab9-9278-8ace48414315", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e9e8479-d4d9-41ff-9d88-29ddf89fd35e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ec498c73b76b471f3b0d66d183c8c1cb6ff6c0e0cc15ccc0507948e36114a4d0", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.2. `assert ... by {}` {sec-verification-debugging-assert-by}\n\nIf an assertion `assert X;` is slow, it is possible that calling a lemma or invoking other assertions can help to prove it: The postcondition of this lemma, or the added assertions, could help the `dafny` verifier figure out faster how to prove the result.\n\n\n```dafny\n  assert SOMETHING_HELPING_TO_PROVE_LEMMA_PRECONDITION;\n  LEMMA();\n  assert X;\n...\nlemma () \n  requires LEMMA_PRECONDITION\n  ensures X { ... }\n```\n\nHowever, this approach has the problem that it exposes the asserted expressions and lemma postconditions not only for the assertion we want to prove faster,\nbut also for every assertion that appears afterwards. This can result in slowdowns[^verifier-lost].\nA good practice consists of wrapping the intermediate verification steps in an `assert ... by {}`, like this:\n\n\n\n```dafny\n  assert X by {\n    assert SOMETHING_HELPING_TO_PROVE_LEMMA_PRECONDITION;\n    LEMMA();\n  }\n```\n\nNow, only `X` is available for the `dafny` verifier to prove the rest of the method.\n\n[^verifier-lost]: By default, the expression of an assertion or a precondition is added to the knowledge base of the `dafny` verifier for further assertions or postconditions. However, this is not always desirable, because if the verifier has too much knowledge, it might get lost trying to prove something in the wrong direction.", "start_char_idx": 2, "end_char_idx": 1378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3fab13e6-ddba-4499-8ecd-0787f2672125": {"__data__": {"id_": "3fab13e6-ddba-4499-8ecd-0787f2672125", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4241b810-872d-4569-876f-a943180e53ed", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3733f0dfcf1bbfbe38ca0f9eec95957b2ec6bd7616e04b1703fead789963cc05", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.3. Labeling and revealing assertions {sec-labeling-revealing-assertions}\n\nAnother way to prevent assertions or preconditions from cluttering the verifier[^verifier-lost] is to label and reveal them.\nLabeling an assertion has the effect of \"hiding\" its result, until there is a \"reveal\" calling that label.\n\nThe example of the previous section could be written like this.\n\n\n```dafny\n  assert p: SOMETHING_HELPING_TO_PROVE_LEMMA_PRECONDITION;\n  // p is not available here.\n  assert X by {\n    reveal p;\n    LEMMA();\n  }\n```\n\nSimilarly, if a precondition is only needed to prove a specific result in a method, one can label and reveal the precondition, like this:\n\n\n```dafny\nmethod Slow(i: int, j: int)\n  requires greater: i > j {\n  \n  assert i >= j by {\n    reveal greater;\n  }\n}\n```\n\nLabelled assert statements are available both in expressions and statements.\nAssertion labels are not accessible outside of the block which the assert statement is in.\nIf you need to access an assertion label outside of the enclosing expression or statement,\nyou need to lift the labelled statement at the right place manually, e.g. rewrite\n\n\n```dafny\nghost predicate P(i: int)\n\nmethod TestMethod(x: bool)\n  requires r: x  P(1)\n{\n  if x {\n    assert a: P(1) by { reveal r; }\n  }\n  assert x ==> P(1) by { reveal a; } // Error, a is not accessible\n}\n```\nto\n\n\n```dafny\nghost predicate P(i: int)\n\nmethod TestMethod(x: bool)\n  requires r: x  P(1)\n{\n  assert a: x ==> P(1) by {\n    if x {\n      assert P(1) by { reveal r; } // Proved without revealing the precondition\n    }\n  }\n  assert x ==> P(1) by { reveal a; } // Now a is accessible\n}\n```\n\nTo lift assertions, please refer to the techniques described in Verification Debugging.", "start_char_idx": 2, "end_char_idx": 1719, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56d3326c-2f5c-4824-a6dd-f0efd98fa368": {"__data__": {"id_": "56d3326c-2f5c-4824-a6dd-f0efd98fa368", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8e8419c-7ba1-4acf-85a6-5ee1980b9aa7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4443df751b96bbec85bde02b46f3dee67ae64d1dcadc1ff1c2b3356b47243bc9", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.4. Non-opaque `function method` {sec-non-opaque-function-method}\n\nFunctions are normally used for specifications, but their functional syntax is sometimes also desirable to write application code.\nHowever, doing so naively results in the body of a `function method Fun()` be available for every caller, which can cause the verifier to time out or get extremely slow[^verifier-lost].\nA solution for that is to add the attribute `{:opaque}` right between `function method` and `Fun()`, and use `reveal Fun();` in the calling functions or methods when needed.", "start_char_idx": 2, "end_char_idx": 565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6509348-2659-45a6-83b9-cd5d744205bd": {"__data__": {"id_": "e6509348-2659-45a6-83b9-cd5d744205bd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "035606b4-544b-48eb-ae8b-5f52518f4602", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fc221d67d84d9818f92811a9571781c3d8e195ff356a622f58d54d576b4f0608", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.5. Conversion to and from bitvectors {sec-conversion-to-and-from-bitvectors}\n\nBitvectors and natural integers are very similar, but they are not treated the same by the `dafny` verifier. As such, conversion from `bv8` to an `int` and vice-versa is not straightforward, and can result in slowdowns.\n\nThere are two solutions to this for now. First, one can define a subset type instead of using the built-in type `bv8`:\n\n\n```dafny\ntype byte = x | 0 <= x < 256\n```\n\nOne of the problems of this approach is that additions, substractions and multiplications do not enforce the result to be in the same bounds, so it would have to be checked, and possibly truncated with modulos. For example:\n\n\n```dafny\ntype byte = x | 0 <= x < 256\nmethod m() {\n  var a: byte := 250;\n  var b: byte := 200;\n  var c := b - a;               // inferred to be an 'int', its value will be 50.\n  var d := a + b;               // inferred to be an 'int', its value will be 450.\n  var e := (a + b) % 256;       // still inferred to be an 'int'...\n  var f: byte := (a + b) % 256; // OK\n}\n```\n\nA better solution consists of creating a newtype that will have the ability to check bounds of arithmetic expressions, and can actually be compiled to bitvectors as well.\n\n\n```dafny\nnewtype {:nativeType \"short\"} byte = x | 0 <= x < 256\nmethod m() {\n  var a: byte := 250;\n  var b: byte := 200;\n  var c := b - a; // OK, inferred to be a byte\n  var d := a + b; // Error: cannot prove that the result of a + b is of type `byte`.\n  var f := ((a as int + b as int) % 256) as byte; // OK\n}\n```\n\nOne might consider refactoring this code into separate functions if used over and over.", "start_char_idx": 2, "end_char_idx": 1646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc4fc29a-62ce-4c64-89ee-5c1f46653d12": {"__data__": {"id_": "dc4fc29a-62ce-4c64-89ee-5c1f46653d12", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3535fc4a-d5be-4463-a129-cb93f6185e99", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08b3a59e75380eb598e675eb36f402c792a595172a125d78ad7a9fec4f161c4b", "class_name": "RelatedNodeInfo"}}, "text": "13.7.2.6. Nested loops {sec-nested-loops}\n\nIn the case of nested loops, the verifier might timeout sometimes because of inadequate or too much available information[^verifier-lost].\nOne way to mitigate this problem, when it happens, is to isolate the inner loop by refactoring it into a separate method, with suitable pre and postconditions that will usually assume and prove the invariant again.\nFor example,\n\n\n```dafny\nwhile X\n   invariant Y\n {\n   while X'\n     invariant Y'\n   {\n \n   }\n }\n```\n\ncould be refactored as this:\n\n\n```dafny\n`while X\n   invariant Y\n {\n   innerLoop();\n }\n...\nmethod innerLoop()\n  require Y'\n  ensures Y'\n```\n\nIn the next section, when everything can be proven in a timely manner, we explain another strategy to decrease proof time by parallelizing it if needed, and making the verifier focus on certain parts.", "start_char_idx": 2, "end_char_idx": 839, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39d7bd99-83cd-4c13-929b-20b6d940e92e": {"__data__": {"id_": "39d7bd99-83cd-4c13-929b-20b6d940e92e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cba96fe-8586-4df5-a11c-28842624c59f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bbe3f3bfcc49a8498365fea3c5e4daea50e97a288bea15676c71f5a49ce4917e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3aa1cfee-0a8b-493f-957c-9e8e74a171a4", "node_type": "1", "metadata": {}, "hash": "6fde538bb23aa5b16ef6e945187f6f24d6b923f9051f502f8fd20cb458344257", "class_name": "RelatedNodeInfo"}}, "text": "13.7.3. Assertion batches, well-formedness, correctness {sec-assertion-batches}\n\nTo understand how to control verification,\nit is first useful to understand how `dafny` verifies functions and methods.\n\nFor every method (or function, constructor, etc.), `dafny` extracts _assertions_.\nAssertions can roughly be sorted into two kinds: Well-formedness and correctness.\n\n- _Well-formedness_ assertions: All the implicit requirements\n  of native operation calls (such as indexing and asserting that divisiors are nonzero),\n  `requires` clauses of function calls, explicit\n  assertion expressions and\n  `decreases` clauses at function call sites\n  generate well-formedness assertions.  \n  An expression is said to be _well-formed_ in a context if\n  all well-formedness assertions can be proven in that context.\n\n- _Correctness_ assertions: All remaining assertions and clauses\n\nFor example, given the following statements:\n\n\n```dafny\nif b {\n  assert a*a != 0;\n}\nc := (assert b ==> a != 0; if b then 3/a else f(a));\nassert c != 5/a;\n```\n\nDafny performs the following checks:", "start_char_idx": 2, "end_char_idx": 1069, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3aa1cfee-0a8b-493f-957c-9e8e74a171a4": {"__data__": {"id_": "3aa1cfee-0a8b-493f-957c-9e8e74a171a4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cba96fe-8586-4df5-a11c-28842624c59f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bbe3f3bfcc49a8498365fea3c5e4daea50e97a288bea15676c71f5a49ce4917e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39d7bd99-83cd-4c13-929b-20b6d940e92e", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c085758ceb157653fa343ce985e26ac4281b35ffbb1f6be470ed9b0d10a9e429", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b2469f2-274c-4da2-a9d3-44a16d8aeab0", "node_type": "1", "metadata": {}, "hash": "c2cea651148ef8e5bd96fb8283f17fad00a7b2eb4fb981e2fa800a81b7fd5234", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nif b {\n  assert a*a != 0;\n}\nc := (assert b ==> a != 0; if b then 3/a else f(a));\nassert c != 5/a;\n```\n\nDafny performs the following checks:\n\n\n```dafny\nvar c: int;\nif b {\n  assert a*a != 0;   // Correctness\n}\nassert b ==> a != 0; // Well-formedness\nif b {\n  assert a != 0;     // Well-formedness\n} else {\n  assert f.requires(a); // Well-formedness\n}\nc := if b then 3/a else f(a);\nassert a != 0;       // Well-formedness\nassert c != 5/a;     // Correctness\n```\n\nWell-formedness is proved at the same time as correctness, except for\nwell-formedness of requires and ensures clauses\nwhich is proved separatedly from the well-formedness and correctness of the rest of the method/function.\nFor the rest of this section, we don't differentiate between well-formedness assertions and correctness assertions.\n\nWe can also classify the assertions extracted by Dafny in a few categories:\n\n**Integer assertions:**\n\n* Every division yields an _assertion_ that the divisor is never zero.\n* Every bounded number operation yields an _assertion_ that the result will be within the same bounds (no overflow, no underflows).\n* Every conversion yields an _assertion_ that conversion is compatible.\n* Every bitvector shift yields an _assertion_ that the shift amount is never negative, and that the shift amount is within the width of the value.\n\n**Object assertions:**\n\n* Every object property access yields an _assertion_ that the object is not null.\n* Every assignment `o.f := E;` yields an _assertion_ that `o` is among the set of objects of the `modifies` clause of the enclosing loop or method.\n* Every read `o.f` yields an _assertion_ that `o` is among the set of objects of the `reads` clause of the enclosing function or predicate.\n* Every array access `a[x]` yields the assertion that `0 <= x < a.Length`.\n* Every sequence access `a[x]` yields an _assertion_, that `0 <= x < |a|`, because sequences are never null.\n* Every datatype update expression and datatype destruction yields an _assertion_ that the object has the given property.\n* Every method overriding a `trait` yields an _assertion_ that any postcondition it provides implies the postcondition of its parent trait, and an _assertion_ that any precondition it provides is implied by the precondition of its parent trait.\n\n**Other assertions:**\n\n* Every value whose type is assigned to a subset type yields an _assertion_ that it satisfies the subset type constraint.\n* Every non-empty subset type yields an _assertion_ that its witness satisfies the constraint.\n* Every Assign-such-that operator `x :| P(x)` yields an _assertion_ that `exists x :: P(x)`. In case `x :| P(x); Body(x)` appears in an expression and `x` is non-ghost, it also yields `forall x, y | P(x) && P(y) :: Body(x) == Body(y)`.\n* Every recursive function yields an _assertion_ that it terminates.\n* Every match expression or alternative if statement yields an _assertion_ that all cases are covered.\n* Every call to a function or method with a `requires` clause yields _one assertion per requires clause_[^precision-requires-clause]\n  (special cases such as sequence indexing come with a special `requires` clause that the index is within bounds).\n\n**Specification assertions:**\n\n* Any explicit `assert` statement is _an assertion_[^precision-requires-clause].\n* A consecutive pair of lines in a `calc` statement forms _an assertion_ that the expressions are related according to the common operator.\n* Every `ensures` clause yields an _assertion_ at the end of the method and on every return, and on `forall` statements.\n* Every `invariant` clause yields an _assertion_ that it holds before the loop and an _assertion_ that it holds at the end of the loop.\n* Every `decreases` clause yields an _assertion_ at either a call site or at the end of a while loop.\n* Every `yield ensures` clause on an iterator yields _assertions_ that the clause holds at every yielding point.\n* Every `yield requires` clause on an iterator yields _assertions_ that the clause holds at every point when the iterator is called.", "start_char_idx": 921, "end_char_idx": 4954, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b2469f2-274c-4da2-a9d3-44a16d8aeab0": {"__data__": {"id_": "9b2469f2-274c-4da2-a9d3-44a16d8aeab0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cba96fe-8586-4df5-a11c-28842624c59f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bbe3f3bfcc49a8498365fea3c5e4daea50e97a288bea15676c71f5a49ce4917e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3aa1cfee-0a8b-493f-957c-9e8e74a171a4", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f4579db2487ea946d33d599ebe67b0e68e531b6bdfba6d409cf947b0ac2311f7", "class_name": "RelatedNodeInfo"}}, "text": "[^precision-requires-clause]: `dafny` actually breaks things down further. For example, a precondition `requires A && B` or an assert statement `assert A && B;` turns into two assertions, more or less like `requires A requires B` and `assert A; assert B;`.\n\nIt is useful to mentally visualize all these assertions as a list that roughly follows the order in the code,\nexcept for `ensures` or `decreases` that generate assertions that seem earlier in the code but, for verification purposes, would be placed later.\nIn this list, each assertion depends on other assertions, statements and expressions that appear earlier in the control flow[^complexity-path-encoding].\n\n[^complexity-path-encoding]: All the complexities of the execution paths (if-then-else, loops, goto, break....) are, down the road and for verification purposes, cleverly encoded with variables recording the paths and guarding assumptions made on each path. In practice, a second clever encoding of variables enables grouping many assertions together, and recovers which assertion is failing based on the value of variables that the SMT solver returns.\n\nThe fundamental unit of verification in `dafny` is an _assertion batch_, which consists of one or more assertions from this \"list\", along with all the remaining assertions turned into assumptions. To reduce overhead, by default `dafny` collects all the assertions in the body of a given method into a single assertion batch that it sends to the verifier, which tries to prove it correct.\n\n* If the verifier says it is correct,[^smt-encoding] it means that all the assertions hold.\n* If the verifier returns a counterexample, this counterexample is used to determine both the failing assertion and the failing path.\n  In order to retrieve additional failing assertions, `dafny` will again query the verifier after turning previously failed assertions into assumptions.[^example-assertion-turned-into-assumption] [^caveat-about-assertion-and-assumption]\n* If the verifier returns `unknown` or times out, or even preemptively for difficult assertions or to reduce the chance that the verifier will \u2018be confused\u2019 by the many assertions in a large batch, `dafny` may partition the assertions into smaller batches^smaller-batches]. An extreme case is the use of the `/vcsSplitOnEveryAssert` command-line option or the [`{:isolate_assertions}` attribute, which causes `dafny` to make one batch for each assertion.\n\n[^smt-encoding]: The formula sent to the underlying SMT solver is the negation of the formula that the verifier wants to prove - also called a VC or verification condition. Hence, if the SMT solver returns \"unsat\", it means that the SMT formula is always false, meaning the verifier's formula is always true. On the other side, if the SMT solver returns \"sat\", it means that the SMT formula can be made true with a special variable assignment, which means that the verifier's formula is false under that same variable assignment, meaning it's a counter-example for the verifier. In practice and because of quantifiers, the SMT solver will usually return \"unknown\" instead of \"sat\", but will still provide a variable assignment that it couldn't prove that it does not make the formula true. `dafny` reports it as a \"counter-example\" but it might not be a real counter-example, only provide hints about what `dafny` knows.\n\n^example-assertion-turned-into-assumption]: This [post gives an overview of how assertions are turned into assumptions for verification purposes.\n\n[^caveat-about-assertion-and-assumption]: Caveat about assertion and assumption: One big difference between an \"assertion transformed in an assumption\" and the original \"assertion\" is that the original \"assertion\" can unroll functions twice, whereas the \"assumed assertion\" can unroll them only once. Hence, `dafny` can still continue to analyze assertions after a failing assertion without automatically proving \"false\" (which would make all further assertions vacuous).\n\n[^smaller-batches]: To create a smaller batch, `dafny` duplicates the assertion batch, and arbitrarily transforms the clones of an assertion into assumptions except in exactly one batch, so that each assertion is verified only in one batch. This results in \"easier\" formulas for the verifier because it has less to prove, but it takes more overhead because every verification instance have a common set of axioms and there is no knowledge sharing between instances because they run independently.", "start_char_idx": 4957, "end_char_idx": 9425, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d325947e-c66c-4e1a-9a35-d3e322248f75": {"__data__": {"id_": "d325947e-c66c-4e1a-9a35-d3e322248f75", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "40e03306-1774-4bf8-8a92-15b27af18bf9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2c0c1ee3be59b5c2ecbb50a7a576063dd185c7c780d32a65e9a7ba3dfb43e545", "class_name": "RelatedNodeInfo"}}, "text": "13.7.3.1. Controlling assertion batches {sec-assertion-batches-control}\n\nHere is how you can control how `dafny` partitions assertions into batches.\n\n* `{:focus}` on an assert generates a separate assertion batch for the assertions of the enclosing block.\n* `{:split_here}` on an assert generates a separate assertion batch for assertions after this point.\n* `{:isolate_assertions}` on a function or a method generates one assertion batch per assertion\n\nWe discourage the use of the following _heuristics attributes_ to partition assertions into batches.\nThe effect of these attributes may vary, because they are low-level attributes and tune low-level heuristics, and will result in splits that could be manually controlled anyway.\n* `{:vcs_max_cost N}` on a function or method enables splitting the assertion batch until the \"cost\" of each batch is below N.\n  Usually, you would set `{:vcs_max_cost 0}` and `{:vcs_max_splits N}` to ensure it generates N assertion batches.\n* `{:vcs_max_keep_going_splits N}` where N > 1 on a method dynamically splits the initial assertion batch up to N components if the verifier is stuck the first time.", "start_char_idx": 2, "end_char_idx": 1142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00313ab9-21d7-4d9d-96f9-0626d9047edd": {"__data__": {"id_": "00313ab9-21d7-4d9d-96f9-0626d9047edd", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "058bae11-91c1-4669-942f-9186e97f7698", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "366f6e6438a53f52cc4d5d40a14b44e467f4a65d8d4ebbb1e1968c1b26b5bead", "class_name": "RelatedNodeInfo"}}, "text": "13.7.4. Command-line options and other attributes to control verification {sec-command-line-options-and-attributes-for-verification}\n\nThere are many great options that control various aspects of verifying dafny programs. Here we mention only a few:\n\n- Control of output: `/dprint`, `/rprint`, `/stats`, `/compileVerbose`\n- Whether to print warnings: `/proverWarnings`\n- Control of time: `/timeLimit`\n- Control of resources: `/rLimit` and `{:rlimit}`\n- Control of the prover used: `/prover`\n- Control of how many times to _unroll_ functions: `{:fuel}`\n\nYou can search for them in this file as some of them are still documented in raw text format.", "start_char_idx": 2, "end_char_idx": 647, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f51c805-7d29-487e-ab41-a9822d6658db": {"__data__": {"id_": "5f51c805-7d29-487e-ab41-a9822d6658db", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "43922029-82b1-4fed-83ac-2214cd395e0d", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "533ad2daa99c7d35cc31c3b3f033a4c2fff55c2d6a38395c78c8cbbe46ac98de", "class_name": "RelatedNodeInfo"}}, "text": "13.7.5. Analyzing proof dependencies {sec-proof-dependencies}\n\nWhen Dafny successfully verifies a particular definition, it can ask the\nsolver for information about what parts of the program were actually\nused in completing the proof. The program components that can\npotentially form part of  a proof include:\n\n* `assert` statements (and the implicit assumption that they hold in subsequent code),\n* implicit assertions (such as array or sequence bounds checks),\n* `assume` statements,\n* `ensures` clauses,\n* `requires` clauses,\n* function definitions,\n* method calls, and\n* assignment statements.\n\nUnderstanding what portions of the program the proof depended on can\nhelp identify mistakes, and to better understand the structure of your\nproof (which can help when optimizing it, among other things). In\nparticular, there are two key dependency structures that tend to\nindicate mistakes, both focused on what parts of the program were _not_\nincluded in the proof.\n\n* Redundant assumptions. In some cases, a proof can be completed without\n  the need of certain `assume` statements or `requires` clauses. This\n  situation might represent a mistake, and when the mistake is corrected\n  those program elements may become required. However, they may also\n  simply be redundant, and the program will become simpler if they're\n  removed. Dafny will report assumptions of this form when verifying\n  with the flag `--warn-redundant-assumptions`. Note that `assert`\n  statements may be warned about, as well, indicating that the fact\n  proved by the assertion wasn't needed to prove anything else in the\n  program.\n\n* Contradictory assumptions. If the combination of all assumptions in\n  scope at a particular program point is contradictory, anything can be\n  proved at that point. This indicates the serious situation that,\n  unless done on purpose in a proof by contradiction, your proof may be\n  entirely vacuous. It therefore may not say what you intended, giving\n  you a false sense of confidence. The\n  `--warn-contradictory-assumptions` flag instructs Dafny to warn about\n  any assertion that was proved through the use of contradictions\n  between assumptions. If a particular `assert` statement is part of an\n  intentional proof by contradiction, annotating it with the\n  `{:contradiction}` attribute will silence this warning.\n\nThese options can be specified in `dfyconfig.toml`, and this is typically the most convenient way to use them with the IDE.\n\nMore detailed information is available using either the `--log-format\ntext` or `--verification-coverage-report` option to `dafny verify`. The former will\ninclude a list of proof dependencies (including source location and\ndescription) alongside every assertion batch in the generated log\nwhenever one of the two warning options above is also included. The\nlatter will produce a highlighted HTML version of your source code, in\nthe same format used by `dafny test --coverage-report`\nand `dafny generate-tests --verification-coverage-report`,\nindicating which parts of the program were used, not used, or partly\nused in the verification of the entire program.", "start_char_idx": 2, "end_char_idx": 3112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2e7f045-0599-421d-bad8-5a7b9f2ed7b3": {"__data__": {"id_": "a2e7f045-0599-421d-bad8-5a7b9f2ed7b3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f2e61a-9210-409c-a56e-1afbb3e419d8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1fb9caed8072e5d199b9914c14b6382ad55cb48b2db3a97cc9b962a267c96d27", "class_name": "RelatedNodeInfo"}}, "text": "13.7.6. Debugging brittle verification {sec-brittle-verification}\n\nWhen evolving a Dafny codebase, it can sometimes occur that a proof\nobligation succeeds at first only for the prover to time out or report a\npotential error after minor, valid changes. We refer to such a proof\nobligation as _brittle_. This is ultimately due to decidability\nlimitations in the form of automated reasoning that Dafny uses. The Z3\nSMT solver that Dafny depends on attempts to efficiently search for\nproofs, but does so using both incomplete heuristics and a degree of\nrandomness, with the result that it can sometimes fail to find a proof\neven when one exists (or continue searching forever).\n\nDafny provides some features to mitigate this issue, primarily focused\non early detection. The philosophy is that, if Dafny programmers are\nalerted to proofs that show early signs of brittleness, before they are\nobviously so, they can refactor the proofs to make them less brittle\nbefore further development becomes difficult.\n\nThe mechanism for early detection focuses on measuring the resources\nused to discharge a proof obligation (either using duration or a more\ndeterministic \"resource count\" metric available from Z3). Dafny can\nre-run a given proof attempt multiple times after automatically making\nminor changes to the structure of the input or to the random choices\nmade by the solver.  If the resources used during these attempts (or the\nability to find a proof at all) vary widely, we use this as a proxy\nmetric indicating that the proof may be brittle.", "start_char_idx": 2, "end_char_idx": 1541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2af6627-f2bf-493c-b69d-ae5cf50fe259": {"__data__": {"id_": "a2af6627-f2bf-493c-b69d-ae5cf50fe259", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da4f3104-87ff-42ec-8a20-c72079600f9b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4506689751ce089da01a649e8001f9851ad93ee733e5da490383333b227c56a5", "class_name": "RelatedNodeInfo"}}, "text": "13.7.6.1. Measuring proof brittleness\n\nTo measure the brittleness of your proofs, start by using the `dafny\nmeasure-complexity` command with the `--iterations N` flag to instruct\nDafny to attempt each proof goal `N` times, using a different random\nseed each time. The random seed used for each attempt is derived from\nthe global random seed `S` specified with `-randomSeed:S`, which\ndefaults to `0`. The random seed affects the structure of the SMT\nqueries sent to the solver, changing the ordering of SMT commands, the\nvariable names used, and the random seed the solver itself uses when\nmaking decisions that can be arbitary.\n\nFor most use cases, it also makes sense to specify the\n`--log-format csv` flag, to log verification cost statistics to a\nCSV file. By default, the resulting CSV files will be created in the\n`TestResults` folder of the current directory.\n\nOnce Dafny has completed, the\n`dafny-reportgenerator`\ntool is a convenient way to process the output. It allows you to specify\nseveral limits on statistics computed from the elapsed time or solver\nresource use of each proof goal, returning an error code when it detects\nviolations of these limits. You can find documentation on the full set\nof options for `dafny-reportgenerator` in its\n`README.md`\nfile.\n\nIn general, we recommend something like the following:\n\n\n```bash\ndafny-reportgenerator --max-resource-cv-pct 10 TestResults/*.csv\n```\n\nThis bounds the [coefficient of\nvariation](https://en.wikipedia.org/wiki/Coefficient_of_variation) of\nthe solver resource count at 10% (0.10). We recommend a limit of less\nthan 20%, perhaps even as low as 5%. However, when beginning to analyze\na new project, it may be necessary to set limits as high as a few\nhundred percent and incrementally ratchet down the limit over time.\n\nWhen first analyzing proof brittleness, you may also find that certain proof\ngoals succeed on some iterations and fail on others. If your aim is\nfirst to ensure that brittleness doesn't worsen and then to start\nreducing it, integrating `dafny-reportgenerator` into CI and using the\n`--allow-different-outcomes` flag may be appropriate. Then, once you've\nimproved brittleness sufficiently, you can likely remove that flag (and\nlikely have significantly lower limits on other metrics).", "start_char_idx": 2, "end_char_idx": 2272, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "327d85cc-4165-46dc-8a63-6141420ab7d2": {"__data__": {"id_": "327d85cc-4165-46dc-8a63-6141420ab7d2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26c9b5c6-402a-4078-8221-78b473855541", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bd4b797dc957508b6f7d60960a9cfa4cd5e3d9bb90e755ed2739eda3c6d70d68", "class_name": "RelatedNodeInfo"}}, "text": "13.7.6.2. Improving proof brittleness\n\nReducing proof brittleness is typically closely related to improving\nperformance overall. As such, [techniques for debugging slow\nverification](#sec-verification-debugging-slow) are typically useful for\ndebugging brittle proofs, as well. See also the\n[verification optimization\nguide](../VerificationOptimization/VerificationOptimization).", "start_char_idx": 2, "end_char_idx": 380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "670df57d-e5ba-4984-959a-042e4bd03c38": {"__data__": {"id_": "670df57d-e5ba-4984-959a-042e4bd03c38", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fc2bfae-574e-49a4-8029-c3a4f3f02312", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1201035674dd5c2c7447a36e079ecc5e2fbd62b7e6b6c37c6acc67c0c1f04af7", "class_name": "RelatedNodeInfo"}}, "text": "13.8. Compilation {sec-compilation}\n\nThe `dafny` tool can compile a Dafny program to one of several target languages. Details and idiosyncrasies of each\nof these are described in the following subsections. In general note the following:\n\n- The compiled code originating from `dafny` can be combined with other source and binary code, but only the `dafny`-originated code is verified.\n- Output file or folder names can be set using `--output`.\n- Code generated by `dafny` requires a Dafny-specific runtime library.  By default the runtime is included in the generated code. However for `dafny translate` it is not\nincluded by default and must be explicitly requested using `--include-runtime`.  All runtime libraries are part of the Binary (`./DafnyRuntime.*`) and Source (`./Source/DafnyRuntime/DafnyRuntime.*`) releases.\n- Names in Dafny are written out as names in the target language. In some cases this can result in naming conflicts. Thus if a Dafny program is intended to be compiled to a target language X, you should avoid using Dafny identifiers that are not legal identifiers in X or that conflict with reserved words in X.\n\nTo be compilable to an executable program, a Dafny program must contain a `Main` entry point, as described here.", "start_char_idx": 2, "end_char_idx": 1249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aae377d7-9e7d-4343-8389-290001934a0c": {"__data__": {"id_": "aae377d7-9e7d-4343-8389-290001934a0c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ae00fe7-4464-4c26-bb1a-ba09a54b4462", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f018180013de4105bc38512d943985ad6d24d8ebf546f29d7504ea8a8abc7306", "class_name": "RelatedNodeInfo"}}, "text": "13.8.1.1 Built-in declarations {sec-compilation-built-ins}\n\nDafny includes several built-in types such as tuples, arrays, arrows (functions), and the `nat` subset type.\nThe supporting target language code for these declarations could be emitted on-demand,\nbut these could then become multiple definitions of the same symbols when compiling multiple components separately. \nInstead, all such built-ins up to a pre-configured maximum size are included in most of the runtime libraries.\nThis means that when compiling to certain target languages, the use of such built-ins above these maximum sizes,\nsuch as tuples with more than 20 elements, is not supported.\nSee the Supported features by target language table\nfor the details on these limits.", "start_char_idx": 2, "end_char_idx": 744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acee59a3-77de-428d-8eca-f995569c1025": {"__data__": {"id_": "acee59a3-77de-428d-8eca-f995569c1025", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4356cc9c-e479-4e4f-b678-8bc32717836f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d77ec49578aa0e64e87fe41c3154d63eba8b206f7bd3859e2791a404a3b8e06c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93254a38-7dbd-4079-987c-7eb666a7acd0", "node_type": "1", "metadata": {}, "hash": "858ea8de5dd63652e894f602fbf5c030ebf9a44bcc9aa984014288b51259e45a", "class_name": "RelatedNodeInfo"}}, "text": "13.8.2. `extern` declarations {sec-extern-decls}\n\nA Dafny declaration can be marked with the `{:extern}` attribute to\nindicate that it refers to an external definition that is already\npresent in the language that the Dafny code will be compiled to (or will\nbe present by the time the final target-language program is compiled or\nrun).\n\nBecause the `{:extern}` attribute controls interaction with code written\nin one of many languages, it has some language-specific behavior,\ndocumented in the following sections. However, some aspects are\ntarget-language independent and documented here.\n\nThe attribute can also take several forms, each defining a different\nrelationship between a Dafny name and a target language name. In the\nform `{:extern}`, the name of the external definition is\nassumed to be the name of the Dafny declaration after some\ntarget-specific name mangling. However, because naming conventions (and\nthe set of allowed identifiers) vary between languages, Dafny allows\nadditional forms for the `{:extern}` attribute.\n\nThe form `{:extern }` instructs `dafny` to compile references to most\ndeclarations using the name `s1` instead of the Dafny name. For [abstract\ntypes](#sec-abstract-types), however, `s1` is sometimes used as a hint as\nto how to declare that type when compiling. This hint is interpreted\ndifferently by each compiler.\n\nFinally, the form `{:extern , }` instructs `dafny` to use `s2` as\nthe direct name of the declaration. `dafny` will typically use a\ncombination of `s1` and `s2`, such as `s1.s2`, to reference the\ndeclaration. It may also be the case that one of the arguments is simply\nignored, depending on the target language.\n\nThe recommended style is to prefer `{:extern}` when possible, and use\nsimilar names across languages. This is usually feasible because\nexisting external code is expected to have the same interface as the\ncode that `dafny` would generate for a declaration of that form. Because\nmany Dafny types compile down to custom types defined in the Dafny\nruntime library, it's typically necessary to write wrappers by hand that\nencapsulate existing external code using a compatible interface, and\nthose wrappers can have names chosen for compatibility. For example,\nretrieving the list of command line arguments when compiling to C\\#\nrequires a wrapper such as the following:\n\n```cs\nusing icharseq = Dafny.ISequence;\nusing charseq = Dafny.Sequence;\n\nnamespace Externs_Compile {\n  public partial class __default {\n    public static Dafny.ISequence GetCommandLineArgs() {\n      var dafnyArgs = Environment\n                      .GetCommandLineArgs()\n                      .Select(charseq.FromString);\n      return Dafny.Sequence.FromArray(dafnyArgs.ToArray());\n    }\n}\n```\n\nThis serves as an example of implementing an extern,\nbut was only necessary to retrieve command line arguments historically,\nas `dafny` now supports capturing these arguments via a main method\nthat accepts a `seq` (see the section on the Main method).\n\nNote that `dafny` does not check the arguments to `{:extern}`, so it is\nthe user's responsibility to ensure that the provided names result in\ncode that is well-formed in the target language.\n\nAlso note that the interface the external code needs to implement\nmay be affected by compilation flags. In this case, if `--unicode-char:true`\nis provided, `dafny` will compile its `char` type to the `Dafny.Rune`\nC# type instead, so the references to the C# type `char` above\nwould need to be changed accordingly. The reference to `charseq.FromString`\nwould in turn need to be changed to `charseq.UnicodeFromString` to\nreturn the correct type.\n\nMost declarations, including those for modules, classes, traits, member\nvariables, constructors, methods, function methods, and abstract types,\ncan be marked with `{:extern}`.\n\nMarking a module with `{:extern}` indicates that the declarations\ncontained within can be found within the given module, namespace, package, or\nsimilar construct within the target language. Some members of the Dafny\nmodule may contain definitions, in which case code for those definitions\nwill be generated. Whether this results in valid target code may depend\non some target language support for something resembling \"partial\"\nmodules, where different subsets of the contents are defined in\ndifferent places.\n\nThe story for classes is similar.", "start_char_idx": 2, "end_char_idx": 4337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93254a38-7dbd-4079-987c-7eb666a7acd0": {"__data__": {"id_": "93254a38-7dbd-4079-987c-7eb666a7acd0", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4356cc9c-e479-4e4f-b678-8bc32717836f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d77ec49578aa0e64e87fe41c3154d63eba8b206f7bd3859e2791a404a3b8e06c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acee59a3-77de-428d-8eca-f995569c1025", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6b7eca9c012366a0c51e4f802593dd22d58a3206c981cddaec17570205e0dc85", "class_name": "RelatedNodeInfo"}}, "text": "The reference to `charseq.FromString`\nwould in turn need to be changed to `charseq.UnicodeFromString` to\nreturn the correct type.\n\nMost declarations, including those for modules, classes, traits, member\nvariables, constructors, methods, function methods, and abstract types,\ncan be marked with `{:extern}`.\n\nMarking a module with `{:extern}` indicates that the declarations\ncontained within can be found within the given module, namespace, package, or\nsimilar construct within the target language. Some members of the Dafny\nmodule may contain definitions, in which case code for those definitions\nwill be generated. Whether this results in valid target code may depend\non some target language support for something resembling \"partial\"\nmodules, where different subsets of the contents are defined in\ndifferent places.\n\nThe story for classes is similar. Code for a class will be generated\nif any of its members are not `{:extern}`. Depending on the target\nlanguage, making either all or none of the members `{:extern}` may be\nthe only options that result in valid target code. Traits with\n`{:extern}` can refer to existing traits or interfaces in the target\nlanguage, or can refer to the interfaces of existing classes.\n\nMember variables marked with `{:extern}` refer to fields or properties\nin existing target-language code. Constructors, methods, and functions\nrefer to the equivalent concepts in the target language. They\ncan have contracts, which are then assumed to hold for the existing\ntarget-language code. They can also have bodies, but the bodies will not\nbe compiled in the presence of the `{:extern}` attribute. Bodies can\nstill be used for reasoning, however, so may be valuable in some cases,\nespecially for function methods.\n\nTypes marked with `{:extern}` must be opaque. The name argument, if any,\nusually refers to the type name in the target language, but some\ncompilers treat it differently.\n\nDetailed description of the `dafny build` and `dafny run` commands and \nthe `--input` option (needed when `dafny run` has more than one input file)\nis contained in the section on command-line structure.", "start_char_idx": 3485, "end_char_idx": 5598, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4398c950-d0a9-4b24-8288-b22a12228b21": {"__data__": {"id_": "4398c950-d0a9-4b24-8288-b22a12228b21", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e448c4f-45b8-41e3-820a-265f4cf291db", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "69f8b7ec6868623ba8c511049a0fe173d5a5777dfc32d0116ce7b92e59338799", "class_name": "RelatedNodeInfo"}}, "text": "13.8.3. Replaceable modules\nTo enable easily customising runtime behavior across an entire Dafny program, Dafny has placeholder modules. Here follows an example:\n\n\n```dafny\nreplaceable module Foo {\n  method Bar() returns (i: int) \n    ensures i >= 2\n}\n\nmethod Main() {\n  var x := Foo.Bar();\n  print x;\n}\n// At this point, the program can be verified but not run.\n\nmodule ConcreteFoo replaces Foo {\n  method Bar() returns (i: int) {\n    return 3; // Main will print 3.\n  }\n}\n// ConcreteFoo can be swapped out for different replacements of Foo, to customize runtime behavior.\n```\n\nWhen replacing a replaceable module, the same rules apply as when refining an abstract module. However, unlike an abstract module, a placeholder module can be used as if it is a concrete module. When executing code, using for example `dafny run` or `dafny translate`, any program that contains a placeholder module must also contain a replacement of this placeholder. When using `dafny verify`, placeholder modules do not have to be replaced.\n\nReplaceable modules are particularly useful for defining behavior that depends on which target language Dafny is translated to.", "start_char_idx": 2, "end_char_idx": 1152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1aa78d56-e96c-4e2d-838c-7aa36b8db75c": {"__data__": {"id_": "1aa78d56-e96c-4e2d-838c-7aa36b8db75c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1b7d0b0-635c-4086-8a8f-b2ca020d5864", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4bb164a09910a27eeff48c8ec3914582aba08ccd7641cd7ef88668f7ae120152", "class_name": "RelatedNodeInfo"}}, "text": "13.8.4. C\\\n\nFor a simple Dafny-only program, the translation step converts a `A.dfy` file into `A.cs`;\nthe build step then produces a `A.dll`, which can be used as a library or as an executable (run using `dotnet A.dll`).\n\nIt is also possible to run the dafny files as part of a `csproj` project, with these steps:\n- create a dotnet project file with the command `dotnet new console`\n- delete the `Program.cs` file\n- build the dafny program: `dafny build A.dfy`\n- run the built program `dotnet A.dll`\n\nThe last two steps can be combined:\n`dafny run A.dfy`\n\nNote that all input `.dfy` files and any needed runtime library code are combined into a single `.cs` file, \nwhich is then compiled by `dotnet` to a `.dll`.\n\n\nExamples of how to integrate C# libraries and source code with Dafny source code\nare contained in this separate document.", "start_char_idx": 2, "end_char_idx": 839, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c70426e3-adcb-4a33-a007-85c5a2bed133": {"__data__": {"id_": "c70426e3-adcb-4a33-a007-85c5a2bed133", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccc3fec1-8090-4fb2-90c5-091c1d793674", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a5bef9f6f0c801d26901b6b31dc885851717d2627953159cdd96d75c92fec79a", "class_name": "RelatedNodeInfo"}}, "text": "13.8.5. Java\n\nThe Dafny-to-Java compiler translation phase writes out the translated files of a file _A_`.dfy`\nto a directory _A_`-java`. \nThe build phase writes out a library or executable jar file.\nThe `--output` option (`-out` in the legacy CLI) can be used to choose a\ndifferent jar file path and name and correspondingly different directory for .java and .class files. \n\nThe compiler produces a single wrapper method that then calls classes in \nrelevant other `.java` files. Because Java files must be named consistent\nwith the class they contain, but Dafny files do not, there may be no relation\nbetween the Java file names and the Dafny file names.\nHowever, the wrapper class that contains the Java `main` method is named for\nthe first `.dfy` file on the command-line.\n\nThe step of compiling Java files (using `javac`) requires the Dafny runtime library. \nThat library is automatically included if dafny is doing the compilation,\nbut not if dafny is only doing translation.\n\nExamples of how to integrate Java source code and libraries with Dafny source\nare contained in this separate document.", "start_char_idx": 2, "end_char_idx": 1102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "014050ab-2d54-4427-945c-0f8c9842ba3b": {"__data__": {"id_": "014050ab-2d54-4427-945c-0f8c9842ba3b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f383d7a5-0806-434e-b9bd-9ecd77b28972", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "271bb157543f414906a5aa63dd3742d20d9239674f076c650d02b74480255fe4", "class_name": "RelatedNodeInfo"}}, "text": "13.8.6. Javascript\n\nThe Dafny-to-Javascript compiler translates all the given `.dfy` files into a single `.js` file, \nwhich can then be run using `node`. (Javascript has no compilation step). \nThe build and run steps are simply\n- `dafny build --target:js A.dfy`\n- `node A.js`\n\nOr, in one step,\n- `dafny run A.dfy`\n\nExamples of how to integrate Javascript libraries and source code with Dafny source\nare contained in this separate document.", "start_char_idx": 2, "end_char_idx": 441, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c2f9c76-93cd-4b70-a58b-0d8dd14e0489": {"__data__": {"id_": "8c2f9c76-93cd-4b70-a58b-0d8dd14e0489", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf2f627a-410c-4ffe-bf1b-18d3b2267ffb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0e3536ba8fd8d8c576f39a44d3e37e8c557448cb5ef6de4ef9e08abb59e73239", "class_name": "RelatedNodeInfo"}}, "text": "13.8.7. Go\n\nThe Dafny-to-Go compiler translates all the given `.dfy` files into a single\n`.go` file in `A-go/src/A.go`; the output folder can be specified with the \n`-out` option. For an input file `A.dfy` the default output folder is `A-go`. \nThen, Dafny compiles this program and creates an `A.exe` executable in the same folder as `A.dfy`.\nSome system runtime code is also placed in `A-go/src`.\nThe build and run steps are\n- `dafny build --target:go A.dfy`\n- `./A`\n\nThe uncompiled code can be compiled and run by `go` itself using\n- ``(cd A-go; GO111MODULE=auto GOPATH=`pwd` go run src/A.go)``\n\nThe one-step process is\n- `dafny run --target:go A.dfy`\n\nThe `GO111MODULE` variable is used because Dafny translates to pre-module Go code.\nWhen the implementation changes to current Go, the above command-line will\nchange, though the `./A` alternative will still be supported.\n\nExamples of how to integrate Go source code and libraries with Dafny source\nare contained in this separate document.", "start_char_idx": 2, "end_char_idx": 994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9a763c2-8c54-4981-ae4d-9de5a5cc00f4": {"__data__": {"id_": "a9a763c2-8c54-4981-ae4d-9de5a5cc00f4", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b051ff89-97dc-4642-bf49-f7eb24b7f04a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5d2de0ff89d0d80b3b2746ea423191f71613ab2a1b460e7a545a9542c27700ca", "class_name": "RelatedNodeInfo"}}, "text": "13.8.8. Python\n\nThe Dafny-to-Python compiler is still under development. However, simple\nDafny programs can be built and run as follows. The Dafny-to-Python\ncompiler translates the `.dfy` files into a single `.py` file along with \nsupporting runtime library code, all placed in the output location \n(`A-py` for an input file A.dfy, by default).\n\nThe build and run steps are\n- `dafny build --target:py A.dfy`\n- `python A-py/A.py`\n\nIn one step:\n- `dafny run --target:py A.dfy`\n\nExamples of how to integrate Python libraries and source code with Dafny source\nare contained in this separate document.", "start_char_idx": 2, "end_char_idx": 598, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9572ea8b-52b0-4522-8762-7012971a2028": {"__data__": {"id_": "9572ea8b-52b0-4522-8762-7012971a2028", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6f66eb2-0f1f-48b9-9e53-bbc0ebc9bba1", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7cfc9beb9685eb1c0ee65ddf7514a9d470ee0d1aa3a9901abf88a5e6b42a1a2c", "class_name": "RelatedNodeInfo"}}, "text": "13.8.9. C++\n\nThe C++ backend was written assuming that it would primarily support writing\nC/C++ style code in Dafny, which leads to some limitations in the current\nimplementation.\n\n- The C++ compiler does not support BigIntegers, so do not use `int`, or raw instances of\n  `arr.Length`, or sequence length, etc. in executable code.  You can however,\n  use `arr.Length as uint64` if you can prove your array is an appropriate\n  size.  The compiler will report inappropriate integer use.\n- The C++ compiler does not support advanced Dafny features like traits or coinductive\n  types.\n- There is very limited support for higher order functions even for array initialization.  Use\n  extern definitions like newArrayFill (see \n  extern.dfy) or\n  similar.  See also the example in [`functions.dfy`]\n  (https://github.com/dafny-lang/dafny/blob/master/Test/c++/functions.dfy).\n- The current backend also assumes the use of C++17 in order to cleanly and\n  performantly implement datatypes.", "start_char_idx": 2, "end_char_idx": 982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bc6dd15-00ed-4a23-908b-26e0dd834f6c": {"__data__": {"id_": "1bc6dd15-00ed-4a23-908b-26e0dd834f6c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23765350-7fca-4482-83df-e937f03efada", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bbd79c63b2303efbde97b8795343b7d5111fa02f32291c27c6e04af5263610b1", "class_name": "RelatedNodeInfo"}}, "text": "13.8.10. Supported features by target language {sec-supported-features-by-target-language}\n\nSome Dafny features are not supported by every target language.\nThe table below shows which features are supported by each backend.\nAn empty cell indicates that a feature is not supported,\nwhile an X indicates that it is.\n\n{% include_relative Features.md %}", "start_char_idx": 2, "end_char_idx": 351, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "445aba9b-ae03-4655-9dcd-f45846757b20": {"__data__": {"id_": "445aba9b-ae03-4655-9dcd-f45846757b20", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52a44651-3ac0-45d6-b516-ae5de5f2881f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0729d09e071a74d290369d5d06f1e539eb9e7a3738663ccc4c39d7754ee412e2", "class_name": "RelatedNodeInfo"}}, "text": "13.9. Dafny Command Line Options {sec-command-line-options}\n\nThere are many command-line options to the `dafny` tool.\nThe most current documentation of the options is within the tool itself,\nusing the `-?` or `--help` or `-h` options.\n\nRemember that options are typically stated with either a leading `--`.\n\nLegacy options begin with either '-' or '/'; however they are being\nmigrated to the POSIX-compliant `--` form as needed.", "start_char_idx": 2, "end_char_idx": 430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad9e6521-011b-40e1-b060-2aa3222241c9": {"__data__": {"id_": "ad9e6521-011b-40e1-b060-2aa3222241c9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6543837e-54b4-4a98-9f75-c8cfb1ad3773", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1f40be36e536004f93ff46c0802e27e0e70b1260c9d03bbb91a92fbe56985c87", "class_name": "RelatedNodeInfo"}}, "text": "13.9.1. Help and version information {sec-controlling-help}\n\nThese options emit general information about commands, options and attributes.\nWhen present, the dafny program will terminates after emitting the requested information\nbut without processig any files.\n\n* `--help`, `-h` - shows the various commands (which have help information under them as `dafny  -h`\n\n* `--version` - show the version of the build\n\nLegacy options:\n\n* `-?` - print out the legacy list of command-line options\n  and terminate. All of these options are also described in this and\n  the following sections.\n\n* `-attrHelp` - print out the current list of supported attribute\n  declarations and terminate.\n\n* `-env:` - print the command-line arguments supplied to the program.\n  The value of `` can be one of the following.\n\n  * `0` - never print command-line arguments.\n\n  * `1` (default) - print them to Boogie (`.bpl`) files and prover logs.\n\n  * `2` - operate like with option `1` but also print to standard output.\n\n* `-wait` - wait for the user to press `Enter` before terminating after a successful execution.", "start_char_idx": 2, "end_char_idx": 1092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cf2a539-3bf2-45a4-8792-e1d955cde729": {"__data__": {"id_": "4cf2a539-3bf2-45a4-8792-e1d955cde729", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f7605d3-4035-445c-a16e-97d6353b9412", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "aef9e4530a75606d189aae8ca4fd9f9d72d56bd5d9c7249ed7628649488fc868", "class_name": "RelatedNodeInfo"}}, "text": "13.9.2. Controlling input {sec-controlling-input}\n\nThese options control how Dafny processes its input.\n\n* `-stdin` - read standard input and treat it as Dafny source code,\n  instead of reading from a file.\n\n* `--library:` - treat the given files as _library_ code, namely, skip\nthese files (and any files recursively included) during verification;\nthe value may be a comma-separated-list of files or folders; folders are expanded into\na list of all .dfy files contained, recursively, in those folders\n\n* `--prelude:` (was `-dprelude`) - select an alternative Dafny prelude file. This\n  file contains Boogie definitions (including many axioms) required by\n  the translator from Dafny to Boogie. Using an alternative prelude is\n  primarily useful if you're extending the Dafny language or changing\n  how Dafny constructs are modeled. The default prelude is \n  here.", "start_char_idx": 2, "end_char_idx": 866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9679332-87db-412d-8a09-906590e17334": {"__data__": {"id_": "a9679332-87db-412d-8a09-906590e17334", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c3546a68-cee5-4cfd-8bea-646f4790a18a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5cc2c8edd9312f1913fd3018e315a9b28a26297cc3d0be03cb1f93cfa8dd5af4", "class_name": "RelatedNodeInfo"}}, "text": "13.9.3. Controlling plugins {sec-controlling-plugins}\n\nDafny has a plugin capability. \nA plugin has access to an AST of the dafny input files\nafter all parsing and resolution are performed (but not verification)\nand also to the command-line options.\n\nThis facility is still _experimental_ and very much in flux, particularly \nthe form of the AST. The best guides to writing a new plugin are\n(a) the documentation in the section of this manual on plugins \nand (b) example plugins in the\n`src/Tools` folder of the `dafny-lang/compiler-bootstrap` repo.\n\nThe value of the option `--plugin` is a path to a dotnet dll that contains\nthe compiled plugin.", "start_char_idx": 2, "end_char_idx": 648, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c371639a-3374-4997-b988-f03cd763e796": {"__data__": {"id_": "c371639a-3374-4997-b988-f03cd763e796", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85b8130c-dff1-4718-86b9-77f1d6ee4965", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f0830c74be8e08665fc9a984e0df5104369aa9d2d2b1754233ae587a2e6ce37d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14437062-602f-4b3c-b7af-73a424b67f30", "node_type": "1", "metadata": {}, "hash": "2b9f10a8b0f524ad467afbfce3b7323e41dc3636d31ff9f8917b756ff338fbd5", "class_name": "RelatedNodeInfo"}}, "text": "13.9.4. Controlling output {sec-controlling-output}\n\nThese options instruct Dafny to print various information about your\nprogram during processing, including variations of the original source\ncode (which can be helpful for debugging).\n\n* `--use-basename-for-filename` - when enabled, just the filename without the \ndirectory path is used in error messages; this make error message shorter and \nnot tied to the local environment (which is a help in testing)\n\n* `--output`, `-o` - location of output files [translate, build]\n\n* `--show-snippets` - include with an error message some of the source code text\nin the neighborhood of the error; the error location (file, line, column) is always given\n\n* `--solver-log ` - [verification only] the file in which to place the SMT text sent to the solver\n\n* `--log-format ` - [verification only] (was `-verificationLogger:`)\n  log verification\n  results to the given test result logger. The currently supported\n  loggers are `trx`, `csv`, and `text`. These are the XML-based formats\n  commonly used for test results for .NET languages, a custom CSV\n  schema, and a textual format meant for human consumption,\n  respectively. You can provide configuration using the same string\n  format as when using the `--logger` option for dotnet test, such as:\n\n        -verificationLogger:trx;LogFileName=\n\n  The exact mapping of verification concepts to these formats is\n  experimental and subject to change!\n\n  The `trx` and `csv` loggers automatically choose an output file name\n  by default, and print the name of this file to the console. The `text`\n  logger prints its output to the console by default, but can send\n  output to a file given the `LogFileName` option.\n\n  The `text` logger also includes a more detailed breakdown of what\n  assertions appear in each assertion batch. When combined with the\n  `-vcsSplitOnEveryAssert` option, it will provide approximate time and\n  resource use costs for each assertion, allowing identification of\n  especially expensive assertions.", "start_char_idx": 2, "end_char_idx": 2015, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14437062-602f-4b3c-b7af-73a424b67f30": {"__data__": {"id_": "14437062-602f-4b3c-b7af-73a424b67f30", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85b8130c-dff1-4718-86b9-77f1d6ee4965", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f0830c74be8e08665fc9a984e0df5104369aa9d2d2b1754233ae587a2e6ce37d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c371639a-3374-4997-b988-f03cd763e796", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "108ce91f77e3a449bf43d6ae127f64e439b47feda7865abd627d146ef51d5307", "class_name": "RelatedNodeInfo"}}, "text": "Legacy options:\n\n* `-stats` - print various statistics about the Dafny files supplied on\n  the command line. The statistics include the number of total\n  functions, recursive functions, total methods, ghost methods, classes,\n  and modules. They also include the maximum call graph width and the\n  maximum module height.\n\n* `-dprint:` - print the Dafny program after parsing (use `-` for\n  `` to print to the console).\n\n* `-rprint:` - print the Dafny program after type resolution (use\n  `-` for `` to print to the console).\n\n* `-printMode:` - select what to\n  include in the output requested by `-dprint` or `-rprint`. The\n  argument can be one of the following.\n\n  * `Everything` (default) - include everything.\n\n  * `DllEmbed`- print the source that will be included in a compiled DLL.\n\n  * `NoIncludes` - disable printing of methods incorporated via the\n    include mechanism that have the `{:verify false}` attribute, as well\n    as datatypes and fields included from other files.\n\n  * `NoGhost` - disables printing of functions, ghost methods, and proof\n    statements in implementation methods. Also disable anything\n    `NoIncludes` disables.\n\n* `-printIncludes:` - select what information\n  from included files to incorporate into the output selected by\n  `-dprint` or `-rprint`. The argument can be one of the following.\n\n  * `None` (default) - don't print anything from included files.\n\n  * `Immediate` - print files directly included by files specified on\n    the command line. Exit after printing.\n\n  * `Transitive` - print files transitively included by files specified\n    on the command line. Exit after printing.\n\n* `-view:` - this option limits what is printed by /rprint\n  for a module to the names that are part of the given export set;\n  the option argument is a comma-separated list of fully-qualified export\n  set names.\n\n* `-funcCallGraph` - print out the function call graph. Each line has\n  the format `func,mod=callee*`, where `func` is the name of a function,\n  `mod` is the name of its containing module, and `callee*` is a\n  space-separated list of the functions that `func` calls.\n\n* `--show-snippets` (was `-showSnippets:` ) - show a source code snippet for each Dafny\n  message. The legacy option was `-showSnippets` with values 0 and 1 for false and true.\n\n\n* `-printTooltips` - dump additional positional information (displayed\n  as mouse-over tooltips by LSP clients) to standard output as `Info`\n  messages.\n\n* `-pmtrace` - print debugging information from the pattern-match\n  compiler.\n\n* `-titrace` - print debugging information during the type inference\n  process.\n\n* `-diagnosticsFormat:` - control how to report errors, warnings, and info\n  messages.  `` may be one of the following:\n\n  * `text` (default): Report diagnostics in human-readable format.\n  * `json`: Report diagnostics in JSON format, one object per diagnostic, one\n    diagnostic per line.  Info-level messages are only included with\n    `-printTooltips`.  End positions are only included with `-showSnippets:1`.\n    Diagnostics are the following format (but without newlines):\n\n    ```json\n    {\n      \"location\": {\n        \"filename\": \"xyz.dfy\",\n        \"range\": { // Start and (optional) end of diagnostic\n          \"start\": {\n            \"pos\": 83, // 0-based character offset in input\n            \"line\": 6, // 1-based line number\n            \"character\": 0 // 0-based column number\n          },\n          \"end\": { \"pos\": 86, \"line\": 6, \"character\": 3 }\n        }\n      },\n      \"severity\": 2, // 1: error; 2: warning; 4: info\n      \"message\": \"module-level const declarations are always non-instance ...\",\n      \"source\": \"Parser\",\n      \"relatedInformation\": [ // Additional messages, if any\n        {\n          \"location\": { ... }, // Like above\n          \"message\": \"...\",\n        }\n      ]\n    }\n    ```", "start_char_idx": 2018, "end_char_idx": 5837, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81c6e890-e248-4ccb-a329-2fda2c28ee1c": {"__data__": {"id_": "81c6e890-e248-4ccb-a329-2fda2c28ee1c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "925bfe0e-cd31-437a-80c5-fc28a3e1fe85", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "358e5e34ec8cf5339c23f35cf7042f816894b05c806e2eb53b70444cfe2ed50d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "882ed4e7-1079-47e9-9f86-b00e1748ffdb", "node_type": "1", "metadata": {}, "hash": "c5da190e7ab2b116fb12c2c6146aa8432ae56b0f1a304ea6c6097f237da1b41d", "class_name": "RelatedNodeInfo"}}, "text": "13.9.5. Controlling language features {sec-controlling-language}\n\nThese options allow some Dafny language features to be enabled or\ndisabled. Some of these options exist for backward compatibility with\nolder versions of Dafny.\n\n* `--default-function-opacity:` - Change the default opacity of functions.\n  * `transparent` (default) means functions are transparent, can be manually made opaque and then revealed.\n  * `autoRevealDependencies` makes all functions not explicitly labelled as opaque to be opaque but reveals them automatically in scopes which do not have `{:autoRevealDependencies false}`.\n  * `opaque` means functions are always opaque so the opaque keyword is not needed, and functions must be revealed everywhere needed for a proof.\n\n* `--function-syntax` (value '3' or '4') - permits a choice of using the Dafny 3 syntax (`function` and `function method`)\nor the Dafny 4 syntax (`ghost function` and `function`)\n\n* `--quantifier-syntax` (value '3' or '4') - permits a choice between the Dafny 3 and Dafny 4 syntax for quantifiers\n\n* `--unicode-char` - if false, the `char` type represents any UTF-16 code unit,\n  that is, any 16-bit value, including surrogate code points and\n  allows `\\uXXXX` escapes in string and character literals.\n  If true, `char` represnts any Unicode scalar value,\n  that is, any Unicode code point excluding surrogates and\n  allows `\\U{X..X}` escapes in string and character literals. \n  The default is false for Dafny version 3 and true for version 4.\n  The legacy option was `-unicodeChar:` with values 0 and 1 for\n  false and true above.\n\nLegacy options:\n\n* `-noIncludes` - ignore `include` directives in the program.\n\n* `-noExterns` - ignore `extern` attributes in the program.\n\n\n\n* `--function-syntax:` (was `-functionSyntax:` ) - select what function syntax to\n  recognize. The syntax for functions is changing from Dafny version 3\n  to version 4. This switch gives early access to the new syntax, and\n  also provides a mode to help with migration. The valid arguments\n  include the following.\n\n  * `3` (default) - compiled functions are written `function method` and\n    `predicate method`. Ghost functions are written `function` and\n    `predicate`.\n\n  * `4` - compiled functions are written `function` and `predicate`.\n    Ghost functions are written `ghost function` and `ghost predicate`.\n\n  * `migration3to4` - compiled functions are written `function method`\n    and `predicate method`. Ghost functions are written `ghost function`\n    and `ghost predicate`. To migrate from version 3 to version 4, use\n    this flag on your version 3 program to flag all occurrences of\n    `function` and `predicate` as parsing errors. These are ghost\n    functions, so change those into the new syntax `ghost function` and\n    `ghost predicate`. Then, start using \\\n    `-functionSyntax:4`. This will\n    flag all occurrences of `function method` and `predicate method` as\n    parsing errors. So, change those to just `function` and `predicate`.\n    As a result, your program will use version 4 syntax and have the\n    same meaning as your previous version 3 program.\n\n  * `experimentalDefaultGhost` - like `migration3to4`, but allow\n    `function` and `predicate` as alternatives to declaring ghost\n    functions and predicates, respectively\n\n  * `experimentalDefaultCompiled` - like `migration3to4`, but allow\n    `function` and `predicate` as alternatives to declaring compiled\n    functions and predicates, respectively\n\n  * `experimentalPredicateAlwaysGhost` - compiled functions are written\n    `function`. Ghost functions are written `ghost function`. Predicates\n    are always ghost and are written `predicate`.\n\n  This option can also be set locally (at the module level) using the `:options`\n  attribute:", "start_char_idx": 2, "end_char_idx": 3755, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "882ed4e7-1079-47e9-9f86-b00e1748ffdb": {"__data__": {"id_": "882ed4e7-1079-47e9-9f86-b00e1748ffdb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "925bfe0e-cd31-437a-80c5-fc28a3e1fe85", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "358e5e34ec8cf5339c23f35cf7042f816894b05c806e2eb53b70444cfe2ed50d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81c6e890-e248-4ccb-a329-2fda2c28ee1c", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f0a50590cc6d42fcfefc2a0e5e4758bb3205743f1cbbb51d1249c70c1010337e", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\n  module {:options \"--function-syntax:4\"} M {\n    predicate CompiledPredicate() { true }\n  }\n  ```\n\n* `--quantifier-syntax:` (was `-quantifierSyntax:` ) - select what quantifier syntax to recognize.\n    The syntax for quantification domains is changing from Dafny version 3 to version 4,\n    more specifically where quantifier ranges (`| `) are allowed.\n    This switch gives early access to the new syntax.\n\n    * `3` (default) - Ranges are only allowed after all quantified variables are declared.\n        (e.g. `set x, y | 0 <= x < |s| && y in s[x] && 0 <= y :: y`)\n    * `4` - Ranges are allowed after each quantified variable declaration.\n        (e.g. `set x | 0 <= x < |s|, y <- s[x] | 0 <= y :: y`)\n\n    Note that quantifier variable domains (``) are available\n    in both syntax versions.\n\n* `-disableScopes` - treat all export sets as `export reveal *` to never\n    hide function bodies or type definitions during translation.\n\n* `-allowsGlobals` - allow the implicit class `_default` to contain\n  fields, instance functions, and instance methods. These class members\n  are declared at the module scope, outside of explicit classes. This\n  command-line option is provided to simplify a transition from the\n  behavior in the language prior to version 1.9.3, from which point\n  onward all functions and methods declared at the module scope are\n  implicitly static and field declarations are not allowed at the\n  module scope.", "start_char_idx": 3760, "end_char_idx": 5202, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d24e0ceb-4db5-4ff5-9921-bcd18e5896f9": {"__data__": {"id_": "d24e0ceb-4db5-4ff5-9921-bcd18e5896f9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6551b08-86e2-4f1a-bea4-34bbcf0c5a15", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a935b64e8bb3ce62dd45b02ac5d44f9ad019c0ffed0f73b2051ec945576dd8fb", "class_name": "RelatedNodeInfo"}}, "text": "13.9.6. Controlling warnings {sec-controlling-warnings}\n\nThese options control what warnings Dafny produces, and whether to treat\nwarnings as errors.\n\n* `--warn-as-errors` (was `-warningsAsErrors`) - treat warnings as errors.\n\n* `--warn-shadowing` (was `-warnShadowing`) - emit a warning if the name \n  of a declared variable caused another variable to be shadowed.\n\n* `--warn-missing-constructor-parentheses` - warn if a constructor name in a pattern might be misinterpreted\n\nLegacy options\n\n* `-deprecation:` - control warnings about deprecated features. The\n  value of `` can be any of the following.\n\n   * `0` - don't issue any warnings.\n\n   * `1` (default) - issue warnings.\n\n   * `2` - issue warnings and advise about alternate syntax.", "start_char_idx": 2, "end_char_idx": 743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ca5dd57-f0eb-449e-81bb-436e2b37bc4f": {"__data__": {"id_": "5ca5dd57-f0eb-449e-81bb-436e2b37bc4f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4b2620431493e7ce3c3f85ca29251893e666cdee6e548a41704bf79b710e7eb0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "781b552d-227a-455f-aed7-a82cca9dbe06", "node_type": "1", "metadata": {}, "hash": "238dfac025964e10cd59040267731cf3495e61df4b68b52f0b0b6a0c98e6c0e4", "class_name": "RelatedNodeInfo"}}, "text": "13.9.7. Controlling verification {sec-controlling-verification}\n\nThese options control how Dafny verifies the input program, including\nhow much it verifies, what techniques it uses to perform verification,\nand what information it produces about the verification process.\n\n* `--no-verify` - turns off verification (for translate, build, run commands)\n\n* `--verify-included-files` (was `-verifyAllModules`) - verify modules that come from include directives.\n\n  By default, Dafny only verifies files explicitly listed on the command\n  line: if `a.dfy` includes `b.dfy`, a call to `Dafny a.dfy` will detect\n  and report verification errors from `a.dfy` but not from `b.dfy`.\n\n  With this option, Dafny will instead verify everything: all input\n  modules and all their transitive dependencies. This way `Dafny a.dfy`\n  will verify `a.dfy` and all files that it includes (here `b.dfy`), as\n  well all files that these files include, etc.\n\n  Running Dafny with this option on the file containing your\n  main result is a good way to ensure that all its dependencies verify.\n\n\n* `--track-print-effects` - If true, a compiled method, constructor, or \n   iterator is allowed to have print effects only if it is marked with \n   {{:print}}. (default false)\n   The legacy option was `-trackPrintEffects:`) with values 0 or 1\n   for false and true.\n\n* `--relax-definite-assignment` - control the rules governing definite\n  assignment, the property that every variable is eventually assigned a\n  value before it is used.\n  * if false (default), enforce definite-assignment for all non-yield-parameter\n    variables and fields, regardless of their types\n  * if false and `--enforce-determinism` is true, then also performs \n    checks in the compiler that no nondeterministic statements are used\n  * if true, enforce definite-assignment rules for compiled\n    variables and fields whose types do not support auto-initialization\n    and for ghost variables and fields whose type is possibly empty.\n\n* `--disable-nonlinear-arithmetic` (was `-noNLarith`) - reduce \n  Z3's knowledge of non-linear arithmetic (the\n  operators `*`, `/`, and `%`). Enabling this option will typically\n  require more manual work to complete proofs (by explicitly applying\n  lemmas about non-linear operators), but will also result in more\n  predictable behavior, since Z3 can sometimes get stuck down an\n  unproductive path while attempting to prove things about those\n  operators. (This option will perhaps be replaced by `-arith` in the\n  future. For now, it takes precedence over `-arith`.)\n\n  The behavior of `disable-nonlinear-arithmetic` can be turned on and off on a per-module basis \n  by placing the attribute `{:disable-nonlinear-arithmetic}` after the module keyword.\n  The attribute optionally takes the value `false` to enable nonlinear arithmetic.\n\n* `--manual-lemma-induction` - diables automatic inducntion for lemmas\n\n* `--isolate-assertions` - verify assertions individually\n\n* `--extract-counterexample` - if verification fails, report a potential\n  counterexample as a set of assumptions that can be inserted into the code.\n  Note that Danfy cannot guarantee that the counterexample\n  it reports provably violates the assertion or that the assumptions are not\n  mutually inconsistent (see [^smt-encoding]), so this output should be inspected manually and treated as a hint.\n\nControlling the proof engine:\n\n* `--cores:` - sets the number or percent of the available cores to be used for verification\n* `--verification-time-limit ` - imposes a time limit on each verification attempt\n* `--verification-error-limit ` - limits the number of verification errors reported (0 is no limit)\n* `--resource-limit` - states a resource limit (to be used by the backend solver)\n\nLegacy options:\n\n* `-dafnyVerify:` [discouraged] - turn verification of the program on or off. The\n  value of `` can be any of the following.\n\n  * `0` - stop after type checking.\n\n  * `1` - continue on to verification and compilation.\n\n\n* `-separateModuleOutput` - output verification results for each module\n  separately, rather than aggregating them after they are all finished.\n\n* `-mimicVerificationOf:` - let `dafny` attempt to mimic\n  the verification behavior of a previous version of `dafny`.", "start_char_idx": 2, "end_char_idx": 4246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "781b552d-227a-455f-aed7-a82cca9dbe06": {"__data__": {"id_": "781b552d-227a-455f-aed7-a82cca9dbe06", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4b2620431493e7ce3c3f85ca29251893e666cdee6e548a41704bf79b710e7eb0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ca5dd57-f0eb-449e-81bb-436e2b37bc4f", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d39605713bf2e7f0345dc2074a98d2ce8a2dc57576a43ecb676f5bcb8da75c00", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d78b9269-6f52-41a0-906d-795dbd96f5cc", "node_type": "1", "metadata": {}, "hash": "d0a04411dbfc9929dc04f557f49a4413d4c394d5f21f448bffd82b2dcffcd912", "class_name": "RelatedNodeInfo"}}, "text": "* `-separateModuleOutput` - output verification results for each module\n  separately, rather than aggregating them after they are all finished.\n\n* `-mimicVerificationOf:` - let `dafny` attempt to mimic\n  the verification behavior of a previous version of `dafny`. This can be\n  useful during migration to a newer version of `dafny` when a Dafny\n  program has proofs, such as methods or lemmas, that are highly variable in\n  the sense that their verification may become slower or fail altogether\n  after logically irrelevant changes are made in the verification input.\n\n  Accepted versions are: `3.3`. Note that falling back on the behavior\n  of version 3.3 turns off features that prevent certain classes of\n  verification variability.\n\n* `-noCheating:` - control whether certain assumptions are allowed.\n  The value of `` can be one of the following.\n\n  * `0` (default) - allow `assume` statements and free invariants.\n\n  * `1` - treat all assumptions as `assert` statements, and drop free\n    invariants.\n\n* `-induction:` - control the behavior of induction. The value of\n  `` can be one of the following.\n\n  * `0` - never do induction, not even when attributes request it.\n\n  * `1` - apply induction only when attributes request it.\n\n  * `2` - apply induction as requested (by attributes) and also for\n    heuristically chosen quantifiers.\n\n  * `3` - apply induction as requested, and for heuristically chosen\n    quantifiers and lemmas.\n\n  * `4` (default) - apply induction as requested, and for all lemmas.\n\n* `-inductionHeuristic:` - control the heuristics used for induction.\n  The value of `` can be one of the following.\n\n  * `0` - use the least discriminating induction heuristic (that is,\n    lean toward applying induction more often).\n\n  * `1`, `2`, `3`, `4`, `5` - use an intermediate heuristic, ordered as\n    follows as far as how discriminating they are: 0 < 1 < 2 < (3,4) < 5\n    < 6.\n\n  * `6` (default) - use the most discriminating induction heuristic.\n\n* `-allocated:` - specify defaults for where Dafny should assert and\n  assume `allocated(x)` for various parameters `x`, local variables `x`,\n  bound variables `x`, etc. Lower `` may require more manual\n  `allocated(x)` annotations and thus may be more difficult to use. The\n  value of `` can be one of the following.\n\n  * `0` - never assume or assert `allocated(x)` by default.\n\n  * `1` - assume `allocated(x)` only for non-ghost variables and fields.\n    (These assumptions are free, since non-ghost variables always\n    contain allocated values at run-time.) This option may speed up\n    verification relative to `-allocated:2`.\n\n  * `2` - assert/assume `allocated(x)` on all variables, even bound\n    variables in quantifiers. This option is the easiest to use for code\n    that uses the heap heavily.\n\n  * `3` - (default) make frugal use of heap parameters.\n\n  * `4` - like `3` but add `allocated` antecedents when ranges don't imply\n    allocatedness.\n\n  Warning: this option should be chosen consistently across an entire\n  project; it would be unsound to use different defaults for different\n  files or modules within a project. Furthermore, modes `-allocated:0` and\n  `-allocated:1` let functions depend on the allocation state, which is\n  not sound in general.\n\n* `-noAutoReq` - ignore `autoReq` attributes, and therefore do not\n  automatically generate `requires` clauses.\n\n* `-autoReqPrint:` - print the requires clauses that were\n  automatically generated by `autoReq` to the given ``.\n\n* `-arith:` - control how arithmetic is modeled during verification.\n  This is an experimental switch, and its options may change. The value\n  of `` can be one of the following.\n\n  * `0` - use Boogie/Z3 built-ins for all arithmetic operations.\n\n  * `1` (default) - like `0`, but introduce symbolic synonyms for `*`,\n    `/`, and `%`, and allow these operators to be used in triggers.\n\n  * `2` - like `1`, but also introduce symbolic synonyms for `+` and\n    `-`.\n\n  * `3` - turn off non-linear arithmetic in the SMT solver.", "start_char_idx": 3983, "end_char_idx": 7980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d78b9269-6f52-41a0-906d-795dbd96f5cc": {"__data__": {"id_": "d78b9269-6f52-41a0-906d-795dbd96f5cc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "4b2620431493e7ce3c3f85ca29251893e666cdee6e548a41704bf79b710e7eb0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "781b552d-227a-455f-aed7-a82cca9dbe06", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fe01b7e5d8a26433be0b913c655b6277274d8fca86bf6cf76dda8adb566e2a78", "class_name": "RelatedNodeInfo"}}, "text": "* `-noAutoReq` - ignore `autoReq` attributes, and therefore do not\n  automatically generate `requires` clauses.\n\n* `-autoReqPrint:` - print the requires clauses that were\n  automatically generated by `autoReq` to the given ``.\n\n* `-arith:` - control how arithmetic is modeled during verification.\n  This is an experimental switch, and its options may change. The value\n  of `` can be one of the following.\n\n  * `0` - use Boogie/Z3 built-ins for all arithmetic operations.\n\n  * `1` (default) - like `0`, but introduce symbolic synonyms for `*`,\n    `/`, and `%`, and allow these operators to be used in triggers.\n\n  * `2` - like `1`, but also introduce symbolic synonyms for `+` and\n    `-`.\n\n  * `3` - turn off non-linear arithmetic in the SMT solver. Still use\n    Boogie/Z3 built-in symbols for all arithmetic operations.\n\n  * `4` - like `3`, but introduce symbolic synonyms for `*`, `/`, and `%`,\n    and allow these operators to be used in triggers.\n\n  * `5` - like `4`, but also introduce symbolic synonyms for `+` and\n    `-`.\n\n  * `6` - like `5`, and introduce axioms that distribute `+` over `*`.\n\n  * `7` - like `6`, and introduce facts about the associativity of\n    literal arguments over `*`.\n\n  * `8` - like `7`, and introduce axioms for the connection between `*`,\n    `/`, and `%`.\n\n  * `9` - like `8`, and introduce axioms for sign of multiplication.\n\n  * `10` - like `9`, and introduce axioms for commutativity and\n    associativity of `*`.\n\n* `-autoTriggers:` - control automatic generation of `{:trigger}`\n  annotations. See triggers. The value of `` can be one\n  of the following.\n\n  * `0` - do not generate `{:trigger}` annotations for user-level\n    quantifiers.\n\n  * `1` (default) - add a `{:trigger}` annotation to each user-level\n    quantifier. Existing annotations are preserved.\n\n* `-rewriteFocalPredicates:` - control rewriting of predicates in the\n  body of prefix lemmas. See the section about nicer extreme proofs.\n  The value of `` can be one of the following.\n\n  * `0` - don't rewrite predicates in the body of prefix lemmas.\n\n  * `1` (default) - in the body of prefix lemmas, rewrite any use of a\n    focal predicate `P` to `P#[_k-1]`.", "start_char_idx": 7229, "end_char_idx": 9399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4aef53b-9c63-4901-8ad2-a4b737191a24": {"__data__": {"id_": "a4aef53b-9c63-4901-8ad2-a4b737191a24", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ba18dce-aba2-4b17-8f87-9983330f0467", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "276f8eb9797bfc32aa41047314ae9833ce61c910d19adfb0a957869076fe4564", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2eebe9ac-a5d5-47e7-af8b-cd205ceb5c1a", "node_type": "1", "metadata": {}, "hash": "57db6cb2cd29ff6f83968c637047adc111c372df053a21753d37493f51724fbe", "class_name": "RelatedNodeInfo"}}, "text": "13.9.8. Controlling compilation {sec-controlling-compilation}\n\nThese options control what code gets compiled, what target language is\nused, how compilation proceeds, and whether the compiled program is\nimmediately executed.\n\n* `--target:` or `-t:` (was `-compileTarget:`) - set the target programming language for the\n  compiler. The value of `` can be one of the following.\n\n   * `cs` - C\\# . Produces a .dll file that can be run using `dotnet`.\n      For example, `dafny Hello.dfy` will produce `Hello.dll` and `Hello.runtimeconfig.json`.\n      The dll can be run using `dotnet Hello.dll`.\n\n   * `go` - Go. The default output of `dafny Hello.dfy -compileTarget:go` is\n      in the `Hello-go` folder. It is run using\n      ``GOPATH=`pwd`/Hello-go/ GO111MODULE=auto go run Hello-go/src/Hello.go``\n\n   * `js` - Javascript. The default output of `dafny Hello.dfy -compileTarget:js` is\n      the file `Hello.js`, which can be run using `node Hello.js`. (You must have \n      `bignumber.js` installed.)\n\n   * `java` - Java. The default output of `dafny Hello.dfy -compileTarget:java` is\n      in the `Hello-java` folder. The compiled program can be run using\n      `java -cp Hello-java:Hello-java/DafnyRuntime.jar Hello`.\n\n   * `py` - Python. The default output of `dafny Hello.dfy -compileTarget:py` is\n      in the `Hello-py` folder. The compiled program can be run using\n      `python Hello-py/Hello.py`, where `python` is Python version 3.\n\n   * `cpp` - C++. The default output of `dafny Hello.dfy -compileTarget:cpp` is\n      `Hello.exe` and other files written to the current folder. The compiled\n      program can be run using `./Hello.exe`.\n\n* `--input ` - designates files to be include in the compilation in addition to the main file in\n  `dafny run`; these may be non-.dfy files; this option may be specified more than once\n\n* `--output:` or `-o:` (was `-out:`) - set the name to use for compiled code files.\n\nBy default, `dafny` reuses the name of the Dafny file being compiled.\nCompilers that generate a single file use the file name as-is (e.g. the\nC# backend will generate `.dll` and optionally `.cs` with\n`-spillTargetCode`). Compilers that generate multiple files use the file\nname as a directory name (e.g. the Java backend will generate files in\ndirectory `-java/`). Any file extension is ignored, so\n`-out:` is the same as `-out:.` if `` contains no\nperiods.\n\n* `--include-runtime` - include the runtime library for the target language in\n  the generated artifacts. This is true by default for build and run, \n  but false by default for translate. The legacy option `-useRuntimeLib` had the \n  opposite effect: when enabled, the compiled assembly referred to\n  the pre-built `DafnyRuntime.dll` in the\n  compiled assembly rather than including `DafnyRuntime.cs` in the build\n  process.", "start_char_idx": 2, "end_char_idx": 2802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2eebe9ac-a5d5-47e7-af8b-cd205ceb5c1a": {"__data__": {"id_": "2eebe9ac-a5d5-47e7-af8b-cd205ceb5c1a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ba18dce-aba2-4b17-8f87-9983330f0467", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "276f8eb9797bfc32aa41047314ae9833ce61c910d19adfb0a957869076fe4564", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4aef53b-9c63-4901-8ad2-a4b737191a24", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9a347cae2d01e6ac7a900537795cca281db85ed373539d84991ade6d461fcc21", "class_name": "RelatedNodeInfo"}}, "text": "Legacy options:\n\n* `-compile:` -  [obsolete - use `dafny build` or `dafny run`] control whether compilation \n   happens. The value of\n  `` can be one of the following. Note that if the program is \n   compiled, it will be compiled to the target language determined by\n   the `-compileTarget` option, which is C\\# by default.\n\n   * `0` - do not compile the program\n\n   * `1` (default) - upon successful verification, compile the program\n     to the target language.\n\n   * `2` - always compile, regardless of verification success.\n\n   * `3` - if verification is successful, compile the program (like\n     option `1`), and then if there is a `Main` method, attempt to run the\n     program.\n\n   * `4` - always compile (like option `2`), and then if there is a\n     `Main` method, attempt to run the program.\n\n* `-spillTargetCode:` - [obsolete - use `dafny translate`) control whether to write out compiled code in\n  the target language (instead of just holding it in internal temporary\n  memory). The value of `` can be one of the following.\n\n   * `0` (default) - don't make any extra effort to write the textual\n     target program (but still compile it, if `-compile` indicates to do\n     so).\n\n   * `1` - write it out to the target language, if it is being compiled.\n\n   * `2` - write the compiled program if it passes verification,\n     regardless of the `-compile` setting.\n\n   * `3` - write the compiled program regardless of verification success\n     and the `-compile` setting.\n\nNote that some compiler targets may (always or in some situations) write\nout the textual target program as part of compilation, in which case\n`-spillTargetCode:0` behaves the same way as `-spillTargetCode:1`.\n\n* `-Main:` - specify the (fully-qualified) name of the method to\n  use as the executable entry point. The default is the method with the\n  `{:main}` attribute, or else the method named `Main`.\n\n* `-compileVerbose:` - control whether to write out compilation\n  progress information. The value of `` can be one of the following.\n\n  * `0` - do not print any information (silent mode)\n\n  * `1` (default) - print information such as the files being created by\n    the compiler\n\n* `-coverage:` - emit branch-coverage calls and outputs into\n  ``, including a legend that gives a description of each\n  source-location identifier used in the branch-coverage calls. (Use `-`\n  as `` to print to the console.)\n\n* `-optimize` - produce optimized C# code by passing the `/optimize`\n  flag to the `csc` executable.\n\n* `-optimizeResolution:` - control optimization of method target\n  resolution. The value of `` can be one of the following.\n\n  * `0` - resolve and translate all methods.\n\n  * `1` - translate methods only in the call graph of the current\n    verification target.\n\n  * `2` (default) - as in `1`, but resolve only methods that are defined\n    in the current verification target file, not in included files.\n\n\n* `-testContracts:` - test certain function and method contracts\n  at runtime. This works by generating a wrapper for each function or\n  method to be tested that includes a sequence of `expect` statements\n  for each requires clause, a call to the original, and sequence of\n  `expect` statements for each `ensures` clause. This is particularly\n  useful for code marked with the `{:extern}` attribute and implemented\n  in the target language instead of Dafny. Having runtime checks of the\n  contracts on such code makes it possible to gather evidence that the\n  target-language code satisfies the assumptions made of it during Dafny\n  verification through mechanisms ranging from manual tests through\n  fuzzing to full verification. For the latter two use cases, having\n  checks for `requires` clauses can be helpful, even if the Dafny\n  calling code will never violate them.\n\n  The `` parameter can currently be one of the following.\n\n  * `Externs` - insert dynamic checks when calling any function or\n    method marked with the `{:extern}` attribute, wherever the call\n    occurs.\n\n  * `TestedExterns` - insert dynamic checks when calling any function or\n    method marked with the `{:extern}` attribute directly from a\n    function or method marked with the `{:test}` attribute.", "start_char_idx": 2806, "end_char_idx": 6985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a8077d3-2f4f-4674-a9fc-a4306e0fbb77": {"__data__": {"id_": "1a8077d3-2f4f-4674-a9fc-a4306e0fbb77", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c346b92-0e8a-41c3-83fc-bee7182d0f1b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f65c8fb6d6df4acbd03a9d27882ca87dd70a0657389d0aa181e57fff9b4eba49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e11a765c-0d6d-43d8-b53f-8e7b191d87a6", "node_type": "1", "metadata": {}, "hash": "89fffa97c0633811e2e2efff237d01e9af20343eda2fae7d46e90ba29d2ac769", "class_name": "RelatedNodeInfo"}}, "text": "13.9.9. Controlling Boogie {sec-controlling-boogie}\n\nDafny builds on top of Boogie, a general-purpose intermediate language\nfor verification. Options supported by Boogie on its own are also\nsupported by Dafny. Some of the Boogie options most relevant to Dafny\nusers include the following. We use the term \"procedure\" below to refer\nto a Dafny function, lemma, method, or predicate, following Boogie\nterminology.\n\n* `--solver-path` - specifies a custom SMT solver to use\n\n* `--solver-plugin` - specifies a plugin to use as the SMT solver, instead of an external pdafny translaterocess\n\n* `--boogie` - arguments to send to boogie\n\nLegacy options:\n\n* `-proc:` - verify only the procedure named ``. The name\n  can include `*` to indicate arbitrary sequences of characters.\n\n* `-trace` - print extra information during verification, including\n  timing, resource use, and outcome for each procedure incrementally, as\n  verification finishes.\n\n* `-randomSeed:` - turn on randomization of the input that Boogie\n  passes to the SMT solver and turn on randomization in the SMT solver\n  itself.\n\n  Certain Boogie inputs cause proof variability in the sense that changes to the\n  input that preserve its meaning may cause the output to change. The\n  `-randomSeed` option simulates meaning-preserving changes to the\n  input without requiring the user to actually make those changes.\n\n  The `-randomSeed` option is implemented by renaming variables and\n  reordering declarations in the input, and by setting\n  solver options that have similar effects.\n\n* `-randomSeedIterations:` - attempt to prove each VC `` times\n  with `` random seeds. If `-randomSeed` has been provided, each\n  proof attempt will use a new random seed derived from this original\n  seed. If not, it will implicitly use `-randomSeed:0` to ensure a\n  difference between iterations. This option can be very useful for\n  identifying input programs for which verification is highly variable. If the\n  verification times or solver resource counts associated with each\n  proof attempt vary widely for a given procedure, small changes to that\n  procedure might be more likely to cause proofs to fail in the future.\n\n* `-vcsSplitOnEveryAssert` - prove each (explicit or implicit) assertion\n  in each procedure separately. See also the attribute\n  `{:isolate_assertions}` for\n  restricting this option on specific procedures. By default, Boogie\n  attempts to prove that every assertion in a given procedure holds all\n  at once, in a single query to an SMT solver. This usually performs\n  well, but sometimes causes the solver to take longer. If a proof that\n  you believe should succeed is timing out, using this option can\n  sometimes help.\n\n* `-timeLimit:` - spend at most `` seconds attempting to prove any\n  single SMT query. This setting can also be set per method using the\n  attribute `{:timeLimit n}`.\n\n* `-rlimit:` - set the maximum solver resource count to use while\n  proving a single SMT query. This can be a more deterministic approach\n  than setting a time limit. To choose an appropriate value, please\n  refer to the documentation of the attribute `{:rlimit}`\n  that can be applied per procedure.\n\n* `-print:` - print the translation of the Dafny file to a Boogie file.\n\nIf you have Boogie installed locally, you can run the printed Boogie file with the following script:\n\n```bash\nDOTNET=$(which dotnet)\n\nBOOGIE_ROOT=\"path/to/boogie/Source\"\nBOOGIE=\"$BOOGIE_ROOT/BoogieDriver/bin/Debug/net6.0/BoogieDriver.dll\"\n\nif [[ ! -x \"$DOTNET\" ]]; then\n    echo \"Error: Dafny requires .NET Core to run on non-Windows systems.\"", "start_char_idx": 2, "end_char_idx": 3578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e11a765c-0d6d-43d8-b53f-8e7b191d87a6": {"__data__": {"id_": "e11a765c-0d6d-43d8-b53f-8e7b191d87a6", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c346b92-0e8a-41c3-83fc-bee7182d0f1b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f65c8fb6d6df4acbd03a9d27882ca87dd70a0657389d0aa181e57fff9b4eba49", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a8077d3-2f4f-4674-a9fc-a4306e0fbb77", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "efb504ad1fb2659725f0f53789474ad4dfc4a86877aee2ccd001fa642510d792", "class_name": "RelatedNodeInfo"}}, "text": "* `-rlimit:` - set the maximum solver resource count to use while\n  proving a single SMT query. This can be a more deterministic approach\n  than setting a time limit. To choose an appropriate value, please\n  refer to the documentation of the attribute `{:rlimit}`\n  that can be applied per procedure.\n\n* `-print:` - print the translation of the Dafny file to a Boogie file.\n\nIf you have Boogie installed locally, you can run the printed Boogie file with the following script:\n\n```bash\nDOTNET=$(which dotnet)\n\nBOOGIE_ROOT=\"path/to/boogie/Source\"\nBOOGIE=\"$BOOGIE_ROOT/BoogieDriver/bin/Debug/net6.0/BoogieDriver.dll\"\n\nif [[ ! -x \"$DOTNET\" ]]; then\n    echo \"Error: Dafny requires .NET Core to run on non-Windows systems.\"\n    exit 1\nfi\n\n#Uncomment if you prefer to use the executable instead of the DLL\n#BOOGIE=$(which boogie)\n\nBOOGIE_OPTIONS=\"/infer:j\"\nPROVER_OPTIONS=\"\\\n  /proverOpt:O:auto_config=false \\\n  /proverOpt:O:type_check=true \\\n  /proverOpt:O:smt.case_split=3 \\\n  /proverOpt:O:smt.qi.eager_threshold=100 \\\n  /proverOpt:O:smt.delay_units=true \\\n  /proverOpt:O:smt.arith.solver=2 \\\n  \"\n\n\"$DOTNET\" \"$BOOGIE\" $BOOGIE_OPTIONS $PROVER_OPTIONS \"$@\"\n#Uncomment if you want to use the executable instead of the DLL\n#\"$BOOGIE\" $BOOGIE_OPTIONS $PROVER_OPTIONS \"$@\"\n```", "start_char_idx": 2860, "end_char_idx": 4126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b295623c-9726-4ad2-87ca-eb90300fff0c": {"__data__": {"id_": "b295623c-9726-4ad2-87ca-eb90300fff0c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9021f73-844f-4211-8bf6-247bd4f61fea", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "423040add8cbb56e5e79e018ad40bea88d6edc2c54a852a13e6e4b9bc66dc195", "class_name": "RelatedNodeInfo"}}, "text": "13.9.10. Controlling the prover {sec-controlling-prover}\n\nMuch of controlling the prover is accomplished by controlling \nverification condition generation (25.9.7) or Boogie \n(Section 13.9.9). \nThe following options are also commonly used:\n\n* `--verification-error-limit:` - limits the number of verification errors reported per procedure.\n  Default is 5; 0 means as many as possible; a small positive number runs faster\n  but a large positive number reports more errors per run\n\n* `--verification-time-limit:` (was `-timeLimit:`) - limits \n  the number of seconds spent trying to verify each procedure.", "start_char_idx": 2, "end_char_idx": 605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "873e1a60-3dc8-49d0-bcc3-953bc6cd294b": {"__data__": {"id_": "873e1a60-3dc8-49d0-bcc3-953bc6cd294b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5763e346-9cb4-40a1-9428-af1e07d0f65c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ca5e72ad20c500893c52149bf34d0357d058f3f29d2ab408ee36805ca74790d9", "class_name": "RelatedNodeInfo"}}, "text": "13.9.11. Controlling test generation {sec-controlling-test-gen}\n\nDafny is capable of generating unit (runtime) tests. It does so by asking the prover to solve\nfor values of inputs to a method that cause the program to execute specific blocks or paths.\nA detailed description of how to do this is given in\na separate document.", "start_char_idx": 2, "end_char_idx": 327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f01ecadc-d380-4fd3-a7d3-c7be51e44ad9": {"__data__": {"id_": "f01ecadc-d380-4fd3-a7d3-c7be51e44ad9", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac6f3569-1e53-4a82-b341-c87fbe8f269e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "89c9dee31164908b41d0de227b3a94259dcb4f4ba9d4ab156642f3ddf16c6087", "class_name": "RelatedNodeInfo"}}, "text": "14. Dafny VSCode extension and the Dafny Language Server {sec-dafny-language-server-vscode}", "start_char_idx": 2, "end_char_idx": 93, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41fa639c-d2de-4d52-9621-09a477ff8c32": {"__data__": {"id_": "41fa639c-d2de-4d52-9621-09a477ff8c32", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ecbc5010-745b-46fc-93da-b353023212cd", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6907f976c1de7bc362983aee16758c6df0c296b8a928a70ec8a48d95fae74fef", "class_name": "RelatedNodeInfo"}}, "text": "14.1. Dafny functionality within VSCode\n\nThere is a language server for Dafny, which implements the Language Server Protocol.\nThis server is used by the Dafny VSCode Extension; it currently offers the following features:\n- Quick syntax highlighting\n- As-you-type parsing, resolution and verification diagnostics\n- Support for Dafny plugins\n- Expanded explanations (in addition to the error message) for selected errors (and more being added), shown by hovering\n- Quick fixes for selected errors (and more being added)\n- Limited support for symbol completion\n- Limited support for code navigation\n- Counter-example display\n- Highlighting of ghost statements\n- Gutter highlights\n- A variety of Preference settings\n\nMost of the Dafny functionality is simply there when editing a .dfy file with VSCode that has the Dafny extension installed.\nSome actions are available through added menu items.\nThe Dafny functionality within VSCode can be found in these locations:\n\n- The preferences are under the menu Code->Preferences->Settings->Dafny extension configuration. There are two sections of settings.\n- A hover over an error location will bring up a hover popup, which will show expanded error information and any quick fix options that are available.\n- Within a .dfy editor, a right-click brings up a context menu, which has a menu item 'Dafny'. Under it are actions to Build or Run a program,\nto turn on or off counterexample display, find definitions, and the like.", "start_char_idx": 2, "end_char_idx": 1465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b1f5aef-85a5-4b1e-b7d1-6261cc6b548c": {"__data__": {"id_": "1b1f5aef-85a5-4b1e-b7d1-6261cc6b548c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f67c5ea-9c86-4e17-953c-a8f1d89c93da", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6aada1edd97244a3a7e263cdc0da8c95a9c9b679a1ca5bdac9fe14494e0a159d", "class_name": "RelatedNodeInfo"}}, "text": "14.2. Gutter highlights {sec-gutter-highlights}\n\nFeedback on a program is show visually as underlining with squiggles within the text and as various markings in various colors in the _gutter_ down the left side of an editor window.\n\nThe first time a file is loaded, the gutter will highlight in a transparent squiggly green line all the methods that need to be verified, like this:\n\n!image\n\nWhen the file is saved (in verification on save), or whenever the Dafny verifier is ready (in verification on change), it will start to verify methods.\nThat line will turn into a thin green rectangle on methods that have been verified, and display an animated less transparent green squiggly line on methods that are being actively verified:\n\n!image\n\nWhen the verification finishes, if a method, a function, a constant with default initialization or a subset type with a witness has some verification errors in it,\nthe editor will display two yellow vertical rails indicating an error context.\n\n!image\n\nInside this context, if there is a failing assertion on a line,\nit will fill the gap between the vertical yellow bars with a red rectangle, even if there might be other assertions that are verified on the line.\nIf there is no error on a line, but there is at least one assertion that verified, it will display a green disk with a white checkmark on it,\nwhich can be used to check progress in a proof search.\n\nAs soon as a line is changed, the gutter icons turn transparent and squiggly, to indicate their obsolescence.\n\n!image\n\nThe red error rectangles occupy only half the horizontal space, to visualise their possible obsolescence.\n\nWhen the file is saved (in verification on save), or as soon as possible otherwise,\nthese squiggly icons will be animated while the Dafny verifier inspect the area.\n\n!image\n\nIf the method was verifying before a change, instead of two yellow vertical bars with a red squiggly line,\nthe gutter icons display an animated squiggly but more firm green line, thereby indicating that the method used to verify,\nbut Dafny is still re-verifying it.\n\n!image\n\nIf there is a parse or resolution error, the previous gutter icons turn gray and a red triangle indicates \nthe position of the parse or resolution error.\n\n!image", "start_char_idx": 2, "end_char_idx": 2241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbd86541-5069-4209-9b59-2189106be92e": {"__data__": {"id_": "dbd86541-5069-4209-9b59-2189106be92e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5581563-0d73-402c-8c09-3f58a52974c9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "598d730bf7df71d05be0a7c988810e3a7181ad1dd0ee5a076cd3263ccdd759c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "586d9b5b-bc0b-4713-8221-01b5779571ac", "node_type": "1", "metadata": {}, "hash": "c37c006e87f85a36393401c0390325ef907fd9b364b79c4e49f5e476fe4a8ef3", "class_name": "RelatedNodeInfo"}}, "text": "14.3. The Dafny Server {sec-old-dafny-server}\n\nBefore Dafny implemented the official Language Server Protocol, it implemented its own protocol for Emacs, which resulted in a project called DafnyServer. While the latest Dafny releases still contain a working DafnyServer binary, this component has been feature frozen since 2022, and it may not support features that were added to Dafny after that time. We do not recommend using it.\n\nThe Dafny Server has integration tests that serve as the basis of the documentation.\n\nThe server is essentially a REPL, which produces output in the same format as the Dafny CLI; clients thus\ndo not need to understand the internals of Dafny's caching.  A typical editing session proceeds as follows:\n\n* When a new Dafny file is opened, the editor starts a new instance of the\n  Dafny server.  The cache is blank at that point.\n* The editor sends a copy of the buffer for initial verification.  This takes\n  some time, after which the server returns a list of errors.\n* The user makes modifications; the editor periodically sends a new copy of\n  the buffer's contents to the Dafny server, which quickly returns an updated\n  list of errors.\n\nThe client-server protocol is sequential, uses JSON, and works over ASCII\npipes by base64-encoding utf-8 queries.  It defines one type of query, and two\ntypes of responses:\n\nQueries are of the following form:\n\n     verify\n     \n     [[DAFNY-CLIENT: EOM]]\n\nResponses are of the following form:\n\n     \n     [SUCCESS] [[DAFNY-SERVER: EOM]]\n\nor\n\n     \n     [FAILURE] [[DAFNY-SERVER: EOM]]\n\nThe JSON payload is an utf-8 encoded string resulting of the serialization of\na dictionary with 4 fields:\n   * args:   An array of Dafny arguments, as passed to the Dafny CLI\n   * source: A Dafny program, or the path to a Dafny source file.\n   * sourceIsFile: A boolean indicating whether the 'source' argument is a\n                   Dafny program or the path to one.\n   * filename:     The name of the original source file, to be used in error\n                   messages\n\nFor small files, embedding the Dafny source directly into a message is\nconvenient; for larger files, however, it is generally better for performance\nto write the source snapshot to a separate file, and to pass that to Dafny\nby setting the 'sourceIsFile' flag to true.\n\nFor example, if you compile and run `DafnyServer.exe`, you could paste the following command:", "start_char_idx": 2, "end_char_idx": 2399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "586d9b5b-bc0b-4713-8221-01b5779571ac": {"__data__": {"id_": "586d9b5b-bc0b-4713-8221-01b5779571ac", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5581563-0d73-402c-8c09-3f58a52974c9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "598d730bf7df71d05be0a7c988810e3a7181ad1dd0ee5a076cd3263ccdd759c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dbd86541-5069-4209-9b59-2189106be92e", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e5151f78f0a2c7df90eafc80b4068387b791fbfd5b5c6388cec8a5587201649a", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nverify\neyJhcmdzIjpbIi9jb21waWxlOjAiLCIvcHJpbnRUb29sdGlwcyIsIi90aW1lTGltaXQ6MjAiXSwi\nZmlsZW5hbWUiOiJ0cmFuc2NyaXB0Iiwic291cmNlIjoibWV0aG9kIEEoYTppbnQpIHJldHVybnMg\nKGI6IGludCkge1xuICBiIDo9IGE7XG4gIGFzc2VydCBmYWxzZTtcbn1cbiIsInNvdXJjZUlzRmls\nZSI6ZmFsc2V9\n[[DAFNY-CLIENT: EOM]]\n```\n\nThe interpreter sees the command `verify`, and then starts reading every line until it sees `[[DAFNY-CLIENT: EOM]]`\nThe payload is a base64 encoded string that you could encode or decode using JavaScript's `atob` and `btoa` function.\nFor example, the payload above was generated using the following code:\n```js\nbtoa(JSON.stringify({\n  \"args\": [\n    \"/compile:0\",\n    \"/printTooltips\",\n    \"/timeLimit:20\"\n   ],\n   \"filename\":\"transcript\",\n   \"source\":\n`method A(a:int) returns (b: int) {\n   b := a;\n   assert false;\n}\n`,\"sourceIsFile\": false}))\n=== \"eyJhcmdzIjpbIi9jb21waWxlOjAiLCIvcHJpbnRUb29sdGlwcyIsIi90aW1lTGltaXQ6MjAiXSwiZmlsZW5hbWUiOiJ0cmFuc2NyaXB0Iiwic291cmNlIjoibWV0aG9kIEEoYTppbnQpIHJldHVybnMgKGI6IGludCkge1xuICBiIDo9IGE7XG4gIGFzc2VydCBmYWxzZTtcbn1cbiIsInNvdXJjZUlzRmlsZSI6ZmFsc2V9\"\n```\n\nThus to decode such output, you'd manually use `JSON.parse(atob(payload))`.", "start_char_idx": 2402, "end_char_idx": 3561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88fb84ea-d2fc-4f85-bd50-44ed82fc4d04": {"__data__": {"id_": "88fb84ea-d2fc-4f85-bd50-44ed82fc4d04", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Variable_Declaration_Statement_description.md", "file_name": "Variable_Declaration_Statement_description.md", "file_type": "text/markdown", "file_size": 2369, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45220eb8-b17a-4508-a605-4c1d3ca3364b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Variable_Declaration_Statement_description.md", "file_name": "Variable_Declaration_Statement_description.md", "file_type": "text/markdown", "file_size": 2369, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d9a30b178a9d41bdc1b0c1bd566d52f19f52fbe426d8ab618404b4f0c4b564f9", "class_name": "RelatedNodeInfo"}}, "text": "8.7. Variable Declaration Statement (grammar) {sec-variable-declaration-statement}\n\nExamples:\n\n```dafny\nmethod m() {\n  var x, y: int; // x's type is inferred, not necessarily 'int'\n  var b: bool, k: int;\n  x := 1; // settles x's type\n}\n```\n\nA variable declaration statement is used to declare one or more local variables in\na method or function. The type of each local variable must be given\nunless its type can be inferred, either from a given initial value, or\nfrom other uses of the variable. If initial values are given, the number\nof values must match the number of variables declared.\n\nThe scope of the declared variable extends to the end of the block in which it is\ndeclared. However, be aware that if a simple variable declaration is followed\nby an expression (rather than a subsequent statement) then the `var` begins a\nLet Expression and the scope of the introduced variables is\nonly to the end of the expression. In this case, though, the `var` is in an expression\ncontext, not a statement context.\n\nNote that the type of each variable must be given individually. The following code\n\n\n```dafny\nvar x, y : int;\nvar x, y := 5, 6;\nvar x, y :- m();\nvar x, y :| 0 < x + y < 10;\nvar (x, y) := makePair();\nvar Cons(x, y) = ConsMaker();\n```\ndoes not declare both `x` and `y` to be of type `int`. Rather it will give an\nerror explaining that the type of `x` is underspecified if it cannot be\ninferred from uses of x.\n\nThe variables can be initialized with syntax similar to update statements (cf. Section 8.5).\n\nIf the RHS is a call, then any variable receiving the value of a\nformal ghost out-parameter will automatically be declared as ghost, even\nif the `ghost` keyword is not part of the variable declaration statement.\n\nThe left-hand side can also contain a tuple of patterns that will be\nmatched against the right-hand-side. For example:\n\n\n```dafny\nfunction returnsTuple() : (int, int)\n{\n    (5, 10)\n}\n\nfunction usesTuple() : int\n{\n    var (x, y) := returnsTuple();\n    x + y\n}\n```\n\nThe initialization with failure operator `:-` returns from the enclosing method if the initializer evaluates to a failure value of a failure-compatible type (see Section 8.6).", "start_char_idx": 2, "end_char_idx": 2169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0b8f101-92b2-465a-a38a-0f9dd7bc37ce": {"__data__": {"id_": "d0b8f101-92b2-465a-a38a-0f9dd7bc37ce", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/While_Statement_description.md", "file_name": "While_Statement_description.md", "file_type": "text/markdown", "file_size": 2904, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab00adb2-a47a-4c15-98de-8bcbf7d76b65", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/While_Statement_description.md", "file_name": "While_Statement_description.md", "file_type": "text/markdown", "file_size": 2904, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "68e1318ee27ac26e8bdf8bfade85a5e32b1a98db60e6569bd43faf18d1f5fd68", "class_name": "RelatedNodeInfo"}}, "text": "8.12. While Statement (grammar) {sec-while-statement}\n\nExamples:\n\n```dafny\nmethod m() {\n  var i := 10;\n  while 0 < i\n    invariant 0 <= i <= 10\n    decreases i\n  {\n    i := i-1;\n  }\n  while * {}\n  i := *;\n  while \n     decreases if i < 0 then -i else i\n  {\n     case i  i := i + 1;\n     case i > 0 => i := i - 1;\n  }\n}\n```\n\nLoops\n- may be a conventional loop with a condition and a block statement for a body\n- need not have parentheses around the condition\n- may have a `*` for the condition (the loop is then non-deterministic)\n- binding guards are not allowed\n- may have a case-based structure\n- may have no body --- a bodyless loop is not compilable, but can be reaosnaed about\n\nImportantly, loops need _loop specifications_ in order for Dafny to prove that\nthey obey expected behavior. In some cases Dafny can infer the loop specifications by analyzing the code,\nso the loop specifications need not always be explicit.\nThese specifications are described in Section 7.6 and Section 8.15.\n\nThe general loop statement in Dafny is the familiar `while` statement.\nIt has two general forms.\n\nThe first form is similar to a while loop in a C-like language. For\nexample:\n\n\n```dafny\nmethod m(){\n  var i := 0;\n  while i < 5 {\n    i := i + 1;\n  }\n}\n```\n\nIn this form, the condition following the `while` is one of these:\n\n* A boolean expression. If true it means execute one more\niteration of the loop. If false then terminate the loop.\n* An asterisk (`*`), meaning non-deterministically yield either\n`true` or `false` as the value of the condition\n\nThe _body_ of the loop is usually a block statement, but it can also\nbe missing altogether.\nA loop with a missing body may still pass verification, but any attempt\nto compile the containing program will result in an error message.\nWhen verifying a loop with a missing body, the verifier will skip attempts\nto prove loop invariants and decreases assertions that would normally be\nasserted at the end of the loop body.\nThere is more discussion about bodyless loops in Section 8.15.4.\n\nThe second form uses a case-based block. It is similar to the\n`do ... od` construct used in the book \"A Discipline of Programming\" by\nEdsger W. Dijkstra. For example:\n\n\n```dafny\nmethod m(n: int){\n  var r := n;\n  while\n    decreases if 0 <= r then r else -r\n  {\n    case r \n      r := r + 1;\n    case 0 \n      r := r - 1;\n  }\n}\n```\nFor this form, the guards are evaluated in some undetermined order\nuntil one is found that is true, in which case the corresponding statements\nare executed and the while statement is repeated.\nIf none of the guards evaluates to true, then the\nloop execution is terminated.\n\nThe form that used `...` (a refinement feature) as the guard is deprecated.", "start_char_idx": 2, "end_char_idx": 2709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1123ecde-86ec-43ca-bf4a-f21c7c45e65a": {"__data__": {"id_": "1123ecde-86ec-43ca-bf4a-f21c7c45e65a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statement_description.md", "file_name": "Yield_Statement_description.md", "file_type": "text/markdown", "file_size": 1062, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af2e03b1-4b3a-436c-8bb5-9d9a89e51c04", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statement_description.md", "file_name": "Yield_Statement_description.md", "file_type": "text/markdown", "file_size": 1062, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ea846a558555f3ed73c91b73c258e47b38273046bdb2fd6553b3c49b48622c26", "class_name": "RelatedNodeInfo"}}, "text": "8.4. Yield Statement (grammar) {sec-yield-statement}\n\nA yield statement may only be used in an iterator.\nSee iterator types for more details\nabout iterators.\n\nThe body of an iterator is a _co-routine_. It is used\nto yield control to its caller, signaling that a new\nset of values for the iterator's yield (out-)parameters (if any)\nare available. Values are assigned to the yield parameters\nat or before a yield statement.\nIn fact, the yield parameters act very much like local variables,\nand can be assigned to more than once. Yield statements are\nused when one wants to return new yield parameter values\nto the caller. Yield statements can be just the\n`yield` keyword (where the current values of the yield parameters\nare used), or they can take a list of expressions to yield.\nIf a list is given, the number of expressions given must be the\nsame as the number of named iterator out-parameters.\nThese expressions are then evaluated, then they are\nassigned to the yield parameters, and then the iterator\nyields.", "start_char_idx": 2, "end_char_idx": 1013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f63a470-5575-4d08-91df-323bca8fcd4f": {"__data__": {"id_": "6f63a470-5575-4d08-91df-323bca8fcd4f", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_description.md", "file_name": "Yield_Statements_description.md", "file_type": "text/markdown", "file_size": 1061, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14fa417f-48aa-437d-abf0-8fdf2082e526", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_description.md", "file_name": "Yield_Statements_description.md", "file_type": "text/markdown", "file_size": 1061, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "56a568e4d65b252d4a0668cdf24cf29b0c32e52e4caacb96aa4a77c7053725da", "class_name": "RelatedNodeInfo"}}, "text": "8.4. Yield Statement (grammar) {sec-yield-statement}\n\nA yield statement may only be used in an iterator.\nSee iterator types for more details\nabout iterators.\n\nThe body of an iterator is a _co-routine_. It is used\nto yield control to its caller, signaling that a new\nset of values for the iterator's yield (out-)parameters (if any)\nare available. Values are assigned to the yield parameters\nat or before a yield statement.\nIn fact, the yield parameters act very much like local variables,\nand can be assigned to more than once. Yield statements are\nused when one wants to return new yield parameter values\nto the caller. Yield statements can be just the\n`yield` keyword (where the current values of the yield parameters\nare used), or they can take a list of expressions to yield.\nIf a list is given, the number of expressions given must be the\nsame as the number of named iterator out-parameters.\nThese expressions are then evaluated, then they are\nassigned to the yield parameters, and then the iterator\nyields.", "start_char_idx": 2, "end_char_idx": 1013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3211808-78e8-42e7-bd15-99e8e5ec92b7": {"__data__": {"id_": "c3211808-78e8-42e7-bd15-99e8e5ec92b7", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_grammar.md", "file_name": "Yield_Statements_grammar.md", "file_type": "text/markdown", "file_size": 152, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bf3b90a-4754-4f3e-be24-b5a5e820c904", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_grammar.md", "file_name": "Yield_Statements_grammar.md", "file_type": "text/markdown", "file_size": 152, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "965b5db9986f900ff1b95848e8812791de3401c2ea6fab103967ef40899eeffb", "class_name": "RelatedNodeInfo"}}, "text": "17.2.6.6. Yield statement {g-yield-statement}\n\n(discussion)\n\n````grammar\nYieldStmt = \"yield\" [ Rhs { \",\" Rhs } ] \";\"\n````", "start_char_idx": 2, "end_char_idx": 123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1a453a5-9359-4009-84fb-a2909fae0329": {"__data__": {"id_": "e1a453a5-9359-4009-84fb-a2909fae0329", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/`this`_Expression_description.md", "file_name": "`this`_Expression_description.md", "file_type": "text/markdown", "file_size": 250, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b87e3821-2fd3-4813-9b53-5ecf6494fc6b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/`this`_Expression_description.md", "file_name": "`this`_Expression_description.md", "file_type": "text/markdown", "file_size": 250, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bb78f35bcaac6e855c38500fd43a4b14d426c728eb1492ec994d55b492d0d202", "class_name": "RelatedNodeInfo"}}, "text": "9.21. `this` Expression (grammar) {sec-this-expression}\n\nExamples:\n\n```dafny\nthis\n```\n\nThe `this` token denotes the current object in the context of \na constructor, instance method, or instance function.", "start_char_idx": 2, "end_char_idx": 205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea31c832-7744-496c-80a1-09036627bf14": {"__data__": {"id_": "ea31c832-7744-496c-80a1-09036627bf14", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/abstract_types_description.md", "file_name": "abstract_types_description.md", "file_type": "text/markdown", "file_size": 1729, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0e4d2aa-0f6a-417e-8561-416f84c65d5a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/abstract_types_description.md", "file_name": "abstract_types_description.md", "file_type": "text/markdown", "file_size": 1729, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "d230b5cef4b3f2092d0bdb2ca0a0b97711c056410963dc884f296a6c86c9e080", "class_name": "RelatedNodeInfo"}}, "text": "5.6.2. Abstract types (grammar) {sec-abstract-types}\n\nExamples:\n\n```dafny\ntype T\ntype Q { function toString(t: T): string }\n```\n\nAn abstract type is a special case of a type synonym that is underspecified.  Such\na type is declared simply by:\n\n```dafny\ntype Y\n```\nIts definition can be stated in a\nrefining module.  The name `Y` can be immediately followed by\na type characteristics suffix (Section 5.3.1).\nBecause there is no defining RHS, the type characteristics cannot be inferred and so\nmust be stated. If, in some refining module, a definition of the type is given, the\ntype characteristics must match those of the new definition.\n\nFor example, the declarations\n\n```dafny\ntype T\nfunction F(t: T): T\n```\ncan be used to model an uninterpreted function `F` on some\narbitrary type `T`.  As another example,\n\n```dafny\ntype Monad\n```\ncan be used abstractly to represent an arbitrary parameterized monad.\n\nEven as an abstract type, the type\nmay be given members such as constants, methods or functions.\nFor example,\n\n```dafny\nabstract module P {\n  type T {\n    function ToString(): string\n  }\n}\n\nmodule X refines P {\n  newtype T = i | 0 <= i < 10 {\n    function ToString(): string {  \"\" }\n  }\n}\n```\nThe abstract type `P.T` has a declared member `ToString`, which can be called wherever `P.T` may be used.\nIn the refining module `X`, `T` is declared to be a `newtype`, in which `ToString` now has a body.\n\nIt would be an error to refine `P.T` as a simple type synonym or subset type in `X`, say `type T = int`, because\ntype synonyms may not have members.", "start_char_idx": 2, "end_char_idx": 1553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c7cc860-7702-4ecd-9f22-e6cd1eecb452": {"__data__": {"id_": "6c7cc860-7702-4ecd-9f22-e6cd1eecb452", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/argument_list_suffix_description.md", "file_name": "argument_list_suffix_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d883de3-40a2-4e2d-944b-a2a9f8d7d8f8", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/argument_list_suffix_description.md", "file_name": "argument_list_suffix_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "9ce7212067e7dc8e6f2a07d0020d33749ba86611e50c00bbeb81202a66d86c5f", "class_name": "RelatedNodeInfo"}}, "text": "9.34.7. Argument List Suffix (grammar) {sec-argument-list-suffix}\n\nExamples:\n\n```dafny\n()\n(a)\n(a, b)\n```\nAn argument list suffix is a parenthesized list of expressions that\nare the arguments to pass to a method or function that is being\ncalled. Applying such a suffix causes the method or function\nto be called and the result is the result of the call.\n\nNote that method calls may only appear in right-hand-side\nlocations, whereas function calls may appear in expressions and specifications;\nthis distinction can be made only during name and type resolution, not by the\nparser.", "start_char_idx": 2, "end_char_idx": 579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0889090b-6e95-4745-aa8d-54912fb7c563": {"__data__": {"id_": "0889090b-6e95-4745-aa8d-54912fb7c563", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/augmented_dot_suffix_description.md", "file_name": "augmented_dot_suffix_description.md", "file_type": "text/markdown", "file_size": 590, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a62b6be4-bffe-40e9-943d-1677c315572b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/augmented_dot_suffix_description.md", "file_name": "augmented_dot_suffix_description.md", "file_type": "text/markdown", "file_size": 590, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b8da7a82da4743602983325b6b570770350a3005f61bc0b2304d27f49865c09f", "class_name": "RelatedNodeInfo"}}, "text": "9.34.1. Augmented Dot Suffix (grammar) {sec-augmented-dot-suffix}\n\nExamples: (expression with suffix)\n\n```dafny\na.b\n(a).b\na.b#[k]\na.b#[k]\n```\n\nAn augmented dot suffix consists of a simple dot suffix optionally\nfollowed by either\n\n* a ``GenericInstantiation`` (for the case where the item\nselected by the ``DotSuffix`` is generic), or\n* a ``HashCall`` for the case where we want to call a prefix predicate\n  or prefix lemma. The result is the result of calling the prefix predicate\n  or prefix lemma.", "start_char_idx": 2, "end_char_idx": 501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "011a797a-26c2-4989-bc84-fd094c500037": {"__data__": {"id_": "011a797a-26c2-4989-bc84-fd094c500037", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1c4f0f6-9ae0-4964-8f09-807596f8ce82", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7c704bb1bbbe3979d8c63275e7b6761eb2bf9c0b1651716458d0cb9c272e7821", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e027dc8-7af8-4d4f-8bd8-183aeb26e240", "node_type": "1", "metadata": {}, "hash": "b07907f0de33c8c4205cd4f829ef4380f4dfcacd4e65898938bb6bcf2c8ac95d", "class_name": "RelatedNodeInfo"}}, "text": "5.2.3. Bit-vector Types (grammar) {sec-bit-vector-types}\n\nDafny includes a family of bit-vector types, each type having a specific,\nconstant length, the number of bits in its values.\nEach such type is\ndistinct and is designated by the prefix `bv` followed (without white space) by\na positive integer without leading zeros or zero, stating the number of bits. For example,\n`bv1`, `bv8`, and `bv32` are legal bit-vector type names.\nThe type `bv0` is also legal; it is a bit-vector type with no bits and just one value, `0x0`.\n\nConstant literals of bit-vector types are given by integer literals converted automatically\nto the designated type, either by an implicit or explicit conversion operation or by initialization in a declaration.\nDafny checks that the constant literal is in the correct range. For example,\n\n```dafny\nconst i: bv1 := 1\nconst j: bv8 := 195\nconst k: bv2 := 5 // error - out of range\nconst m := (194 as bv8) | (7 as bv8)\n```\n\nBit-vector values can be converted to and from `int` and other bit-vector types, as long as\nthe values are in range for the target type. Bit-vector values are always considered unsigned.\n\nBit-vector operations include bit-wise operators and arithmetic operators\n(as well as equality, disequality, and comparisons).\nThe arithmetic operations\ntruncate the high-order bits from the results; that is, they perform\nunsigned arithmetic modulo 2^{number of bits}, like 2's-complement machine arithmetic.\n\n operator        | precedence | description\n-----------------|:---:|------------------------------------\n `<<`            | 5 | bit-limited bit-shift left\n `>>`            | 5 | unsigned bit-shift right\n-----------------|------------------------------------\n  `+`            | 6 | bit-limited addition\n  `-`            | 6 | bit-limited subtraction\n-----------------|------------------------------------\n  `*`            | 7 | bit-limited multiplication\n-----------------|------------------------------------\n  `&`            | 8 | bit-wise and\n  `|`            | 8 | bit-wise or \n  `^`            | 8 | bit-wise exclusive-or\n-----------------|------------------------------------\n  `-`            | 10 | bit-limited negation (unary minus)\n  `!`            | 10 | bit-wise complement\n-----------------|------------------------------------\n  .RotateLeft(n) | 11 | rotates bits left by n bit positions\n  .RotateRight(n)| 11 | rotates bits right by n bit positions\n\nThe groups of operators lower in the table above bind more tightly.[^binding]\nAll operators bind more tightly than equality, disequality, and comparisons.\nAll binary operators are left-associative, but the \nbit-wise `&`, `|`, and `^` do not associate together (parentheses are required to disambiguate).\nThe `+`, `|`, `^`, and `&` operators are commutative.\n\nThe right-hand operand of bit-shift operations is an `int` value,\nmust be non-negative, and\nno more than the number of bits in the type.\nThere is no signed right shift as all bit-vector values correspond to\nnon-negative integers.\n\nBit-vector negation returns an unsigned value in the correct range for the type.\nIt has the properties `x + (-x) == 0` and `(!x) + 1 == -x`, for a bitvector value `x`\nof at least one bit.\n\nThe argument of the `RotateLeft` and `RotateRight` operations is a\nnon-negative `int` that is no larger than the bit-width of the value being rotated.\n`RotateLeft` moves bits to higher bit positions (e.g., `(2 as bv4).RotateLeft(1) == (4 as bv4)`\nand `(8 as bv4).RotateLeft(1) == (1 as bv4)`);\n`RotateRight` moves bits to lower bit positions, so `b.RotateLeft(n).RotateRight(n) == b`.", "start_char_idx": 2, "end_char_idx": 3570, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e027dc8-7af8-4d4f-8bd8-183aeb26e240": {"__data__": {"id_": "3e027dc8-7af8-4d4f-8bd8-183aeb26e240", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1c4f0f6-9ae0-4964-8f09-807596f8ce82", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "7c704bb1bbbe3979d8c63275e7b6761eb2bf9c0b1651716458d0cb9c272e7821", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "011a797a-26c2-4989-bc84-fd094c500037", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0a42261d80481f578f4cd8a3c7a89d548d00e85a3d8f0161cc060d57ff03bfc0", "class_name": "RelatedNodeInfo"}}, "text": "There is no signed right shift as all bit-vector values correspond to\nnon-negative integers.\n\nBit-vector negation returns an unsigned value in the correct range for the type.\nIt has the properties `x + (-x) == 0` and `(!x) + 1 == -x`, for a bitvector value `x`\nof at least one bit.\n\nThe argument of the `RotateLeft` and `RotateRight` operations is a\nnon-negative `int` that is no larger than the bit-width of the value being rotated.\n`RotateLeft` moves bits to higher bit positions (e.g., `(2 as bv4).RotateLeft(1) == (4 as bv4)`\nand `(8 as bv4).RotateLeft(1) == (1 as bv4)`);\n`RotateRight` moves bits to lower bit positions, so `b.RotateLeft(n).RotateRight(n) == b`.\n\nHere are examples of the various operations (all the assertions are true except where indicated):\n\n```dafny\nconst i: bv4 := 9\nconst j: bv4 := 3\n\nmethod m() {\n  assert (i & j) == (1 as bv4);\n  assert (i | j) == (11 as bv4);\n  assert (i ^ j) == (10 as bv4);\n  assert !i == (6 as bv4);\n  assert -i == (7 as bv4);\n  assert (i + i) == (2 as bv4);\n  assert (j - i) == (10 as bv4);\n  assert (i * j) == (11 as bv4);\n  assert (i as int) / (j as int) == 3;\n  assert (j << 1) == (6 as bv4);\n  assert (i << 1) == (2 as bv4);\n  assert (i >> 1) == (4 as bv4);\n  assert i == 9; // auto conversion of literal to bv4\n  assert i * 4 == j + 8 + 9; // arithmetic is modulo 16\n  assert i + j >> 1 == (i + j) >> 1; // + - bind tigher than >\n  assert i + j ^ 2 == i + (j^2);\n  assert i * j & 1 == i * (j&1); // & | ^ bind tighter than + - *\n}\n```\nThe following are incorrectly formed:\n\n```dafny\nconst i: bv4 := 9\nconst j: bv4 := 3\n\nmethod m() {\n  assert i & 4 | j == 0 ; // parentheses required\n}\n```\n\n```dafny\nconst k: bv4 := 9\n\nmethod p() {\n  assert k as bv5 == 9 as bv6; // error: mismatched types\n}\n```\nThese produce assertion errors:\n\n```dafny\nconst i: bv4 := 9\n\nmethod m() {\n  assert i as bv3 == 1; // error: i is out of range for bv3\n}\n```\n\n```dafny\nconst j: bv4 := 9\n\nmethod n() {\n  assert j == 25; // error: 25 is out of range for bv4\n}\n```\n\nBit-vector constants (like all constants) can be initialized using expressions, but pay attention\nto how type inference applies to such expressions. For example,\n\n```dafny\nconst a: bv3 := -1\n```\nis legal because Dafny interprets `-1` as a `bv3` expression, because `a` has type `bv3`.\nConsequently the `-` is `bv3` negation and the `1` is a `bv3` literal; the value of the expression `-1` is\nthe `bv3` value `7`, which is then the value of `a`.\n\nOn the other hand,\n\n```dafny\nconst b: bv3 := 6 & 11\n```\nis illegal because, again, the `&` is `bv3` bit-wise-and and the numbers must be valid `bv3` literals.\nBut `11` is not a valid `bv3` literal.\n\n[^binding]: The binding power of shift and bit-wise operations is different than in C-like languages.", "start_char_idx": 2903, "end_char_idx": 5646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a32b7d90-e763-4e24-b40a-e4268baa4619": {"__data__": {"id_": "a32b7d90-e763-4e24-b40a-e4268baa4619", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/booleans_description.md", "file_name": "booleans_description.md", "file_type": "text/markdown", "file_size": 1487, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0736c0e3-9dcc-4296-ba51-01c3960d5f5b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/booleans_description.md", "file_name": "booleans_description.md", "file_type": "text/markdown", "file_size": 1487, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1cb25355b2cadcd34358ccbb92c95e7cf7addaedd5581bd6f6eb5bb242bd25bb", "class_name": "RelatedNodeInfo"}}, "text": "5.2.1. Booleans (grammar) {sec-booleans}\n\nThere are two boolean values and each has a corresponding literal in\nthe language:  `false` and `true`.\n\nType `bool` supports the following operations:\n\n operator           | precedence | description\n--------------------|:----------:|------------------------------------\n ``             | 1 | equivalence (if and only if)\n--------------------|------------------------------------\n `==>`              | 2 | implication (implies)\n `<==`              | 2 | reverse implication (follows from)\n--------------------|------------------------------------\n `&&`               | 3 | conjunction (and)\n `||`               | 3 |  disjunction (or)\n--------------------|------------------------------------\n `==`               | 4 | equality\n `!=`               | 4 | disequality\n--------------------|------------------------------------\n `!`                | 10 | negation (not)\n\nNegation is unary; the others are binary.  The table shows the operators\nin groups of increasing binding power, with equality binding stronger\nthan conjunction and disjunction, and weaker than negation.  Within\neach group, different operators do not associate, so parentheses need\nto be used.  For example,\n\n```dafny\nA && B || C    // error\n```\nwould be ambiguous and instead has to be written as either\n\n```dafny\n(A && B) || C\n```\nor\n\n```dafny\nA && (B || C)\n```\ndepending on the intended meaning.", "start_char_idx": 2, "end_char_idx": 1408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8716e4fb-494e-4564-b457-cc0029093f1d": {"__data__": {"id_": "8716e4fb-494e-4564-b457-cc0029093f1d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/case_and_extended_patterns_description.md", "file_name": "case_and_extended_patterns_description.md", "file_type": "text/markdown", "file_size": 2535, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07875832-6012-4b2c-be23-717cafae3638", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/case_and_extended_patterns_description.md", "file_name": "case_and_extended_patterns_description.md", "file_type": "text/markdown", "file_size": 2535, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "437c578712c168c8a741220225fcfdf21c23935d47ec3f07d21b3f20afcb787a", "class_name": "RelatedNodeInfo"}}, "text": "9.31.2. Case and Extended Patterns (grammar) {sec-case-pattern}\n\nPatterns are used for (possibly nested)\npattern matching on inductive, coinductive or base type values.\nThey are used in \nmatch statements,\nmatch expressions,\nlet expressions,\nand variable declarations.\nThe match expressions and statements allow literals,\nsymbolic constants, and disjunctive (\u201cor\u201d) patterns.\n\nWhen matching an inductive or coinductive value in\na match statement or expression, the pattern\nmust correspond to one of the following:\n\n* (0) a case disjunction (\u201cor-pattern\u201d)\n* (1) bound variable (a simple identifier),\n* (2) a constructor of the type of the value,\n* (3) a literal of the correct type, or\n* (4) a symbolic constant.\n\nIf the extended pattern is\n\n* a sequence of `|`-separated sub-patterns, then the pattern matches values\n  matched by any of the sub-patterns.\n* a parentheses-enclosed possibly-empty list of patterns,\nthen the pattern matches a tuple.\n* an identifier followed\nby a parentheses-enclosed possibly-empty list of patterns, then the pattern\nmatches a constructor.\n* a literal, then the pattern matches exactly that literal.\n* a simple identifier, then the pattern matches\n   * a parameter-less constructor if there is one defined with the correct type and the given name, else\n   * the value of a symbolic constant, if a name lookup finds a declaration for\n     a constant with the given name (if the name is declared but with a non-matching type, a type resolution error will occur),\n   * otherwise, the identifier is a new bound variable\n\nDisjunctive patterns may not bind variables, and may not be nested inside other\npatterns.\n\nAny patterns inside the parentheses of a constructor (or tuple) pattern are then\nmatched against the arguments that were given to the\nconstructor when the value was constructed.\nThe number of patterns must match the number\nof parameters to the constructor (or the arity of the\ntuple).\n\nWhen matching a value of base type, the pattern should\neither be a literal expression of the same type as the value,\nor a single identifier matching all values of this type.\n\nPatterns may be nested. The  bound variable\nidentifiers contained in all the patterns must be distinct.\nThey are bound to the corresponding values in the value being\nmatched. (Thus, for example, one cannot repeat a bound variable to\nattempt to match a constructor that has two identical arguments.)", "start_char_idx": 2, "end_char_idx": 2398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb089af5-c4dc-4c8c-94fb-bdb6082d6e8e": {"__data__": {"id_": "cb089af5-c4dc-4c8c-94fb-bdb6082d6e8e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/characters_description.md", "file_name": "characters_description.md", "file_type": "text/markdown", "file_size": 3177, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31e36b5e-cd51-4e22-8cbc-a33ba694adba", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/characters_description.md", "file_name": "characters_description.md", "file_type": "text/markdown", "file_size": 3177, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "fe6b42f4cbf2437fe4dc7739476d6778a33f8e7b9d27d842ea5f67c1dcba17f7", "class_name": "RelatedNodeInfo"}}, "text": "5.2.5. Characters (grammar) {sec-characters}\n\nDafny supports a type `char` of _characters_.  \nIts exact meaning is controlled by the command-line switch `--unicode-char:true|false`.\n\nIf `--unicode-char` is disabled, then `char` represents any UTF-16 code unit.\nThis includes surrogate code points.\n\nIf `--unicode-char` is enabled, then `char` represents any Unicode scalar value.\nThis excludes surrogate code points.\n\nCharacter literals are enclosed in single quotes, as in `'D'`. \nTo write a single quote as a\ncharacter literal, it is necessary to use an _escape sequence_.\nEscape sequences can also be used to write other characters.  The\nsupported escape sequences are the following:\n\n escape sequence    | meaning\n--------------------|-------------------------------------------------------\n `\\'`               | the character `'`\n `\\\"`               | the character `\"`\n `\\\\`               | the character `\\`\n `\\0`               | the null character, same as `\\u0000` or `\\U{0}`\n `\\n`               | line feed\n `\\r`               | carriage return\n `\\t`               | horizontal tab\n `\\u`_xxxx_         | UTF-16 code unit whose hexadecimal code is _xxxx_,  where each _x_ is a hexadecimal digit\n `\\U{`_x..x_`}`     | Unicode scalar value whose hexadecimal code is _x..x_,  where each _x_ is a hexadecimal digit\n\nThe escape sequence for a double quote is redundant, because\n`'\"'` and `'\\\"'` denote the same\ncharacter---both forms are provided in order to support the same\nescape sequences in string literals (Section 5.5.3.5).\n\nIn the form `\\u`_xxxx_, which is only allowed if `--unicode-char` is disabled,\nthe `u` is always lower case, but the four\nhexadecimal digits are case insensitive.\n\nIn the form `\\U{`_x..x_`}`, \nwhich is only allowed if `--unicode-char` is enabled,\nthe `U` is always upper case,\nbut the hexadecimal digits are case insensitive, and there must\nbe at least one and at most six digits.\nSurrogate code points are not allowed.\nThe hex digits may be interspersed with underscores for readability \n(but not beginning or ending with an underscore), as in `\\U{1_F680}`.\n\nCharacter values are ordered and can be compared using the standard\nrelational operators:\n\n operator        | description\n-----------------|-----------------------------------\n  `<`              | less than\n  `<=`             | at most\n  `>=`             | at least\n  `>`              | greater than\n\nSequences of characters represent _strings_, as described in\nSection 5.5.3.5.\n\nCharacter values can be converted to and from `int` values using the\n`as int` and `as char` conversion operations. The result is what would\nbe expected in other programming languages, namely, the `int` value of a\n`char` is the ASCII or Unicode numeric value.\n\nThe only other operations on characters are obtaining a character\nby indexing into a string, and the implicit conversion to string\nwhen used as a parameter of a `print` statement.", "start_char_idx": 2, "end_char_idx": 2917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1322d6ea-75b3-47de-969e-1c8259388e2d": {"__data__": {"id_": "1322d6ea-75b3-47de-969e-1c8259388e2d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/chunk_dafny_manual.py", "file_name": "chunk_dafny_manual.py", "file_type": "text/x-python", "file_size": 2679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d05bafa-599b-48f2-9f2f-e05b93d7b10a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/chunk_dafny_manual.py", "file_name": "chunk_dafny_manual.py", "file_type": "text/x-python", "file_size": 2679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "354b0051057d90dad20c23e77f440739b19e64720e97f0f23939c2c7203422d4", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport re\n\ndef chunk_dafny_manual(directory):\n    # Define the patterns to identify sections and grammar rules\n    section_pattern = re.compile(r'## (\\d+\\.\\d+\\.\\d+)\\. (.+) \\(\\[grammar\\]\\(#g-(.+)\\)\\) {#sec-(.+)}')\n    grammar_pattern = re.compile(r'````grammar\\n(.+?)\\n````', re.DOTALL)\n\n    # Iterate through the markdown files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.md'):\n            filepath = os.path.join(directory, filename)\n            with open(filepath, 'r') as file:\n                content = file.read()\n\n            # Find all sections in the file\n            sections = section_pattern.findall(content)\n            for section in sections:\n                section_number, section_title, grammar_anchor, section_anchor = section\n\n                # Extract the description/discussion content\n                section_start = content.find(f'## {section_number}. {section_title}')\n                next_section_start = content.find('##', section_start + 1)\n                if next_section_start == -1:\n                    next_section_start = len(content)\n                description_content = content[section_start:next_section_start]\n\n                # Extract the grammar content\n                grammar_match = grammar_pattern.search(description_content)\n                if grammar_match:\n                    grammar_content = grammar_match.group(1)\n                    description_content = description_content.replace(grammar_match.group(0), '')\n                else:\n                    grammar_content = None\n\n                # Create new files for the description and grammar content\n                feature_name = section_title.replace(\" \", \"_\").replace(\".\", \"\").replace(\",\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"_\").lower()\n                description_filename = f'{feature_name}_description.md'\n                grammar_filename = f'{feature_name}_grammar.md'\n                with open(os.path.join(directory, description_filename), 'w') as desc_file:\n                    desc_file.write(description_content)\n                if grammar_content:\n                    with open(os.path.join(directory, grammar_filename), 'w') as gram_file:\n                        gram_file.write(f'#### {section_number}. {section_title} {{#g-{grammar_anchor}}}\\n\\n')\n                        gram_file.write(f'([discussion](#sec-{section_anchor}))\\n\\n')\n                        gram_file.write('````grammar\\n')\n                        gram_file.write(grammar_content)\n                        gram_file.write('\\n````')\n\nif __name__ == '__main__':\n    chunk_dafny_manual('/home/ubuntu/dafny/docs/DafnyRef')", "start_char_idx": 0, "end_char_idx": 2678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1f54705-fe67-4b30-84df-4020ad79310e": {"__data__": {"id_": "c1f54705-fe67-4b30-84df-4020ad79310e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/datatype_update_suffix_description.md", "file_name": "datatype_update_suffix_description.md", "file_type": "text/markdown", "file_size": 1936, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "acf0788c-c9f2-4353-9781-6593c1f60cf3", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/datatype_update_suffix_description.md", "file_name": "datatype_update_suffix_description.md", "file_type": "text/markdown", "file_size": 1936, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "20902c3657ceaf18c3d33f31482093894d59aedb36aa2876d2874d2da2e4fb3a", "class_name": "RelatedNodeInfo"}}, "text": "9.34.2. Datatype Update Suffix (grammar) {sec-datatype-update-suffix}\n\nExamples: (expression with suffix)\n\n```dafny\na.(f := e1, g:= e2)\na.(0 := e1)\n(e).(f := e1, g:= e2)\n```\n\nA _datatype update suffix_ is used to produce a new datatype value\nthat is the same as an old datatype value except that the\nvalue corresponding to a given destructor has the specified value.\nIn a _member binding update_, the given identifier (or digit sequence) is the\nname of a destructor (i.e. the formal parameter name) for one of the\nconstructors of the datatype. The expression to the right of the\n`:=` is the new value for that formal.\n\nAll of the destructors in a datatype update suffix must be\nfor the same constructor, and if they do not cover all of the\ndestructors for that constructor then the datatype value being\nupdated must have a value derived from that same constructor.\n\nHere is an example:\n\n\n```dafny\nmodule NewSyntax {\n  datatype MyDataType = MyConstructor(myint:int, mybool:bool)\n                    | MyOtherConstructor(otherbool:bool)\n                    | MyNumericConstructor(42:int)\n\n  method test(datum:MyDataType, x:int)\n    returns (abc:MyDataType, def:MyDataType,\n             ghi:MyDataType, jkl:MyDataType)\n    requires datum.MyConstructor?\n    ensures abc == datum.(myint := x + 2)\n    ensures def == datum.(otherbool := !datum.mybool)  // error\n    ensures ghi == datum.(myint := 2).(mybool := false)\n    // Resolution error: no non_destructor in MyDataType\n    //ensures jkl == datum.(non_destructor := 5) // error\n    ensures jkl == datum.(42 := 7)\n  {\n    abc := MyConstructor(x + 2, datum.mybool);\n    abc := datum.(myint := x + 2);\n    def := MyOtherConstructor(!datum.mybool);\n    ghi := MyConstructor(2, false);\n    jkl := datum.(42 := 7); // error\n\n    assert abc.(myint := abc.myint - 2) == datum.(myint := x);\n  }\n}\n```", "start_char_idx": 2, "end_char_idx": 1842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36d00718-5489-4d12-9574-660f3c01b6d8": {"__data__": {"id_": "36d00718-5489-4d12-9574-660f3c01b6d8", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8bccb3e-e780-402d-9ec6-cff775918578", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08ff5a5c200bc73876de0c26bf3c6229ecc1b0435e3788556fb5560c6da1ab74", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7df13e1d-c51e-4e78-9025-816bf60e607e", "node_type": "1", "metadata": {}, "hash": "6e3e63f2dce88df1eb4c1273f2c8852b8df7c64d73150883f87dace8c3b69a68", "class_name": "RelatedNodeInfo"}}, "text": "7.1.3. Decreases Clause (grammar) {sec-decreases-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int, j: int) returns (r: int)\n  decreases i, j\nmethod n(i: int) returns (r: int)\n  decreases *\n```\nDecreases clauses are used to prove termination in the\npresence of recursion. If more than one `decreases` clause is given\nit is as if a single `decreases` clause had been given with the\ncollected list of arguments and a collected list of Attributes. That is,\n\n\n```dafny\ndecreases A, B\ndecreases C, D\n```\n\nis equivalent to\n\n\n```dafny\ndecreases A, B, C, D\n```\nNote that changing the order of multiple `decreases` clauses will change\nthe order of the expressions within the equivalent single `decreases`\nclause, and will therefore have different semantics.\n\nLoops and compiled methods (but not functions and not ghost methods,\nincluding lemmas) can be specified to be possibly non-terminating.\nThis is done by declaring the method or loop with `decreases *`, which\ncauses the proof of termination to be skipped. If a `*` is present\nin a `decreases` clause, no other expressions are allowed in the\n`decreases` clause. A method that contains a possibly non-terminating\nloop or a call to a possibly non-terminating method must itself be\ndeclared as possibly non-terminating.\n\nTermination metrics in Dafny, which are declared by `decreases` clauses,\nare lexicographic tuples of expressions. At each recursive (or mutually\nrecursive) call to a function or method, Dafny checks that the effective\n`decreases` clause of the callee is strictly smaller than the effective\n`decreases` clause of the caller.\n\n What does \"strictly smaller\" mean? Dafny provides a built-in\n well-founded order for every type and, in some cases, between types. For\n example, the Boolean `false` is strictly smaller than `true`, the\n integer `78` is strictly smaller than `102`, the set `{2,5}` is strictly\n smaller than (because it is a proper subset of) the set `{2,3,5}`, and for `s` of type `seq` where\n `Color` is some inductive datatype, the color `s[0]` is strictly less than\n `s` (provided `s` is nonempty).\n\nWhat does \"effective decreases clause\" mean? Dafny always appends a\n\"top\" element to the lexicographic tuple given by the user. This top\nelement cannot be syntactically denoted in a Dafny program and it never\noccurs as a run-time value either. Rather, it is a fictitious value,\nwhich here we will denote $\\top$, such that each value that can ever occur\nin a Dafny program is strictly less than $\\top$. Dafny sometimes also\nprepends expressions to the lexicographic tuple given by the user. The\neffective decreases clause is any such prefix, followed by the\nuser-provided decreases clause, followed by $\\top$. We said \"user-provided\ndecreases clause\", but if the user completely omits a `decreases` clause,\nthen Dafny will usually make a guess at one, in which case the effective\ndecreases clause is any prefix followed by the guess followed by $\\top$.\n\nHere is a simple but interesting example: the Fibonacci function.", "start_char_idx": 2, "end_char_idx": 2992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7df13e1d-c51e-4e78-9025-816bf60e607e": {"__data__": {"id_": "7df13e1d-c51e-4e78-9025-816bf60e607e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8bccb3e-e780-402d-9ec6-cff775918578", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08ff5a5c200bc73876de0c26bf3c6229ecc1b0435e3788556fb5560c6da1ab74", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36d00718-5489-4d12-9574-660f3c01b6d8", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "50a78a25756fe9a855155caec01acbab33e11e54a690dd57f5f39ad9dd9e9ddd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "035c784d-2c59-4226-bfd2-d768b9bf8a71", "node_type": "1", "metadata": {}, "hash": "12a0d344dbefddd28bb24257238f75b538b94bfe0e7e2d849e69bb65c472cae0", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nfunction Fib(n: nat) : nat\n{\n  if n < 2 then n else Fib(n-2) + Fib(n-1)\n}\n```\n\nIn this example, Dafny supplies a `decreases n` clause.\n\nLet's take a look at the kind of example where a mysterious-looking\ndecreases clause like \"Rank, 0\" is useful.\n\nConsider two mutually recursive methods, `A` and `B`:\n\n```dafny\nmethod A(x: nat)\n{\n  B(x);\n}\n\nmethod B(x: nat)\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nTo prove termination of `A` and `B`, Dafny needs to have effective\ndecreases clauses for A and B such that:\n\n* the measure for the callee `B(x)` is strictly smaller than the measure\n  for the caller `A(x)`, and\n\n* the measure for the callee `A(x-1)` is strictly smaller than the measure\n  for the caller `B(x)`.\n\nSatisfying the second of these conditions is easy, but what about the\nfirst? Note, for example, that declaring both `A` and `B` with \"decreases x\"\ndoes not work, because that won't prove a strict decrease for the call\nfrom `A(x)` to `B(x)`.\n\nHere's one possibility:\n\n```dafny\nmethod A(x: nat)\n  decreases x, 1\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nFor the call from `A(x)` to `B(x)`, the lexicographic tuple `\"x, 0\"` is\nstrictly smaller than `\"x, 1\"`, and for the call from `B(x)` to `A(x-1)`, the\nlexicographic tuple `\"x-1, 1\"` is strictly smaller than `\"x, 0\"`.\n\n Two things to note: First, the choice of \"0\" and \"1\" as the second\n components of these lexicographic tuples is rather arbitrary. It could\n just as well have been \"false\" and \"true\", respectively, or the sets\n `{2,5}` and `{2,3,5}`. Second, the keyword `decreases` often gives rise to\n an intuitive English reading of the declaration. For example, you might\n say that the recursive calls in the definition of the familiar Fibonacci\n function `Fib(n)` \"decreases n\". But when the lexicographic tuple contains\n constants, the English reading of the declaration becomes mysterious and\n may give rise to questions like \"how can you decrease the constant 0?\".\n The keyword is just that---a keyword. It says \"here comes a list of\n expressions that make up the lexicographic tuple we want to use for the\n termination measure\". What is important is that one effective decreases\n clause is compared against another one, and it certainly makes sense to\n compare something to a constant (and to compare one constant to\n another).\n\n We can simplify things a little bit by remembering that Dafny appends\n $\\top$ to the user-supplied decreases clause. For the A-and-B example,\n this lets us drop the constant from the `decreases` clause of A:\n\n\n```dafny\nmethod A(x: nat)\n   decreases x\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nThe effective decreases clause of `A` is $(x, \\top)$ and the effective\ndecreases clause of `B` is $(x, 0, \\top)$. These tuples still satisfy the two\nconditions $(x, 0, \\top) < (x, \\top)$ and $(x-1, \\top) < (x, 0, \\top)$. And\nas before, the constant \"0\" is arbitrary; anything less than $\\top$ (which\nis any Dafny expression) would work.\n\nLet's take a look at one more example that better illustrates the utility\nof $\\top$.", "start_char_idx": 2995, "end_char_idx": 6091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "035c784d-2c59-4226-bfd2-d768b9bf8a71": {"__data__": {"id_": "035c784d-2c59-4226-bfd2-d768b9bf8a71", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8bccb3e-e780-402d-9ec6-cff775918578", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08ff5a5c200bc73876de0c26bf3c6229ecc1b0435e3788556fb5560c6da1ab74", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7df13e1d-c51e-4e78-9025-816bf60e607e", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1e5d752372e7b6956320819860667b50d78570f0d37aa89cd27fc1bb9c6e6102", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0ff9f2e-370a-4e96-bcba-8dba9c3144aa", "node_type": "1", "metadata": {}, "hash": "4e8ec85630204bf7d9ac3d13f53f75658de4cceba8d849c09f74d04f5ac88d52", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nmethod A(x: nat)\n   decreases x\n{\n  B(x);\n}\n\nmethod B(x: nat)\n  decreases x, 0\n{\n  if x != 0 { A(x-1); }\n}\n```\n\nThe effective decreases clause of `A` is $(x, \\top)$ and the effective\ndecreases clause of `B` is $(x, 0, \\top)$. These tuples still satisfy the two\nconditions $(x, 0, \\top) < (x, \\top)$ and $(x-1, \\top) < (x, 0, \\top)$. And\nas before, the constant \"0\" is arbitrary; anything less than $\\top$ (which\nis any Dafny expression) would work.\n\nLet's take a look at one more example that better illustrates the utility\nof $\\top$. Consider again two mutually recursive methods, call them `Outer`\nand `Inner`, representing the recursive counterparts of what iteratively\nmight be two nested loops:\n\n```dafny\nmethod Outer(x: nat)\n{\n  // set y to an arbitrary non-negative integer\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nThe body of `Outer` uses an assign-such-that statement to represent some\ncomputation that takes place before `Inner` is called. It sets \"y\" to some\narbitrary non-negative value. In a more concrete example, `Inner` would do\nsome work for each \"y\" and then continue as `Outer` on the next smaller\n\"x\".\n\nUsing a `decreases` clause $(x, y)$ for `Inner` seems natural, but if\nwe don't have any bound on the size of the $y$ computed by `Outer`,\nthere is no expression we can write in the `decreases` clause of `Outer`\nthat is sure to lead to a strictly smaller value for $y$ when `Inner`\nis called. $\\top$ to the rescue. If we arrange for the effective\ndecreases clause of `Outer` to be $(x, \\top)$ and the effective decreases\nclause for `Inner` to be $(x, y, \\top)$, then we can show the strict\ndecreases as required. Since $\\top$ is implicitly appended, the two\ndecreases clauses declared in the program text can be:\n\n```dafny\nmethod Outer(x: nat)\n  decreases x\n{\n  // set y to an arbitrary non-negative integer\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n  decreases x,y\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nMoreover, remember that if a function or method has no user-declared\n`decreases` clause, Dafny will make a guess. The guess is (usually)\nthe list of arguments of the function/method, in the order given. This is\nexactly the decreases clauses needed here. Thus, Dafny successfully\nverifies the program without any explicit `decreases` clauses:\n\n```dafny\nmethod Outer(x: nat)\n{\n  var y :| 0 <= y;\n  Inner(x, y);\n}\n\nmethod Inner(x: nat, y: nat)\n{\n  if y != 0 {\n    Inner(x, y-1);\n  } else if x != 0 {\n    Outer(x-1);\n  }\n}\n```\nThe ingredients are simple, but the end result may seem like magic. \nFor many users, however, there may be no magic at all \n-- the end result may be so natural that the user never even has to \nbe bothered to think about that there was a need to prove \ntermination in the first place.\n\nDafny also prepends two expressions to the user-specified (or guessed) tuple of expressions\nin the decreases clause. The first expression is the ordering of\nthe module containing the decreases clause in the dependence-ordering of \nmodules. That is, a module that neither imports or defines (as submodules) any other modules \nhas the lowest value in the order and every other module has a value that is higher than\nthat of any module it defines or imports.", "start_char_idx": 5548, "end_char_idx": 8921, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0ff9f2e-370a-4e96-bcba-8dba9c3144aa": {"__data__": {"id_": "b0ff9f2e-370a-4e96-bcba-8dba9c3144aa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8bccb3e-e780-402d-9ec6-cff775918578", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "08ff5a5c200bc73876de0c26bf3c6229ecc1b0435e3788556fb5560c6da1ab74", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "035c784d-2c59-4226-bfd2-d768b9bf8a71", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "ab36ab5ea8cb53d6a401984567a35a99676d17e794ba973d5b55356b3ebfc3c5", "class_name": "RelatedNodeInfo"}}, "text": "For many users, however, there may be no magic at all \n-- the end result may be so natural that the user never even has to \nbe bothered to think about that there was a need to prove \ntermination in the first place.\n\nDafny also prepends two expressions to the user-specified (or guessed) tuple of expressions\nin the decreases clause. The first expression is the ordering of\nthe module containing the decreases clause in the dependence-ordering of \nmodules. That is, a module that neither imports or defines (as submodules) any other modules \nhas the lowest value in the order and every other module has a value that is higher than\nthat of any module it defines or imports. As a module cannot call a method in a\nmodule that it does not depend on, this is an effective first component to the\noverall decreases tuple.\n\nThe second prepended expression represents the position\nof the method in the call graph within a module. Dafny analyzes the call-graph of the \nmodule, grouping all methods into mutually-recursive groups.\nAny method that calls nothing else is at the lowest level (say level 0).\nAbsent recursion, every method has a level value strictly greater than any method it calls.\nMethods that are mutually recursive are at the same level and they are above\nthe level of anything else they call. With this level value prepended to \nthe decreases clause, the decreases tuple automatically decreases on any\ncalls in a non-recursive context.\n\nThough Dafny fixes a well-founded order that it uses when checking\ntermination, Dafny does not normally surface this ordering directly in\nexpressions. However, it is possible to write such ordering constraints\nusing `decreases to` expressions.", "start_char_idx": 8250, "end_char_idx": 9936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b55efe6-a667-4667-9500-ce458dc84e18": {"__data__": {"id_": "6b55efe6-a667-4667-9500-ce458dc84e18", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ensures_clause_description.md", "file_name": "ensures_clause_description.md", "file_type": "text/markdown", "file_size": 980, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5037c7aa-19e6-4150-aff4-fc39138524a4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ensures_clause_description.md", "file_name": "ensures_clause_description.md", "file_type": "text/markdown", "file_size": 980, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "53fef7da5e416012633ce519b53b544f2a23fdbeb8ebbd204c1ba4d43ba5a877", "class_name": "RelatedNodeInfo"}}, "text": "7.1.2. Ensures Clause (grammar) {sec-ensures-clause}\n\nExamples:\n\n```dafny\nmethod {:axiom} m(i: int) returns (r: int)\n  ensures r > 0\n```\n\nAn `ensures` clause specifies the post condition for a\nmethod, function or iterator.\n\nIf no `ensures` clause is specified, then a default implicit\nclause `ensures true` is used.\n\nIf more than one `ensures` clause is given, then the\npostcondition is the conjunction of all of the expressions\nfrom all of the `ensures` clauses, with a\ncollected list of all the given Attributes.\nThe order of conjunctions\n(and hence the order of `ensures` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for ensures clauses are discussed in Section 11.4.\n\nAn ensures clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 862, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34708d25-6ec0-451a-9837-9d09cb107924": {"__data__": {"id_": "34708d25-6ec0-451a-9837-9d09cb107924", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27f9eecc-bff3-4ddf-aba0-59b523b016d5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "33ff182d5e9a7b504cc96fa6832b9c552564cee4d73b8e4b3454f4ea7f56a650", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "644a01c1-ddba-4f5c-a744-facf9aaec141", "node_type": "1", "metadata": {}, "hash": "353a372723b21dd1dea7dde5c414d8826e180b09573687fc7bf15b5c3a4b9bc9", "class_name": "RelatedNodeInfo"}}, "text": "5.5.4. Finite and Infinite Maps (grammar) {sec-maps}\n\nFor any types `T` and `U`, a value of type `map` denotes a\n_(finite) map_\nfrom `T` to `U`.  In other words, it is a look-up table indexed by\n`T`.  The _domain_ of the map is a finite set of `T` values that have\nassociated `U` values.  Since the keys in the domain are compared\nusing equality in the type `T`, type `map` can be used in a\nnon-ghost context only if `T` is\nequality supporting.\n\nSimilarly, for any types `T` and `U`, a value of type `imap`\ndenotes a _(possibly) infinite map_.  In most regards, `imap` is\nlike `map`, but a map of type `imap` is allowed to have an\ninfinite domain.\n\nA map can be formed using a _map display_ expression (see Section 9.30),\nwhich is a possibly empty, ordered list of _maplets_, each maplet having the\nform `t := u` where `t` is an expression of type `T` and `u` is an\nexpression of type `U`, enclosed in square brackets after the keyword\n`map`.  To illustrate,\n\n```dafny\nmap[]\nmap[20 := true, 3 := false, 20 := false]\nmap[a+b := c+d]\n```\nare three examples of map displays.  By using the keyword `imap`\ninstead of `map`, the map produced will be of type `imap`\ninstead of `map`.  Note that an infinite map (`imap`) is allowed\nto have a finite domain, whereas a finite map (`map`) is not allowed\nto have an infinite domain.\nIf the same key occurs more than\nonce in a map display expression, only the last occurrence appears in the resulting\nmap.[^fn-map-display]  There is also a _map comprehension expression_,\nexplained in Section 9.31.8.\n\n[^fn-map-display]: This is likely to change in the future to disallow\n    multiple occurrences of the same key.\n\nFor any map `fm` of type `map`,\nany map `m` of type `map` or `imap`,\nany expression `t` of type `T`,\nany expression `u` of type `U`, and any `d` in the domain of `m` (that\nis, satisfying `d in m`), maps support the following operations:\n\n expression     | precedence | result type | description\n ---------------|:---:|:-----------:|------------------------------------\n `t in m`       | 4 | `bool`      | map domain membership\n `t !in m`      | 4 | `bool`      | map domain non-membership\n `|fm|`         | 11 | `nat`       | map cardinality\n `m[d]`         | 11 | `U`         | map selection\n `m[t := u]`    | 11 | `map`  | map update\n `m.Keys`      | 11 | (i)`set`    | the domain of `m`\n `m.Values`    | 11 | (i)`set`    | the range of `m`\n `m.Items`     | 11 | (i)`set`| set of pairs (t,u) in `m`\n\n`|fm|` denotes the number of mappings in `fm`, that is, the\ncardinality of the domain of `fm`.  Note that the cardinality operator\nis not supported for infinite maps.\nExpression `m[d]` returns the `U` value that `m` associates with `d`.\nExpression `m[t := u]` is a map like `m`, except that the\nelement at key `t` is `u`.  The expression `t in m` says `t` is in the\ndomain of `m` and `t !in m` is a syntactic shorthand for\n`!(t in m)`.[^fn-map-membership]\n\nThe expressions `m.Keys`, `m.Values`, and `m.Items` return, as sets,\nthe domain, the range, and the 2-tuples holding the key-value\nassociations in the map. Note that `m.Values` will have a different\ncardinality than `m.Keys` and `m.Items` if different keys are\nassociated with the same value. If `m` is an `imap`, then these\nexpressions return `iset` values.", "start_char_idx": 2, "end_char_idx": 3271, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "644a01c1-ddba-4f5c-a744-facf9aaec141": {"__data__": {"id_": "644a01c1-ddba-4f5c-a744-facf9aaec141", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27f9eecc-bff3-4ddf-aba0-59b523b016d5", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "33ff182d5e9a7b504cc96fa6832b9c552564cee4d73b8e4b3454f4ea7f56a650", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34708d25-6ec0-451a-9837-9d09cb107924", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "085c3bd35a307adc2205de26dbcf3c0bb87495d75fab76c5a1083e479e447c45", "class_name": "RelatedNodeInfo"}}, "text": "Expression `m[d]` returns the `U` value that `m` associates with `d`.\nExpression `m[t := u]` is a map like `m`, except that the\nelement at key `t` is `u`.  The expression `t in m` says `t` is in the\ndomain of `m` and `t !in m` is a syntactic shorthand for\n`!(t in m)`.[^fn-map-membership]\n\nThe expressions `m.Keys`, `m.Values`, and `m.Items` return, as sets,\nthe domain, the range, and the 2-tuples holding the key-value\nassociations in the map. Note that `m.Values` will have a different\ncardinality than `m.Keys` and `m.Items` if different keys are\nassociated with the same value. If `m` is an `imap`, then these\nexpressions return `iset` values. If `m` is a map, `m.Values` and `m.Items`\nrequire the type of the range `U` to support equality.\n\n[^fn-map-membership]: This is likely to change in the future as\n    follows:  The `in` and `!in` operations will no longer be\n    supported on maps, with `x in m` replaced by `x in m.Keys`,\nand similarly for `!in`.\n\nHere is a small example, where a map `cache` of type `map`\nis used to cache computed values of Joule-Thomson coefficients for\nsome fixed gas at a given temperature:\n\n```dafny\nif K in cache {  // check if temperature is in domain of cache\n  coeff := cache[K];  // read result in cache\n} else {\n  coeff := ComputeJTCoefficient(K); // do expensive computation\n  cache := cache[K := coeff];  // update the cache\n}\n```\n\nDafny also overloads the `+` and `-` binary operators for maps.\nThe `+` operator merges two maps or imaps of the same type, as if each\n(key,value) pair of the RHS is added in turn to the LHS (i)map.\nIn this use, `+` is not commutative; if a key exists in both\n(i)maps, it is the value from the RHS (i)map that is present in the result.\n\nThe `-` operator implements a map difference operator. Here the LHS\nis a `map` or `imap` and the RHS is a `set` (but not an `iset`); the operation removes\nfrom the LHS all the (key,value) pairs whose key is a member of the RHS set.\n\nTo avoid cuasing circular reasoning chains or providing too much informatino that might\ncomplicate Dafny's prover finding proofs, not all properties of maps are known by the prover by default.\nFor example, the following does not prove:\n\n```dafny\nmethod mmm(m: map, k: K, v: V) {\n    var mm := m[k := v];\n    assert v in mm.Values;\n  }\n```\nRather, one must provide an intermediate step, which is not entirely obvious:\n\n```dafny\nmethod mmm(m: map, k: K, v: V) {\n    var mm := m[k := v];\n    assert k in mm.Keys;\n    assert v in mm.Values;\n  }\n```", "start_char_idx": 2623, "end_char_idx": 5115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3d122cc-8431-4f83-ba16-8b5254b5728d": {"__data__": {"id_": "f3d122cc-8431-4f83-ba16-8b5254b5728d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/framing_description.md", "file_name": "framing_description.md", "file_type": "text/markdown", "file_size": 2282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2fcef851-2c54-4e61-8e40-bde6b4026a4e", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/framing_description.md", "file_name": "framing_description.md", "file_type": "text/markdown", "file_size": 2282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "22d03cfeb89b82b1007af746fd837a95a485716c82ac9061b6457fdb58d75ca4", "class_name": "RelatedNodeInfo"}}, "text": "7.1.4. Framing (grammar) {sec-frame-expression}\n\nExamples:\n\n```dafny\n*\no\no`a\n`a\n{ o, p, q }\n{}\n```\n\nFrame expressions are used to denote the set of memory locations\nthat a Dafny program element may read or write. \nThey are used in `reads` and `modifies` clauses.\nA frame expression is a set expression. The form `{}` is the empty set.\nThe type of the frame expression is `set`.\n\nNote that framing only applies to the heap, or memory accessed through\nreferences. Local variables are not stored on the heap, so they cannot be\nmentioned (well, they are not in scope in the declaration) in frame\nannotations. Note also that types like sets, sequences, and multisets are\nvalue types, and are treated like integers or local variables. Arrays and\nobjects are reference types, and they are stored on the heap (though as\nalways there is a subtle distinction between the reference itself and the\nvalue it points to.)\n\n\nThe ``FrameField`` construct is used to specify a field of a\nclass object. The identifier following the back-quote is the\nname of the field being referenced.\nIf the `FrameField` is preceded by an expression the expression\nmust be a reference to an object having that field.\nIf the `FrameField` is not preceded by an expression then\nthe frame expression is referring to that field of the current\nobject (`this`). This form is only used within a method of a class or trait.\n\nA ``FrameField`` can be useful in the following case:\nWhen a method modifies only one field, rather than writing\n\n\n```dafny\nclass A {\n  var i: int\n  var x0: int\n  var x1: int\n  var x2: int\n  var x3: int\n  var x4: int\n  method M()\n    modifies this\n    ensures unchanged(`x0) && unchanged(`x1) && unchanged(`x2) && unchanged(`x3) && unchanged(`x4)\n  { i := i + 1; }\n}\n```\n\none can write the more concise:\n\n\n```dafny\nclass A {\n  var i: int\n  var x0: int\n  var x1: int\n  var x2: int\n  var x3: int\n  var x4: int\n  method M()\n    modifies `i\n  { i := i + 1; }\n}\n```\n\nThere's (unfortunately) no form of it for array\nelements -- but to account for unchanged elements, you can always write\n`forall i | 0 <= i < |a| :: unchanged(a[i])`.\n\nA ``FrameField`` is not taken into consideration for\nlambda expressions.", "start_char_idx": 2, "end_char_idx": 2185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2b8da66-754a-4b31-9e30-17f4e5d3153d": {"__data__": {"id_": "c2b8da66-754a-4b31-9e30-17f4e5d3153d", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/if_expression_description.md", "file_name": "if_expression_description.md", "file_type": "text/markdown", "file_size": 2139, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c66bab98-a7a0-41ac-b717-3cfce2e25f78", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/if_expression_description.md", "file_name": "if_expression_description.md", "file_type": "text/markdown", "file_size": 2139, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "02e6ac478e59a20fff83fcf7d3965b82e7d66ca41f3ebf2b745a341e01833b63", "class_name": "RelatedNodeInfo"}}, "text": "9.31.1. If Expression (grammar) {sec-if-expression}\n\nExamples:\n\n```dafny\nif c then e1 else e2\nif x: int :| P(x) then x else 0\n```\n\n\nAn _if expression_ is a conditional (ternary) expression. It first evaluates\nthe condition expression that follows the `if`. If the condition evaluates to `true` then\nthe expression following the `then` is evaluated and its value is the\nresult of the expression. If the condition evaluates to `false` then the\nexpression following the `else` is evaluated and that value is the result\nof the expression. It is important that only the selected expression\nis evaluated as the following example shows.\n\n\n```dafny\nvar k := 10 / x; // error, may divide by 0.\nvar m := if x != 0 then 10 / x else 1; // ok, guarded\n```\n\nThe `if` expression also permits a binding form.\nIn this case the condition of the `if` is an existential asking\n\"does there exist a value satisfying the given predicate?\".\nIf not, the else branch is evaluated. But if so, then an\n(arbitrary) value that does satisfy the given predicate is\nbound to the given variable and that variable is in scope in \nthe then-branch of the expression.\n\nFor example, in the code\n\n```dafny\npredicate P(x: int) {\n  x == 5 || x == -5\n}\nmethod main() {\n  assert P(5);\n  var y := if x: int :| P(x) then x else 0;\n  assert y == 5 || y == -5;\n}\n```\n`x` is given some value that satisfies `P(x)`, namely either `5` or `-5`.\nThat value of `x` is the value of the expression in the `then` branch above; if there is no value satisfying `P(x)`,\nthen `0` is returned. Note that if `x` is declared to be a `nat` in this example, then only\nthe value `5` would be permissible.\n\nThis binding form of the `if` expression acts in the same way as the binding form of the `if` statement.\n\nIn the example given, the binder for `x` has no constraining range, so the expression is `ghost`;\nif a range is given, such as `var y := if x: int :| 0 <= x < 10 && P(x) then x else 0;`,\nthen the `if` and `y` are no longer ghost, and `y` could be used, for example, in a `print` statement.", "start_char_idx": 2, "end_char_idx": 2036, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5451deea-3150-468d-82bb-3d16caea2cbc": {"__data__": {"id_": "5451deea-3150-468d-82bb-3d16caea2cbc", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/invariant_clause_description.md", "file_name": "invariant_clause_description.md", "file_type": "text/markdown", "file_size": 759, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb9bccfd-54f7-4a9d-926d-707627eca7be", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/invariant_clause_description.md", "file_name": "invariant_clause_description.md", "file_type": "text/markdown", "file_size": 759, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5b9e279bb89cde0c2da06eec7e452a94648eb3fec84bad4e2982ee29a69aa1d1", "class_name": "RelatedNodeInfo"}}, "text": "7.1.7. Invariant Clause (grammar) {sec-invariant-clause}\n\nExamples:\n\n```dafny\nmethod m()\n{\n  var i := 10;\n  while 0 < i\n    invariant 0 <= i < 10\n}\n```\n\nAn `invariant` clause is used to specify an invariant\nfor a loop. If more than one `invariant` clause is given for\na loop, the effective invariant is the conjunction of\nthe conditions specified, in the order given in the source text.\n\nThe invariant must hold on entry to the loop. And assuming it\nis valid on entry to a particular iteration of the loop, \nDafny must be able to prove that it then\nholds at the end of that iteration of the loop.\n\nAn invariant can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ddc69a4-9b6f-4fdf-a196-bb4f7e43e33c": {"__data__": {"id_": "1ddc69a4-9b6f-4fdf-a196-bb4f7e43e33c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/let_and_let_or_fail_expression_description.md", "file_name": "let_and_let_or_fail_expression_description.md", "file_type": "text/markdown", "file_size": 2687, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c00647d-cb87-4890-b499-c0294ac209c2", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/let_and_let_or_fail_expression_description.md", "file_name": "let_and_let_or_fail_expression_description.md", "file_type": "text/markdown", "file_size": 2687, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "df410f420daee3fff43b640cb916b56927c6f31f8749c36131d4ffeb3c04f437", "class_name": "RelatedNodeInfo"}}, "text": "9.31.7. Let and Let or Fail Expression (grammar) {sec-let-expression}\n\nExamples:\n\n```dafny\nvar x := f(y); x*x\nvar x :- f(y); x*x\nvar x :| P(x); x*x\nvar (x, y) := T(); x + y   // T returns a tuple\nvar R(x,y) := T(); x + y   // T returns a datatype value R\n```\n\n\nA `let` expression allows binding of intermediate values to identifiers\nfor use in an expression. The start of the `let` expression is\nsignaled by the `var` keyword. They look much like a local variable\ndeclaration except the scope of the variable only extends to the\nenclosed expression.\n\nFor example:\n\n```dafny\nvar sum := x + y; sum * sum\n```\n\nIn the simple case, the pattern is just an identifier with optional\ntype (which if missing is inferred from the rhs).\n\nThe more complex case allows destructuring of constructor expressions.\nFor example:\n\n\n```dafny\ndatatype Stuff = SCons(x: int, y: int) | Other\nfunction GhostF(z: Stuff): int\n  requires z.SCons?\n{\n  var SCons(u, v) := z; var sum := u + v; sum * sum\n}\n```\n\nThe Let expression has a failure variant\nthat simply uses `:-` instead of `:=`. This Let-or-Fail expression also permits propagating\nfailure results. However, in statements (Section 8.6), failure results in\nimmediate return from the method; expressions do not have side effects or immediate return\nmechanisms. Rather, if the expression to the right of `:-` results in a failure value `V`,\nthe overall expression returns `V.PropagateFailure()`; if there is no failure, the expression following the \nsemicolon is returned. Note that these two possible return values must have the same type (or be \nimplicitly convertible to the same type). Typically that means that `tmp.PropagateFailure()` is a failure value and\n`E` is a value-carrying success value, both of the same failure-compatible type, \nas described in Section 8.6.\n\nThe expression `:- V; E` is desugared into the _expression_\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse E\n```\n\nThe expression `var v :- V; E` is desugared into the _expression_\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse var v := tmp.Extract(); E\n```\n\nIf the RHS is a list of expressions then the desugaring is similar. `var v, v1 :- V, V1; E` becomes\n\n```dafny\nvar tmp := V;\nif tmp.IsFailure()\nthen tmp.PropagateFailure()\nelse var v, v1 := tmp.Extract(), V1; E\n```\n\nSo, if tmp is a failure value, then a corresponding failure value is propagated along; otherwise, the expression\nis evaluated as normal.", "start_char_idx": 2, "end_char_idx": 2473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfa2e3ca-9432-41ad-8376-b3ee9879c964": {"__data__": {"id_": "cfa2e3ca-9432-41ad-8376-b3ee9879c964", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/map_comprehension_expression_description.md", "file_name": "map_comprehension_expression_description.md", "file_type": "text/markdown", "file_size": 1311, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db91eb4b-86c2-4d58-960a-c2ecf134d746", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/map_comprehension_expression_description.md", "file_name": "map_comprehension_expression_description.md", "file_type": "text/markdown", "file_size": 1311, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "56dd34ad912da658f66580a07f9424a574dbce0d11eb70f0108764dbef654fa4", "class_name": "RelatedNodeInfo"}}, "text": "9.31.8. Map Comprehension Expression (grammar) {sec-map-comprehension-expression}\n\nExamples:\n\n```dafny\nmap x : int | 0 <= x <= 10 :: x * x;\nmap x : int | 0 <= x <= 10 :: -x := x * x;\nimap x : int | 10 < x :: x * x;\n```\n\nA _map comprehension expression_  defines a finite or infinite map value\nby defining a domain and for each value in the domain,\ngiving the mapped value using the expression following the \"::\".\nSee Section 2.7.4 for more details on quantifier domains.\n\nFor example:\n\n```dafny\nfunction square(x : int) : int { x * x }\nmethod test()\n{\n  var m := map x : int | 0 <= x <= 10 :: x * x;\n  ghost var im := imap x : int :: x * x;\n  ghost var im2 := imap x : int :: square(x);\n}\n```\n\nDafny finite maps must be finite, so the domain must be constrained to be finite.\nBut imaps may be infinite as the examples show. The last example shows\ncreation of an infinite map that gives the same results as a function.\n\nIf the expression includes the `:=` token, that token separates\ndomain values from range values. For example, in the following code\n\n```dafny\nmethod test()\n{\n  var m := map x : int | 1 <= x <= 10 :: 2*x := 3*x;\n}\n```\n`m` maps `2` to `3`, `4` to `6`, and so on.", "start_char_idx": 2, "end_char_idx": 1181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88633947-f14a-4b67-a1cf-ba9a807e8c43": {"__data__": {"id_": "88633947-f14a-4b67-a1cf-ba9a807e8c43", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/match_expression_description.md", "file_name": "match_expression_description.md", "file_type": "text/markdown", "file_size": 1481, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09b11af0-7fc7-4f52-9c9c-93600f0aad18", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/match_expression_description.md", "file_name": "match_expression_description.md", "file_type": "text/markdown", "file_size": 1481, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "f5bd1f5cc5b4362a70f5e691eb4a822cce8cca41644a52050f1f3464dacee1ac", "class_name": "RelatedNodeInfo"}}, "text": "9.31.3. Match Expression (grammar) {sec-match-expression}\n\nA _match expression_ is used to conditionally evaluate and select an\nexpression depending on the value of an algebraic type, i.e. an inductive\ntype, a coinductive type, or a base type.\n\nAll of the variables in the patterns must be distinct.\nIf types for the identifiers are not given then types are inferred\nfrom the types of the constructor's parameters. If types are\ngiven then they must agree with the types of the\ncorresponding parameters.\n\nThe expression following the `match` keyword is called the\n_selector_. A match expression is evaluated by first evaluating the selector.\nThe patterns of each match alternative are then compared, in order,\n with the resulting value until a matching pattern is found, as described in\nthe section on case bindings.\nIf the constructor had\nparameters, then the actual values used to construct the selector\nvalue are bound to the identifiers in the identifier list.\nThe expression to the right of the `=>` in the matched alternative is then\nevaluated in the environment enriched by this binding. The result\nof that evaluation is the result of the match expression.\n\nNote that the braces enclosing the sequence of match alternatives may be omitted.\nThose braces are required if lemma or lambda expressions are used in the\nbody of any match alternative; they may also be needed for disambiguation if\nthere are nested match expressions.", "start_char_idx": 2, "end_char_idx": 1433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6eb07bc5-ed7d-4ab3-ac95-6c2dee223058": {"__data__": {"id_": "6eb07bc5-ed7d-4ab3-ac95-6c2dee223058", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/modifies_clause_description.md", "file_name": "modifies_clause_description.md", "file_type": "text/markdown", "file_size": 3033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d38d7c4d-6db6-4fb0-b0a0-7679bae6abf4", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/modifies_clause_description.md", "file_name": "modifies_clause_description.md", "file_type": "text/markdown", "file_size": 3033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1b1facaf936fdd4458fe78bd924ac90ad2d0b7b82b814928255036033e4c6a89", "class_name": "RelatedNodeInfo"}}, "text": "7.1.6. Modifies Clause (grammar) {sec-modifies-clause}\n\nExamples:\n\n```dafny\nclass A { var f: int }\nconst o: object?\nconst p: A?\nmethod M()\n  modifies { o, p }\nmethod N()\n  modifies { }\nmethod Q()\n  modifies o, p`f\n```\n\nBy default, methods are allowed to read\nwhatever memory they like, but they are required to list which parts of\nmemory they modify, with a `modifies` annotation. These are almost identical\nto their `reads` cousins, except they say what can be changed, rather than\nwhat the definition depends on. In combination with reads,\nmodification restrictions allow Dafny to prove properties of code that\nwould otherwise be very difficult or impossible. Reads and modifies are\none of the tools that allow Dafny to work on one method at a time,\nbecause they restrict what would otherwise be arbitrary modifications of\nmemory to something that Dafny can reason about.\n\nJust as for a `reads` clause, the memory locations allowed to be modified\nin a method are all the fields of any object reference in the frame expression\nset and any specific field denoted by a `FrameField` in the `modifies` clause.\nFor example, in\n\n```dafny\nclass C {\n  var next: C?\n  var value: int\n\n  method M() \n    modifies next\n  { \n    ... \n  }\n}\n```\nmethod `M` is permitted to modify `this.next.next` and `this.next.value`\nbut not `this.next`. To be allowed to modify `this.next`, the modifies clause\nmust include `this`, or some expression that evaluates to `this`, or ``this`next``.\n\nIf an object is newly allocated within the body of a method\nor within the scope of a `modifies` statement or a loop's `modifies` clause,\n then the fields of that object may always be modified.\n\nA `modifies` clause specifies the set of memory locations that a\nmethod, iterator or loop body may modify. If more than one `modifies`\nclause is given in a specification, the effective modifies set is the\nunion of the sets specified. If no `modifies` clause is given the\neffective modifies set is empty. There is no wildcard (`*`) allowed in\na modifies clause. A loop can also have a\n`modifies` clause. If none is given, the loop may modify anything\nthe enclosing context is allowed to modify.\n\nNote that _modifies_ here is used in the sense of _writes_. That is, a field\nthat may not be modified may not be written to, even with the same value it\nalready has or even if the value is restored later. The terminology and\nsemantics varies among specification languages. Some define frame conditions\nin this sense (a) of _writes_ and others in the sense (b) that allows writing\na field with the same value or changing the value so long as the original\nvalue is restored by the end of the scope. For example, JML defines\n`assignable` and `modifies` as synonyms in the sense (a), though KeY\ninterprets JML's `assigns/modifies` in sense (b).\nACSL and ACSL++ use the `assigns` keyword, but with _modify_ (b) semantics.\nAda/SPARK's dataflow contracts encode _write_ (a) semantics.", "start_char_idx": 2, "end_char_idx": 2936, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdad76c7-3523-4a21-b946-57eff47b232c": {"__data__": {"id_": "fdad76c7-3523-4a21-b946-57eff47b232c", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/multisets_description.md", "file_name": "multisets_description.md", "file_type": "text/markdown", "file_size": 3946, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8fc0108a-f3fd-49fe-90ef-abca3cc98c2f", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/multisets_description.md", "file_name": "multisets_description.md", "file_type": "text/markdown", "file_size": 3946, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "a74bef0b51e38390ff53ba79bbf06a0f7476594a107b2aa8412619df9504f096", "class_name": "RelatedNodeInfo"}}, "text": "5.5.2. Multisets (grammar) {sec-multisets}\n\nA _multiset_ is similar to a set, but keeps track of the multiplicity\nof each element, not just its presence or absence.  For any type `T`,\neach value of type `multiset` is a map from `T` values to natural\nnumbers denoting each element's multiplicity.  Multisets in Dafny\nare finite, that is, they contain a finite number of each of a finite\nset of elements.  Stated differently, a multiset maps only a finite\nnumber of elements to non-zero (finite) multiplicities.\n\nLike sets, multiset membership is determined by equality in the type\n`T`, so `multiset` can be used in a non-ghost context only if `T`\nis equality supporting.\n\nA multiset can be formed using a _multiset display_ expression, which\nis a possibly empty, unordered list of expressions enclosed in curly\nbraces after the keyword `multiset`.  To illustrate,\n\n```dafny\nmultiset{}   multiset{0, 1, 1, 2, 3, 5}   multiset{4+2, 1+5, a*b}\n```\nare three examples of multiset displays.  There is no multiset\ncomprehension expression.\n\nIn addition to equality and disequality, multiset types\nsupport the following relational operations:\n\n\n operator          | precedence | description\n-------------------|-----------------------------------\n  `<`              | 4 | proper multiset subset\n  `<=`             | 4 | multiset subset\n  `>=`             | 4 | multiset superset\n  `>`              | 4 | proper multiset superset\n\nLike the arithmetic relational operators, these operators are\nchaining.\n\nMultisets support the following binary operators, listed in order of\nincreasing binding power:\n\n operator      | precedence | description\n---------------|:---:|------------------------------------\n `!!`          | 4 | multiset disjointness\n---------------|------------------------------------\n `+`           | 6 |multiset sum\n `-`           | 6 |multiset difference\n---------------|------------------------------------\n `*`           | 7 | multiset intersection\n\nThe associativity rules of `+`, `-`, and `*` are like those of the\narithmetic operators with the same names. The `+` operator\nadds the multiplicity of corresponding elements, the `-` operator\nsubtracts them (but 0 is the minimum multiplicity),\nand the `*` has multiplicity that is the minimum of the\nmultiplicity of the operands. There is no operator for multiset\nunion, which would compute the maximum of the multiplicities of the operands.\n\nThe expression `A !! B`\nsays that multisets `A` and `B` have no elements in common, that is,\nit is equivalent to\n\n```dafny\nA * B == multiset{}\n```\nLike the analogous set operator, `!!` is chaining and means mutual disjointness.\n\nIn addition, for any multiset `s` of type `multiset`,\nexpression `e` of type `T`, and non-negative integer-based numeric\n`n`, multisets support the following operations:\n\n expression      | precedence | result type      | description\n-----------------|:---:|:----------------:|------------------------------------------\n `e in s`        | 4  |  `bool`         | multiset membership\n `e !in s`       | 4  |  `bool`         | multiset non-membership\n `|s|`           | 11 |   `nat`          | multiset cardinality\n `s[e]`          | 11 |  `nat`          | multiplicity of `e` in `s`\n `s[e := n]`     | 11 | `multiset`    | multiset update (change of multiplicity)\n\nThe expression `e in s` returns `true` if and only if `s[e] != 0`.\nThe expression `e !in s` is a syntactic shorthand for `!(e in s)`.\nThe expression `s[e := n]` denotes a multiset like\n`s`, but where the multiplicity of element `e` is `n`.  Note that\nthe multiset update `s[e := 0]` results in a multiset like `s` but\nwithout any occurrences of `e` (whether or not `s` has occurrences of\n`e` in the first place).  As another example, note that\n`s - multiset{e}` is equivalent to:\n\n```dafny\nif e in s then s[e := s[e] - 1] else s\n```", "start_char_idx": 2, "end_char_idx": 3826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c1dac92-2b1e-4595-b166-965c1a265b97": {"__data__": {"id_": "2c1dac92-2b1e-4595-b166-965c1a265b97", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_literals_description.md", "file_name": "numeric_literals_description.md", "file_type": "text/markdown", "file_size": 269, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a56bff9f-cc99-445f-92ab-f05261deac86", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_literals_description.md", "file_name": "numeric_literals_description.md", "file_type": "text/markdown", "file_size": 269, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "b2c442c780ba1031a4897876fdbdd7f0be9a26aca034cefaeb499ca004e68dc2", "class_name": "RelatedNodeInfo"}}, "text": "2.7.5. Numeric Literals (grammar) {sec-numeric-literals}\n\nInteger and bitvector literals may be expressed in either decimal or hexadecimal (`digits` or `hexdigits`).\n\nReal number literals are written as decimal fractions (`decimaldigits`).", "start_char_idx": 2, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bc9ff0d-d75b-4535-ae5d-9564ed832c8b": {"__data__": {"id_": "4bc9ff0d-d75b-4535-ae5d-9564ed832c8b", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdc13056-b1dd-4019-9374-9b336ea78aa7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83c1c2c2b72670d595ff76016cd7395b202d2a0041841a81d3923894b90e3df4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "16847bff-6b82-42bb-9028-161e345cbe65", "node_type": "1", "metadata": {}, "hash": "7e008bf81a6a279ff3cc074e8e2c980a99323afb6a779ccc6a3e2c4482486de5", "class_name": "RelatedNodeInfo"}}, "text": "5.2.2. Numeric Types (grammar) {sec-numeric-types}\n\nDafny supports _numeric types_ of two kinds, _integer-based_, which\nincludes the basic type `int` of all integers, and _real-based_, which\nincludes the basic type `real` of all real numbers.  User-defined\nnumeric types based on `int` and `real`, either _subset types_ or _newtypes_,\nare described in Section 5.6.3 and Section 5.7.\n\nThere is one built-in _subset type_,\n`nat`, representing the non-negative subrange of `int`.\n\nThe language includes a literal for each integer, like\n`0`, `13`, and `1985`.  Integers can also be written in hexadecimal\nusing the prefix \"`0x`\", as in `0x0`, `0xD`, and `0x7c1` (always with\na lower case `x`, but the hexadecimal digits themselves are case\ninsensitive).  Leading zeros are allowed.  To form negative literals,\nuse the unary minus operator, as in `-12`, but not `-(12)`.\n\nThere are also literals for some of the reals.  These are\nwritten as a decimal point with a nonempty sequence of decimal digits\non both sides, optionally prefixed by a `-` character.\nFor example, `1.0`, `1609.344`, `-12.5`, and `0.5772156649`.\nReal literals using exponents are not supported in Dafny. For now, you'd have to write your own function for that, e.g. \n\n```dafny\n// realExp(2.37, 100) computes 2.37e100\nfunction realExp(r: real, e: int): real decreases if e > 0 then e else -e {\n  if e == 0 then r\n  else if e < 0 then realExp(r/10.0, e+1)\n  else realExp(r*10.0, e-1)\n}\n```\n\nFor integers (in both decimal and hexadecimal form) and reals,\nany two digits in a literal may be separated by an underscore in order\nto improve human readability of the literals.  For example:\n\n```dafny\nconst c1 := 1_000_000        // easier to read than 1000000\nconst c2 := 0_12_345_6789    // strange but legal formatting of 123456789\nconst c3 := 0x8000_0000      // same as 0x80000000 -- hex digits are\n                             // often placed in groups of 4\nconst c4 := 0.000_000_000_1  // same as 0.0000000001 -- 1 Angstrom\n```\n\nIn addition to equality and disequality, numeric types\nsupport the following relational operations, which have the\nsame precedence as equality:\n\n operator          | description\n-------------------|------------------------------------\n  `<`              | less than\n  `<=`             | at most\n  `>=`             | at least\n  `>`              | greater than\n\nLike equality and disequality, these operators are chaining, as long\nas they are chained in the \"same direction\".  That is,\n\n```dafny\nA <= B < C == D <= E\n```\nis simply a shorthand for\n\n```dafny\nA <= B && B < C && C == D && D <= E\n```\nwhereas\n\n```dafny\nA  C\n```\nis not allowed.\n\nThere are also operators on each numeric type:\n\n operator        | precedence | description\n-----------------|:---:|------------------------------------\n  `+`            | 6 | addition (plus)\n  `-`            | 6 | subtraction (minus)\n-----------------|------------------------------------\n  `*`            | 7 | multiplication (times)\n  `/`            | 7 | division (divided by)\n  `%`            | 7 | modulus (mod)  -- int only\n-----------------|------------------------------------\n  `-`            | 10 | negation (unary minus)\n\nThe binary operators are left associative, and they associate with\neach other in the two groups.\nThe groups are listed in order of\nincreasing binding power, with equality binding less strongly than any of these operators.\nThere is no implicit conversion between `int` and `real`: use `as int` or\n`as real` conversions to write an explicit conversion (cf. Section 9.10).\n\nModulus is supported only for integer-based numeric types.  Integer\ndivision and modulus are the _Euclidean division and modulus_.", "start_char_idx": 2, "end_char_idx": 3669, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16847bff-6b82-42bb-9028-161e345cbe65": {"__data__": {"id_": "16847bff-6b82-42bb-9028-161e345cbe65", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdc13056-b1dd-4019-9374-9b336ea78aa7", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "83c1c2c2b72670d595ff76016cd7395b202d2a0041841a81d3923894b90e3df4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4bc9ff0d-d75b-4535-ae5d-9564ed832c8b", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "2ba1965c5fe800942b37f188a69698c985b36b36e1d6f0d43da9afc8376c87dc", "class_name": "RelatedNodeInfo"}}, "text": "The groups are listed in order of\nincreasing binding power, with equality binding less strongly than any of these operators.\nThere is no implicit conversion between `int` and `real`: use `as int` or\n`as real` conversions to write an explicit conversion (cf. Section 9.10).\n\nModulus is supported only for integer-based numeric types.  Integer\ndivision and modulus are the _Euclidean division and modulus_.  This\nmeans that modulus always returns a non-negative value, regardless of the\nsigns of the two operands.  More precisely, for any integer `a` and\nnon-zero integer `b`,\n\n```dafny\na == a / b * b + a % b\n0 <= a % b < B\n```\nwhere `B` denotes the absolute value of `b`.\n\nReal-based numeric types have a member `Floor` that returns the\n_floor_ of the real value (as an int value), that is, the largest integer not exceeding\nthe real value.  For example, the following properties hold, for any\n`r` and `r'` of type `real`:\n\n```dafny\nmethod m(r: real, r': real) {\n  assert 3.14.Floor == 3;\n  assert (-2.5).Floor == -3;\n  assert -2.5.Floor == -2; // This is -(2.5.Floor)\n  assert r.Floor as real <= r;\n  assert r  r.Floor <= r'.Floor;\n}\n```\nNote in the third line that member access (like `.Floor`) binds\nstronger than unary minus.  The fourth line uses the conversion\nfunction `as real` from `int` to `real`, as described in\nSection 9.10.", "start_char_idx": 3265, "end_char_idx": 4602, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "996e8ac9-4d42-40b6-8cd0-7cb500d9b35e": {"__data__": {"id_": "996e8ac9-4d42-40b6-8cd0-7cb500d9b35e", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ordinal_type_description.md", "file_name": "ordinal_type_description.md", "file_type": "text/markdown", "file_size": 1733, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19aee23c-c7fa-436e-b912-5ca6509f6fbb", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ordinal_type_description.md", "file_name": "ordinal_type_description.md", "file_type": "text/markdown", "file_size": 1733, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "909c99e8f9c84d9eb10b677b4724e0a2282a99353e3251cb5ccf1c99eee3c979", "class_name": "RelatedNodeInfo"}}, "text": "5.2.4. Ordinal type (grammar) {sec-ordinals}\n\nValues of type `ORDINAL` behave like `nat`s in many ways, with one important difference:\nthere are `ORDINAL` values that are larger than any `nat`. The smallest of these non-nat ordinals is\nrepresented as $\\omega$ in mathematics, though there is no literal expression in Dafny that represents this value.\n\nThe natural numbers are ordinals.\nAny ordinal has a successor ordinal (equivalent to adding `1`).\nSome ordinals are _limit_ ordinals, meaning they are not a successor of any other ordinal;\nthe natural number `0` and  $\\omega$ are limit ordinals.\n\nThe _offset_ of an ordinal is the number of successor operations it takes to reach it from a limit ordinal.\n\nThe Dafny type `ORDINAL` has these member functions:\n- `o.IsLimit` -- true if `o` is a limit ordinal (including `0`)\n- `o.IsSucc` -- true if `o` is a successor to something, so `o.IsSucc  !o.IsLimit`\n- `o.IsNat` -- true if `o` represents a `nat` value, so for `n` a `nat`, `(n as ORDINAL).IsNat` is true\nand if `o.IsNat` is true then `(o as nat)` is well-defined\n- `o.Offset` -- is the `nat` value giving the offset of the ordinal\n\nIn addition, \n- non-negative numeric literals may be considered `ORDINAL` literals, so `o + 1` is allowed\n- `ORDINAL`s may be compared, using `== !=  >=`\n- two `ORDINAL`s may be added and the result is `>=` either one of them; addition is associative but not commutative\n- `*`, `/` and `%` are not defined for `ORDINAL`s\n- two `ORDINAL`s may be subtracted if the RHS satisfies `.IsNat` and the offset of the LHS is not smaller than the offset of the RHS\n\nIn Dafny, `ORDINAL`s are used primarily in conjunction with extreme functions and lemmas.", "start_char_idx": 2, "end_char_idx": 1686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da0d77f5-0b31-45a4-b5a2-a45c5ffa542a": {"__data__": {"id_": "da0d77f5-0b31-45a4-b5a2-a45c5ffa542a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_domains_description.md", "file_name": "quantifier_domains_description.md", "file_type": "text/markdown", "file_size": 2812, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3148399d-5bf1-4643-a8c0-58997b3443b9", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_domains_description.md", "file_name": "quantifier_domains_description.md", "file_type": "text/markdown", "file_size": 2812, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0d30786f2d7f4b39e0e33a01212b8c0f66fef5be99c34946cf3760955b136c60", "class_name": "RelatedNodeInfo"}}, "text": "2.7.4. Quantifier Domains (grammar) {sec-quantifier-domains}\n\nSeveral Dafny constructs bind one or more variables to a range of possible values.\nFor example, the quantifier `forall x: nat | x <= 5 :: x * x <= 25` has the meaning\n\"for all integers x between 0 and 5 inclusive, the square of x is at most 25\".\nSimilarly, the set comprehension `set x: nat | x <= 5 :: f(x)` can be read as\n\"the set containing the result of applying f to x, for each integer x from 0 to 5 inclusive\".\nThe common syntax that specifies the bound variables and what values they take on\nis known as the *quantifier domain*; in the previous examples this is `x: nat | x <= 5`,\nwhich binds the variable `x` to the values `0`, `1`, `2`, `3`, `4`, and `5`.\n\nHere are some more examples.\n\n- `x: byte` (where a value of type `byte` is an int-based number `x` in the range `0 <= x < 256`)\n- `x: nat | x <= 5`\n- `x <- integerSet`\n- `x: nat <- integerSet`\n- `x: nat <- integerSet | x % 2 == 0`\n- `x: nat, y: nat | x < 2 && y < 2`\n- `x: nat | x < 2, y: nat | y < x`\n- `i | 0 <= i < |s|, y <- s[i] | i < y`\n\nA quantifier domain declares one or more *quantified variables*, separated by commas.\nEach variable declaration can be nothing more than a variable name, but it\nmay also include any of three optional elements:\n\n1. The optional syntax `: T` declares the type of the quantified variable.\n   If not provided, it will be inferred from context.\n\n2. The optional syntax `<- C` attaches a collection expression `C` as a *quantified variable domain*.\n   Here a collection is any value of a type that supports the `in` operator, namely sets, multisets, maps, and sequences.\n   The domain restricts the bindings to the elements of the collection: `x <- C` implies `x in C`.\n   The example above can also be expressed as `var c := [0, 1, 2, 3, 4, 5]; forall x <- c :: x * x <= 25`.\n\n3. The optional syntax `| E` attaches a boolean expression `E` as a *quantified variable range*,\n   which restricts the bindings to values that satisfy this expression.\n   In the example above `x <= 5` is the range attached to the `x` variable declaration.\n\nNote that a variable's domain expression may reference any variable declared before it,\nand a variable's range expression may reference the attached variable (and usually does) and any variable declared before it.\nFor example, in the quantifier domain `i | 0 <= i < |s|, y <- si] | i < y`, the expression `s[i]` is always [well-formed\nbecause the range attached to `i` ensures `i` is a valid index in the sequence `s`.\n\nAllowing per-variable ranges is not fully backwards compatible, and so it is not yet allowed by default;\nthe `--quantifier-syntax:4` option needs to be provided to enable this feature (See Section 13.9.5).", "start_char_idx": 2, "end_char_idx": 2729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "056f3ab5-fa04-443d-afb7-7697d7fe91e2": {"__data__": {"id_": "056f3ab5-fa04-443d-afb7-7697d7fe91e2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_expression_description.md", "file_name": "quantifier_expression_description.md", "file_type": "text/markdown", "file_size": 1093, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8e967e6-d19b-4d42-97d5-99c58a92db35", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_expression_description.md", "file_name": "quantifier_expression_description.md", "file_type": "text/markdown", "file_size": 1093, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "bde0565c78b60ec58598970d4e5886542da8be42f152603f2db3920ce6d7831b", "class_name": "RelatedNodeInfo"}}, "text": "9.31.4. Quantifier Expression (grammar) {sec-quantifier-expression}\n\nExamples:\n\n```dafny\nforall x: int :: x > 0\nforall x: nat | x < 10 :: x*x < 100\nexists x: int :: x * x == 25\n```\n\nA _quantifier expression_ is a boolean expression that specifies that a\ngiven expression (the one following the `::`) is true for all (for\n**forall**) or some (for **exists**) combination of values of the\nquantified variables, namely those in the given quantifier domain.\nSee Section 2.7.4 for more details on quantifier domains.\n\nHere are some examples:\n\n```dafny\nassert forall x : nat | x <= 5 :: x * x <= 25;\n(forall n :: 2  (exists d :: n < d < 2*n))\nassert forall x: nat | 0 <= x < |s|, y <- s[x] :: y < x;\n```\n\nThe quantifier identifiers are _bound_ within the scope of the\nexpressions in the quantifier expression.\n\nIf types are not given for the quantified identifiers, then Dafny\nattempts to infer their types from the context of the expressions.\nIt this is not possible, the program is in error.", "start_char_idx": 2, "end_char_idx": 989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2484d867-1426-4a27-b661-9970539d95d2": {"__data__": {"id_": "2484d867-1426-4a27-b661-9970539d95d2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "398d34d0-c8e5-4041-949a-7d9cc65e75b0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "31d8a8de832cfb28bcaae553b5bfd7bc8eb81ef79ec8b6ed78f272980487b4b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "977ffc62-3dc5-43a2-aec8-c81dad7fd3f2", "node_type": "1", "metadata": {}, "hash": "e09aa1719160622e2ec081b2eb311d4d646622a8ab9ca9c4b51996d75bfe4fc0", "class_name": "RelatedNodeInfo"}}, "text": "7.1.5. Reads Clause (grammar) {sec-reads-clause}\n\nExamples:\n\n```dafny\nconst o: object\nconst o, oo: object\nfunction f()\n  reads *\nfunction g()\n  reads o, oo\nfunction h()\n  reads { o }\nmethod f()\n  reads *\nmethod g()\n  reads o, oo\nmethod h()\n  reads { o }\n```\n\nFunctions are not allowed to have side effects; they may also be restricted in\nwhat they can read. The _reading frame_ of a function (or predicate) consists of all\nthe heap memory locations that the function is allowed to read. The reason we\nmight limit what a function can read is so that when we write to memory,\nwe can be sure that functions that did not read that part of memory have\nthe same value they did before. For example, we might have two arrays,\none of which we know is sorted. If we did not put a reads annotation on\nthe sorted predicate, then when we modify the unsorted array, we cannot\ndetermine whether the other array stopped being sorted. While we might be\nable to give invariants to preserve it in this case, it gets even more\ncomplex when manipulating data structures. In this case, framing is\nessential to making the verification process feasible.\n\nBy default, methods are not required to list the memory location they read.\nHowever, there are use cases for restricting what methods can read as well.\nIn particular, if you want to verify that imperative code is safe to execute concurrently when compiled,\nyou can specify that a method does not read or write any shared state,\nand therefore cannot encounter race conditions or runtime crashes related to\nunsafe communication between concurrent executions.\nSee the `{:concurrent}` attribute for more details.\n\nIt is not just the body of a function or method that is subject to `reads`\nchecks, but also its precondition and the `reads` clause itself.\n\nA `reads` clause can list a wildcard `*`, which allows the enclosing\nfunction or method to read anything. \nThis is the implicit default for methods with no `reads` clauses,\nallowing methods to read whatever they like.\nThe default for functions, however, is to not allow reading any memory.\nAllowing functions to read arbitrary memory is more problematic:\nin many cases, and in particular in all cases\nwhere the function is defined recursively, this makes it next to\nimpossible to make any use of the function. Nevertheless, as an\nexperimental feature, the language allows it (and it is sound).\nIf a `reads` clause uses `*`, then the `reads` clause is not allowed to\nmention anything else (since anything else would be irrelevant, anyhow).\n\nA `reads` clause specifies the set of memory locations that a function,\nlambda, or method may read. The readable memory locations are all the fields\nof all of the references given in the set specified in the frame expression\nand the single fields given in `FrameField` elements of the frame expression.\nFor example, in\n\n```dafny\nclass C {\n  var x: int\n  var y: int\n\n  predicate f(c: C) \n    reads this, c`x\n  {\n    this.x == c.x\n  }\n}\n```\nthe `reads` clause allows reading `this.x`, `this,y`, and `c.x` (which may be the same\nmemory location as `this.x`).\n}\n\nIf more than one `reads` clause is given\nin a specification the effective read set is the union of the sets\nspecified. If there are no `reads` clauses the effective read set is\nempty. If `*` is given in a `reads` clause it means any memory may be\nread.\n\nIf a `reads` clause refers to a sequence or multiset, that collection\n(call it `c`) is converted to a set by adding an implicit set\ncomprehension of the form `set o: object | o in c` before computing the\nunion of object sets from other `reads` clauses.\n\nAn expression in a `reads` clause is also allowed to be a function call whose value is \na collection of references. Such an expression is converted to a set by taking the\nunion of the function's image over all inputs. For example, if `F` is\na function from `int` to `set`, then `reads F` has the meaning", "start_char_idx": 2, "end_char_idx": 3894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "977ffc62-3dc5-43a2-aec8-c81dad7fd3f2": {"__data__": {"id_": "977ffc62-3dc5-43a2-aec8-c81dad7fd3f2", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "398d34d0-c8e5-4041-949a-7d9cc65e75b0", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "31d8a8de832cfb28bcaae553b5bfd7bc8eb81ef79ec8b6ed78f272980487b4b5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2484d867-1426-4a27-b661-9970539d95d2", "node_type": "1", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "19f85968a6c1a70820e87bdfeabee915e5d767c3cc6c8457b7b12a07d5c41448", "class_name": "RelatedNodeInfo"}}, "text": "```dafny\nset x: int, o: object | o in F(x) :: o\n```\n\nFor each function value `f`, Dafny defines the function `f.reads`,\nwhich takes the same arguments as `f` and returns that set of objects\nthat `f` reads (according to its reads clause) with those arguments.\n`f.reads` has type `T ~> set`, where `T` is the input type(s) of `f`.\n\nThis is particularly useful when wanting to specify the reads set of\nanother function. For example, function `Sum` adds up the values of\n`f(i)` where `i` ranges from `lo` to `hi`:\n\n\n```dafny\nfunction Sum(f: int ~> real, lo: int, hi: int): real\n  requires lo <= hi\n  requires forall i :: f.requires(i)\n  reads f.reads\n  decreases hi - lo\n{\n  if lo == hi then 0.0 else\n    f(lo) + Sum(f, lo + 1, hi)\n}\n```\n\nIts `reads` specification says that `Sum(f, lo, hi)` may read anything\nthat `f` may read on any input.  (The specification\n`reads f.reads` gives an overapproximation of what `Sum` will actually\nread. More precise would be to specify that `Sum` reads only what `f`\nreads on the values from `lo` to `hi`, but the larger set denoted by\n`reads f.reads` is easier to write down and is often good enough.)\n\nWithout such `reads` function, one could also write the more precise\nand more verbose:\n\n```dafny\nfunction Sum(f: int ~> real, lo: int, hi: int): real\n  requires lo <= hi\n  requires forall i :: lo  f.requires(i)\n  reads set i, o | lo <= i < hi && o in f.reads(i) :: o\n  decreases hi - lo\n{\n  if lo == hi then 0.0 else\n    f(lo) + Sum(f, lo + 1, hi)\n}\n```\n\nNote, only `reads` clauses, not `modifies` clauses, are allowed to\ninclude functions as just described.\n\nIterator specifications also allow `reads` clauses,\nwith the same syntax and interpretation of arguments as above,\nbut the meaning is quite different!\nSee Section 5.11 for more details.", "start_char_idx": 3897, "end_char_idx": 5678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b067f62-5f57-4d95-a1ac-827439f7cfaa": {"__data__": {"id_": "5b067f62-5f57-4d95-a1ac-827439f7cfaa", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/requires_clause_description.md", "file_name": "requires_clause_description.md", "file_type": "text/markdown", "file_size": 1145, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c4674dc-d7e2-4148-8177-e5fd88a7579c", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/requires_clause_description.md", "file_name": "requires_clause_description.md", "file_type": "text/markdown", "file_size": 1145, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "091b5e2b9a010e365f976f7befaad7baf1300a06d27628a15c46635d5bb01058", "class_name": "RelatedNodeInfo"}}, "text": "7.1.1. Requires Clause (grammar) {sec-requires-clause}\n\nExamples:\n\n```dafny\nmethod m(i: int)\n  requires true\n  requires i > 0\n  requires L: 0 < i < 10\n```\n\nThe `requires` clauses specify preconditions for methods,\nfunctions, lambda expressions and iterators. Dafny checks\nthat the preconditions are met at all call sites. The\ncallee may then assume the preconditions hold on entry.\n\nIf no `requires` clause is specified, then a default implicit\nclause `requires true` is used.\n\nIf more than one `requires` clause is given, then the\nprecondition is the conjunction of all of the expressions\nfrom all of the `requires` clauses, with a collected list\nof all the given Attributes. The order of conjunctions\n(and hence the order of `requires` clauses with respect to each other)\ncan be important: earlier conjuncts can set conditions that\nestablish that later conjuncts are well-defined.\n\nThe attributes recognized for requires clauses are discussed in Section 11.4.\n\nA requires clause can have custom error and success messages.", "start_char_idx": 2, "end_char_idx": 1026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86b85cac-8ae8-4895-9e29-e4fb704f17a3": {"__data__": {"id_": "86b85cac-8ae8-4895-9e29-e4fb704f17a3", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/selection_suffix_description.md", "file_name": "selection_suffix_description.md", "file_type": "text/markdown", "file_size": 775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4482510-2e99-4003-8256-b2005c75b455", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/selection_suffix_description.md", "file_name": "selection_suffix_description.md", "file_type": "text/markdown", "file_size": 775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5ef6fd0daee2ea05bd99bbdc2e112753843b6d8e56f0b2602319245f440d0238", "class_name": "RelatedNodeInfo"}}, "text": "9.34.6. Selection Suffix (grammar) {sec-selection-suffix}\n\nExamples:\n\n```dafny\na[9]\na[i.j.k]\n```\n\nIf a selection suffix  has only one expression in it, it is a\nzero-based index that may be used to select a single element of a\nsequence or from a single-dimensional array.\n\nIf a selection suffix has more than one expression in it, then\nit is a list of indices to index into a multi-dimensional array.\nThe rank of the array must be the same as the number of indices.\n\nIf the selection suffix is used with an array or a sequence,\nthen each index expression can have any integer- or bit-vector-based\ntype\n(this is one situation in which Dafny implements implicit\nconversion, as if an `as int` were appended to the index expression).", "start_char_idx": 2, "end_char_idx": 730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2da1b58b-e8f0-491d-b51a-c57b128b637a": {"__data__": {"id_": "2da1b58b-e8f0-491d-b51a-c57b128b637a", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequence_update_suffix_description.md", "file_name": "sequence_update_suffix_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7845a33-6799-4a78-9edc-55529349690a", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequence_update_suffix_description.md", "file_name": "sequence_update_suffix_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "973818c698d5ff86c8ced54ed57d0ae9413ec0ecd05f39e757af775b792c78c9", "class_name": "RelatedNodeInfo"}}, "text": "9.34.5. Sequence Update Suffix (grammar) {sec-sequence-update-suffix}\n\nExamples:\n\n```dafny\ns[1 := 2, 3 := 4]\n```\n\nFor a sequence `s` and expressions `i` and `v`, the expression\n`s[i := v]` is the same as the sequence `s` except that at\nindex `i` it has value `v`.\n\nIf the type of `s` is `seq`, then `v` must have type `T`.\nThe index `i` can have any integer- or bit-vector-based type\n(this is one situation in which Dafny implements implicit\nconversion, as if an `as int` were appended to the index expression).\nThe expression `s[i := v]` has the same type as `s`.", "start_char_idx": 2, "end_char_idx": 566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdfd8b59-043d-439f-80dd-7c634a500a61": {"__data__": {"id_": "fdfd8b59-043d-439f-80dd-7c634a500a61", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequences_description.md", "file_name": "sequences_description.md", "file_type": "text/markdown", "file_size": 258, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dda35d9b-615e-46e2-9145-a912d4b3dd44", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequences_description.md", "file_name": "sequences_description.md", "file_type": "text/markdown", "file_size": 258, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "1009eb0cf37d622eccc0cc6c70f739a45e3ec786691680fdc1c739c57e918f70", "class_name": "RelatedNodeInfo"}}, "text": "5.5.3. Sequences (grammar) {sec-sequences}\n\nFor any type `T`, a value of type `seq` denotes a _sequence_ of `T`\nelements, that is, a mapping from a finite downward-closed set of natural\nnumbers (called _indices_) to `T` values.", "start_char_idx": 2, "end_char_idx": 229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66102849-2e0f-4ba4-b918-1b36199f9c26": {"__data__": {"id_": "66102849-2e0f-4ba4-b918-1b36199f9c26", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/set_comprehension_expressions_description.md", "file_name": "set_comprehension_expressions_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5a23529-c2cc-4063-89c9-f30940b93220", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/set_comprehension_expressions_description.md", "file_name": "set_comprehension_expressions_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "cff6075a7e22e5a7bdbb3cef571e961d029963da8f3c5dc98658ed9d5bb7fdc7", "class_name": "RelatedNodeInfo"}}, "text": "9.31.5. Set Comprehension Expressions (grammar) {sec-set-comprehension-expression}\n\nExamples:\n\n```dafny\nconst c1 := set x: nat | x < 100\nconst c2 := set x: nat | x < 100 :: x * x\nconst c3 := set x: nat, y: nat | x < y < 100 :: x * y\nghost const c4 := iset x: nat | x > 100\nghost const c5: iset := iset s\nconst c6 := set x <- c3 :: x + 1\n```\n\nA set comprehension expression is an expression that yields a set\n(possibly infinite only if `iset` is used) that\nsatisfies specified conditions. There are two basic forms.\n\nIf there is only one quantified variable, the optional ``\"::\" Expression``\nneed not be supplied, in which case it is as if it had been supplied\nand the expression consists solely of the quantified variable.\nThat is,\n\n\n```dafny\nset x : T | P(x)\n```\n\nis equivalent to\n\n\n```dafny\nset x : T | P(x) :: x\n```\n\nFor the full form\n\n\n```dafny\nvar S := set x1: T1 <- C1 | P1(x1),\n             x2: T2 <- C2 | P2(x1, x2),\n             ... \n             :: Q(x1, x2, ...)\n```\n\nthe elements of `S` will be all values resulting from evaluation of `Q(x1, x2, ...)`\nfor all combinations of quantified variables `x1, x2, ...` (from their respective `C1, C2, ...`\ndomains) such that all predicates `P1(x1), P2(x1, x2), ...` hold. \n\nFor example,\n\n\n```dafny\nvar S := set x:nat, y:nat | x < y < 3 :: (x, y)\n```\nyields `S == {(0, 1), (0, 2), (1, 2) }`\n\nThe types on the quantified variables are optional and if not given Dafny\nwill attempt to infer them from the contexts in which they are used in the\nvarious expressions. The `<- C` domain expressions are also optional and default to\n`iset x: T` (i.e. all values of the variable's type), as are the `| P` expressions which\ndefault to `true`. See also Section 2.7.4 for more details on quantifier domains.\n\nIf a finite set was specified (\"set\" keyword used), Dafny must be able to prove that the\nresult is finite otherwise the set comprehension expression will not be\naccepted.\n\nSet comprehensions involving reference types such as\n\n\n```dafny\nset o: object\n```\n\nare allowed in ghost expressions within methods, but not in ghost functions[^set-of-objects-not-in-functions].\nIn particular, in ghost contexts, the\ncheck that the result is finite should allow any set comprehension\nwhere the bound variable is of a reference type. In non-ghost contexts,\nit is not allowed, because--even though the resulting set would be\nfinite--it is not pleasant or practical to compute at run time.\n\n^set-of-objects-not-in-functions]: In order to be deterministic, the result of a function should only depend on the arguments and of the objects  it [reads, and Dafny does not provide a way to explicitly pass the entire heap as the argument to a function. See this post for more insights.\n\nThe universe in which set comprehensions are evaluated is the set of all\n_allocated_ objects, of the appropriate type and satisfying the given predicate.\nFor example, given\n\n\n```dafny\nclass I {\n  var i: int\n}\n\nmethod test() {\n  ghost var m := set x: I :: 0 <= x.i <= 10;\n}\n```\nthe set `m` contains only those instances of `I` that have been allocated\nat the point in program execution that `test` is evaluated. This could be\nno instances, one per value of `x.i` in the stated range, multiple instances\nof `I` for each value of `x.i`, or any other combination.", "start_char_idx": 2, "end_char_idx": 3276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fe9a21d-847f-48e2-8a13-8172b2f0e636": {"__data__": {"id_": "1fe9a21d-847f-48e2-8a13-8172b2f0e636", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sets_description.md", "file_name": "sets_description.md", "file_type": "text/markdown", "file_size": 3043, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51545695-b5ff-41de-bbb2-85b26b563d87", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sets_description.md", "file_name": "sets_description.md", "file_type": "text/markdown", "file_size": 3043, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "e539c876e1e4fe76953df95d4639a8ffbb0ff3f303d699645fc651ba5c864b4f", "class_name": "RelatedNodeInfo"}}, "text": "5.5.1. Sets (grammar) {sec-sets}\n\nFor any type `T`, each value of type `set` is a finite set of\n`T` values.\n\nSet membership is determined by equality in the type `T`,\nso `set` can be used in a non-ghost context only if `T` is\nequality supporting.\n\nFor any type `T`, each value of type `iset` is a potentially infinite\nset of `T` values.\n\nA set can be formed using a _set display_ expression, which is a\npossibly empty, unordered, duplicate-insensitive list of expressions\nenclosed in curly braces.  To illustrate,\n\n```dafny\n{}        {2, 7, 5, 3}        {4+2, 1+5, a*b}\n```\nare three examples of set displays. There is also a _set comprehension_\nexpression (with a binder, like in logical quantifications), described in\nSection 9.31.5.\n\nIn addition to equality and disequality, set types\nsupport the following relational operations:\n\n operator        | precedence | description\n-----------------|------------------------------------\n `<`             | 4 | proper subset\n `<=`            | 4 | subset\n `>=`            | 4 | superset\n `>`             | 4 | proper superset\n\nLike the arithmetic relational operators, these operators are\nchaining.\n\nSets support the following binary operators, listed in order of\nincreasing binding power:\n\n operator      | precedence | description\n---------------|:---:|------------------------------------\n `!!`          | 4 | disjointness\n---------------|------------------------------------\n `+`           | 6 | set union\n `-`           | 6 | set difference\n---------------|------------------------------------\n `*`           | 7 |set intersection\n\nThe associativity rules of `+`, `-`, and `*` are like those of the\narithmetic operators with the same names.  The expression `A !! B`,\nwhose binding power is the same as equality (but which neither\nassociates nor chains with equality), says that sets `A` and `B` have\nno elements in common, that is, it is equivalent to\n\n```dafny\nA * B == {}\n```\nHowever, the disjointness operator is chaining though in a slightly different way than other chaining operators:\n `A !! B !! C !! D` means that `A`, `B`, `C` and `D` are all mutually disjoint, that is\n\n```dafny\nA * B == {} && (A + B) * C == {} && (A + B + C) * D == {}\n```\n\nIn addition, for any set `s` of type `set` or `iset` and any\nexpression `e` of type `T`, sets support the following operations:\n\n expression          | precedence | result type |  description\n---------------------|:---:|:---:|------------------------------------\n `e in s`            | 4   | `bool` | set membership\n `e !in s`           | 4   | `bool` | set non-membership\n `|s|`               | 11  | `nat`  | set cardinality (not for `iset`)\n\nThe expression `e !in s` is a syntactic shorthand for `!(e in s)`.\n\n(No white space is permitted between `!` and `in`, making `!in` effectively\nthe one example of a mixed-character-class token in Dafny.)", "start_char_idx": 2, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "579a251a-6573-4fd9-a8df-7b74845ba0eb": {"__data__": {"id_": "579a251a-6573-4fd9-a8df-7b74845ba0eb", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/statements_in_an_expression_description.md", "file_name": "statements_in_an_expression_description.md", "file_type": "text/markdown", "file_size": 602, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2330684-3a47-4efd-934c-6e67dbd5eb70", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/statements_in_an_expression_description.md", "file_name": "statements_in_an_expression_description.md", "file_type": "text/markdown", "file_size": 602, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "04caf0ab7cf6ce63e8c667e2c93209758852aaf9eed0b402d589964fb8552054", "class_name": "RelatedNodeInfo"}}, "text": "9.31.6. Statements in an Expression (grammar) {sec-statement-in-an-expression}\n\nExamples:\n\n```dafny\nassert x != 0; 10/x\nassert x != 0; assert y > 0; y/x\nassume x != 0; 10/x\nexpect x != 0; 10/x\nreveal M.f; M.f(x)\ncalc { x * 0; == 0; } x/1;\n```\n\nA ``StmtInExpr`` is a kind of statement that is allowed to\nprecede an expression in order to ensure that the expression\ncan be evaluated without error. For example:\n\n\n```dafny\nassume x != 0; 10/x\n```\n\n`Assert`, `assume`, `expect`, `reveal` and `calc` statements can be used in this way.", "start_char_idx": 2, "end_char_idx": 532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c365df37-e799-4a64-9c30-5502e7166f94": {"__data__": {"id_": "c365df37-e799-4a64-9c30-5502e7166f94", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_slices_suffix_description.md", "file_name": "subsequence_slices_suffix_description.md", "file_type": "text/markdown", "file_size": 441, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67bfcbb3-f050-478c-abef-05d68aafa0af", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_slices_suffix_description.md", "file_name": "subsequence_slices_suffix_description.md", "file_type": "text/markdown", "file_size": 441, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "3f4f173ab04f35e7309a9340b20d9b68027576e6c55f1dc7214eb5243605b8dd", "class_name": "RelatedNodeInfo"}}, "text": "9.34.4. Subsequence Slices Suffix (grammar) {sec-subsequence-slices-suffix}\n\nExamples: (with leading expression)\n\n```dafny\na[ 0 : 2 : 3 ]\na[ e1 : e2 : e3 ]\na[ 0 : 2 : ]\n```\n\nApplying a _subsequence slices suffix_ to a sequence produces a\nsequence of subsequences of the original sequence.\nSee the section about other sequence expressions for details.", "start_char_idx": 2, "end_char_idx": 352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6491fce-af7d-423c-aed4-3d8b75c2a850": {"__data__": {"id_": "c6491fce-af7d-423c-aed4-3d8b75c2a850", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_suffix_description.md", "file_name": "subsequence_suffix_description.md", "file_type": "text/markdown", "file_size": 777, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf06b587-fc80-47bb-8167-f9adde88f61b", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_suffix_description.md", "file_name": "subsequence_suffix_description.md", "file_type": "text/markdown", "file_size": 777, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "5df8ab98b28da2a11e3b50d82cbefadb755f5f08d73c4631b7b3aa03745288ff", "class_name": "RelatedNodeInfo"}}, "text": "9.34.3. Subsequence Suffix (grammar) {sec-subsequence-suffix}\n\nExamples: (with leading expression)\n\n```dafny\na[lo .. hi ]\n(e)[ lo .. ]\ne[ .. hi ]\ne[ .. ]\n```\n\nA subsequence suffix applied to a sequence produces a new sequence whose\nelements are taken from a contiguous part of the original sequence. For\nexample, expression `s[lo..hi]` for sequence `s`, and integer-based\nnumeric bounds `lo` and `hi` satisfying `0 <= lo <= hi <= |s|`. See\nthe section about other sequence expressions for details.\n\nA subsequence suffix applied to an array produces a _sequence_ consisting of \nthe values of the designated elements. A concise way of converting a whole \narray to a sequence is to write `a[..]`.", "start_char_idx": 2, "end_char_idx": 695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "684d1db1-3581-4dcd-b183-e67ca1a0ba51": {"__data__": {"id_": "684d1db1-3581-4dcd-b183-e67ca1a0ba51", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subset_types_description.md", "file_name": "subset_types_description.md", "file_type": "text/markdown", "file_size": 1697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0ed2503-0d36-45f9-bbd6-98c19c035f82", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subset_types_description.md", "file_name": "subset_types_description.md", "file_type": "text/markdown", "file_size": 1697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "6560137e52dbb9ed4c189cf96ca706d3c5bf0d328d4ac54a442e659bf1bb7372", "class_name": "RelatedNodeInfo"}}, "text": "5.6.3. Subset types (grammar) {sec-subset-types}\n\nExamples:\n\n```dafny\ntype Pos = i: int | i > 0 witness 1\ntype PosReal = r | r > 0.0 witness 1.0\ntype Empty = n: nat | n < 0 witness *\ntype Big = n: nat | n > 1000 ghost witness 10000\n```\n\nA _subset type_ is a restricted use of an existing type, called\nthe _base type_ of the subset type.  A subset type is like a\ncombined use of the base type and a predicate on the base\ntype.\n\nAn assignment from a subset type to its base type is always\nallowed.  An assignment in the other direction, from the base type to\na subset type, is allowed provided the value assigned does indeed\nsatisfy the predicate of the subset type. This condition is checked\nby the verifier, not by the type checker. Similarly, assignments from\none subset type to another (both with the same base type) are also\npermitted, as long as it can be established that the value being assigned\nsatisfies the predicate defining the receiving subset type.\n(Note, in contrast, assignments between a newtype and its base type\nare never allowed, even if the value assigned is a value of the target\ntype.  For such assignments, an explicit conversion must be used, see\nSection 9.10.)\n\nThe declaration of a subset type permits an optional `witness` clause, to declare that there is\na value that satisfies the subset type's predicate; that is, the witness clause establishes that the defined\ntype is not empty. The compiler may, but is not obligated to, use this value when auto-initializing a\nnewly declared variable of the subset type.\n\nDafny builds in three families of subset types, as described next.", "start_char_idx": 2, "end_char_idx": 1607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca844fd9-9eb6-4346-8a25-0d5512094555": {"__data__": {"id_": "ca844fd9-9eb6-4346-8a25-0d5512094555", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_`object`_description.md", "file_name": "type_`object`_description.md", "file_type": "text/markdown", "file_size": 1312, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ece8501-e8ec-497c-a777-5ee722e99219", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_`object`_description.md", "file_name": "type_`object`_description.md", "file_type": "text/markdown", "file_size": 1312, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "c93dc116fdf8c2a50f9889852d7a52c4a4ad2054c4d4851b62140621413fdaa6", "class_name": "RelatedNodeInfo"}}, "text": "5.9.1. Type `object` (grammar) {sec-object-type}\n\nThere is a built-in trait `object` that is implicitly extended by all classes and traits.\nIt produces two types: the type `object?` that is a supertype of all\nreference types and a subset type `object` that is a supertype of all non-null reference types.\nThis includes reference types like arrays and iterators that do not permit\nexplicit extending of traits. The purpose of type `object`\nis to enable a uniform treatment of _dynamic frames_. In particular, it\nis useful to keep a ghost field (typically named `Repr` for\n\"representation\") of type `set`.\n\nIt serves no purpose (but does no harm) to explicitly list the trait `object` as\nan extendee in a class or trait declaration.\n\nTraits `object?` and  `object` contain no members.\n\nThe dynamic allocation of objects is done using `new C`...,\n where `C` is the name of a class.\n The name `C` is not allowed to be a trait,\n except that it is allowed to be `object`.\n The construction `new object` allocates a new object (of an unspecified class type).\n The construction can be used to create unique references, where no other properties of those references are needed.\n(`new object?` makes no sense; always use `new object` instead because the result of\n`new` is always non-null.)", "start_char_idx": 2, "end_char_idx": 1282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9524e68c-d3a8-4e24-8d6f-dd8054f77241": {"__data__": {"id_": "9524e68c-d3a8-4e24-8d6f-dd8054f77241", "embedding": null, "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_synonyms_description.md", "file_name": "type_synonyms_description.md", "file_type": "text/markdown", "file_size": 2238, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f45074f-9b0b-4059-9cde-f0414a152747", "node_type": "4", "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_synonyms_description.md", "file_name": "type_synonyms_description.md", "file_type": "text/markdown", "file_size": 2238, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}, "hash": "0d8ef107269212eccfde0acb9b2f58f92c3898f3dde84c42d984b0854d10aa5b", "class_name": "RelatedNodeInfo"}}, "text": "5.6.1. Type synonyms (grammar) {sec-synonym-type}\n\n\n```dafny\ntype T = int\ntype SS = set>\n```\n\nA _type synonym_ declaration:\n\n```dafny\ntype Y = G\n```\ndeclares `Y` to be a synonym for the type `G`.\nIf the `= G` is omitted then the declaration just declares a name as an uninterpreted\n_abstract_ type, as described in Section 5.6.2.  Such types may be\ngiven a definition elsewhere in the Dafny program.\n\n  Here, `T` is a\nnonempty list of type parameters (each of which optionally\nhas a type characteristics suffix), which can be used as free type\nvariables in `G`.  If the synonym has no type parameters, the \"``\"\nis dropped.  In all cases, a type synonym is just a synonym.  That is,\nthere is never a difference, other than possibly in error messages\nproduced, between `Y` and `G`.\n\nFor example, the names of the following type synonyms may improve the\nreadability of a program:\n\n```dafny\ntype Replacements = map\ntype Vertex = int\n```\n\nThe new type name itself may have type characteristics declared, and may need to if there is no definition.\nIf there is a definition, the type characteristics are typically inferred from the definition. The syntax is like this:\n\n```dafny\ntype Z(==)\n```\n\nAs already described in Section 5.5.3.5, `string` is a built-in\ntype synonym for `seq`, as if it would have been declared as\nfollows:\n\n```dafny\ntype string_(==,0,!new) = seq\n```\nIf the implicit declaration did not include the type characteristics, they would be inferred in any case.\n\nNote that although a type synonym can be declared and used in place of a type name, \nthat does not affect the names of datatype or class constructors.\nFor example, consider\n\n```dafny\ndatatype Pair = Pair(first: T, second: T)\ntype IntPair = Pair\n\nconst p: IntPair := Pair(1,2) // OK\nconst q: IntPair := IntPair(3,4) // Error\n```\n\nIn the declaration of `q`, `IntPair` is the name of a type, not the name of a function or datatype constructor.", "start_char_idx": 2, "end_char_idx": 1915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"872ef8d4-258e-4938-8202-614e2f5fd192": {"node_ids": ["aa6c4ad2-fba7-47f6-b500-a4244720c81d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Algebraic_Datatypes_description.md", "file_name": "Algebraic_Datatypes_description.md", "file_type": "text/markdown", "file_size": 395, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6c452930-e8ce-4d1f-a70d-456d345cdb59": {"node_ids": ["47cd1cf0-4179-4958-a962-13fb7a5e9d13"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Allocated_Expressions_description.md", "file_name": "Allocated_Expressions_description.md", "file_type": "text/markdown", "file_size": 1479, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "be9a2a5d-df65-4b9f-a951-dff151657df4": {"node_ids": ["91d4899d-5d18-4ff9-b01b-88346cc86ab0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_Allocation_description.md", "file_name": "Array_Allocation_description.md", "file_type": "text/markdown", "file_size": 1761, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8a325dee-bae2-436c-8a74-63b1b31376d2": {"node_ids": ["722ff829-ad0c-4ff1-bffd-5013c83fbc45"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Array_types_description.md", "file_name": "Array_types_description.md", "file_type": "text/markdown", "file_size": 549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "53b3bdfc-3c02-433e-bb87-bcd0378ded4f": {"node_ids": ["db2f9b0a-5fe3-4ce2-899f-81e83ca2c047", "129b9fda-ff30-4023-8565-69838968cb5b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Arrow_types_description.md", "file_name": "Arrow_types_description.md", "file_type": "text/markdown", "file_size": 6555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ccc9914c-91f4-4015-ac1c-5eed912cdd2a": {"node_ids": ["7a0e95ab-33ff-4f65-8e1e-6c261f84af3d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_name": "As_(Conversion)_and_Is_(type_test)_Expressions_description.md", "file_type": "text/markdown", "file_size": 3430, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "401bc58e-a0a4-4315-8399-27a24bc03db8": {"node_ids": ["b7d38c56-b737-441f-9aa8-ca0b767b6a43"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assert_statement_description.md", "file_name": "Assert_statement_description.md", "file_type": "text/markdown", "file_size": 2379, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "35aabd4e-1d7c-433b-80b8-1c40b091857b": {"node_ids": ["ec5a64e0-c92f-4df8-a793-bcc8addd73f2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Assume_Statement_description.md", "file_name": "Assume_Statement_description.md", "file_type": "text/markdown", "file_size": 1033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6ef30cb4-a53b-4ce9-8fa6-0e873a4b07fe": {"node_ids": ["02760963-0b72-4c5d-91e0-f2b8a31ff124"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b11a403e-52b7-4460-b9e4-2972db2105b1": {"node_ids": ["ccab87ed-54f3-419a-8444-3b462aae82b9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "15fe3296-0130-4541-a122-301ba4b2bf5e": {"node_ids": ["ab1d6b2c-9c7c-4809-916a-da13a41dd8e1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "57a88cc4-420d-43b3-94c2-8d981900e282": {"node_ids": ["bd2f67fd-9a44-40a5-84ac-159a10acd3a3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ea6b12d5-5ead-4f5f-b4c2-601af8d4bbae": {"node_ids": ["8bdb51f5-7b46-449f-b0fa-f4bd577afb1f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf3c0563-8ffe-43e1-9235-df8d940ed2d7": {"node_ids": ["95e9edf2-a3d4-41ba-be30-364c28241a70"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9cea15f6-9e29-4004-955c-d1c33be8ed9d": {"node_ids": ["90e5d357-0a56-4d32-bfdd-634833f98663"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6005146d-2b05-4c5a-8375-14c949506c2a": {"node_ids": ["57fdf6e0-eb50-4065-9462-324a1e3ea1e3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c67acc52-cbae-4339-af67-1374ba162a68": {"node_ids": ["6cfc86a8-bd85-4187-b40d-8a0ea17ce993"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "23ba42d1-4b2f-4ae5-85ce-73b9de9eb238": {"node_ids": ["e97d06e2-a9af-495b-a0a6-a488c4fb9c3e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ae01f717-c721-40ca-a8c5-a67220297583": {"node_ids": ["7589b28d-9a7d-456e-aadd-f3e9e3932a73"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "82a63874-9db5-48e6-8967-8eb4810c918f": {"node_ids": ["d1b72711-dc07-4c7a-80fb-26e0358d66c0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "acbf23fa-3f83-47c5-8e0c-bbb1b62d1298": {"node_ids": ["6a5c2155-bbbf-4776-a812-0507c23d29aa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7b0963a3-dba3-4ccc-b8de-3f8c47a428e2": {"node_ids": ["f4007994-d641-478d-9256-c8287512d985"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "41c6c7d9-f98e-48ae-8218-9d50115c8a0e": {"node_ids": ["0cf9d54a-3f97-4e3e-93c8-09d559583e3b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "636c6bbc-5e53-4589-b722-5c4f75386c79": {"node_ids": ["f0f58366-dcef-4d50-ab95-1800de1870c7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aea235bb-13e9-46f7-b7da-573c9c366178": {"node_ids": ["4bb27971-31ee-49ed-99a3-1f7a6fb1a640"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c2af55d6-1780-4584-8160-b99051685021": {"node_ids": ["73093360-c107-4c8e-be41-988506788026"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf104b3c-3a1a-45b9-b21c-9f1d93c58355": {"node_ids": ["6ee49bfa-fdca-4983-8514-efcba7a9474a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aca8fbae-a1c7-4b3a-b5f2-bdcb2eba9009": {"node_ids": ["73b84d2d-305e-4f69-87dc-97f82240e950"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ed4c058a-0301-448c-b37f-bdddaf17940f": {"node_ids": ["7644c7ee-c58e-4b44-8d2c-0052b1d16acc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b27fa1a5-890b-4fd1-ae21-e9a250b15937": {"node_ids": ["3a962233-af0d-497a-ab83-dd4ce9703fb9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f8c99711-e4d4-4239-b7fa-229b31fa04f5": {"node_ids": ["a486392f-debb-4929-bfd3-cf4cf38cc736"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9ca8ca76-ec9e-4ccf-a236-7673a97ef40c": {"node_ids": ["af81c920-5fe2-477a-a534-1e541592b8f8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "677d9d0d-5da0-4d14-bcb7-84cfbf47a95b": {"node_ids": ["38b13c10-2f2c-4e03-88d3-224760bed133"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8e9f8615-3ab5-435b-91c1-4b0a780c2b76": {"node_ids": ["f0a3130c-7c95-4b62-8b86-4bc2b513e35b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "10e3f926-8709-44cb-b391-50db5c8e143c": {"node_ids": ["e3596c42-9381-4a2d-8f75-1f0bddfd2729"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c0a29749-8a8b-4c45-b04b-e8096be81f84": {"node_ids": ["fcd86b08-f072-49bc-baba-d78d99e0d91a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6f08a91d-4c9f-4a2c-82b6-5a04fc01d45f": {"node_ids": ["fb4caf81-6413-4e20-a302-77ace40b19b0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cfd7d51e-d356-41af-ac54-c31e1cb4feeb": {"node_ids": ["7050e128-6444-423c-bb7d-d4d2768670b0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c13dbf5b-bd4d-4035-9edd-519726d18abe": {"node_ids": ["57df07a1-42e7-4a1d-8e27-110626c16346"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4cdc2664-e16b-477b-a522-f5cebf19d857": {"node_ids": ["7b3437a7-d8ee-4c5a-ab57-cca237b89716"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7a060fec-d950-4f8e-9495-a7e7080175ba": {"node_ids": ["e65c0324-86bc-49c0-aa01-31a8ffbb4fd9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "808ae3d6-7097-4f9e-aa2c-3ad4eabb21bf": {"node_ids": ["5a3a594e-2952-4920-937f-48a4a548ca2b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e727d45f-449a-4514-b354-33b447303cd3": {"node_ids": ["0cc9cb88-d1bd-4f64-8b6b-082737523db1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f43fcbd5-c462-4dfc-a915-42f3fa8176b4": {"node_ids": ["ae1d8cf0-7d96-4113-8fc4-404147d367f9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1d4258c0-aa92-4041-89ef-cca685bb131e": {"node_ids": ["aedd7d05-8460-40d2-a1ce-82b4e9410a4a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "857f82b5-8ad0-4cf2-8e02-69774d793b92": {"node_ids": ["d5070b6a-fd70-49b0-a309-bad8b3054589"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8a0af2f4-b313-48ca-9ff4-d4847d04bdad": {"node_ids": ["5b998088-fd5d-4eab-8a5c-ce6994dec80e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9084c239-97a5-4025-8232-8ae8334ffb01": {"node_ids": ["09f1454f-a858-42c6-b774-ec72a022b03b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dedc2df8-f2d0-4c66-ad2e-f15456eb0976": {"node_ids": ["e22ea816-f7fb-4cf7-a61d-73cdc9bed4b9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4be285d6-bf6a-462a-9f2b-6d10c3f78ae2": {"node_ids": ["a4a162aa-9d8f-489c-b2d5-420d6a58ea44"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3f3730ac-0a97-4c45-9d85-2d95112152f1": {"node_ids": ["2de6421e-7df1-42c0-aca6-01f429a0c282"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf00b852-4c8f-48a4-b691-fd5e5c81efaa": {"node_ids": ["92279790-556f-4c7d-b2f4-ddd2da48956d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "865c5c39-5f2c-4cc2-837e-8501073e823b": {"node_ids": ["dcff24c1-4094-4484-96ca-dc58fed7c202"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8ef92be6-42c1-49c8-83d0-7028df64f103": {"node_ids": ["883c5cd5-eb17-49b9-8757-9f7a2767bb85"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ae35cbfd-18d9-45a2-a1e6-726cb34cdb89": {"node_ids": ["56010cba-ef34-4ad0-b7ec-4fad74801621"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "93aefc33-8552-48f0-9001-59c2021e7252": {"node_ids": ["6c94ea81-a19c-4dcc-9542-92fa9e1af13b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "33afcc55-9efe-4401-aeac-b17fc0408dbb": {"node_ids": ["b87cfc3b-2820-4096-bb0c-562b84b8b66a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0132562a-fa53-4779-952c-78a6dec89197": {"node_ids": ["4b1fead6-662b-4d2d-9c1c-ff554597ecbc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2c6e37dd-bff2-45ec-b8fa-87e71094a571": {"node_ids": ["7a9b450e-845c-407f-8fab-83c0e40d1392"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4478f41e-58fe-4a89-b5ef-23f03bcdf3b0": {"node_ids": ["01c35eef-54c7-44ae-9454-8a7341600401"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Attributes.md", "file_name": "Attributes.md", "file_type": "text/markdown", "file_size": 41679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a290dc7b-7570-4d3b-830f-66fb90e1a0a1": {"node_ids": ["fc89f6f5-838e-4c2e-8b21-1596177f7ed5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Binding_Guards_description.md", "file_name": "Binding_Guards_description.md", "file_type": "text/markdown", "file_size": 1195, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "196f922b-50c1-4760-a16a-fe35c10f2036": {"node_ids": ["d5742f3a-79cf-44e5-b965-69a7f301cfe8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit-vector_Operations_description.md", "file_name": "Bit-vector_Operations_description.md", "file_type": "text/markdown", "file_size": 1091, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1b2d2eaf-65ed-4e82-8e28-5fcca945e805": {"node_ids": ["3bcea7f6-48e8-46d9-9aea-b655541ebf80"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Bit_Shifts_description.md", "file_name": "Bit_Shifts_description.md", "file_type": "text/markdown", "file_size": 560, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "05f481c3-60eb-4d50-9e5d-a0bae1fbcf49": {"node_ids": ["7dce6ca5-cdaf-4ef9-a42a-8f79e8863156", "dc611a1f-cef2-4cd2-9ed2-557a8e71f19a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Break_and_Continue_Statements_description.md", "file_name": "Break_and_Continue_Statements_description.md", "file_type": "text/markdown", "file_size": 6855, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "25717d12-9c3b-400e-beaa-4d89ce20ffa3": {"node_ids": ["2017a57a-80e9-4514-a948-526d69b3eef1", "2221091b-0764-4bdf-9558-6e915a965431"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Calc_Statement_description.md", "file_name": "Calc_Statement_description.md", "file_type": "text/markdown", "file_size": 4111, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8d7d8390-b3bb-47b1-9f1e-ebec3e93a31c": {"node_ids": ["82f4cf3c-56c2-4bd6-af30-106ea0f98bc1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Cardinality_Expressions_description.md", "file_name": "Cardinality_Expressions_description.md", "file_type": "text/markdown", "file_size": 595, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a15bdab6-0119-4c31-9c78-62ca3508ac93": {"node_ids": ["ea9121be-f4ad-440a-9d6f-73909b7b77e7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Class_types_description.md", "file_name": "Class_types_description.md", "file_type": "text/markdown", "file_size": 3461, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "938bb9da-7f9e-4128-825c-c3b7c72feee8": {"node_ids": ["a7547a18-9a8e-404f-b9a4-1b38dc90ee1e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/CommandLineOptions.md", "file_name": "CommandLineOptions.md", "file_type": "text/markdown", "file_size": 428, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "08a44331-c855-4b58-838f-6cda76f8d746": {"node_ids": ["a36bf35d-3b7b-4538-a20e-fff523efe52b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Field_Declarations_description.md", "file_name": "Constant_Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1397, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "db4969de-b28d-4c8d-8099-a2151eab112a": {"node_ids": ["abf3ccaf-f22e-493f-8a20-f7582e99f2f5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Constant_Or_Atomic_Expressions_description.md", "file_name": "Constant_Or_Atomic_Expressions_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a8c6cbae-50e7-4025-9100-3c240edccfbd": {"node_ids": ["cfd9f44e-7338-42e6-9261-1d46f105cb41"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ca8606f7-97ea-4497-9b35-9ab3fa82b2c5": {"node_ids": ["91ff3508-355b-462f-98aa-1ab8d1f0346a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/DafnyRef.md", "file_name": "DafnyRef.md", "file_type": "text/markdown", "file_size": 2087, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "412471cf-e7c0-48d2-afe4-52fcf3a849f1": {"node_ids": ["504f1590-af2d-4af2-9093-5f57ef7b4d69"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaration_Modifiers_description.md", "file_name": "Declaration_Modifiers_description.md", "file_type": "text/markdown", "file_size": 2372, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "036fbd6b-d0bf-4efc-849c-44d5b0b03ef2": {"node_ids": ["9cd0e18a-200e-49b7-9d14-cd7fb1f4b077"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Declaring_New_Modules_description.md", "file_name": "Declaring_New_Modules_description.md", "file_type": "text/markdown", "file_size": 1900, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6e5fbdb9-ca51-4ce4-b666-86b7b397106f": {"node_ids": ["963b9335-f703-419e-b1b1-63c0d73d1b00"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Endless_Expression_description.md", "file_name": "Endless_Expression_description.md", "file_type": "text/markdown", "file_size": 367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dd838098-9af5-409a-8c70-290aaf7280b5": {"node_ids": ["d9a25a0d-37f0-4ece-9e8b-ec16bc66517b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Equivalence_Expressions_description.md", "file_name": "Equivalence_Expressions_description.md", "file_type": "text/markdown", "file_size": 801, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d918163c-84f2-4162-8979-c5d09423384f": {"node_ids": ["5492a253-e954-4b74-9c9e-4b252b5f953e", "4f49ca8c-b920-47f7-baed-88ead3f83535"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expect_Statement_description.md", "file_name": "Expect_Statement_description.md", "file_type": "text/markdown", "file_size": 5033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f584b482-9f4f-402a-acf6-e13f6a8ad0ac": {"node_ids": ["c72807dd-b189-45bb-a244-85accdc4bbcd", "aeb43029-42fc-4583-9438-ac89bf9baaee"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Export_Sets_and_Access_Control_description.md", "file_name": "Export_Sets_and_Access_Control_description.md", "file_type": "text/markdown", "file_size": 6243, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5fca7e88-5296-4f43-b834-0c876023e317": {"node_ids": ["40f04d37-1e61-471c-b3e9-3a6134ea2041"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expression_Lists_description.md", "file_name": "Expression_Lists_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "60ea2c42-796c-4087-97da-d7f98f6516b4": {"node_ids": ["2f3b6a35-28d0-47b1-a322-bdd051ea6b82"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f38ab062-5919-497a-b970-88809954e5c0": {"node_ids": ["f41f21be-309d-49db-ac28-860eb4231de6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7f94c5fa-595b-4c02-9d66-136876f1c1dc": {"node_ids": ["b9176d00-3565-4a2e-a0c4-d301d8c3101f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4a550727-a7e2-42b4-a226-b8ac59004429": {"node_ids": ["d84adc8e-fa68-4505-8564-3e96dd49188f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0dc77923-7625-4a11-a9e6-f2dac5886b20": {"node_ids": ["b00ce97e-27b2-404c-8f40-d3f31c71d227"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "afb7ded0-00c6-499b-a1a6-ded9bf8bfcbc": {"node_ids": ["321ee683-08f0-4634-82a1-aee16a4d81d9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d988a062-9cc3-45c5-9034-cf08bdb6c13c": {"node_ids": ["2626ec8e-50a9-464d-9ec1-c8e415db391f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fd5e876b-31bf-445e-8fc7-c7789ddddc5e": {"node_ids": ["9c5562f3-4752-41a6-9c4d-5ed45f5b1f03"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1e0818a2-f243-464f-93c9-09a9acf4ceec": {"node_ids": ["97904b3e-b1ce-429a-8b6e-43bd1e6cce90"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9d5561fb-e7d3-43db-a8ad-da149e29f3ac": {"node_ids": ["c6093198-8014-4b6b-80bd-479baba3dc13"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4801b7df-eadf-4362-8b38-fd77949fa7ef": {"node_ids": ["3b859fdf-c613-4a5d-becb-97f2baa5bfdf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5f6e07cb-1b9d-4e9b-8665-1a10aa497e6b": {"node_ids": ["9a0fbc80-209b-4944-a7bd-f9530a492411"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cf31067d-9470-41b6-9815-3a875afcec8e": {"node_ids": ["f1df14cb-d975-406d-abf4-10edf62bb543"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ebe5086c-f442-4c1c-bc90-0aadea8e4832": {"node_ids": ["8db1eb7b-e656-42f0-b0a1-edcf7bbc54be"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "73aa0fc9-d0ab-47b6-9930-16e9081a56d2": {"node_ids": ["ca3a1fee-3e6a-4313-8349-60e6ce97b134"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4d1b669f-bc33-416f-8fd5-76e7aac65a56": {"node_ids": ["377334b3-d4c7-4b61-a604-d4e9ec66a8e9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a6c18d11-f556-479d-b0f7-dece37847285": {"node_ids": ["9185816a-0f9a-4b10-aa66-40665608b35d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "548368f8-6d86-4734-a156-70100ad0f5d7": {"node_ids": ["a6885c31-23f5-46fd-a900-1dad88bcb328"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1814515f-8bcd-4920-b294-9fd6e6c2fd3d": {"node_ids": ["1554b803-f305-4c34-ab01-a6c30ab2b714"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2c0dc2b2-19c9-4cd7-b818-0d4a80732e4e": {"node_ids": ["b7219080-a85d-4528-bccc-7ddfb53d099f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "55bf9020-47ad-4353-94be-b924faf49ab0": {"node_ids": ["c080fbb6-7994-4711-ba2b-eb197b4625d6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6ffcde50-a660-42f1-9cfe-2fa9f8854e9c": {"node_ids": ["a6971a50-5080-4c40-ba3f-097585384bd9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7aaed4df-78bf-476c-9bc9-b99c4bcc2c45": {"node_ids": ["f6af89bb-5f46-4be0-9b7f-775bd6c460f5", "baf7c6b3-a1c1-4c35-a833-aa5942c58fe6", "313f3963-f4df-48f9-b8d2-0a394602dae5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c9363ea3-4760-4b0a-8db0-bc5ecac49b90": {"node_ids": ["4ab03fad-a398-4556-802a-340af97448ea"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0fb90c6c-f5eb-41e2-902c-6215e4e7b30d": {"node_ids": ["29e955d9-c95e-4963-a8b7-99185cf5787d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fbafed2e-4d79-44a6-9fef-0952b0880cdd": {"node_ids": ["41fdc6d1-0808-4edf-92ea-82c85a206af9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "71e0efab-2dd6-42de-8ac3-40d85ec7a8a1": {"node_ids": ["09f1a3b2-7eb1-43c6-b958-10e7330d1ca1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4aa0c4d2-c40f-4bc4-ac5b-9f184a859a2a": {"node_ids": ["6f41845b-1a4c-45ef-8588-90daca741815"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3e6bc9df-d7f4-448b-9da2-f62b36c681bf": {"node_ids": ["b2f98747-731a-4e87-96fc-33b2d0f086b3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8763d56e-cbcb-4835-a47b-a38a18d84cfe": {"node_ids": ["7b80840b-f548-43bd-bb23-762345b194b8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "53f24a68-56f7-4d4f-b7e8-8b90ab177949": {"node_ids": ["96510040-8403-4943-8488-458eb5848cd1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7f0492be-8274-4263-a322-e0bccb9d47e9": {"node_ids": ["21b96d08-a285-45bc-8737-2edddc26ae81"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5b016d73-7141-4c41-a39c-d697f7851907": {"node_ids": ["d5ed1225-cc76-40e8-bd56-d8531413bb18"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cc0a82d2-c704-4131-ab48-b0b955ad3c41": {"node_ids": ["9ab804c2-f753-4447-bc52-5ba44aca92e6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f62e4f7f-648b-4e03-9187-6839707f12cd": {"node_ids": ["f87ec824-70f3-4bbb-874f-7a4c2b3ea43e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a0854176-05df-4eee-a7c3-01a3e063d94b": {"node_ids": ["e2de0ce7-374e-4b64-ba9e-71edf8da9db4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2b1480c7-567d-4f02-9aeb-b748f81e16dd": {"node_ids": ["ba268173-4923-4531-a93b-52ab62133a27"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "586ea008-5928-4bda-be9a-20ac71716c91": {"node_ids": ["1e40b9c5-f55c-4cd0-8a14-7eba0a4811b4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2491524a-8284-453f-8519-0f3eb9caf79f": {"node_ids": ["d285894f-31c0-4cdf-b10c-6699360d4000"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c7e60fc3-46e0-4f89-ac29-7f7006f9bd1d": {"node_ids": ["9d682282-0a81-4426-b4ec-f73157e310e2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "14e8aa00-198c-49c7-bf22-6fa8c808fb33": {"node_ids": ["d00e257f-df41-456f-9ad3-b992708af53b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4104afb6-caff-4a1c-8d82-9a2acc3692f7": {"node_ids": ["9a913742-64bf-4de6-b65a-402db0e165ad"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "044b3ffc-00c0-41bf-8a29-52cdeb51805d": {"node_ids": ["1b5721a8-d803-4898-9b2d-9ab4bc8c44a8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3da8c214-6c56-4f2b-a3af-133088937f5d": {"node_ids": ["e3b6fbc9-160c-4295-b386-cd95dfd151bf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2a91625d-339e-416d-8a11-94b6d706db59": {"node_ids": ["3f46b974-6b8a-4c39-917f-5e935dc626bf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e753edda-d35a-4629-88ff-98d1ed4a9c9e": {"node_ids": ["f85c8a3a-f581-4cfd-8cca-f8d8f6a0c308"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4a097f88-3f25-44ed-b185-c359b755fea0": {"node_ids": ["eeff740e-a466-4136-9670-bacfbca435d1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fce3dab9-6d08-4d2a-806f-e550646bcba3": {"node_ids": ["665f7a55-f167-4310-9c81-30b4332bc1e1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ab5e71f2-a22c-4ef1-b63f-e36d45213fbc": {"node_ids": ["847984c0-1c58-448d-bcaf-c1a6cca66b97"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0c0d1f46-edbb-498a-9424-a778ea9fb8d9": {"node_ids": ["cfdae8d2-39f5-4d90-9296-e79d09883b44"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9f6124a3-3ac8-4471-939c-c6720096bc90": {"node_ids": ["28939f44-c2b7-4377-ba04-beb5abb7cd40"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dd34ebb1-fb89-4dca-af88-e6db6d601576": {"node_ids": ["36a9448d-d880-40f3-a5e9-f6e43dc7fd94"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2fb79b6c-5972-4d7e-b372-e977eb8218d3": {"node_ids": ["fdbe887a-d2e8-4fb3-a99b-f11043af99ed"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f3087a7f-38a6-4154-91bc-49ac1edeea43": {"node_ids": ["e40849a5-2cec-49a1-a86a-2cadb3966838"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a16b7085-280f-4e56-9201-48819a2c6bbf": {"node_ids": ["8a00abcf-5e48-4eb3-9177-a4741ae5add0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f5b64b4e-31d3-4958-92a4-da4b948e9f15": {"node_ids": ["51700a4b-f588-4537-9d36-ab55949669de"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Expressions.md", "file_name": "Expressions.md", "file_type": "text/markdown", "file_size": 67725, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a0de144e-aa87-4146-ac32-ca455b437956": {"node_ids": ["974873d4-85dd-452a-9049-665c5b869e37"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Factors_description.md", "file_name": "Factors_description.md", "file_type": "text/markdown", "file_size": 701, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0c608a67-e495-4bbf-975a-9e0d94c08dae": {"node_ids": ["4dc2fd82-4aa5-4496-93be-c0ef71d2b0d7", "1f35d35d-f537-4655-b05e-691dffc28444", "deb490a9-d318-4668-a78d-649a5c2024d5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Features.md", "file_name": "Features.md", "file_type": "text/markdown", "file_size": 5883, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5297cf74-3357-4ca0-855a-4963162db071": {"node_ids": ["a358c8be-2e91-48ef-9e31-3979aae4b72a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Field_Declarations_description.md", "file_name": "Field_Declarations_description.md", "file_type": "text/markdown", "file_size": 1572, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a215c4e9-ae8b-4759-8d0f-829db92f8b7b": {"node_ids": ["77351c54-362e-4f53-84d2-32b459567772"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/For_Loops_description.md", "file_name": "For_Loops_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f6b1cafb-0382-4866-b256-f6b178ab8dad": {"node_ids": ["d778c8bc-99ba-49ed-bf5e-bf4d3652015c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Forall_Statement_description.md", "file_name": "Forall_Statement_description.md", "file_type": "text/markdown", "file_size": 3697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8ef63664-9657-48b2-b82a-02950108b47e": {"node_ids": ["c70c16da-ae8c-4978-9e00-8b1201faa419"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Fresh_Expressions_description.md", "file_name": "Fresh_Expressions_description.md", "file_type": "text/markdown", "file_size": 1439, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2b8122d2-80d0-4831-b434-8c376ac0f14b": {"node_ids": ["5ec7191f-a634-460f-888b-0f55fa206626"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Declarations_description.md", "file_name": "Function_Declarations_description.md", "file_type": "text/markdown", "file_size": 96, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f1c4741f-2e31-4ffb-afd7-79efaa6513e4": {"node_ids": ["3251aa52-bae0-491b-abcb-690a91089182"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Function_Specification_description.md", "file_name": "Function_Specification_description.md", "file_type": "text/markdown", "file_size": 536, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "38463957-4d24-4a2d-8e86-7cac79b415b7": {"node_ids": ["290b09a7-5f01-400d-ab67-55916930e336"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Generic_Instantiation_description.md", "file_name": "Generic_Instantiation_description.md", "file_type": "text/markdown", "file_size": 472, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "17722a28-b126-4ad2-bf9b-9b8df004cd16": {"node_ids": ["6ae19bae-2258-4dd2-bf22-4e146bdf10a7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fc328de7-d166-4dc4-af76-e49512c7bbaf": {"node_ids": ["244cb074-d452-4bec-9a4d-6a3223194343"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0da7ad64-78df-4344-b3ea-22136f5435ea": {"node_ids": ["a7fc69d2-0134-4f39-a397-fbc889e3f477"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0a86bbf9-ea73-4445-99da-098770e28852": {"node_ids": ["1024c9f4-465b-49a0-88f0-a0e0192dbc93"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "92573ad7-a5d7-42b3-99f6-b88ebcca56e8": {"node_ids": ["840dcef0-d886-44ea-bd65-fab0670449bf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "759f5d68-0788-4876-82d1-b4d35ef44241": {"node_ids": ["6e48a430-8165-4c93-ac88-e7f2d6df916e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "27359d21-2016-449f-a935-1fb348a7bc6a": {"node_ids": ["45c19f94-c1b2-4fa8-bfa5-15368ca460d9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "744b1bd3-b6de-4173-8aee-99f237884244": {"node_ids": ["0fb85b97-ef2f-476f-ba55-e16a30e40deb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "541e4837-5357-452b-b342-d56954888ce5": {"node_ids": ["cdccb608-2955-49a6-bdff-cd0e7fcff974"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ead6acd3-91ec-4624-ac77-6e6daa170a56": {"node_ids": ["e56fa5e0-d43b-4e56-984b-b6a26f390c85"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7c3bccfe-838c-4981-aa82-093cec4a85ac": {"node_ids": ["7a0f89e2-f1a4-4617-b74f-7de69b3bc16f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0411c5d4-8135-4a74-91fc-add627462b64": {"node_ids": ["b107b91f-61ff-408c-923b-d022f8453add"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a9fd4cf7-5ffd-4313-add7-9db07872be44": {"node_ids": ["2e1c2c45-562d-4370-a1fe-3d7b6c06f78c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "02a97f61-ce98-431e-b945-b7024145ec29": {"node_ids": ["20493730-58ca-492c-b501-7417972806f7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fa9f73fc-f451-4e9f-a4c3-2288961e3c77": {"node_ids": ["8fb853dc-a86a-4276-b0d1-783db6b5ad2d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "686d111a-bf98-4dda-897d-55e237a9c447": {"node_ids": ["6c3bc257-afed-47f1-a2f9-75c2116d5d3a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "651a22fe-1d4d-475f-9916-30cd096f2e06": {"node_ids": ["ad1e49eb-0583-47be-99b9-947620d1e78a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "66a9be3d-8a91-4235-b821-1293ac193000": {"node_ids": ["5b02e738-37d8-4369-b216-f8eab6fb2764"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ecdc3608-1b65-4a35-b565-723687ff658c": {"node_ids": ["f30cf5a3-95cb-4965-b5c9-d85cd852ba97"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a83975e5-1dd8-47f4-90d9-a243e337b0f6": {"node_ids": ["551d9933-3033-4847-b415-d7fcce2f2843"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "34e9c9a8-9a5c-4109-b0a6-e7ec9b7b5afb": {"node_ids": ["c8e72d4d-ce4e-410e-94ab-4f711a11a8f3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b3cd68da-3891-4c66-bf3b-5dd03a2a9c8f": {"node_ids": ["7f9d1caa-864a-4f2e-b011-805f71e55753"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "be040875-9d9f-4169-9077-423b34140132": {"node_ids": ["dba5050d-d958-40af-9d63-970ca5a223bf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar.md", "file_name": "Grammar.md", "file_type": "text/markdown", "file_size": 21974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "718c6eb5-d6d0-46b1-94a8-d723151b6fb4": {"node_ids": ["fb8530b9-6458-4bd4-ad2e-659304259191"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de91e5e8-4f83-4911-a85e-cf2e176b7684": {"node_ids": ["da06f907-fa23-4ab9-ba23-e83653acafc2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "58e00094-d7e7-418d-9c6b-7ec6a10f2445": {"node_ids": ["b0edbee9-1b76-4726-b7bb-713f1be7028e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "73764402-186d-43fa-aadf-b0e05623570a": {"node_ids": ["792d59fb-2bec-4738-b125-7d10f326304a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "636faf08-d3e6-41d7-b35a-ac8c239d1dc0": {"node_ids": ["676dcbb5-83cf-4d44-8f56-c6e77ac4055d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b3d5e355-98be-4cca-a544-1275626e531b": {"node_ids": ["aa1e4ea2-4865-4e1c-9ab6-b34783374670"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7ce4f0eb-060c-44b5-8e90-e299550b092a": {"node_ids": ["1d686008-c5bf-49b0-867e-68fd3e8d89bc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b67ee8f0-895f-49ed-8159-06d21746ae3c": {"node_ids": ["0f107559-d582-4435-9968-2f87cefba642"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "291fcd1e-fd98-47d5-b39e-bb2842ec6b52": {"node_ids": ["857bee35-732f-4a1a-82f5-0671a44ab827"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7f39add1-544f-41ad-81f6-187769f93c42": {"node_ids": ["7f05c03e-b0f0-42b6-881d-dc2cfb4c6709"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0db9145d-ddba-4277-a050-16ce9a9dea0a": {"node_ids": ["36d3fcc0-ecec-45ac-8f11-b0fec832203b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1a080503-e4e1-41d0-a982-6129efc87ce9": {"node_ids": ["3e2babcd-59ab-4393-bc93-e5455c3fda8a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2708041a-9eb3-4160-88bd-0d6b2808320c": {"node_ids": ["1f959895-7ca8-4ef8-969e-1123a8c349e9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3f3a5f12-000e-4ddd-8665-cd410d8d718e": {"node_ids": ["035710de-5fdf-43f5-ade1-81f8bb6da98c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7fc9b845-f060-465d-a4c1-ab5175aa41b1": {"node_ids": ["4b35b414-033b-4d09-8770-a739c5c36296"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "64f2101d-0b36-4de1-b0dc-a9c341642aa1": {"node_ids": ["73c23698-4711-4347-a84c-9e37b2fab051"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1cf615d3-89eb-4bf9-9939-f96a11d41896": {"node_ids": ["6bb70d77-6c87-47cc-a2ac-60046cde270e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f1ad728e-7271-4465-92a2-03e1ccd62ead": {"node_ids": ["53ae47b5-8849-4fd7-9006-448e99887de4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "521ac351-b524-4f59-9450-2a714b1d5b02": {"node_ids": ["1ea7fa60-8f4f-4bd3-af7c-850fdb9fced1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f962f35c-33c5-49f0-979d-e6e00965c28e": {"node_ids": ["7cba112c-0f5f-4436-a08f-d0e8c8048e74"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9ce46d90-f5a2-4640-9ac2-46c03616039c": {"node_ids": ["65e97718-9a90-4ffc-8770-519c4226aeac"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3130ac0f-89af-4306-91ac-bed58c420250": {"node_ids": ["e4bf2c37-b1c1-48aa-a224-99776bcd9442"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "023500db-ef14-466a-a6b8-476367563b00": {"node_ids": ["5216373e-b1df-4417-8875-134762fe8019"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a539382d-acea-4e72-9cc2-ae1bc8337b42": {"node_ids": ["7ac139ea-1575-459c-b104-f282c2055365"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aea58eab-523c-4aba-b280-602298a726ba": {"node_ids": ["884b414e-a13b-474f-9ee3-377031a55f6a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b9083bf1-8975-4a21-be7d-d8ba4a8ba0d5": {"node_ids": ["b2dda6dc-11d4-4640-94ee-d1416a4f865a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "98dc80ec-0169-412a-a6fa-b1a0a466c267": {"node_ids": ["4eb8f14a-0176-4b12-9e7a-b187fd2fbaaf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "693dd6f7-1e3b-4a02-a5a2-dc05f20c62b2": {"node_ids": ["804b6413-4870-4682-a932-be6c5aea4141"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e6a6f03e-3ba9-40cc-9b58-79f98d406c91": {"node_ids": ["47215e5e-6cb6-4951-8592-6fd579f4e128"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5db56686-432d-4245-af00-e524151a26d1": {"node_ids": ["060862d2-9946-4a98-9632-1de2c27fbfd7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a60ee864-c77b-4220-9a32-bd2d52fa712e": {"node_ids": ["3071b9af-5e65-436b-bc1a-d539317252fc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "14b8634e-c4b9-428a-951f-03b7df2edff9": {"node_ids": ["c227c138-70e3-4cbe-9e2f-91b5f31d8ba9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "613787cb-16e8-4492-986d-ee91a32a099e": {"node_ids": ["e5730cf0-81a3-4f68-b766-2f9bb641b2c5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1eb0918d-ebcc-4c64-b1f0-e4f818ad667c": {"node_ids": ["8283f652-ac8c-4136-8baf-f06d5ab13acc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c60da459-ebd6-487c-849c-f3e0b08b4fb6": {"node_ids": ["c683bc65-525e-4fd2-96d7-ee3485f08b24"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9dd26f3e-0aed-42d1-ae4f-90fcd8873800": {"node_ids": ["fd70d044-c960-423e-a416-1c75bd28bcd6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "86564521-ea26-4762-9cf4-56c7c72c0e95": {"node_ids": ["28d2d143-1adc-4528-9d70-e70a269ed93a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3cc266d5-bf3b-47c1-a043-0bb74a9e25f5": {"node_ids": ["fdc783f1-0425-4300-a882-80410c9de63f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "90989037-77de-4f1d-a2ea-33b45600a0ae": {"node_ids": ["d913248a-516f-4d30-8ca1-9efc0db09504"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2a31347a-aa77-42e6-9d6f-68dfca0e7216": {"node_ids": ["105fd0e1-9302-49fd-a520-5a9e267731ad"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ffc4d113-0921-479f-b05d-623f6cf6adab": {"node_ids": ["5996e18e-8a84-493e-91bb-fe2ed24982fc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4757dc4f-6189-4258-b72b-b403d486d39c": {"node_ids": ["0afb4425-da94-4bac-a876-4c7729daabdf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1c24e696-1082-4fb5-b348-12d5ca865e21": {"node_ids": ["a5f1cb7d-3104-4ee0-9a08-893d962e0a6f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "621058f2-be46-4bb3-bce0-114608a05c44": {"node_ids": ["0840f194-939b-4f19-aad4-c42769ce3964"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3c74d071-0279-43b7-a015-94e5b1b104bf": {"node_ids": ["2b19620f-e779-41d6-a620-436e072cf497"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f0261211-8f5c-4f82-b784-8fb0f6889381": {"node_ids": ["7b704c8a-742c-421e-b6ae-bb9016ef749f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7c8639df-2dba-4578-9954-de31da21a6af": {"node_ids": ["827383ec-3abe-4dbc-af2d-abadfcd859ae"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f0273b99-61e7-463f-871c-899c47fca76b": {"node_ids": ["41c678c9-b5f7-43c3-8647-f789c66860c2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "df0caca0-6c16-45ae-8cea-3f52583999e1": {"node_ids": ["b4f9c84b-57e2-4689-954d-5ec6db7e6599"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a5e35ed8-43b0-4ce4-8de1-946c47fb7281": {"node_ids": ["e0069d77-366e-4f0e-afe3-008e0a4fe5af"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "96034cfb-69c9-489b-b3e2-51f48d3eb3dc": {"node_ids": ["fff9d58c-633d-4081-b392-2ad67dd9248c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e92eba38-8975-41fd-b3c6-889e6b586c84": {"node_ids": ["52e15e0a-3b79-47e0-bcdb-5ab65a43600d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f50d9b62-deae-4bc8-b2c0-1b4e1a4a35a9": {"node_ids": ["21444a7b-09f3-43f8-b0b4-04eebad79ea2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3e8a0ca1-c537-4caf-b4b5-5c9307d1fd7d": {"node_ids": ["ede46f07-db67-4310-bb7b-531c5bec16e4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "25f490e7-3ffd-48f7-912f-6a02e8ceb32f": {"node_ids": ["d52d19d1-a6d2-4813-a60e-c4d1482cdf05"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "707810f9-fe0a-4578-bd8a-4f9b68f1e230": {"node_ids": ["522a37d3-cf5f-47e8-a724-b5351da58e91"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2b0daa27-708f-4f33-99ee-852cf49c7ed0": {"node_ids": ["10381681-ddab-482f-b140-01b2c4a30de9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9134f48b-fc0b-4826-9600-de403da253e0": {"node_ids": ["120349da-915d-43fb-811d-e70ef87548b8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9517c03a-a61f-40cd-b663-b0a7ed67c5ea": {"node_ids": ["88e6453a-fafe-4c4c-a0a5-728c301a2516"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cbf4c494-fa7d-4dc0-be7f-25394858225a": {"node_ids": ["9e8caf50-42ff-47fa-81a9-4f2970a9a5f2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "459916ec-8e16-493f-8add-c32fa42a40fd": {"node_ids": ["e45cdbbf-b35b-4bf0-b956-986c8c4398bd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "05426c1c-9213-449a-bcba-f0496a24473e": {"node_ids": ["a5775ecc-1c39-4a56-b1ef-0aa121528b4e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ea7500ed-3f08-473c-b1a4-e4a12b55da4a": {"node_ids": ["3f5eb9d8-b2a6-4fd6-84ad-2581563e03f5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a593efdb-4874-471e-ad4c-9394441b81b7": {"node_ids": ["28e16cf1-fd89-4af2-ac2f-1bd0c4336b09"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c4194bcc-4f07-42e2-8ff7-f5c251b81b54": {"node_ids": ["1a12b1ad-33c5-4843-8e4a-bb749b888fe3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "75771b74-4cfa-4e77-b827-8a412f669b26": {"node_ids": ["e51d06ba-62db-4c5c-a5b3-e4d5f2a02302"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a43e7e5b-9a59-42b8-9c8a-517a8c69364c": {"node_ids": ["19e5fbcc-d6f8-4508-9335-b32ac58c6ef9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7e720c60-ecde-432f-9a1d-c32c62b1fc98": {"node_ids": ["b065dcc6-9b77-411a-aefa-e3ab5f7bd4f6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "63c70470-ad67-4e62-bac9-c784ce88be80": {"node_ids": ["482ad15f-b6a4-4278-9a9c-6e68e01db534"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "37765f71-e65a-430d-9842-e924d48485b2": {"node_ids": ["fc43fc71-6c5f-4260-bb1f-0f119de07eb3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "07dba3bd-a3bd-4e13-b0b1-36a7145256ba": {"node_ids": ["0c298f08-a298-4859-8528-759ec8e168fb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f93b3f8a-0147-4e2c-b91a-f62226397bb6": {"node_ids": ["97d601a6-9ab8-4e17-a00e-6cc18e7090e5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7986274a-a483-47eb-844a-322e7a938544": {"node_ids": ["760ed996-8273-48c9-9c91-19bf987845d1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3dbb3135-e9c7-4145-9411-330347c6b215": {"node_ids": ["daed0648-fc45-445a-9f11-840d9170cdd7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "91f1e463-5dd0-45c8-8e0c-5762ebbf3a9c": {"node_ids": ["c3616d2a-c08a-4c2f-8b6c-d3d06aee4ba3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "eff7f83a-6f39-4ad5-917a-ba65e5cf4925": {"node_ids": ["801e2a51-15c9-4842-b05c-69e3d5534956"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d81968cc-d5a7-4af1-97a1-9941c7ece4fe": {"node_ids": ["439e9206-ca60-46b9-aa73-58f6c967264b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fff4f973-e6b8-480d-a33a-c1a360f133d8": {"node_ids": ["70079955-197f-445d-b139-d58b41644809"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7ca865e5-6109-4adf-ad37-d32f202c65f2": {"node_ids": ["6d4c42f3-d4ca-44cd-9954-fef783903b13"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4381ac05-27d5-4b61-8527-a9bd7b07234f": {"node_ids": ["9476ab07-7d7c-4dce-ad50-2fdf108f41a9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aeb97024-3caf-489c-9b90-7fe7dc54f810": {"node_ids": ["ff4582c8-2dc9-4fc0-84ff-8a8f85d9af83"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ac048110-9779-48f4-b0f1-1bb88a10c61b": {"node_ids": ["05a0f753-4dc4-4b41-81bf-5d814ee8c8d5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4ec01144-eea6-4846-a318-3efbe483ef99": {"node_ids": ["1d7bd3e8-e569-4260-bc43-ecfd020802d2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "683c3206-8d49-40f6-92f4-4b5267e60c8b": {"node_ids": ["1f0e444a-fc82-4ad3-b252-1547d9232040"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "63be4225-0c8a-48bd-8e48-f30f8c89f4e6": {"node_ids": ["f907e87c-94f3-4811-be65-7dd714141ac0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1784342e-3b78-4993-9e12-6565f2806989": {"node_ids": ["1e40c661-2ba9-4b03-ba98-79fab42c8427"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "502f064f-5acb-481f-b20f-5954bd73b714": {"node_ids": ["46ce6570-1a2f-4f2b-8522-62abf5225eca"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9b047521-9adc-4d11-b592-9567640d380c": {"node_ids": ["e9193a45-c6f0-4955-bdeb-dd15587f637c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "12ea49a7-804b-406f-a287-0e96e4bc3251": {"node_ids": ["92fc6f47-8355-4c05-aa77-3541809e7f5d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5fedf925-a835-43d9-9811-118c32b9d47c": {"node_ids": ["e1549901-f0b9-47e5-880b-bea09c8ac843"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b1aedb79-ff03-4377-94ac-f5a75f22e11b": {"node_ids": ["9cf6a383-1d30-4e99-99ef-c7bb6d20b907"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d4dbde6f-33e8-4751-83ef-35cbca159460": {"node_ids": ["1652f4ad-ca2d-41c2-931a-158f708f8c28"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "df08c2e5-7857-42a8-a404-91c6d4bc9e96": {"node_ids": ["639e942b-5867-48ec-ad32-c2bb0cf8a395"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "761f35eb-fd69-4200-bf3f-dfed6280ac9c": {"node_ids": ["02c6cde1-1158-4a75-92dd-1cd196d5a03a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6c2ab6ef-9441-4ff4-a03b-c67448183f68": {"node_ids": ["4e71f520-dd4e-46de-8773-c70a9e25e2a4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2602c9e8-7b7b-4a36-b407-261b90eef6ee": {"node_ids": ["a5a22995-a9d8-4638-867f-541df567c78c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bfa18db2-a65c-462a-8f92-9592c40285a2": {"node_ids": ["b12c474c-09b7-4593-8278-b785b38aef7a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7a16affb-0c9b-49e6-873d-8d664430d9d3": {"node_ids": ["9644f6d4-3e7c-4d55-8647-48e907ae1809"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ae08d318-6d61-43a6-ba05-8d82c599358b": {"node_ids": ["f239caf5-44ce-405f-917d-95f88424bd7f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fd4f6bfe-6533-4c61-80b5-fca5b5d16eda": {"node_ids": ["05cec0fe-d77a-4e5a-8608-8c03d6167b8e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d7b9ebfa-9e45-4d83-be50-664a36c8c74a": {"node_ids": ["7549068f-3397-43bb-9a60-885601337d30"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "90693931-27bf-408b-acde-016fc906d9e0": {"node_ids": ["49873ac0-b474-4da5-a2fd-621573d2faa0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a50407b8-124a-41b5-a2a3-e2e26e364258": {"node_ids": ["de0e759a-dab6-4183-bdf8-1fbf9a440558"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f9dd4f14-f835-4a4f-8720-17ec5c49a975": {"node_ids": ["db7aa39a-4fe6-4816-bf5c-331bc9348598"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e4ee4134-6fd4-4a2f-8656-d43665f23be9": {"node_ids": ["e067198f-8e8d-498f-b36e-ba4e98d68374"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "10f30a00-0558-4dd8-a74e-56b25db2e91a": {"node_ids": ["c597155b-cad1-4aaf-a2c1-91692494e818"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "54786482-8277-462e-bedd-0e550b0695bf": {"node_ids": ["5b140160-5252-4b38-944b-298b43071ea3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d43aa82a-b123-430e-8c4c-e39d5a2e2b84": {"node_ids": ["ee6c3e5c-237b-4bb3-a725-a871a8273425"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "249e3de3-b608-4819-93c9-718f7149b173": {"node_ids": ["14ee3633-6185-4b7d-b5ed-66a300b016fc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6970e9fd-dc06-46a9-bbca-eecd3d3f0556": {"node_ids": ["f789f95b-d270-436d-b288-cac873c41c92"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2be0509c-c98b-41cd-a4e4-3552f4ae5b75": {"node_ids": ["36f2eb3e-4247-4449-87d7-2cb0529568b0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "beb71586-d3f5-4872-a95e-d47a94826ce0": {"node_ids": ["f6f5dd9c-9ef6-4a05-a2f7-2e99063a150a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a8aa6236-e3dc-402c-96c7-9bee84e8faf6": {"node_ids": ["918c93d8-ca0e-4437-bb23-80b9c16b832d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "909482b4-7760-4941-a0c9-417aa6b2386c": {"node_ids": ["f481c097-bed8-456d-a72a-bb323cb2e66f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4d8a67cf-bb4b-4cf5-8201-55b7e613a66c": {"node_ids": ["44f0c580-5658-49bf-b283-e94cf5d2d927"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fb343877-c7e1-4231-a2b1-5457190f19ce": {"node_ids": ["35906dbe-e2ce-47b1-8b12-5bd3c40cc254"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "467d2026-97d0-429e-8661-dd98390761c7": {"node_ids": ["57fa34ae-4400-4bdd-b757-b70d90f676d6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a9a6f9e8-11b4-419e-8415-3045e51001db": {"node_ids": ["d0446273-b897-4331-a4f0-112fab4e32bd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6a6d39f1-2f19-405e-9e70-d1d4849e1a09": {"node_ids": ["e4bb22c9-4712-4885-85b9-9b7f5b135164"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b3ac09d6-a1a3-4379-b483-8e103c3b659e": {"node_ids": ["8e3a53d0-9504-4244-bac1-ca37c77d4ac5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a222b4c1-3f1a-45c2-9240-624940686f42": {"node_ids": ["fbc498ce-1a32-4664-beff-a4c36ea0de6b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d510a20b-091f-4c19-9c4f-ae05d90fa93d": {"node_ids": ["c502ba11-05f1-40e7-ac5c-9074c501d749"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/GrammarDetails.md", "file_name": "GrammarDetails.md", "file_type": "text/markdown", "file_size": 50503, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "01b8eed5-fa78-4335-a4ba-13f6b1e7d4b5": {"node_ids": ["895aaffe-eec2-44e7-91bd-3f96f46ea68e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e4857040-0bcc-4a9a-8f01-dc9f1687e6f1": {"node_ids": ["1a98fa8e-64a8-4f75-8d5f-812a5a6c5377"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d8e0904e-1831-4123-8333-022f456905ee": {"node_ids": ["cec31e03-3eb1-498a-8f3b-713e10e54615"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f58b35e6-306c-4a58-b2fb-29c66de6ae1d": {"node_ids": ["47972514-b892-436c-975e-8011146a3c85"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dcb54fc1-dd75-4d9f-90a5-7c03e3bcded8": {"node_ids": ["77aab5f6-f157-49cb-b11b-f95cfdef0f38"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ca3e5671-4a23-484c-a2c0-3f2bc0f626d4": {"node_ids": ["e4079d7d-5fad-4a35-9a66-edc6858a537a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2f513de5-2654-4d52-8a7c-39a23923a19a": {"node_ids": ["67fbc09a-53bd-4163-b503-56c33aa7b7ec"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "edb5fde7-459d-46b5-a39f-ceadd56f1246": {"node_ids": ["b315b4cd-bc01-468b-990a-7bc9771898fa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "78a5065e-0d89-4bf3-968f-746f57640a7c": {"node_ids": ["87d80c3b-2e7f-48ac-9b27-afd87817264d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a83d48d8-8203-43f8-8844-5713a4aa3076": {"node_ids": ["8679d476-ad74-4c09-b35e-e97ea5c98613"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "36e420f6-e1a8-4b03-9108-0da7c8ebb8c5": {"node_ids": ["a2a48f64-c083-4758-8b1d-949c539660b1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3d8418b5-53c5-4fb4-a315-f31c1129a02a": {"node_ids": ["14360d32-2b94-4287-8992-82c6db12d26d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1a65a9e3-7cc7-430a-a6ee-89cf2c35db9d": {"node_ids": ["2f6bd013-63c6-41ba-a5fa-ee00050eb2db"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3e9ddb47-686c-464e-ab57-22bb128a97a4": {"node_ids": ["3343df37-cd08-4a2d-80b2-5ea02fda3ae0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9436a67b-6bcb-44e7-b1e3-d14ecacde2c0": {"node_ids": ["9c7e6048-421f-4499-afc5-839337b71a2c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7502e25d-c461-4e7c-843b-9b7043f0c9e7": {"node_ids": ["f8fce4a5-d918-4534-9415-96b640d27c25"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9f151794-d22d-4bf4-b3bc-d35b119c7c22": {"node_ids": ["577904a8-a28a-4aa0-85a9-45a60eeb3bd8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "87d763f5-e35f-4d67-bb52-b3d7cfffc681": {"node_ids": ["9e050821-aedc-4ec5-8b7f-4369cd0099f3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "770139c4-9b19-4b38-8799-f31ebe57170f": {"node_ids": ["77028a73-5be5-4da8-af79-fb846a01552c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Grammar_description.md", "file_name": "Grammar_description.md", "file_type": "text/markdown", "file_size": 14542, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "25504e9a-629a-4d1e-8db4-1e5180241138": {"node_ids": ["0c9b2593-6dc3-4dd1-ae37-647301f7a99f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Guards_description.md", "file_name": "Guards_description.md", "file_type": "text/markdown", "file_size": 518, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3170ee48-78c4-4b3c-8d55-5ee0fe5a1525": {"node_ids": ["19268660-b434-4e02-a47e-83d21b01940c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Hash_call_description.md", "file_name": "Hash_call_description.md", "file_type": "text/markdown", "file_size": 1320, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5defe224-4d4b-403b-bbf0-0bbdfe70e59d": {"node_ids": ["45d97175-330d-47fa-8f09-a61fe03b101c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Havoc_Right-Hand-Side_description.md", "file_name": "Havoc_Right-Hand-Side_description.md", "file_type": "text/markdown", "file_size": 387, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f4ca6d33-eaf3-4a15-aa7c-0399cd4812ae": {"node_ids": ["720a2b2d-420f-416a-a79c-7835f7e3e8b2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/If_Statement_description.md", "file_name": "If_Statement_description.md", "file_type": "text/markdown", "file_size": 2574, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "20e0fe61-6840-4f79-9b48-8793a4ebc659": {"node_ids": ["6799c6cb-f9ba-4db7-80dc-7b376b9ac761"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Implies_or_Explies_Expressions_description.md", "file_name": "Implies_or_Explies_Expressions_description.md", "file_type": "text/markdown", "file_size": 298, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b7348063-eada-42cb-9bf8-0b82facd8fd8": {"node_ids": ["19f5c92f-c643-4479-ab5e-d7a228093eb3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Importing_Modules_description.md", "file_name": "Importing_Modules_description.md", "file_type": "text/markdown", "file_size": 3373, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7829f7ae-576a-4a23-ae94-daf843bd6dde": {"node_ids": ["0393d0ea-18f1-4794-a8ae-d4ad5a01a61e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Include_Directives_description.md", "file_name": "Include_Directives_description.md", "file_type": "text/markdown", "file_size": 1442, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "497bda4f-db22-4d42-a1fb-cff2b5c2dd66": {"node_ids": ["c76dc23b-f608-442f-abf7-b7970d80d24f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d7327233-13bf-4d77-bb62-62d817d4cffe": {"node_ids": ["e4846c59-c077-4eb6-9f3b-94da373a9586"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cf7c92d3-9b25-4365-9097-37cd29d6d30e": {"node_ids": ["9ba1496b-f4c7-4584-b14a-0a0c943e04d2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction.md", "file_name": "Introduction.md", "file_type": "text/markdown", "file_size": 7433, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "18e2c6d9-1e22-4c4d-85ff-c5a86a4de7d4": {"node_ids": ["265c8ec4-826a-481a-9b8e-a4bc3466bd7d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "883cbeb4-ba10-4389-aaf6-052611314cce": {"node_ids": ["cfa74cca-b31f-423d-877f-c193a8c0f2bd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4255ed3a-3b91-4ac5-aab1-9705729f0522": {"node_ids": ["ab813aaa-e919-40b9-b052-60132289f019"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Introduction_description.md", "file_name": "Introduction_description.md", "file_type": "text/markdown", "file_size": 6183, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7b3ee4ad-a177-4595-89d9-75996220854c": {"node_ids": ["b5ab81e0-8371-4678-afaa-cfb57f359cf5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_Specification_description.md", "file_name": "Iterator_Specification_description.md", "file_type": "text/markdown", "file_size": 1347, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d1f6f584-53b2-4380-bbd3-d5862a489ff7": {"node_ids": ["8b8a5650-6482-4a97-8dbe-2cdb3f053542", "8bf29f39-ffd8-4f3f-b4bf-89e0918bcf1a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Iterator_types_description.md", "file_name": "Iterator_types_description.md", "file_type": "text/markdown", "file_size": 7230, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "00470ed4-2479-4160-9d4f-22d58921d2de": {"node_ids": ["918579a3-0469-47df-8414-2735b9018d56"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statement_description.md", "file_name": "Labeled_Statement_description.md", "file_type": "text/markdown", "file_size": 1555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3f023f8d-9b08-401d-a130-e554a8688b08": {"node_ids": ["ad2e41b9-bdc2-4441-a525-3a6b9a5fb9b1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_description.md", "file_name": "Labeled_Statements_description.md", "file_type": "text/markdown", "file_size": 1554, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ab380515-b79a-4c67-ae3a-c32226596af4": {"node_ids": ["870cb4f7-3b84-4863-9cd3-f5b8f1248729"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Labeled_Statements_grammar.md", "file_name": "Labeled_Statements_grammar.md", "file_type": "text/markdown", "file_size": 162, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cb5af5b0-cc7d-43eb-a6b0-70462283ee2a": {"node_ids": ["53966341-c8b0-4df0-8a3f-6f4ce75366d8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_Specification_description.md", "file_name": "Lambda_Specification_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9af6c91b-85cf-4ac4-8652-c24daf2ae42b": {"node_ids": ["ac2a0bbe-9512-4c49-88d1-f7d2b425c55c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lambda_expressions_description.md", "file_name": "Lambda_expressions_description.md", "file_type": "text/markdown", "file_size": 2367, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c2a35e2b-91e6-4eb1-bfa5-d0eef76cc258": {"node_ids": ["4d745394-6de2-47cf-9f9f-a380b3aa3051"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Left-Hand-Side_Expressions_description.md", "file_name": "Left-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 524, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "265e29f4-aef0-4066-88e2-2a0ff3c6cc1e": {"node_ids": ["09284143-a612-4f0a-92f5-3ad0dd4da99f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Lemma-call_expressions_description.md", "file_name": "Lemma-call_expressions_description.md", "file_type": "text/markdown", "file_size": 1780, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "27457845-9148-4aa6-8a7d-de2a914a6907": {"node_ids": ["c19e0d3e-1765-41aa-a33c-2ff75e22aa12"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Logical_Expressions_description.md", "file_name": "Logical_Expressions_description.md", "file_type": "text/markdown", "file_size": 948, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "39ca3303-e72c-4b91-a55a-54f671f29355": {"node_ids": ["cbdf73b1-2850-4ab4-a30d-989d56403d79"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Loop_Specification_description.md", "file_name": "Loop_Specification_description.md", "file_type": "text/markdown", "file_size": 434, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ffb8d1d3-c0f1-4d3a-b4e0-5a3a0551d8a1": {"node_ids": ["73b0f832-6958-4424-b53b-ef516139c453"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Map_Display_Expression_description.md", "file_name": "Map_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 491, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6b65bc8e-cfa0-45e1-96f8-c3af22a9e663": {"node_ids": ["749f4fc5-dbc7-479d-b95c-e07e12b09fd9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Match_Statement_description.md", "file_name": "Match_Statement_description.md", "file_type": "text/markdown", "file_size": 1981, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "95567794-3c83-4bf8-a3d6-446e145df9f2": {"node_ids": ["f51f9fbf-ba21-4182-84e7-2d9637b120e8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Declarations_description.md", "file_name": "Method_Declarations_description.md", "file_type": "text/markdown", "file_size": 3279, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "520099b7-0346-4424-86b2-ba11eb655e2c": {"node_ids": ["62a5052d-5100-4b8b-9597-122aea426f75"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Method_Specification_description.md", "file_name": "Method_Specification_description.md", "file_type": "text/markdown", "file_size": 732, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b0d1be23-e675-4e4e-a35c-cbd38539a1a8": {"node_ids": ["fa7d2579-8d62-4e36-b202-0a4cc6c33327"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modify_Statement_description.md", "file_name": "Modify_Statement_description.md", "file_type": "text/markdown", "file_size": 1241, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0f267882-73da-447c-9cf9-f24d3b6ac410": {"node_ids": ["f5b9ddde-7fd8-4bd9-aa98-529dc093fe56"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7e8f6cb5-da8b-4d0a-a77d-5edc6633f14d": {"node_ids": ["2e52657a-bfd4-4dd3-963b-9e7bb174a3a1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8e1e2bea-e3ea-4496-aeb2-937508829047": {"node_ids": ["a32c13e3-86e2-4b93-8c2b-c20b9adaec29"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "50a80175-4afa-4583-929d-ef1f8943558f": {"node_ids": ["e82238ff-a049-4c9c-9548-bd2465d5bd40"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a747bf18-c521-48b2-94d8-c2cc5480fbd1": {"node_ids": ["e8655350-170b-4ec7-b053-2e3df65d869d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "36ed79b5-54ce-42cf-8041-e209a0fd0c14": {"node_ids": ["285c44a4-4c27-401f-b352-711645cb9898", "d816dc0f-9004-4282-a265-b4b62e8183e6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b4363a02-6bcc-409d-9b07-e5f049b36521": {"node_ids": ["c49c319f-5e9d-4b89-9fa7-781ae28b8092", "510685ff-9b69-4bfb-8882-8e2c95d735cc", "143d74e3-e710-44e0-b363-b0847c9767e0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fa44f559-94f0-4e8d-89d6-08ac97cbcf5c": {"node_ids": ["c1ac0cee-f408-4ed6-93d6-4d8d3f121cc4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6564a331-5e8e-4dc6-b25d-1a5f9b359ef4": {"node_ids": ["f7b4adf5-50a1-4166-ad87-c63fd469fde9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "947d2039-01fd-47ba-88e9-f252582d0327": {"node_ids": ["dad8e2ff-4da4-4728-b4b6-18b449e08dad"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b8d93ea8-ad6d-44b7-b6f8-0db1b09a1090": {"node_ids": ["ae27b73d-ffbe-4174-82c2-90cf1e82231d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8689007b-bdb8-4308-a497-09b5b0dbcf39": {"node_ids": ["574d83d3-b007-499e-9da8-7c129b2f7b9b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c13a74b1-f89b-4e58-98f5-7f26f33cad47": {"node_ids": ["dded4c6d-a492-4305-aae2-5b07d3152df7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dee2be0c-77e9-417a-b806-0b5adbcbbf20": {"node_ids": ["e4f60eea-1c32-4cf8-9459-ebd57ba97b97"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ca643c37-9040-4b29-95df-2a4bfa423659": {"node_ids": ["2659053e-3f72-4b65-a00f-652c23d2f890"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules.md", "file_name": "Modules.md", "file_type": "text/markdown", "file_size": 39782, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c1654393-06bb-435c-99e4-569fb1fdf402": {"node_ids": ["5ec1b1c1-ae60-4885-81db-e88e02276441"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8be3071a-ee3a-4f44-a460-7171e02a9d10": {"node_ids": ["fd088e33-75be-49c9-b967-3e78a8c64ee6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3f743256-181c-45f6-ac06-27df13b1fc8d": {"node_ids": ["7de70f3a-9b70-4ba7-976f-bbfd1f95003e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c5c93e3c-6d81-4b12-b6d9-a34d8cfd7a39": {"node_ids": ["758c3095-dacd-4361-99f6-7d02332bcadd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8dbb039c-7547-4cc0-b144-0b30c62f4ce8": {"node_ids": ["2d8f7d20-55fc-44ee-985f-51750684ff2f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b83d6c8e-b2f0-4e24-a027-0a94fdb10e11": {"node_ids": ["dfa5f590-ae3c-414f-bf1d-55814c92db55"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a5e29dc4-abd2-4d44-b421-caeb71dbb37f": {"node_ids": ["ab2425a1-5500-427f-97e5-5c53cac8b759"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1f1db1d8-0a19-4d29-a0df-27ff115fd1ed": {"node_ids": ["75514c44-40c3-4949-aeab-efda6efac53d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "312574f7-a81a-473d-a6c0-4790d02129ac": {"node_ids": ["35a0a413-81b5-4393-b01f-1d67354ce36c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_description.md", "file_name": "Modules_description.md", "file_type": "text/markdown", "file_size": 5775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5da6cda7-bd47-49b0-8b2a-5a2282fb0305": {"node_ids": ["661f9133-f628-4908-9345-49edd2290949"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ea528606-bf5b-479f-8a20-8a5796962786": {"node_ids": ["6c7063ad-bf03-48e5-8915-135b004e09d4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9ebc3a8c-7361-44d3-b88b-fec0f51e32ff": {"node_ids": ["cd2caf57-0f51-41f9-9797-bc2f6d2cda76"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "72835043-4b28-46bb-9cab-e8435a7c614e": {"node_ids": ["bc34ccb8-f9cd-4506-9922-7f111f33ce27"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "74f612de-c799-46bb-9c81-74b018722d5a": {"node_ids": ["ad2cfd11-da34-4d64-8755-ed26af4fce2b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6e851b3a-8bdf-4497-b434-ec5e6d101454": {"node_ids": ["6daa145a-db42-48bc-9aa4-cc712582b7ec"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bfb1e4b2-62ec-4908-add0-4c00a2769436": {"node_ids": ["ad21dca0-8439-4811-9c17-c43f81672542"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "87ce9d0e-1c89-4872-8e31-97944d8e8c51": {"node_ids": ["64bf20fb-d971-47cd-967c-7cbd89c8f28c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d31f4d90-57a5-4067-aa51-f92cfeb77c13": {"node_ids": ["f388fa19-8ec1-4f5d-b51b-096d7bb25411"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Modules_grammar.md", "file_name": "Modules_grammar.md", "file_type": "text/markdown", "file_size": 2001, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dd970d9b-0b8b-4ed9-9dc6-846421897dd3": {"node_ids": ["f1abcd22-3aa7-4c4c-9daa-d1548797e50d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Name_Segment_description.md", "file_name": "Name_Segment_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d812b6c5-c2dc-4fdb-a89d-1cd642dd153e": {"node_ids": ["8f93aac5-0490-4f84-bc61-e5c83366a164", "66777422-b2b2-4e37-a228-10a9972b69a4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Newtypes_description.md", "file_name": "Newtypes_description.md", "file_type": "text/markdown", "file_size": 4650, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7381aa2a-b655-4b6f-80da-8ecde380b8b3": {"node_ids": ["75d469e6-0634-4fd8-9d25-4f84df3d85a3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Object_Allocation_description.md", "file_name": "Object_Allocation_description.md", "file_type": "text/markdown", "file_size": 324, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "76810a52-3a2a-4570-b405-ff2cc37b916d": {"node_ids": ["43a3b64a-d63f-4d15-8774-2fdb7a0b7bb3", "0c80cde6-c21e-460c-8085-0dcaebc82184", "994af055-5cb8-43b8-b5c0-a6611a9ba9fc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Old_and_Old@_Expressions_description.md", "file_name": "Old_and_Old@_Expressions_description.md", "file_type": "text/markdown", "file_size": 5080, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "66c99f47-b3bb-424c-97ab-b13c3d3b2644": {"node_ids": ["d7174ade-f7bb-413e-a5cc-2a79716ad5e1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parameter_Bindings_description.md", "file_name": "Parameter_Bindings_description.md", "file_type": "text/markdown", "file_size": 2130, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "93c57eb4-6619-4463-9f5b-b9d0db78bb25": {"node_ids": ["5b65369c-77f5-437c-8e10-863cd794406a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Parenthesized_Expressions_description.md", "file_name": "Parenthesized_Expressions_description.md", "file_type": "text/markdown", "file_size": 404, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de29d7b3-4082-44ad-a501-6b0221e75535": {"node_ids": ["63353ec6-d89a-4144-972d-0f2056480626"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fa26ce77-ec79-4c86-a408-e9da639e9072": {"node_ids": ["933de487-2d92-4f4b-b211-dfad45606be3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "89e38262-aee1-464e-8fa6-4d99ca3a0c43": {"node_ids": ["7bc490c7-da84-48e6-adde-a3a33c8c517a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "acba8396-316b-4ca2-b6f2-46e93167ada0": {"node_ids": ["bda1eff3-4065-4064-8990-a55f6b9e5553"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "83fab574-e052-4f72-aefd-143256f2c2df": {"node_ids": ["376ec204-a12b-4d1f-aeba-6acfb75b1376"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bb4d4eee-fe7e-4102-b615-d70ed2fd0521": {"node_ids": ["84f3ba6c-bf70-4a39-8f0b-182f8e953456"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4cdfe63a-7db8-42eb-94e6-80bd6a46f136": {"node_ids": ["e17d2ccf-3508-48ce-b0b3-5a34bcba5efa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Plugins.md", "file_name": "Plugins.md", "file_type": "text/markdown", "file_size": 10031, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "074c9b26-3547-40c4-9a7a-18976a57bd4b": {"node_ids": ["1986e690-9130-4452-ae18-18771a84ea69"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Primary_Expressions_description.md", "file_name": "Primary_Expressions_description.md", "file_type": "text/markdown", "file_size": 465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "60793980-12e4-4079-84ad-c67a89648afe": {"node_ids": ["d66426b7-d822-4fed-950d-bced8a7c6e65"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Print_Statement_description.md", "file_name": "Print_Statement_description.md", "file_type": "text/markdown", "file_size": 2689, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "16fde871-72cd-423a-8ff7-8595668c2875": {"node_ids": ["b22bb1ef-b3d8-4131-8a31-e7e764edc533"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "60de412b-1f15-4dfa-9743-6c7d9b1a8961": {"node_ids": ["f21db892-405a-453f-abf1-82569ba90d36"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "212ef033-dcb9-4d36-af74-087d2ae2f785": {"node_ids": ["4ff76649-bf3f-46d0-adc8-eaaf6689390a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b205a097-5797-48f8-a796-0fd6d4cf0295": {"node_ids": ["e8f1cc4c-ae37-46bc-9f7f-48f4b025ab59"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6539970f-6ae2-4bc0-8a76-140f89412b07": {"node_ids": ["07fd72a2-40e2-48c5-bc4f-6ffc92acf605"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs.md", "file_name": "Programs.md", "file_type": "text/markdown", "file_size": 8987, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c67f1fda-b273-46a6-beb6-874bced4e0ce": {"node_ids": ["a8f6c8aa-d74f-4ea9-a3d0-5097944fdbf5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dc8b8e0f-a43a-44a5-93a8-c02a03954ec7": {"node_ids": ["e6d505e8-8b1e-43c5-8883-0ac530f0d365"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "894b3fad-8070-4694-beca-f19e62c79417": {"node_ids": ["f7b0c96c-bacb-4301-b8d9-8a54306bb382"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "83b7bc1b-13f0-4214-9b29-840af1af7e91": {"node_ids": ["de8abcc0-4bd3-49c1-b938-c7edcd535fdd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a49c0a59-1a01-419b-8a1c-74f43daa0713": {"node_ids": ["7e489598-c08a-4488-bd47-9ddc3baa9648"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_description.md", "file_name": "Programs_description.md", "file_type": "text/markdown", "file_size": 7070, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ce94e831-4971-4f31-aa06-37d95477a07c": {"node_ids": ["53a59510-e68b-4007-84b5-25337a01066d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fc3b14fa-4ce1-414c-9469-bf97bf6b5c3a": {"node_ids": ["0bd94d69-c600-422c-a3b0-a742e984212e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "570f5145-a459-40b3-8ec4-4d99ed170523": {"node_ids": ["84f7dd6e-0d1e-4d34-be9b-20d737f80a2b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6a2fa6b7-79bd-4d94-899b-a821e31a4067": {"node_ids": ["3ce41c1d-0133-4cd6-98e1-06e20e752621"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d7cb4ddf-34da-4cd1-9d24-1576976825eb": {"node_ids": ["f2192e1b-87c5-4be7-885d-01328d2bdbd3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Programs_grammar.md", "file_name": "Programs_grammar.md", "file_type": "text/markdown", "file_size": 1026, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b88a79c9-4e3d-4bbf-b921-46a1147621ca": {"node_ids": ["46e06310-1280-4ff3-be64-56052a015025"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dda32beb-6186-4a50-8428-f3dc415c9e81": {"node_ids": ["9f895bb8-1848-42bd-ab38-71890c44df16"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4a1df297-0170-4078-8ca9-b9413f5795a9": {"node_ids": ["bd32d459-a0c3-4a1b-8eaf-812710cf0dfa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "da175680-0026-4e71-8419-56d8794aec1f": {"node_ids": ["fd1c10e3-b0ea-43a7-b6e1-268e15a46c84"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "eaf3cfaa-336a-44a7-a7e3-31ea26f5fef2": {"node_ids": ["5c92a5e4-5302-478d-a263-044180c2dce2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "46d17309-fb24-4414-9036-cd3701e140f6": {"node_ids": ["8f629801-e8a4-4da1-888e-584d32af2251"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "80774ca2-3b2c-4531-ac74-b9ffe9ac9281": {"node_ids": ["4c672559-7228-43e9-a984-524f82316751"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/README.md", "file_name": "README.md", "file_type": "text/markdown", "file_size": 5350, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "92c72e6d-1575-424d-a6f7-2ed917db56c4": {"node_ids": ["ef78e1f8-6287-4fe6-b0d3-bf374dcab72e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "52fbb5cf-2405-4fdf-8dd6-57c246578c1a": {"node_ids": ["ae405b8c-ac0e-405d-b6dd-cc26dcbcb3ea"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "74067945-faf5-46aa-b14d-8188fac4b78e": {"node_ids": ["e4d45a52-ddef-4688-87ad-e0a249481aac"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "795dc6d3-e1e4-4846-9906-3cd1acbae209": {"node_ids": ["72a1b181-421c-4172-8f6b-1c3e2ec19c21"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5b7114f4-1b2c-4bda-968b-17e026c4fd3e": {"node_ids": ["ad03f177-53cb-409f-b634-0ec1ef471605"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9a270466-e58c-4d09-82fa-a828ace53634": {"node_ids": ["823c3235-c1e6-4727-b33f-6fa9c6e5f9f4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "21c637e9-9c73-48ca-b0d0-a7f4e05414bb": {"node_ids": ["1f3227c9-f252-4ba5-9b4f-2e1842e88794"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dd835b71-3dee-4e09-94fa-8f98be5a55ca": {"node_ids": ["47c39e47-9b8c-4fd7-8fa9-cf5825d7126d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c7668865-666e-47e5-8d1b-0460e607aae5": {"node_ids": ["a5e893e6-6bf8-46cc-98f1-db34321ac02c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "eb7b55df-2c9c-4aaa-b6bc-f87bad477ed9": {"node_ids": ["90db7e0f-7bcd-48f9-84e6-f33f3f58afdb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3a32b0fd-9e60-45aa-82ee-32d4307ff28a": {"node_ids": ["80a60630-45d7-431c-960f-1cd66f07fcc6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Refinement.md", "file_name": "Refinement.md", "file_type": "text/markdown", "file_size": 12633, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bfbea66e-0a6b-458b-8150-77dbd9897872": {"node_ids": ["946c6516-4562-4e2f-bce3-019152519132"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Relational_Expressions_description.md", "file_name": "Relational_Expressions_description.md", "file_type": "text/markdown", "file_size": 864, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a301c52b-aad1-4cc6-8298-0ac7472c0fee": {"node_ids": ["66edf23a-010c-4246-8be1-a73c54ac2beb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_description.md", "file_name": "Return_Statement_description.md", "file_type": "text/markdown", "file_size": 1151, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9cf9275a-9d99-4f72-bd67-a01098ab2b52": {"node_ids": ["604c9fb4-9a7e-43c0-8a84-0bdf5a41478a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statement_grammar.md", "file_name": "Return_Statement_grammar.md", "file_type": "text/markdown", "file_size": 101, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dd22865c-165e-4d1f-a79c-7d85ebd158ee": {"node_ids": ["3ac789cf-dd1c-4dba-93ec-bb1ea2d31d0f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_description.md", "file_name": "Return_Statements_description.md", "file_type": "text/markdown", "file_size": 1148, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ee0423b8-6beb-444b-b753-0456b2e83b0f": {"node_ids": ["bc4ff44d-1d1a-4e5d-9e99-f67b5197be85"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Return_Statements_grammar.md", "file_name": "Return_Statements_grammar.md", "file_type": "text/markdown", "file_size": 157, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0344ac5a-52ac-42d4-8ac6-67e2494065c1": {"node_ids": ["a0546f67-7d0e-463a-b021-aa94f98bb72f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Reveal_Statement_description.md", "file_name": "Reveal_Statement_description.md", "file_type": "text/markdown", "file_size": 282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9f2b844b-9cb3-491e-bc85-ae787f0b0c93": {"node_ids": ["6ce3e26c-93e2-4ad6-b22b-ee6b746c6d16"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Right-Hand-Side_Expressions_description.md", "file_name": "Right-Hand-Side_Expressions_description.md", "file_type": "text/markdown", "file_size": 1118, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "68a34de3-0862-434b-bdbc-4c5288a92de3": {"node_ids": ["3201735d-dfc1-4ce6-b1fe-965dd2b84194"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Sequence_Display_Expression_description.md", "file_name": "Sequence_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4fbc7182-be77-45b5-9bdf-8e38ea56d4a3": {"node_ids": ["eab516d5-ca98-4169-974b-264fd4acb48d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Set_Display_Expression_description.md", "file_name": "Set_Display_Expression_description.md", "file_type": "text/markdown", "file_size": 1478, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "963b73c8-8738-4927-a4f8-73cb795ed0de": {"node_ids": ["16744abf-266e-4938-ac99-7f50fd584759"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "82434318-c953-4844-b730-de7d80778f53": {"node_ids": ["4564161c-39a4-4027-89ae-f88717b641ae"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "54703c3e-944a-478d-9556-4810241d9312": {"node_ids": ["3548821d-92a2-421b-8338-b7b154fff1c1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d0ea9fab-630b-4a02-86f4-f9ad7087ac8e": {"node_ids": ["eff0a380-bd8c-46ba-b9de-2ba8fb70efdd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "562df8e9-0372-4fe3-8789-4e43a83ede66": {"node_ids": ["005af69f-ef2f-4996-bef7-c2a67176f626", "90000692-28d0-466a-a6f9-7cfa23ade06d", "e20d452e-8706-490e-9626-3d6b876b1ae5", "2cd38dc2-1edb-4b7b-ae7a-be8a52a0e001"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4d20b213-0ac6-4724-99de-1cad1a1f8876": {"node_ids": ["1472f464-02ca-4c01-8fd9-36fdd78c4f3f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "58f75cfd-ced0-4bcd-aaec-9adbd21143f4": {"node_ids": ["0df6f3d0-ceea-46b4-9931-0d773b98acc6", "e0b81967-a3a4-4ba4-b2fa-65876f0c0371"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d826d770-7e0c-4939-9227-19e9e86b3cff": {"node_ids": ["f380ffac-a40b-48fa-929c-787134a873ff"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3a91a2ff-199a-4b57-af18-dfe1ae368793": {"node_ids": ["5721b879-b82f-47ad-a48b-3767aed8a865"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "503300e6-cbe5-4a9e-894a-b5cfa4ff8298": {"node_ids": ["92bc0117-1511-45f2-bae1-823604b07c3c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "489df165-3080-4f9f-8619-36f23bf98d28": {"node_ids": ["5b625f3e-e1cb-4f19-8405-3684f94a228c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "54963b58-0daa-45ae-bac7-7f6527de9389": {"node_ids": ["d1e8f9fc-55da-4c49-90a6-0bebd4b857bd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f92843d8-b210-41b4-a5ee-d671f9d5372d": {"node_ids": ["a66221a1-816e-43a8-98af-81028cbfd0ba"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f281906c-a218-4b40-b363-8fe59d789839": {"node_ids": ["d409ad5e-9742-4c6c-afde-ba7a3d43c488"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "822e195c-2019-4f68-ba88-8a6bb1381792": {"node_ids": ["97ed5e12-198a-406e-982e-d513a01027d7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2abe28d0-4016-4ddf-8a1b-bed807ca2266": {"node_ids": ["f0664842-5249-4267-b3a0-31a5d691216b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications.md", "file_name": "Specifications.md", "file_type": "text/markdown", "file_size": 33922, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "66a79f9e-7577-44d3-85f0-b71dd78a3027": {"node_ids": ["1467602a-6ea8-4cdd-967a-54f78c342d4e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5e0dda40-5d34-4513-b38d-601c879304be": {"node_ids": ["b7566439-59ca-43cb-b6fd-9f1b79017586"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b2123081-6665-4ecd-b8be-8076262f1c46": {"node_ids": ["97fd28eb-7580-472f-a1ed-3dc2648d9e81"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1a176e47-3662-4f44-91cb-717ece66265f": {"node_ids": ["936174e5-72d8-42c1-9589-ce0f2cf9270a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1e9f3e80-9b1b-4704-8d1f-bda5dac0bbfe": {"node_ids": ["76ce7bbe-3dc7-48b2-b395-0069f6d058a4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2baf0cb0-e551-4d9b-a48c-0bb18bfc6f6b": {"node_ids": ["21569f60-f691-4121-a6b7-dfa8feac79c0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "87e324e5-f85a-439e-aef3-61d5bf72cdbb": {"node_ids": ["843843db-8fa1-4a02-b4d6-9f50be987d94"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8d7c9f44-9dee-4d91-aa45-ed7373b52e65": {"node_ids": ["e3b400d0-007e-42b1-bd73-5824a8399bc0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4b9ed1c1-5b18-48e7-8018-f5bcc744b57f": {"node_ids": ["9e3979db-abd7-4720-8470-97c5548fd5d7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b21cd3f1-f09a-482f-9a52-efdfbf790c6c": {"node_ids": ["3ed9c838-43fc-436e-b2b9-1cf4fd402789"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5efe1599-b8a4-4f58-9aeb-e2a4076db626": {"node_ids": ["8b32edb7-4980-4b1c-9801-bc527e8dfd13"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "72b22727-70eb-40de-ae44-64a11aeb3cd4": {"node_ids": ["99fa414c-c342-46b5-8b86-9a450d7070a9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8b5f6116-110a-4731-9554-0aeed1636e21": {"node_ids": ["1c3afa9a-2758-434d-8088-5204bf4f23d2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4837d268-a4ae-4dc5-8ee8-a58db7126c6b": {"node_ids": ["ab5546d9-3227-4b2e-aac6-98af29270f37"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "96465517-6f21-45a3-b3a1-db856be832af": {"node_ids": ["3d09681b-a03a-4cbb-96ac-3a6aee72b7e7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "89ff5111-8b61-489d-897c-c0399c0ed95b": {"node_ids": ["b5b39582-7e39-43ef-b7c5-ddbef18269b7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_description.md", "file_name": "Specifications_description.md", "file_type": "text/markdown", "file_size": 10871, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "37352313-643f-41e8-9b0d-c5418883c4fc": {"node_ids": ["0592e598-b858-42b5-85c1-da7fbe793bc6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "61ea398f-dbea-411a-87c4-5b76ce919621": {"node_ids": ["1bfedfaf-2489-4181-a2f0-98f18f21e558"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8fbad48b-935c-4015-a4b8-8c9bd25a09b8": {"node_ids": ["435bff85-3394-421e-bf0c-c6c8a599028a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b472a290-7385-4441-b009-8ff32fdce009": {"node_ids": ["7af6edfd-8eaf-498d-a9e4-d18a0950dce2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e4126b8b-6c9d-4219-9afe-1d61e846c1de": {"node_ids": ["43a60a64-ae57-40c6-a622-ced246943326"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f1bc3856-9d20-4724-a709-cbef52fc6e73": {"node_ids": ["16d09d62-bc28-4abc-bdcc-6b42374f57f4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "48687e07-bd8a-40c1-860f-8f9bb0bad411": {"node_ids": ["1ec521c8-8d83-48fe-84a4-18a149e64e22"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a963af26-242b-4378-8550-c66f2f8ec470": {"node_ids": ["e84bf9af-a1ce-4884-8393-2654282e6e1b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f84da628-6a44-4073-ace2-38dae2350a24": {"node_ids": ["3f1a4096-801d-46f7-bfbc-6c490dd90a14"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c8a3405e-be8f-4453-8a6a-25eaf395202b": {"node_ids": ["2ef6a800-3387-4dc4-84fd-2cc1f99c6410"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "06dd46d8-3c28-47b1-a72e-fc4ec913f24c": {"node_ids": ["f1438c65-a5ec-415c-bc6e-5bbbc0a58012"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dae702d5-0346-4c5c-b8b8-7b1b4e2300a5": {"node_ids": ["686012be-2063-4270-b340-42b2f02f31f0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "310705bb-ca2c-4eb7-a451-24da8ab12426": {"node_ids": ["6b868a6e-04ed-4cd1-96e0-c5fbfeab7f08"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f699c7a8-0ce9-4072-9a95-2645eb316c88": {"node_ids": ["c8a4544e-a90a-41f5-be8c-19728bb2dfe0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Specifications_grammar.md", "file_name": "Specifications_grammar.md", "file_type": "text/markdown", "file_size": 1852, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "99c28277-0306-4d81-8795-ced83614d1e5": {"node_ids": ["91244c15-b6c3-4ce5-bf0d-5f801b0b7508"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c52466ff-3012-4504-a61c-821e9aad3493": {"node_ids": ["a7404e0c-09fd-45a3-9efc-75c8b7fc6c18"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6d918a7b-daf6-448c-b89c-8571f605c173": {"node_ids": ["855525dd-a016-462b-8b1a-b6833392e772"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b8cde3af-b640-47a1-8560-0a852f53bad7": {"node_ids": ["e2a49ec7-2948-4ad9-b06a-65f9b33808cd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "76fbac15-1297-4e6f-a657-2cef79e2e162": {"node_ids": ["b401357e-0599-498f-9646-ac2867f77daf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "db6b1bd0-7e8e-4f96-a6db-24874835b3c5": {"node_ids": ["e02b8dff-64b8-45ba-822b-134bd16fc859"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "db7bedf3-8018-409d-8737-ac87f9cc2f17": {"node_ids": ["9a92ce77-ab0b-4fad-95b0-02804c02166b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ecfca604-7fbb-479a-88ab-283d7a212728": {"node_ids": ["43002f80-6558-4a20-84d4-9386c1f51826"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1e40a18b-a220-4cf8-9621-81a5eef793fa": {"node_ids": ["b302d055-0f1b-4d00-bfa3-2fcadda52346"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0156e4a2-a04a-4dff-89e7-db14bca6eaf7": {"node_ids": ["458063d1-6daa-481e-8423-5d886ddbd807"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "49f16024-b8eb-4bc4-808b-5c22198eec35": {"node_ids": ["afb2eb4e-22d1-4baf-9885-a20780c8f898"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "15bd04b9-73ea-4679-9a86-a22c733dc51a": {"node_ids": ["47980806-e92a-4b22-abf6-5e23ecdb474d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2ab82ab5-8b78-4fb2-b7b7-338844b19ae9": {"node_ids": ["d8ce0176-2ab1-4be4-bd91-9849822115f7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2e77509d-0595-4d9c-9390-bc2d9f2d2fda": {"node_ids": ["d2529cda-e77a-4516-850d-1a53d92e0efd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9c2fb702-19d5-4c76-bdcc-04465e78b1aa": {"node_ids": ["0112a5e2-596b-447f-826a-b50e6ffdb7d3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5504e5f5-707f-42b4-84c6-40f09942f9f1": {"node_ids": ["4ee92651-c4e5-4d73-b552-19d72eb749ea"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a50f42e9-0547-46b9-acb6-c9a57109c585": {"node_ids": ["3860b06d-e4ef-43c4-9b62-c96afd496c3f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "18cf947d-a387-486d-86f0-4f9ebf308eca": {"node_ids": ["901ea986-44df-49d9-b70c-f907f213c838"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9051c3ce-96ef-4234-8ed3-d807d227c70c": {"node_ids": ["2d074e3c-968e-4cb7-aa37-6f9c8168ed3c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0d775ed0-11a5-4365-9e89-ae341a2368f7": {"node_ids": ["f4250851-2f70-4862-b2b2-7f046a04685b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "249fea6d-1ddb-49b4-9b56-1b9462b44a40": {"node_ids": ["bbc1b477-7d58-4505-8316-73ae24a4276d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3914e61e-a6b9-4f72-b512-0dfb7b8459d3": {"node_ids": ["abfc7f75-32aa-4741-a906-4afe63a1aeba"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "87a02f41-004f-45a1-93d9-93ab7acf6718": {"node_ids": ["11a7789b-7c11-4e8e-9152-f318b5336952"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "51f18f3d-61e8-4599-8cad-370ea2cb8661": {"node_ids": ["7f083894-9231-4036-afa5-878b4c2d633c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3c0c1bf9-307e-449b-86ff-b236af956e3e": {"node_ids": ["5964dbf0-37d0-4421-b6b4-8e52cfe613f2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "03a64d82-0dff-41e3-8978-1bbb104218e3": {"node_ids": ["4f0487b5-12e4-4c71-9f11-e00af22b0cc7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9f8c1349-0a25-46d5-8422-da4ed056e86c": {"node_ids": ["e44257c1-9830-418b-abf3-6151237bdf3f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c0f0b9be-f33f-4b49-9e3d-03c8ab1040f9": {"node_ids": ["1e17afd0-163a-4724-95f9-5700f88661aa", "d8051d47-e1b1-4f8c-8992-c11e0ea4088a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "72aa08cf-3996-4b8f-9b51-ca893c918039": {"node_ids": ["d9264b5f-cd39-4b13-b3d3-9d7029f68ba4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8b94c90b-2179-49b3-a0cd-a6b6057ea41b": {"node_ids": ["f0cfbd3b-d5a1-4d4f-8ecf-b13822454fbf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0ab72737-5ff7-49d2-96d5-86b06d7184e4": {"node_ids": ["414b8b51-d779-41e2-9352-dfe09ecb10a4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "32119044-3b24-4eda-8f05-1ef4be79a26c": {"node_ids": ["c9cd5532-823e-4340-a539-7a73d096283e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3e8bce1e-5123-40f3-be33-bbefd7d0050b": {"node_ids": ["8c86a397-326f-41c6-8cf0-9f288bab2811", "1b181c83-886c-42ed-9122-4ba086d2a077"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "da6ed72f-561f-426b-95cb-be6f4dd17259": {"node_ids": ["a72895aa-8e46-4ff1-a4aa-67a64a81db3a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4526dc34-1d55-470e-8a6e-6d0f37d255fb": {"node_ids": ["7c67183e-1385-473e-a7b0-ca7954f78b5d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aa76cb2c-0915-45dc-95fd-7ab858e0e588": {"node_ids": ["cb17fd94-4894-436d-858e-abc71b25c586"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b8483b3f-665c-4dd4-9889-4605e60879e3": {"node_ids": ["cc85b694-e0ba-4401-9c1c-14c5218a16c3", "6379b404-0246-4944-bfb0-b5fdbe087bc5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f82c292c-2274-4be7-8877-5b6719e7b49a": {"node_ids": ["dcb709d3-9c95-4774-96e8-2bdc9b381b11"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "efaecf7e-6d2b-462d-8295-47ec19f33d1f": {"node_ids": ["d069fd20-2613-4110-bb1f-6e7b7e7b96fc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a263e8b0-1a88-4dcf-b80c-1baf0a500418": {"node_ids": ["31c25aec-6c32-4468-b0c3-70ff559f0126"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "88e7237a-1bd2-4af4-ad0e-193996602605": {"node_ids": ["de7feb17-a6db-4c38-9f53-8cd8cc5425ae"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ec7413be-409a-428f-a62e-b88fe99e5142": {"node_ids": ["4620db99-d7f1-4f7e-b825-db9aa950b5cd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "247e8b3c-2be2-4279-bf00-799b6bf4ca21": {"node_ids": ["7ee3dc9d-9c8f-4930-ace1-07d5cbaec157"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "751b795f-126b-4e20-93fc-04ca0b769fe1": {"node_ids": ["b07d7c72-9b25-4a06-a6fa-49bf93a061a3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4fe082ae-0eeb-4489-84c6-d2d2c5580971": {"node_ids": ["0bce30c1-459e-4799-8e80-c1c4414799d1", "02386565-1812-4697-91b6-8e0ffda4bdb4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Statements.md", "file_name": "Statements.md", "file_type": "text/markdown", "file_size": 86327, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9ae5531e-9f4e-497d-b523-de45c03c1f98": {"node_ids": ["00cf4590-fcfd-4814-ad16-e79f1490a880"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Suffix_description.md", "file_name": "Suffix_description.md", "file_type": "text/markdown", "file_size": 205, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "45e35def-1e62-4011-90f1-ad5484586d51": {"node_ids": ["990d4022-43fc-420b-8edd-cfc3b5998348"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/SyntaxTests.md", "file_name": "SyntaxTests.md", "file_type": "text/markdown", "file_size": 2549, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c140514e-bd64-48f6-b8f8-1acd67ece23f": {"node_ids": ["edafeb10-332d-4542-9d52-7f6bd18def82"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Terms_description.md", "file_name": "Terms_description.md", "file_type": "text/markdown", "file_size": 831, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e00921f0-61ba-4bda-b568-bd6023555455": {"node_ids": ["4e946726-3dae-4d81-9215-3af8f40519cc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Top_Level_Declarations_description.md", "file_name": "Top_Level_Declarations_description.md", "file_type": "text/markdown", "file_size": 1308, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "82650227-7313-462c-9c13-c7e7af3e2e11": {"node_ids": ["a7a1fd39-d50a-4d07-ac7d-b41b96168102"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9fbdbf5f-b54b-4646-81dc-7c6e33dde93c": {"node_ids": ["20c9c89a-9460-4c77-8872-9f23bf40e9cb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f5d156b7-b384-42b1-a52f-7fc6eb03e1e0": {"node_ids": ["c9053324-d09c-45e0-a110-4ebff6d4d027", "429a90a1-d830-45b7-9dcd-87e0450650f5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bbc735e7-c463-4e63-89c6-423346652688": {"node_ids": ["1b55cb08-93ef-45b5-a7fb-f82b1129d661"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3c806965-ab33-458c-81c5-67d8e2cc5f91": {"node_ids": ["11f761b8-7bb8-42be-ab73-98e6864e88d1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e6f57849-1cc8-4988-87be-b0c854a9b116": {"node_ids": ["73a92648-749d-4fd1-b7c1-fdf74af5a5f7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e5713057-fdd4-4b21-8a24-8fd26133267d": {"node_ids": ["27904fa7-8afc-45f5-94ee-b3877a68581b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6117e2a5-9a56-496a-8413-ff02e2800105": {"node_ids": ["1fc324e0-d4d9-442f-bb02-cdc59b796d6e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c116e219-0619-4234-9f03-35685392358d": {"node_ids": ["f06ed515-19ca-4e58-b42a-64dc8c55b31e", "b7d056fb-06db-4b43-ab67-08874b8c19a1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f8bdcfa7-c581-4202-b7df-2f0db76126ab": {"node_ids": ["4806c7cc-7a2a-4b97-a8b9-ff9282fd0fc3", "64926f2b-9b14-4e7c-94bb-9da0a6eb914f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6c25cec6-ab48-43c6-b6d4-54418f5e017d": {"node_ids": ["d3fc9bfa-1491-4a7d-9c81-20aaa3f295d7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f95e6351-1296-4cd4-96ef-0d87e63390f3": {"node_ids": ["6fc64754-69d3-4d02-bf17-fd0e0d1f2f7b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4a4dfb54-018a-4949-86d4-d93ff358abcb": {"node_ids": ["488162b9-e72e-4d95-b9b7-cef1a300edd5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "44f7641a-d637-49eb-a39f-76fc785257b4": {"node_ids": ["6cabe471-be5d-4085-bd30-f617b4f7363a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "58e7993c-96ff-4468-9371-0c5a4158ebae": {"node_ids": ["6eafd2bc-2965-416f-8ded-c50c64ce6252"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6d9d9cca-705c-4d70-a3a5-6abc5f0179fe": {"node_ids": ["c1c1a69d-6b06-4eb0-8c9c-4c26549be98e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b0694a68-e407-4d4d-80da-9a16d6801702": {"node_ids": ["461ac7ec-b794-4260-aa7d-c6c71ad48325"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "474fe770-43e7-4b48-a00d-ee46f77d93dd": {"node_ids": ["954dc33b-39fa-4388-a896-a0209ab1ca6b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "84538c01-eb63-411b-b242-38d0af1e7812": {"node_ids": ["d1a17d64-935e-4af0-bd19-95308ebc4a47"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "00995115-81fe-4552-a0ba-0d263ca0389f": {"node_ids": ["9a20fb4d-782d-4160-9366-767dc2a7eece", "960f11c7-e28b-4ae1-b019-35a9edeec3d3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5549ca23-6b43-46e0-a7b5-6a00d8973004": {"node_ids": ["348f85eb-145e-4766-bfc2-10a8b7219f8f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "01db9572-6470-4490-a6f8-d8d72e6af061": {"node_ids": ["31ae4762-4103-4b84-a0da-f35c3c7d9936", "1fc36e91-946d-4749-a76c-b6a82961315d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Topics.md", "file_name": "Topics.md", "file_type": "text/markdown", "file_size": 60419, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "be998502-ad11-4278-b67a-979814606aa7": {"node_ids": ["b59813be-51b3-48f0-ba6d-013219207d8c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Trait_types_description.md", "file_name": "Trait_types_description.md", "file_type": "text/markdown", "file_size": 1638, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ecef8314-27e5-48ab-8bb4-2e80c5287a87": {"node_ids": ["8586c3e9-5244-4a43-8994-13960cd546b0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Type_parameters_description.md", "file_name": "Type_parameters_description.md", "file_type": "text/markdown", "file_size": 474, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c6cf7d10-1b3b-4375-8ca2-eb4fc17361ff": {"node_ids": ["c4b4a431-0dac-4db0-afa4-d3eee49b7e8b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c324bb22-0e17-41ea-8eaa-b52f6521606d": {"node_ids": ["aa594b50-f7de-487b-9c3d-caf3a0023f3f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "272a4237-1e18-4f0b-b808-86376975ea72": {"node_ids": ["261f2840-102e-4f11-91d7-485db860ba30"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "24fdc7ba-d644-4c0f-863c-cd03c031fa4e": {"node_ids": ["dcffc13f-c4df-463b-a714-0c3b61ec8c66"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5fb3ba6b-5634-41ee-bee1-b174d6784f34": {"node_ids": ["a6c062d7-06c4-4c5f-a433-23324c80c638"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e453f199-ede1-4549-b9d5-f96e16f9220d": {"node_ids": ["a79742c0-8ea5-4d28-9d12-6db3456821d0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d1afb769-c445-4074-85ba-ab9b35108d79": {"node_ids": ["78d37b02-b2f6-49fa-91f7-7d12929f1a0b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "adc8ab33-6743-430c-b25c-7114f2b07044": {"node_ids": ["26b6b14b-785a-450b-947f-b23135443514"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f516c167-fa7b-4905-8dfb-311f593bad2a": {"node_ids": ["5fed9849-1ce7-4da2-b410-8600526e610a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "91202be0-40df-47cc-aa64-84a17c614d75": {"node_ids": ["d2c47d91-22ba-48f7-8fd3-9cdbd9b32347"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de566029-7180-40da-b5fa-777897d28db1": {"node_ids": ["3e1fe5fe-f24b-410f-a5a3-b3f4ee30917f", "06b5eb91-1302-400a-acb6-e758877aaf3b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "68ca7387-9afb-414b-b1fa-971bde07235f": {"node_ids": ["d7501230-cf20-4ba8-9757-3674aef47781", "6a67c42d-0bf4-49d0-a875-9af31a1c557a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "29d4a37f-ca6c-465b-a815-5b5955fa6d60": {"node_ids": ["1af58d90-f048-4db3-8d80-b0b521164b81"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "94c64109-e7d1-46dc-9d9a-17a818417825": {"node_ids": ["07912f0a-0c19-446c-990b-c8416f96fba5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "361468f2-1b62-46c5-98c5-b84e80020968": {"node_ids": ["8674ed8e-3f50-4796-af16-a3306fb312c6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e2406c72-0b13-48d0-9fcb-0a45b778e4e9": {"node_ids": ["46d67619-e9c7-48cd-b37c-be49cf74b882"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1030143a-95a4-47c2-beae-a496579eb29e": {"node_ids": ["d1d71578-b9a8-4ec5-9ceb-e86bb5e9ed47"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "37edcb88-1125-4ce4-ac35-f0c17986943a": {"node_ids": ["29fcc009-954f-45d4-8a15-ed8fd514e7b3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c6112bfc-4c50-46f2-ac01-8ec96859ffac": {"node_ids": ["b7c7e773-888f-41fd-9b0f-26a4a45ce02b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "39dffa2c-2b88-4c7d-a570-12402a8ef90d": {"node_ids": ["4d67d6b4-42e4-4205-9350-8cf29af526b0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f225871a-3301-49f5-aa47-e537a9bea192": {"node_ids": ["27f5600d-837a-42ea-9636-8ef2c65f7496"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "97c0898a-d8a8-411a-9a7a-c83773f967d4": {"node_ids": ["014e6f0a-da78-4af5-82df-e973de8213cd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de2826bf-768d-4797-9f69-a52677664c3d": {"node_ids": ["d17c9382-7537-4ff1-a69b-fd78ea32e180"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f73f188b-9c30-477c-b1d8-8e2a8b7f7b34": {"node_ids": ["b8d08f32-08b5-4741-8456-c3c8b18ebc24"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "07f0540a-3881-4799-9c57-84674e069fbc": {"node_ids": ["2cc76a36-8d65-4638-bb28-a6b860725fd5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b4f1c2af-c205-4d67-b4b6-49b86c27b36e": {"node_ids": ["3acc4864-b10b-41aa-a56d-dd709c6495fe"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0c7670f6-4d4f-4cf6-9917-9e7b916940b1": {"node_ids": ["b2e16cec-b755-4525-be6a-6d9298b0b5e3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7b18da3b-f1d5-4270-8433-2bda266df9e3": {"node_ids": ["10b2a4f5-59bf-41e9-83aa-66eda05c0b2b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "68243be3-6e9e-4ccf-8b74-5b9caf34eb40": {"node_ids": ["8077592a-52c9-4e9f-a18f-805738a9f255"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "336bf07d-3a85-4438-a104-26fe75cbc519": {"node_ids": ["601b8f3c-72e4-4f5c-85f6-d1dfd0987a44"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "62e896f9-07e4-4c68-a20b-30b33118a8cd": {"node_ids": ["aaebc064-5ab7-4a1f-a391-4a4c0e199a74"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "97e677cd-ff91-40c4-bbbf-667649ef0085": {"node_ids": ["0216a4d9-8096-4703-9d61-df5f4684cb8f", "58577188-9087-4b23-8930-873ab1159a52"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f4409bb1-ad0a-4fcb-9de7-99970c08306d": {"node_ids": ["3cd239d1-f70c-4890-84e3-86db363a54c0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a114a3f6-6adf-4277-9c9c-b3f98d965aec": {"node_ids": ["fb793c38-202e-43f0-8fa0-6a927751a19d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f09d8c91-6fef-40a3-87f5-df6b367c9f47": {"node_ids": ["34ef16fc-1621-47c7-af7a-275fbcaacbfe"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "521bf329-12d3-4b09-bc5e-db921bcc1568": {"node_ids": ["3f74daf1-46e9-4641-a776-7f1d115bbcf7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf9fa624-c442-4910-9c76-9202151ad1f7": {"node_ids": ["8a73df20-799b-4e7d-9008-f61257891952"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "316747a6-8574-4b16-b75a-7065667b6426": {"node_ids": ["fd8659bb-2a73-4a1f-9344-57bae35aacc5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "85513348-7c69-4887-a70e-d774c1cc9696": {"node_ids": ["20b602ef-5660-4f47-976e-8f6de9ae04dc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "63deead1-4934-45c0-b454-b43418a89a69": {"node_ids": ["6771a582-5c30-4221-b694-da22b94c43e0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4296752a-5fb1-4e62-bce6-9b863c87cf1d": {"node_ids": ["a82c8c13-a929-448e-bf15-7c2ad06636be"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b3d92c7d-bfab-4218-a979-da817c8c886c": {"node_ids": ["7e75e1d0-79c3-4630-b4bc-552aa48ef0df"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c3503804-e20f-4a73-95b4-6352ae9cca19": {"node_ids": ["61497079-eade-478b-befa-4beecaa2474e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fcac481d-8707-44e1-8f82-4671393f885e": {"node_ids": ["5d7321a8-da1b-433c-9b31-71d2b489846c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d3534ba5-4f16-435d-a65c-ada22090c572": {"node_ids": ["c5a8cbed-67ec-4bef-b83b-824793a460e4", "903acb51-a38a-4bb3-8e36-0c314a004e39"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "928fa89b-066c-403f-9ac9-f6e603bbce1d": {"node_ids": ["1d8012c7-b2cf-466c-8203-ff1a9c898773"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7366af7c-34b7-4f13-b9af-5dbb3f72ae91": {"node_ids": ["f435121b-f821-412d-a725-99e7fb10567e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "159ceae9-1828-41ca-98b5-cc0912ec1a2a": {"node_ids": ["d668617c-f2e7-4e32-8143-1add3f6e3c27"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f2ad0839-7d1f-461b-b4ed-7ec79a4b32a0": {"node_ids": ["76a8bc71-e272-4892-b9b0-55accc2f9c4e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d7fa7d69-629e-4e96-ba42-97ad96c7ec6b": {"node_ids": ["e98f159e-8edc-4126-af50-ffbbb317a2aa", "df2d50f0-3f04-410e-9824-4e09c7acff61"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "05a81a1f-cdcf-4156-911a-563e2c0355d8": {"node_ids": ["d6d3f303-0054-40c2-971c-b976baf695af"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "78c4369f-52b6-409a-b1f3-1c7185cae957": {"node_ids": ["5231641c-2003-48b5-9fbd-9f2185c0bdbf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c19db938-2b78-41c0-b1d6-138d673d90c8": {"node_ids": ["9a35f282-dc78-4033-a77e-eab92fe50f5e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b63fd3d4-017d-4476-bfba-7843663731df": {"node_ids": ["f3932bea-7611-48bd-98f3-da622ab71cb8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2146183c-6988-4989-bb0e-44b202cf84db": {"node_ids": ["f9687b30-b97d-4fb3-a059-3db301edc02e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1f63e088-db58-40e0-a0e8-bb02467ba6c8": {"node_ids": ["8f5b1109-f0b8-4b7b-ae0f-a771ce202542", "e162e284-b42e-44e4-8af6-059bb04955e1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0fdab85a-8b1d-4fb9-a5cb-f924e81813ff": {"node_ids": ["93934a6b-5619-4389-bc16-bdb09684d63d", "9b472a98-92b8-4c68-910d-57f3e20b26cb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ef32bb7d-5293-4e0f-8f93-547d2a7f5bc5": {"node_ids": ["0b8b947f-5e1d-48f2-84ef-91360b4f737c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1235b604-e3d7-428a-a26b-4dfac09f3bda": {"node_ids": ["cc214425-62c1-4756-957d-bc975d61f32e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8bfed476-cc99-46ab-8e28-cc0214dd24a6": {"node_ids": ["5ffb24fa-5799-449e-a545-ecd5ee9a3657", "67fb4d0b-6005-4273-a33f-55698f014ff9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fe46ace9-1f69-4ab1-b9f3-5b83c03bfb97": {"node_ids": ["f2ea27ab-8706-4f92-8104-9e3df548f39d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "68334d91-a857-416c-ab27-912138f3ce63": {"node_ids": ["7ad1e712-e0c8-46f4-862d-5567cf12b6b5", "04106fa5-ae49-49ce-bdee-f7f750c13799"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "18d86c7e-d50b-42a7-820e-c48a45f411d9": {"node_ids": ["8c46e2ed-f411-45db-ac78-22b0f5afd177"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "67a30c90-155e-40d7-a2ff-96cdead6c272": {"node_ids": ["575f68f5-43c6-4ae1-b9f6-c840dd8ba112"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "462ff9d3-72df-47de-b9cf-034cf572e2f1": {"node_ids": ["b3e1bc4a-3201-434e-a824-f152c66b807c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d88905da-5578-42ff-a73e-4ab42110639e": {"node_ids": ["6d030643-fd49-46b1-b663-0f0578f372aa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "967d5ff9-6e6e-4a64-831a-509690e70ba2": {"node_ids": ["2ee341c7-c112-46bc-a8fe-56dc49cc44a3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c3ebd2a1-3153-4aec-af50-16d89f5af1e9": {"node_ids": ["4e64d332-cb75-4ab7-95f9-e7b2753d4512"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "17143227-4ae8-4193-aac3-6cc76caac9f8": {"node_ids": ["9186fa57-b856-406d-904a-66a6e1441ae3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a277f0d7-21e5-4e0a-bb0e-af5331bbbe4b": {"node_ids": ["8532b8c0-eaef-494e-955b-1993c9759f0f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fa68d2d0-e061-4fd0-b571-222be1d3acb4": {"node_ids": ["0d4e0313-c3e5-4df8-bfaa-a8fc3780d4ba"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f833de2f-6e4e-4d96-a776-e19304926723": {"node_ids": ["e72301cc-d02b-4f74-8f24-d051461a1c5b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "41fb3893-c4d9-433f-820f-f6a470cc7e03": {"node_ids": ["9f6427a2-514b-4280-95e3-b30ddc2ac6d6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "12750cd8-e4d6-4167-adf2-9967b5321d88": {"node_ids": ["6074be58-5aef-4152-9cfc-5f5009b24b81"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7e1c1ac6-4582-4532-b0b4-1639db44dac8": {"node_ids": ["5a2434f2-8f23-4d53-9dbb-d00d35fd1849"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1d4dff0a-6763-4028-9f56-bf44275347bb": {"node_ids": ["5aef22fb-7eda-46d7-aeec-a0c305a9f884"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fecdbd81-8f7e-42f1-ae6d-a5eaef0fbc1a": {"node_ids": ["eea21cff-a29e-4eca-93fe-1032b57f2d4c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "510f4254-fbbf-4c4a-aed5-5088a5f6ccf4": {"node_ids": ["b015159f-6cc0-4976-91b4-5fa0f867ad1f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "981dd2e9-6eb2-4dd4-aedd-00f441c2952d": {"node_ids": ["626abff2-5deb-42e2-aeea-55e35f21557e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "17e85e88-e19b-4187-a8b2-90878abd6755": {"node_ids": ["48c36fe9-f201-4b7e-b028-bd2387f744d8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "60d57dc1-204f-4d4c-b2ba-2453c93efdcf": {"node_ids": ["5594af42-aa71-428f-bf41-c447375f8027"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5c313b74-b012-4f41-8b1f-a0ff6685f1b5": {"node_ids": ["99640b03-58ae-4773-868d-9ea2b2a0b17e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de49d5c7-ef37-4732-b126-5c3172f7714b": {"node_ids": ["cc8615f2-fb57-4524-a217-8952f81f11cc", "9ac284cc-42fd-4035-923b-e628bfa1552f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "01190e89-46dc-4721-ad43-8d2d7e45dad7": {"node_ids": ["c30ab9f8-217b-4a85-8c39-5f02387076e3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e8f7a97d-9fa6-4e03-b5a9-94975571a554": {"node_ids": ["715035a2-2a4e-43b1-b0d2-dfb1fd8aa3eb", "2a0d367a-691a-4f5e-8a00-1956dde92de8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e755e4e5-0568-4484-8118-b6392f1278aa": {"node_ids": ["f5990780-37f8-47a9-a7ff-bf4c9fe868c9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "80bf8ab2-d4b5-44dd-8f16-e7db6f201947": {"node_ids": ["7e3cddf6-7be1-4f75-8799-412b446831e8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9afedf62-17ee-4c31-9fda-4c8ba703245b": {"node_ids": ["86edd3e0-d62d-4d0e-8499-c4302a6a3f8f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "205b8b09-b60e-4046-8984-392328c916d5": {"node_ids": ["25741ada-a801-4a5b-b64d-754a9659cd51"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2e2d016d-7a3d-4629-aaab-8113d5ae5358": {"node_ids": ["0a13dab4-ccad-42af-9286-80fe897c7994", "922990f0-a2e8-4f7d-805b-b74f8f81cf94", "429bbba2-7e2e-497b-aed7-6dd3cb42f088"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a2314912-7ff7-45c6-9d10-42e6279088cb": {"node_ids": ["f8a0e01b-3faf-472d-ba63-7828edaaadd2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types.md", "file_name": "Types.md", "file_type": "text/markdown", "file_size": 188405, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4cf4e5d8-9d0f-4da1-920c-14110125411b": {"node_ids": ["2bde7892-cfe1-4bac-bf4a-f6748357d975"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "767b7250-6a40-4cbe-8f84-154d2576c3bb": {"node_ids": ["2be55503-ddcf-4fe4-acac-9bb3aeda409d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "639dc327-16d6-4f4c-8cb5-782f9788ce6c": {"node_ids": ["85a07487-4ba2-404a-bc89-c7ccdbdcbb34"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8787dcf3-ef10-42be-98e1-8d015d660e62": {"node_ids": ["b0843219-7487-4050-bc7f-34ef866ce6b1"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c45a5175-68fb-41fc-b62d-3f75d1144280": {"node_ids": ["26225988-5af7-4aae-8856-723ecbc5e3f0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "45e9b28b-a3ae-411c-99e4-e2e502fe2bb0": {"node_ids": ["0f1434b8-505b-432d-beeb-75ff79fd8d26"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0a5219c4-0ca3-4904-914a-6868d880299e": {"node_ids": ["e4885781-b8c8-4319-9d29-f98505be5e44"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "de83084d-bb15-485e-94a9-3e0298eee973": {"node_ids": ["cada206a-8803-4f46-b016-4263bb55a914"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c0670ee6-dd7f-4e25-8d0d-bb665ac99a09": {"node_ids": ["33d59046-ecfd-4004-a3ba-f9c6397b020d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b2733b70-9120-4ea6-9dd9-c8c76791259a": {"node_ids": ["2605b907-da9b-458b-b108-3a2c4a3f00ab"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "61bf4f29-70c6-49fa-a7a8-889435e051c1": {"node_ids": ["5dcbad31-d8c0-46fa-a403-a5135e159326"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e31e357a-3fba-4eff-b641-cea1362398e3": {"node_ids": ["1b801e78-98ac-411c-86c4-24fdc159c2fa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8231d588-fc2b-479f-aeb7-c181ccf49659": {"node_ids": ["69528389-7762-47f5-9206-39efd9034b90"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "71adf83d-2727-497b-98c4-4d8b30f26378": {"node_ids": ["14503817-264a-4e10-a69d-bdba7b99a947"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ecdaa948-0ede-440c-b58c-9b0e87de4def": {"node_ids": ["1272c6d3-e577-43ab-aaf4-d09f490b4d8a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "50e7bc77-bccc-4302-ad10-c53e4ad92ee3": {"node_ids": ["7eb6dd53-cbe2-435f-945c-86cff08e879f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b6752a87-e523-4e90-83ee-572f7b0bf5f1": {"node_ids": ["8fdefffa-adce-4e0b-a02d-5e4573726c4f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f676f1e1-8b54-40da-9c40-260f38d84e28": {"node_ids": ["9fb4302e-3181-4ec8-9491-f16333f7cf45"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_description.md", "file_name": "Types_description.md", "file_type": "text/markdown", "file_size": 13437, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3dd4ec9f-ec38-4284-b2df-3a3a54a78353": {"node_ids": ["85a8ffb7-b128-4b4a-a2f2-dc1bd19fdfd6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c5ff8dfc-ddcf-4bac-a908-d79f876b9373": {"node_ids": ["9eb0a1ed-0b62-46fc-b030-95afc58a800e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cffaec5e-dc72-49de-831c-079ce7de5b33": {"node_ids": ["411df6b8-b5a9-44bc-9308-c19c39b7ff5c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cdb3ea36-8bc7-4b6e-92f4-e7dde9ee0b61": {"node_ids": ["b02154e7-6abd-403d-abe5-743cf2093e5b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b9ad47d3-3bd5-4ff9-a165-c154ecc6555e": {"node_ids": ["3add3715-5cc0-411e-9a03-7e866407d017"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "307ec46d-bcc2-4cc3-9c0e-300f336f2fc1": {"node_ids": ["d2468249-5d26-47e8-8eb8-6d6be21f4f3f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0a2fab9c-355e-4084-8503-32bae23f8fbd": {"node_ids": ["42572148-d236-457f-b1db-2adbf5bbc63f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4b6127e6-e1a8-45a0-bf15-70eadde08e7a": {"node_ids": ["9708f06f-7773-4d18-99b7-4b5e2977f75a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "94466290-b990-48fc-a3cf-57b3f0e4f356": {"node_ids": ["c0f932ee-c116-47eb-8781-b6634f2f2651"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ae61b928-6756-4a98-be24-2ad9079a9d6f": {"node_ids": ["57b820fa-ac5d-4542-aed9-2e3fc6e593d5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ce8f0a24-5099-4e73-b11f-8139c55dba1e": {"node_ids": ["41003876-0da2-4e6f-94f9-6d431ae631b9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "aa9ef2e3-8025-4242-87a3-d76128bcbece": {"node_ids": ["c9da0cb7-f3b9-4869-a873-ff98972ead16"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "efe2bd23-d880-4a2c-8ef7-c0d738774120": {"node_ids": ["dfcd8c5c-d44b-4ceb-acd2-45b758ed491b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "39cedf47-b2e2-4840-99a8-0be4f8faae76": {"node_ids": ["d93b4fe3-4b80-4bb5-bc45-ac15255c66e7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4c0d6162-64bf-4944-b58f-e11dad2084ac": {"node_ids": ["80b847eb-3dfd-4a72-adaa-23bffa7c5eb2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_grammar.md", "file_name": "Types_grammar.md", "file_type": "text/markdown", "file_size": 1974, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "31147310-dd52-488f-abd6-6a690f146712": {"node_ids": ["5dea3c0a-68d2-44be-be99-eefd77ee8ead"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Types_that_stand_for_other_types_description.md", "file_name": "Types_that_stand_for_other_types_description.md", "file_type": "text/markdown", "file_size": 750, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "eed7b529-130e-4787-aea3-1b6650b97ffe": {"node_ids": ["94660ef5-3848-4c01-815c-a39e1bf5d3a9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unary_Expressions_description.md", "file_name": "Unary_Expressions_description.md", "file_type": "text/markdown", "file_size": 459, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a94f3e09-47f3-4306-a8e8-e0affa673ca6": {"node_ids": ["fc59bdb0-763f-4471-b5bc-7c6121082a7e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Unchanged_Expressions_description.md", "file_name": "Unchanged_Expressions_description.md", "file_type": "text/markdown", "file_size": 1375, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "131aa035-a9c0-46db-be88-f0e83208082f": {"node_ids": ["636b2b3e-6684-49d8-aa2b-5cf902ab7e05"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_and_Call_Statements_description.md", "file_name": "Update_and_Call_Statements_description.md", "file_type": "text/markdown", "file_size": 826, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "779ebe71-60ee-4ebb-859b-bed2419039d0": {"node_ids": ["52220fe7-562e-44b3-9278-963480aa9472"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Update_with_Failure_Statement_(`:-`)_description.md", "file_name": "Update_with_Failure_Statement_(`:-`)_description.md", "file_type": "text/markdown", "file_size": 2600, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "55dc0d23-4f79-4de0-a552-fd4e3f28cc95": {"node_ids": ["cf24e101-a745-462d-8c22-8e86dcc58aab"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "42a1911a-c31f-40a7-8304-6f0b09876ed7": {"node_ids": ["034b8747-b32a-4aff-991a-0d82bdd54d09"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "66e0b950-44af-4824-9062-9130be86101a": {"node_ids": ["dd7cebef-df59-4819-b5a9-1742cfec7bca"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "81f11a49-6e90-4560-8def-ca3bbbb174c3": {"node_ids": ["56d2b3a4-a250-498a-a921-a0b5a24ca348"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c901ca2e-f784-4414-8b95-1b6ebc9d3ec9": {"node_ids": ["a18fe188-1c03-4a6f-9604-c9720cd4447b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "14f111b0-b213-45d0-9492-dc787c816eb1": {"node_ids": ["486271c6-3519-447d-a58a-31fe96367426"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ea3103f6-c4a4-4322-82f2-48e9e7a52ec1": {"node_ids": ["0a5991f4-5368-4085-9572-f1c29b7d1cbd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "20189416-ab72-4333-a547-8e392a5763d0": {"node_ids": ["f17e1255-f947-40cb-940a-bfbddedebbdb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1cbe01d3-2570-478b-850e-3575cceab0e4": {"node_ids": ["5d5298eb-8779-4769-8e0d-3c6a8cf98598"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "99b922f7-93aa-42fe-adb4-2bd704d77882": {"node_ids": ["f31931cc-4f9d-49e2-86db-190adb4a6b70"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e5b7a0e8-8d26-4956-af67-1b389e915687": {"node_ids": ["4fc21fbb-5376-4497-8d42-99c68cdf863b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "692361cd-f270-4ccc-a259-891e9ea1340b": {"node_ids": ["067e0a74-28be-4389-8d6c-0ea328efd9ce"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cb18fdf2-706d-4cf3-b53f-ccb3480a40d8": {"node_ids": ["bfbe2203-c2fb-4b96-986d-4a0ef3bfbff4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c07f96be-c3d2-4dd8-b639-05f6d734b6a5": {"node_ids": ["608e282b-ab48-4deb-807b-486b98093fa8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7afd82ea-e6a1-432d-a165-df88e58b5a0a": {"node_ids": ["ee5b201a-1e16-4997-b252-103b4b9e64f5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "61cc164e-c27d-4c75-8c37-e87aed2da76c": {"node_ids": ["de169333-3fed-4440-ac80-62841f8a941d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "962edbc5-0b6c-46ee-a033-e88bf8033d24": {"node_ids": ["b087c2f7-8db7-4701-b2de-34c78a5b5c02"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "156ef9dd-49ae-4f37-b4cc-c8160caadf55": {"node_ids": ["456772ca-16b2-4144-ad26-971aca9c7b50"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d0f1e44b-2ec8-41be-9e98-b24df78fd1df": {"node_ids": ["cb71c7e4-451d-469f-9278-fc08f3ea5463"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7a4abe2e-f4b4-4daa-8dd8-cd9ede469a94": {"node_ids": ["7ef2d278-eb81-492f-bdeb-f1d4b0867d53"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b9e3e7b8-2f29-4f6d-87af-1840b01f1cbe": {"node_ids": ["1b144891-3462-431b-8f0b-efcaeb4bbb27"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4862ddeb-5783-4ee6-a1e3-0a19335fc024": {"node_ids": ["c867d0fe-a986-4cce-905e-a9d12f95f661"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8dac5fb1-d597-4138-8b22-453846af2fe8": {"node_ids": ["7963b6bb-1344-4359-9379-c19251370d3e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d398e272-2de2-4c5d-b759-0979bf1423e0": {"node_ids": ["54639d29-7d53-42bd-be6c-bdd77c2c986f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bfd9870a-646c-491e-957a-ca7962efd698": {"node_ids": ["43dabf61-d97f-4304-b98d-ac408cf99223"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6f09081e-7ba0-43f1-be73-6993318d1c8b": {"node_ids": ["1b3fe7a2-352c-400f-b554-519e9957bfa5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a7c80cc1-3e08-47b5-9e1c-3eab0e9a3d1c": {"node_ids": ["11712e52-41da-4974-9ed4-749e2ba331f7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d8e6ed71-f4d6-4b82-a999-8c550bdc5437": {"node_ids": ["6752744b-5c77-413d-be9c-5a596c9e7465"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d04afa5e-4514-44d6-b040-79f7b7688adc": {"node_ids": ["b0b1c9e8-10d7-47d1-8c77-08f0b07275bf"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "baf8c241-724f-4ab5-b86f-ab440560ba5d": {"node_ids": ["e226c319-f12f-441e-9aba-a86c33a915c4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5377d929-8d3d-4a0e-abe0-fb8ebb492d53": {"node_ids": ["6e16f41a-172b-49e6-abe6-c3030d7f23ab"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9a070ada-10b2-4516-b388-9f13c0953eaa": {"node_ids": ["16b58216-691c-4621-8ce8-8a6a97168e65"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "afe1e043-3f92-4df6-9421-597b68356f11": {"node_ids": ["ce641b0f-3469-4e06-a624-d2f8171d9823"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9c7bbd32-64c2-4eee-a147-e54a8b6caa63": {"node_ids": ["8ba94a4e-a25d-436a-a415-edbc9b20704f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "43f7061c-ed72-46ec-94f1-bab1ac42ecfe": {"node_ids": ["2bc9b8bf-4aa9-477a-82c1-cb6fe91065f5"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ec353e76-8c2e-41a0-869c-d0f2ff16a3a8": {"node_ids": ["b4bc65ea-8fc0-4f86-8eb0-cb8b98e02a5e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "25f94556-72be-46a7-a7c2-d99c4ebe633d": {"node_ids": ["fe5d221d-5b5e-49d9-af7c-5bf8d0cc15fb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "09936982-5c83-4403-914c-c1147dc97e5d": {"node_ids": ["55490801-9cae-4ce7-a189-7e7ff152a33d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "98224082-c00e-4b84-bab1-35d43ac2ab6d": {"node_ids": ["cff496e1-c045-4992-8a5b-e1a80c6b8f35", "c9f56a8f-d9dc-4f12-8709-9369613bbf71"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c8eccd97-6f2d-46f0-9fdc-75e9088170c6": {"node_ids": ["538f2613-f738-452b-9d7b-4ed4b8cfe70e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3095fa76-fa8b-4ffa-9538-6fa38c07999d": {"node_ids": ["45345f59-fab0-4e84-a4bc-b70fdbea4bd8"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "85b46e10-6d42-4a79-9098-f4cd80ab0648": {"node_ids": ["c3bfabb1-e505-4720-a30e-93f1bcb82cf7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2e9e8479-d4d9-41ff-9d88-29ddf89fd35e": {"node_ids": ["fb5df875-a300-4ab9-9278-8ace48414315"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4241b810-872d-4569-876f-a943180e53ed": {"node_ids": ["3fab13e6-ddba-4499-8ecd-0787f2672125"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c8e8419c-7ba1-4acf-85a6-5ee1980b9aa7": {"node_ids": ["56d3326c-2f5c-4824-a6dd-f0efd98fa368"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "035606b4-544b-48eb-ae8b-5f52518f4602": {"node_ids": ["e6509348-2659-45a6-83b9-cd5d744205bd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3535fc4a-d5be-4463-a129-cb93f6185e99": {"node_ids": ["dc4fc29a-62ce-4c64-89ee-5c1f46653d12"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0cba96fe-8586-4df5-a11c-28842624c59f": {"node_ids": ["39d7bd99-83cd-4c13-929b-20b6d940e92e", "3aa1cfee-0a8b-493f-957c-9e8e74a171a4", "9b2469f2-274c-4da2-a9d3-44a16d8aeab0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "40e03306-1774-4bf8-8a92-15b27af18bf9": {"node_ids": ["d325947e-c66c-4e1a-9a35-d3e322248f75"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "058bae11-91c1-4669-942f-9186e97f7698": {"node_ids": ["00313ab9-21d7-4d9d-96f9-0626d9047edd"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "43922029-82b1-4fed-83ac-2214cd395e0d": {"node_ids": ["5f51c805-7d29-487e-ab41-a9822d6658db"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "78f2e61a-9210-409c-a56e-1afbb3e419d8": {"node_ids": ["a2e7f045-0599-421d-bad8-5a7b9f2ed7b3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "da4f3104-87ff-42ec-8a20-c72079600f9b": {"node_ids": ["a2af6627-f2bf-493c-b69d-ae5cf50fe259"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "26c9b5c6-402a-4078-8221-78b473855541": {"node_ids": ["327d85cc-4165-46dc-8a63-6141420ab7d2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6fc2bfae-574e-49a4-8029-c3a4f3f02312": {"node_ids": ["670df57d-e5ba-4984-959a-042e4bd03c38"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9ae00fe7-4464-4c26-bb1a-ba09a54b4462": {"node_ids": ["aae377d7-9e7d-4343-8389-290001934a0c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4356cc9c-e479-4e4f-b678-8bc32717836f": {"node_ids": ["acee59a3-77de-428d-8eca-f995569c1025", "93254a38-7dbd-4079-987c-7eb666a7acd0"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1e448c4f-45b8-41e3-820a-265f4cf291db": {"node_ids": ["4398c950-d0a9-4b24-8288-b22a12228b21"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f1b7d0b0-635c-4086-8a8f-b2ca020d5864": {"node_ids": ["1aa78d56-e96c-4e2d-838c-7aa36b8db75c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ccc3fec1-8090-4fb2-90c5-091c1d793674": {"node_ids": ["c70426e3-adcb-4a33-a007-85c5a2bed133"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f383d7a5-0806-434e-b9bd-9ecd77b28972": {"node_ids": ["014050ab-2d54-4427-945c-0f8c9842ba3b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf2f627a-410c-4ffe-bf1b-18d3b2267ffb": {"node_ids": ["8c2f9c76-93cd-4b70-a58b-0d8dd14e0489"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b051ff89-97dc-4642-bf49-f7eb24b7f04a": {"node_ids": ["a9a763c2-8c54-4981-ae4d-9de5a5cc00f4"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a6f66eb2-0f1f-48b9-9e53-bbc0ebc9bba1": {"node_ids": ["9572ea8b-52b0-4522-8762-7012971a2028"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "23765350-7fca-4482-83df-e937f03efada": {"node_ids": ["1bc6dd15-00ed-4a23-908b-26e0dd834f6c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "52a44651-3ac0-45d6-b516-ae5de5f2881f": {"node_ids": ["445aba9b-ae03-4655-9dcd-f45846757b20"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6543837e-54b4-4a98-9f75-c8cfb1ad3773": {"node_ids": ["ad9e6521-011b-40e1-b060-2aa3222241c9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3f7605d3-4035-445c-a16e-97d6353b9412": {"node_ids": ["4cf2a539-3bf2-45a4-8792-e1d955cde729"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c3546a68-cee5-4cfd-8bea-646f4790a18a": {"node_ids": ["a9679332-87db-412d-8a09-906590e17334"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "85b8130c-dff1-4718-86b9-77f1d6ee4965": {"node_ids": ["c371639a-3374-4997-b988-f03cd763e796", "14437062-602f-4b3c-b7af-73a424b67f30"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "925bfe0e-cd31-437a-80c5-fc28a3e1fe85": {"node_ids": ["81c6e890-e248-4ccb-a329-2fda2c28ee1c", "882ed4e7-1079-47e9-9f86-b00e1748ffdb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a6551b08-86e2-4f1a-bea4-34bbcf0c5a15": {"node_ids": ["d24e0ceb-4db5-4ff5-9921-bcd18e5896f9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3ef8b3ba-56e1-45bb-9e8b-4dd67cd21d8c": {"node_ids": ["5ca5dd57-f0eb-449e-81bb-436e2b37bc4f", "781b552d-227a-455f-aed7-a82cca9dbe06", "d78b9269-6f52-41a0-906d-795dbd96f5cc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5ba18dce-aba2-4b17-8f87-9983330f0467": {"node_ids": ["a4aef53b-9c63-4901-8ad2-a4b737191a24", "2eebe9ac-a5d5-47e7-af8b-cd205ceb5c1a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0c346b92-0e8a-41c3-83fc-bee7182d0f1b": {"node_ids": ["1a8077d3-2f4f-4674-a9fc-a4306e0fbb77", "e11a765c-0d6d-43d8-b53f-8e7b191d87a6"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e9021f73-844f-4211-8bf6-247bd4f61fea": {"node_ids": ["b295623c-9726-4ad2-87ca-eb90300fff0c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5763e346-9cb4-40a1-9428-af1e07d0f65c": {"node_ids": ["873e1a60-3dc8-49d0-bcc3-953bc6cd294b"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/UserGuide.md", "file_name": "UserGuide.md", "file_type": "text/markdown", "file_size": 143458, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ac6f3569-1e53-4a82-b341-c87fbe8f269e": {"node_ids": ["f01ecadc-d380-4fd3-a7d3-c7be51e44ad9"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ecbc5010-745b-46fc-93da-b353023212cd": {"node_ids": ["41fa639c-d2de-4d52-9621-09a477ff8c32"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4f67c5ea-9c86-4e17-953c-a8f1d89c93da": {"node_ids": ["1b1f5aef-85a5-4b1e-b7d1-6261cc6b548c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e5581563-0d73-402c-8c09-3f58a52974c9": {"node_ids": ["dbd86541-5069-4209-9b59-2189106be92e", "586d9b5b-bc0b-4713-8221-01b5779571ac"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/VSCodeIDE.md", "file_name": "VSCodeIDE.md", "file_type": "text/markdown", "file_size": 8765, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "45220eb8-b17a-4508-a605-4c1d3ca3364b": {"node_ids": ["88fb84ea-d2fc-4f85-bd50-44ed82fc4d04"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Variable_Declaration_Statement_description.md", "file_name": "Variable_Declaration_Statement_description.md", "file_type": "text/markdown", "file_size": 2369, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "ab00adb2-a47a-4c15-98de-8bcbf7d76b65": {"node_ids": ["d0b8f101-92b2-465a-a38a-0f9dd7bc37ce"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/While_Statement_description.md", "file_name": "While_Statement_description.md", "file_type": "text/markdown", "file_size": 2904, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "af2e03b1-4b3a-436c-8bb5-9d9a89e51c04": {"node_ids": ["1123ecde-86ec-43ca-bf4a-f21c7c45e65a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statement_description.md", "file_name": "Yield_Statement_description.md", "file_type": "text/markdown", "file_size": 1062, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "14fa417f-48aa-437d-abf0-8fdf2082e526": {"node_ids": ["6f63a470-5575-4d08-91df-323bca8fcd4f"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_description.md", "file_name": "Yield_Statements_description.md", "file_type": "text/markdown", "file_size": 1061, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6bf3b90a-4754-4f3e-be24-b5a5e820c904": {"node_ids": ["c3211808-78e8-42e7-bd15-99e8e5ec92b7"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/Yield_Statements_grammar.md", "file_name": "Yield_Statements_grammar.md", "file_type": "text/markdown", "file_size": 152, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "b87e3821-2fd3-4813-9b53-5ecf6494fc6b": {"node_ids": ["e1a453a5-9359-4009-84fb-a2909fae0329"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/`this`_Expression_description.md", "file_name": "`this`_Expression_description.md", "file_type": "text/markdown", "file_size": 250, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e0e4d2aa-0f6a-417e-8561-416f84c65d5a": {"node_ids": ["ea31c832-7744-496c-80a1-09036627bf14"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/abstract_types_description.md", "file_name": "abstract_types_description.md", "file_type": "text/markdown", "file_size": 1729, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "1d883de3-40a2-4e2d-944b-a2a9f8d7d8f8": {"node_ids": ["6c7cc860-7702-4ecd-9f22-e6cd1eecb452"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/argument_list_suffix_description.md", "file_name": "argument_list_suffix_description.md", "file_type": "text/markdown", "file_size": 651, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a62b6be4-bffe-40e9-943d-1677c315572b": {"node_ids": ["0889090b-6e95-4745-aa8d-54912fb7c563"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/augmented_dot_suffix_description.md", "file_name": "augmented_dot_suffix_description.md", "file_type": "text/markdown", "file_size": 590, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f1c4f0f6-9ae0-4964-8f09-807596f8ce82": {"node_ids": ["011a797a-26c2-4989-bc84-fd094c500037", "3e027dc8-7af8-4d4f-8bd8-183aeb26e240"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/bit_vector_types_description.md", "file_name": "bit_vector_types_description.md", "file_type": "text/markdown", "file_size": 5942, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "0736c0e3-9dcc-4296-ba51-01c3960d5f5b": {"node_ids": ["a32b7d90-e763-4e24-b40a-e4268baa4619"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/booleans_description.md", "file_name": "booleans_description.md", "file_type": "text/markdown", "file_size": 1487, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "07875832-6012-4b2c-be23-717cafae3638": {"node_ids": ["8716e4fb-494e-4564-b457-cc0029093f1d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/case_and_extended_patterns_description.md", "file_name": "case_and_extended_patterns_description.md", "file_type": "text/markdown", "file_size": 2535, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "31e36b5e-cd51-4e22-8cbc-a33ba694adba": {"node_ids": ["cb089af5-c4dc-4c8c-94fb-bdb6082d6e8e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/characters_description.md", "file_name": "characters_description.md", "file_type": "text/markdown", "file_size": 3177, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "7d05bafa-599b-48f2-9f2f-e05b93d7b10a": {"node_ids": ["1322d6ea-75b3-47de-969e-1c8259388e2d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/chunk_dafny_manual.py", "file_name": "chunk_dafny_manual.py", "file_type": "text/x-python", "file_size": 2679, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "acf0788c-c9f2-4353-9781-6593c1f60cf3": {"node_ids": ["c1f54705-fe67-4b30-84df-4020ad79310e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/datatype_update_suffix_description.md", "file_name": "datatype_update_suffix_description.md", "file_type": "text/markdown", "file_size": 1936, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "e8bccb3e-e780-402d-9ec6-cff775918578": {"node_ids": ["36d00718-5489-4d12-9574-660f3c01b6d8", "7df13e1d-c51e-4e78-9025-816bf60e607e", "035c784d-2c59-4226-bfd2-d768b9bf8a71", "b0ff9f2e-370a-4e96-bcba-8dba9c3144aa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/decreases_clause_description.md", "file_name": "decreases_clause_description.md", "file_type": "text/markdown", "file_size": 10248, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "5037c7aa-19e6-4150-aff4-fc39138524a4": {"node_ids": ["6b55efe6-a667-4667-9500-ce458dc84e18"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ensures_clause_description.md", "file_name": "ensures_clause_description.md", "file_type": "text/markdown", "file_size": 980, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "27f9eecc-bff3-4ddf-aba0-59b523b016d5": {"node_ids": ["34708d25-6ec0-451a-9837-9d09cb107924", "644a01c1-ddba-4f5c-a744-facf9aaec141"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/finite_and_infinite_maps_description.md", "file_name": "finite_and_infinite_maps_description.md", "file_type": "text/markdown", "file_size": 5465, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "2fcef851-2c54-4e61-8e40-bde6b4026a4e": {"node_ids": ["f3d122cc-8431-4f83-ba16-8b5254b5728d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/framing_description.md", "file_name": "framing_description.md", "file_type": "text/markdown", "file_size": 2282, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "c66bab98-a7a0-41ac-b717-3cfce2e25f78": {"node_ids": ["c2b8da66-754a-4b31-9e30-17f4e5d3153d"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/if_expression_description.md", "file_name": "if_expression_description.md", "file_type": "text/markdown", "file_size": 2139, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "fb9bccfd-54f7-4a9d-926d-707627eca7be": {"node_ids": ["5451deea-3150-468d-82bb-3d16caea2cbc"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/invariant_clause_description.md", "file_name": "invariant_clause_description.md", "file_type": "text/markdown", "file_size": 759, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "4c00647d-cb87-4890-b499-c0294ac209c2": {"node_ids": ["1ddc69a4-9b6f-4fdf-a196-bb4f7e43e33c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/let_and_let_or_fail_expression_description.md", "file_name": "let_and_let_or_fail_expression_description.md", "file_type": "text/markdown", "file_size": 2687, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "db91eb4b-86c2-4d58-960a-c2ecf134d746": {"node_ids": ["cfa2e3ca-9432-41ad-8376-b3ee9879c964"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/map_comprehension_expression_description.md", "file_name": "map_comprehension_expression_description.md", "file_type": "text/markdown", "file_size": 1311, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "09b11af0-7fc7-4f52-9c9c-93600f0aad18": {"node_ids": ["88633947-f14a-4b67-a1cf-ba9a807e8c43"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/match_expression_description.md", "file_name": "match_expression_description.md", "file_type": "text/markdown", "file_size": 1481, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d38d7c4d-6db6-4fb0-b0a0-7679bae6abf4": {"node_ids": ["6eb07bc5-ed7d-4ab3-ac95-6c2dee223058"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/modifies_clause_description.md", "file_name": "modifies_clause_description.md", "file_type": "text/markdown", "file_size": 3033, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8fc0108a-f3fd-49fe-90ef-abca3cc98c2f": {"node_ids": ["fdad76c7-3523-4a21-b946-57eff47b232c"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/multisets_description.md", "file_name": "multisets_description.md", "file_type": "text/markdown", "file_size": 3946, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a56bff9f-cc99-445f-92ab-f05261deac86": {"node_ids": ["2c1dac92-2b1e-4595-b166-965c1a265b97"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_literals_description.md", "file_name": "numeric_literals_description.md", "file_type": "text/markdown", "file_size": 269, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "cdc13056-b1dd-4019-9374-9b336ea78aa7": {"node_ids": ["4bc9ff0d-d75b-4535-ae5d-9564ed832c8b", "16847bff-6b82-42bb-9028-161e345cbe65"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/numeric_types_description.md", "file_name": "numeric_types_description.md", "file_type": "text/markdown", "file_size": 4884, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "19aee23c-c7fa-436e-b912-5ca6509f6fbb": {"node_ids": ["996e8ac9-4d42-40b6-8cd0-7cb500d9b35e"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/ordinal_type_description.md", "file_name": "ordinal_type_description.md", "file_type": "text/markdown", "file_size": 1733, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "3148399d-5bf1-4643-a8c0-58997b3443b9": {"node_ids": ["da0d77f5-0b31-45a4-b5a2-a45c5ffa542a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_domains_description.md", "file_name": "quantifier_domains_description.md", "file_type": "text/markdown", "file_size": 2812, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d8e967e6-d19b-4d42-97d5-99c58a92db35": {"node_ids": ["056f3ab5-fa04-443d-afb7-7697d7fe91e2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/quantifier_expression_description.md", "file_name": "quantifier_expression_description.md", "file_type": "text/markdown", "file_size": 1093, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "398d34d0-c8e5-4041-949a-7d9cc65e75b0": {"node_ids": ["2484d867-1426-4a27-b661-9970539d95d2", "977ffc62-3dc5-43a2-aec8-c81dad7fd3f2"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/reads_clause_description.md", "file_name": "reads_clause_description.md", "file_type": "text/markdown", "file_size": 5909, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "9c4674dc-d7e2-4148-8177-e5fd88a7579c": {"node_ids": ["5b067f62-5f57-4d95-a1ac-827439f7cfaa"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/requires_clause_description.md", "file_name": "requires_clause_description.md", "file_type": "text/markdown", "file_size": 1145, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "f4482510-2e99-4003-8256-b2005c75b455": {"node_ids": ["86b85cac-8ae8-4895-9e29-e4fb704f17a3"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/selection_suffix_description.md", "file_name": "selection_suffix_description.md", "file_type": "text/markdown", "file_size": 775, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a7845a33-6799-4a78-9edc-55529349690a": {"node_ids": ["2da1b58b-e8f0-491d-b51a-c57b128b637a"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequence_update_suffix_description.md", "file_name": "sequence_update_suffix_description.md", "file_type": "text/markdown", "file_size": 620, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "dda35d9b-615e-46e2-9145-a912d4b3dd44": {"node_ids": ["fdfd8b59-043d-439f-80dd-7c634a500a61"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sequences_description.md", "file_name": "sequences_description.md", "file_type": "text/markdown", "file_size": 258, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a5a23529-c2cc-4063-89c9-f30940b93220": {"node_ids": ["66102849-2e0f-4ba4-b918-1b36199f9c26"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/set_comprehension_expressions_description.md", "file_name": "set_comprehension_expressions_description.md", "file_type": "text/markdown", "file_size": 3555, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "51545695-b5ff-41de-bbb2-85b26b563d87": {"node_ids": ["1fe9a21d-847f-48e2-8a13-8172b2f0e636"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/sets_description.md", "file_name": "sets_description.md", "file_type": "text/markdown", "file_size": 3043, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "d2330684-3a47-4efd-934c-6e67dbd5eb70": {"node_ids": ["579a251a-6573-4fd9-a8df-7b74845ba0eb"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/statements_in_an_expression_description.md", "file_name": "statements_in_an_expression_description.md", "file_type": "text/markdown", "file_size": 602, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "67bfcbb3-f050-478c-abef-05d68aafa0af": {"node_ids": ["c365df37-e799-4a64-9c30-5502e7166f94"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_slices_suffix_description.md", "file_name": "subsequence_slices_suffix_description.md", "file_type": "text/markdown", "file_size": 441, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "bf06b587-fc80-47bb-8167-f9adde88f61b": {"node_ids": ["c6491fce-af7d-423c-aed4-3d8b75c2a850"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subsequence_suffix_description.md", "file_name": "subsequence_suffix_description.md", "file_type": "text/markdown", "file_size": 777, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "a0ed2503-0d36-45f9-bbd6-98c19c035f82": {"node_ids": ["684d1db1-3581-4dcd-b183-e67ca1a0ba51"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/subset_types_description.md", "file_name": "subset_types_description.md", "file_type": "text/markdown", "file_size": 1697, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "6ece8501-e8ec-497c-a777-5ee722e99219": {"node_ids": ["ca844fd9-9eb6-4346-8a25-0d5512094555"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_`object`_description.md", "file_name": "type_`object`_description.md", "file_type": "text/markdown", "file_size": 1312, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}, "8f45074f-9b0b-4059-9cde-f0414a152747": {"node_ids": ["9524e68c-d3a8-4e24-8d6f-dd8054f77241"], "metadata": {"file_path": "/n/home06/kemmaliu/mcts/devin_chunked_dafny_manual/type_synonyms_description.md", "file_name": "type_synonyms_description.md", "file_type": "text/markdown", "file_size": 2238, "creation_date": "2024-06-20", "last_modified_date": "2024-06-20"}}}}